<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg">
<path name=".."/><path name="trail.mlcfg"/>
<theory name="Cdsat_Trail_Remove_Impl" proved="true">
 <goal name="remove&#39;vc" expl="VC for remove" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="remove&#39;vc.0" expl="VC for remove" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.000000" steps="23"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.007436" steps="10"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.006821" steps="10"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.3" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.000000" steps="23"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.006804" steps="10"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.5" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.006675" steps="10"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.6" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.0.6.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.000000" steps="14"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.6.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.020000" steps="585"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.6.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(contains (subsequence s 0 (length s - 1)) t)">
     <goal name="remove&#39;vc.0.6.2.0" expl="true case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="894"/></proof>
     </goal>
     <goal name="remove&#39;vc.0.6.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="947"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.0.7" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.0.7.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.000000" steps="12"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.7.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.020000" steps="495"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.7.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(contains (subsequence s 0 (length s - 1)) t)">
     <goal name="remove&#39;vc.0.7.2.0" expl="true case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="933"/></proof>
     </goal>
     <goal name="remove&#39;vc.0.7.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="1006"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.0.8" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.050000" steps="1106"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.9" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.060000" steps="1687"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.10" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.010000" steps="63"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.11" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.010356" steps="47"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbstractJustification_Impl" proved="true">
 <goal name="abstract_justification&#39;vc" expl="VC for abstract_justification" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abstract_justification&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.014009" steps="17"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.013438" steps="18"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.014749" steps="53"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.576194" steps="82356"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.023424" steps="168"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.046255" steps="432"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.033746" steps="619"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="abstract_justification&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.463823" steps="218468"/></proof>
   </goal>
   <goal name="abstract_justification&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.088783" steps="23670"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Indices" proved="true">
 <goal name="indices&#39;vc" expl="VC for indices" proved="true">
 <proof prover="5"><result status="valid" time="0.020842" steps="30"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <proof prover="5"><result status="valid" time="0.499866" steps="2064"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10_Trail" proved="true">
 <goal name="trail&#39;vc" expl="VC for trail" proved="true">
 <proof prover="5"><result status="valid" time="0.012691" steps="13"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Index" proved="true">
 <goal name="index&#39;vc" expl="VC for index" proved="true">
 <proof prover="5"><result status="valid" time="0.021630" steps="184"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_IndexOf" proved="true">
 <goal name="index_of&#39;vc" expl="VC for index_of" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="index_of&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.012924" steps="13"/></proof>
  </goal>
  <goal name="index_of&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.014907" steps="20"/></proof>
  </goal>
  <goal name="index_of&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.015373" steps="24"/></proof>
  </goal>
  <goal name="index_of&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.017796" steps="61"/></proof>
  </goal>
  <goal name="index_of&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.018431" steps="39"/></proof>
  </goal>
  <goal name="index_of&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.016322" steps="37"/></proof>
  </goal>
  <goal name="index_of&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.018295" steps="52"/></proof>
  </goal>
  <goal name="index_of&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.021241" steps="59"/></proof>
  </goal>
  <goal name="index_of&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.021380" steps="64"/></proof>
  </goal>
  <goal name="index_of&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.026294" steps="161"/></proof>
  </goal>
  <goal name="index_of&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.022474" steps="80"/></proof>
  </goal>
  <goal name="index_of&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.023989" steps="84"/></proof>
  </goal>
  <goal name="index_of&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.056895" steps="731"/></proof>
  </goal>
  <goal name="index_of&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.024247" steps="90"/></proof>
  </goal>
  <goal name="index_of&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.045711" steps="500"/></proof>
  </goal>
  <goal name="index_of&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.086014" steps="1201"/></proof>
  </goal>
  <goal name="index_of&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.024669" steps="100"/></proof>
  </goal>
  <goal name="index_of&#39;vc.17" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.588760" steps="11061"/></proof>
  </goal>
  <goal name="index_of&#39;vc.18" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.023363" steps="103"/></proof>
  </goal>
  <goal name="index_of&#39;vc.19" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.023275" steps="105"/></proof>
  </goal>
  <goal name="index_of&#39;vc.20" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.065533" steps="637"/></proof>
  </goal>
  <goal name="index_of&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.024833" steps="111"/></proof>
  </goal>
  <goal name="index_of&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.049476" steps="668"/></proof>
  </goal>
  <goal name="index_of&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.026110" steps="122"/></proof>
  </goal>
  <goal name="index_of&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.200062" steps="3934"/></proof>
  </goal>
  <goal name="index_of&#39;vc.25" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.203584" steps="2558"/></proof>
  </goal>
  <goal name="index_of&#39;vc.26" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.021042" steps="100"/></proof>
  </goal>
  <goal name="index_of&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="index_of&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.105948" steps="27624"/></proof>
   </goal>
   <goal name="index_of&#39;vc.27.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="index_of&#39;vc.27.1.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.021767" steps="53"/></proof>
    </goal>
    <goal name="index_of&#39;vc.27.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.110133" steps="27725"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="index_of&#39;vc.27.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.248739" steps="1088451"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustExtend_Impl" proved="true">
 <goal name="abs_just_extend&#39;vc" expl="VC for abs_just_extend" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abs_just_extend&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.144800" steps="30211"/></proof>
  </goal>
  <goal name="abs_just_extend&#39;vc.1" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.022652" steps="20"/></proof>
  </goal>
  <goal name="abs_just_extend&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.029907" steps="207"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpLeLog_Impl" proved="true">
 <goal name="cmp_le_log&#39;vc" expl="VC for cmp_le_log" proved="true">
 <proof prover="5"><result status="valid" time="0.006965" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpLtLog_Impl" proved="true">
 <goal name="cmp_lt_log&#39;vc" expl="VC for cmp_lt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.006798" steps="11"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpGeLog_Impl" proved="true">
 <goal name="cmp_ge_log&#39;vc" expl="VC for cmp_ge_log" proved="true">
 <proof prover="5"><result status="valid" time="0.007100" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpGtLog_Impl" proved="true">
 <goal name="cmp_gt_log&#39;vc" expl="VC for cmp_gt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.006912" steps="11"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Refl_Impl" proved="true">
 <goal name="refl&#39;vc" expl="VC for refl" proved="true">
 <proof prover="5"><result status="valid" time="0.006686" steps="24"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Trans_Impl" proved="true">
 <goal name="trans&#39;vc" expl="VC for trans" proved="true">
 <proof prover="5"><result status="valid" time="0.037222" steps="838"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Antisym1_Impl" proved="true">
 <goal name="antisym1&#39;vc" expl="VC for antisym1" proved="true">
 <proof prover="5"><result status="valid" time="0.012844" steps="204"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Antisym2_Impl" proved="true">
 <goal name="antisym2&#39;vc" expl="VC for antisym2" proved="true">
 <proof prover="5"><result status="valid" time="0.013175" steps="196"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_EqCmp_Impl" proved="true">
 <goal name="eq_cmp&#39;vc" expl="VC for eq_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.011545" steps="152"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustCons_Impl" proved="true">
 <goal name="abs_just_cons&#39;vc" expl="VC for abs_just_cons" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abs_just_cons&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abstract_justification self (singleton1 elem ++ just) ==
  insert (abstract_justification self just) (index_logic self elem))">
   <goal name="abs_just_cons&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="abs_just_cons&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="abs_just_cons&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.336827" steps="4420"/></proof>
     </goal>
     <goal name="abs_just_cons&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="abs_just_cons&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="5"><result status="valid" time="0.329614" steps="5634"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="abs_just_cons&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.018037" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustSnoc_Impl" proved="true">
 <goal name="abs_just_snoc&#39;vc" expl="VC for abs_just_snoc" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="abs_just_snoc&#39;vc.0" expl="VC for abs_just_snoc" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="abs_just_snoc&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.181728" steps="42307"/></proof>
   <proof prover="1"><result status="valid" time="0.152831" steps="32554"/></proof>
   <proof prover="5"><result status="valid" time="0.018904" steps="79"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.051026" steps="738"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.213257" steps="46221"/></proof>
   <proof prover="1"><result status="valid" time="0.194611" steps="38098"/></proof>
   <proof prover="3"><result status="valid" time="0.026602" steps="277489"/></proof>
   <proof prover="5"><result status="valid" time="0.021195" steps="106"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.136585" steps="37044"/></proof>
   <proof prover="1"><result status="valid" time="0.075698" steps="23215"/></proof>
   <proof prover="3"><result status="valid" time="0.012105" steps="11993"/></proof>
   <proof prover="5"><result status="valid" time="0.016627" steps="20"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.238317" steps="46855"/></proof>
   <proof prover="1"><result status="valid" time="0.204387" steps="39434"/></proof>
   <proof prover="5"><result status="valid" time="0.060961" steps="695"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall i j s. insert (insert s j) i = insert (insert s i) j)">
    <goal name="abs_just_snoc&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(forall i j s. insert (insert s j) i == insert (insert s i) j)">
     <goal name="abs_just_snoc&#39;vc.0.5.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.460455" steps="86003"/></proof>
     <proof prover="1"><result status="valid" time="0.766816" steps="87432"/></proof>
     <proof prover="5"><result status="valid" time="0.028833" steps="141"/></proof>
     </goal>
     <goal name="abs_just_snoc&#39;vc.0.5.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.225442" steps="48645"/></proof>
     <proof prover="1"><result status="valid" time="0.211771" steps="40440"/></proof>
     <proof prover="3"><result status="valid" time="0.028843" steps="185488"/></proof>
     <proof prover="5"><result status="valid" time="0.020312" steps="65"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="abs_just_snoc&#39;vc.0.5.1" expl="postcondition" proved="true">
    <proof prover="5" timelimit="10" memlimit="4000"><result status="valid" time="4.828780" steps="75529"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_AbstractJustificationInsert_Impl" proved="true">
 <goal name="abstract_justification_insert&#39;vc" expl="VC for abstract_justification_insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abstract_justification_insert&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.024192" steps="26"/></proof>
  </goal>
  <goal name="abstract_justification_insert&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.031095" steps="161"/></proof>
  </goal>
  <goal name="abstract_justification_insert&#39;vc.2" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="abstract_justification_insert&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="abstract_justification_insert&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.022653" steps="30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbs_Impl" proved="true">
 <goal name="ix_to_abs&#39;vc" expl="VC for ix_to_abs" proved="true">
 <proof prover="5"><result status="valid" time="0.820609" steps="20068"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsRemove_Impl" proved="true">
 <goal name="ix_to_abs_remove&#39;vc" expl="VC for ix_to_abs_remove" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_remove&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(ix_to_abs t (remove s x) ==&#39; remove1 (ix_to_abs t s) (index_logic2 t x))
">
   <goal name="ix_to_abs_remove&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.233719" steps="3837"/></proof>
   </goal>
   <goal name="ix_to_abs_remove&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="38"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_SetMax_Impl" proved="true">
 <goal name="set_max&#39;vc" expl="VC for set_max" proved="true">
 <proof prover="5"><result status="valid" time="0.070000" steps="1257"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsLevel_Impl">
 <goal name="ix_to_abs_level&#39;vc" expl="VC for ix_to_abs_level">
 <proof prover="1"><result status="timeout" time="1.000000" steps="125489"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000"/></proof>
 <proof prover="5"><result status="timeout" time="1.000000" steps="18891"/></proof>
 <transf name="split_vc" >
  <goal name="ix_to_abs_level&#39;vc.0" expl="postcondition">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="435155"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
  <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="85962"/></proof>
  <transf name="inline_goal" >
   <goal name="ix_to_abs_level&#39;vc.0.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="ix_to_abs_level&#39;vc.0.0.0" expl="postcondition">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="445399"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="83750"/></proof>
    <transf name="inline_goal" >
     <goal name="ix_to_abs_level&#39;vc.0.0.0.0" expl="postcondition">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="691214"/></proof>
     <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
     <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="175176"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ix_to_abs_level&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.036619" steps="217"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsInsert_Impl" proved="true">
 <goal name="ix_to_abs_insert&#39;vc" expl="VC for ix_to_abs_insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_insert&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( ix_to_abs t (insert s x) ==&#39; insert1 (ix_to_abs t s) (index_logic2 t x))">
   <goal name="ix_to_abs_insert&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.074017" steps="994"/></proof>
   </goal>
   <goal name="ix_to_abs_insert&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.027801" steps="38"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Theory_Impl5_TrailPlausible_Impl" proved="true">
 <goal name="trail_plausible&#39;vc" expl="VC for trail_plausible" proved="true">
 <proof prover="5"><result status="valid" time="0.279221" steps="5381"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_SeqToSet_Impl" proved="true">
 <goal name="seq_to_set&#39;vc" expl="VC for seq_to_set" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="seq_to_set&#39;vc.0" expl="VC for seq_to_set" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="seq_to_set&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.017493" steps="17"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.014739" steps="20"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="71"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="98"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="93"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_to_set&#39;vc.0.5.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.030000" steps="336"/></proof>
    </goal>
    <goal name="seq_to_set&#39;vc.0.5.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(abstract_justification trail s == ix_to_abs trail t)">
     <goal name="seq_to_set&#39;vc.0.5.1.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.439658" steps="6709"/></proof>
     </goal>
     <goal name="seq_to_set&#39;vc.0.5.1.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.020000" steps="42"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.005127" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.006981" steps="45"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="clone&#39;&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.009456" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="5"><result status="valid" time="0.007712" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsFirstOrder" proved="true">
 <goal name="is_first_order&#39;vc" expl="VC for is_first_order" proved="true">
 <proof prover="5"><result status="valid" time="0.007765" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl19_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.021364" steps="493"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsDecision" proved="true">
 <goal name="is_decision&#39;vc" expl="VC for is_decision" proved="true">
 <proof prover="5"><result status="valid" time="0.011931" steps="77"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Justification" proved="true">
 <goal name="justification&#39;vc" expl="VC for justification" proved="true">
 <proof prover="5"><result status="valid" time="0.903313" steps="12012"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Restrict">
 <goal name="restrict&#39;vc" expl="VC for restrict">
 <transf name="split_vc" >
  <goal name="restrict&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.037659" steps="45"/></proof>
  </goal>
  <goal name="restrict&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.015708" steps="19722"/></proof>
  </goal>
  <goal name="restrict&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.049804" steps="105"/></proof>
  </goal>
  <goal name="restrict&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.013556" steps="19620"/></proof>
  </goal>
  <goal name="restrict&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.052504" steps="70"/></proof>
  </goal>
  <goal name="restrict&#39;vc.5" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.060469" steps="214"/></proof>
  </goal>
  <goal name="restrict&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.050671" steps="108"/></proof>
  </goal>
  <goal name="restrict&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.051946" steps="105"/></proof>
  </goal>
  <goal name="restrict&#39;vc.8" expl="assertion">
  <transf name="split_vc" >
   <goal name="restrict&#39;vc.8.0" expl="assertion">
   <proof prover="0"><result status="timeout" time="1.000000" steps="144675"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="377278"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="68523"/></proof>
   <transf name="inline_goal" >
    <goal name="restrict&#39;vc.8.0.0" expl="assertion">
    <transf name="split_all_full" >
     <goal name="restrict&#39;vc.8.0.0.0" expl="VC for restrict">
     <proof prover="1"><result status="timeout" time="1.000000" steps="138310"/></proof>
     <proof prover="3"><result status="timeout" time="1.000000"/></proof>
     <proof prover="5"><result status="timeout" time="1.000000" steps="7234"/></proof>
     <transf name="split_vc" >
      <goal name="restrict&#39;vc.8.0.0.0.0" expl="VC for restrict">
      <proof prover="1" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
      <proof prover="3" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
      <proof prover="5" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="restrict&#39;vc.8.0.0.1" expl="VC for restrict">
     <proof prover="1"><result status="timeout" time="1.000000" steps="131687"/></proof>
     <proof prover="3"><result status="timeout" time="1.000000"/></proof>
     <proof prover="5"><result status="timeout" time="1.000000" steps="10628"/></proof>
     <transf name="split_vc" >
      <goal name="restrict&#39;vc.8.0.0.1.0" expl="VC for restrict">
      <proof prover="1" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
      <proof prover="3" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
      <proof prover="5" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.9" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(abstract_justification ( * self) js ==
  abstract_justification ( * inner old&#39;) js)">
   <goal name="restrict&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.890378" steps="10303"/></proof>
   </goal>
   <goal name="restrict&#39;vc.9.1" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.073093" steps="135"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.10" expl="assertion">
  <transf name="inline_goal" >
   <goal name="restrict&#39;vc.10.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="restrict&#39;vc.10.0.0" expl="assertion" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="3.468611" steps="8337359"/></proof>
    </goal>
    <goal name="restrict&#39;vc.10.0.1" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="135117"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="472488"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="40536"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.10.0.1.0" expl="assertion">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.10.0.1.0.0" expl="assertion">
      <proof prover="1"><result status="timeout" time="1.000000" steps="123998"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="8882"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.10.0.1.0.0.0" expl="assertion">
       <proof prover="1" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.10.0.2" expl="assertion" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="restrict&#39;vc.10.0.2.0" expl="assertion" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="restrict&#39;vc.10.0.2.0.0" expl="assertion" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="restrict&#39;vc.10.0.2.0.0.0" expl="assertion" proved="true">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="2.349484" steps="240441"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.11" expl="assertion">
  <transf name="inline_goal" >
   <goal name="restrict&#39;vc.11.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="restrict&#39;vc.11.0.0" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="118199"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="298367"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.362739"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="38062"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.11.0.0.0" expl="assertion">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.11.0.0.0.0" expl="VC for restrict">
      <proof prover="1"><result status="timeout" time="1.000000" steps="119285"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="9001"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.0.0.0.0" expl="VC for restrict">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="39240"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="restrict&#39;vc.11.0.0.0.1" expl="VC for restrict">
      <proof prover="1"><result status="timeout" time="1.000000" steps="120157"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="9130"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.0.0.1.0" expl="VC for restrict">
       <proof prover="1"><result status="timeout" time="1.000000" steps="118101"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000" steps="9007"/></proof>
       <transf name="split_vc" >
        <goal name="restrict&#39;vc.11.0.0.0.1.0.0" expl="VC for restrict">
        <proof prover="1"><result status="timeout" time="1.000000" steps="113947"/></proof>
        <proof prover="3"><result status="timeout" time="1.000000"/></proof>
        <proof prover="5" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="restrict&#39;vc.11.0.0.0.2" expl="VC for restrict" proved="true">
      <proof prover="3"><result status="valid" time="0.087009" steps="512459"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.11.0.1" expl="assertion" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.182560" steps="131809"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.2" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="121221"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="379396"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="39893"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.11.0.2.0" expl="assertion">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.11.0.2.0.0" expl="VC for restrict">
      <proof prover="1"><result status="timeout" time="1.000000" steps="154899"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="9201"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.2.0.0.0" expl="VC for restrict">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="39706"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="restrict&#39;vc.11.0.2.0.1" expl="VC for restrict">
      <proof prover="1"><result status="timeout" time="1.000000" steps="126552"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="8971"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.2.0.1.0" expl="VC for restrict">
       <proof prover="1"><result status="timeout" time="1.000000" steps="123359"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000" steps="9082"/></proof>
       <transf name="split_vc" >
        <goal name="restrict&#39;vc.11.0.2.0.1.0.0" expl="VC for restrict">
        <proof prover="1"><result status="timeout" time="1.000000" steps="118571"/></proof>
        <proof prover="3"><result status="timeout" time="1.000000"/></proof>
        <proof prover="5" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="restrict&#39;vc.11.0.2.0.2" expl="VC for restrict" proved="true">
      <proof prover="5"><result status="valid" time="0.164950" steps="898"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.11.0.3" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="116147"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="464114"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.340268"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="42262"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.11.0.3.0" expl="assertion">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.11.0.3.0.0" expl="assertion">
      <proof prover="1"><result status="timeout" time="1.000000" steps="122683"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="8879"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.3.0.0.0" expl="assertion">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="41444"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.11.0.4" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="125452"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="401970"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="40634"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.11.0.4.0" expl="assertion">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.11.0.4.0.0" expl="assertion">
      <proof prover="1"><result status="timeout" time="1.000000" steps="123175"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="9604"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.4.0.0.0" expl="assertion">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="38135"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.11.0.5" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="0.177363" steps="881"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.6" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="118837"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="380793"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="39236"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.11.0.6.0" expl="assertion">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.11.0.6.0.0" expl="VC for restrict">
      <proof prover="1"><result status="timeout" time="1.000000" steps="126249"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="8737"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.6.0.0.0" expl="VC for restrict">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="38384"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="restrict&#39;vc.11.0.6.0.1" expl="VC for restrict">
      <proof prover="1"><result status="timeout" time="1.000000" steps="121633"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="9089"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.11.0.6.0.1.0" expl="VC for restrict">
       <proof prover="1"><result status="timeout" time="1.000000" steps="118394"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000" steps="8639"/></proof>
       <transf name="split_vc" >
        <goal name="restrict&#39;vc.11.0.6.0.1.0.0" expl="VC for restrict">
        <proof prover="1"><result status="timeout" time="1.000000" steps="117566"/></proof>
        <proof prover="3"><result status="timeout" time="1.000000"/></proof>
        <proof prover="5" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="restrict&#39;vc.11.0.6.0.2" expl="VC for restrict" proved="true">
      <proof prover="5"><result status="valid" time="0.161095" steps="904"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.11.0.7" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="124100"/></proof>
    <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="614181"/></proof>
    <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
    <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="88590"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.12" expl="loop invariant preservation">
  <proof prover="0"><result status="timeout" time="1.000000" steps="123512"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="136120"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000"/></proof>
  <proof prover="5"><result status="timeout" time="1.000000" steps="14140"/></proof>
  <transf name="split_vc" >
   <goal name="restrict&#39;vc.12.0" expl="loop invariant preservation">
   <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="627195"/></proof>
   <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
   <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="343781"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.13" expl="loop invariant preservation">
  <transf name="inline_goal" >
   <goal name="restrict&#39;vc.13.0" expl="loop invariant preservation">
   <transf name="split_vc" >
    <goal name="restrict&#39;vc.13.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.095725" steps="84"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.090202" steps="285"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.051726" steps="499061"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.060949" steps="500247"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="1.119466" steps="3645370"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.5" expl="loop invariant preservation">
    <proof prover="0"><result status="timeout" time="1.000000" steps="125860"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="356012"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
    <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="116949"/></proof>
    <transf name="inline_goal" >
     <goal name="restrict&#39;vc.13.0.5.0" expl="loop invariant preservation">
     <transf name="split_all_full" >
      <goal name="restrict&#39;vc.13.0.5.0.0" expl="loop invariant preservation">
      <proof prover="1"><result status="timeout" time="1.000000" steps="128143"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000" steps="14168"/></proof>
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.13.0.5.0.0.0" expl="loop invariant preservation">
       <proof prover="1" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="3" timelimit="5" memlimit="2000"><result status="failure" time="0.000000"/></proof>
       <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="117353"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.13.0.6" expl="loop invariant preservation" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.326930" steps="179507"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.7" expl="loop invariant preservation" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.386236" steps="179718"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.8" expl="loop invariant preservation" proved="true">
    <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="1.996295" steps="24191"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.9" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.016116" steps="22273"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.10" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.128334" steps="851055"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.062754" steps="511147"/></proof>
  </goal>
  <goal name="restrict&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.108887" steps="161"/></proof>
  </goal>
  <goal name="restrict&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.044282" steps="348526"/></proof>
  </goal>
  <goal name="restrict&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.047472" steps="373573"/></proof>
  </goal>
  <goal name="restrict&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.075761" steps="338"/></proof>
  </goal>
  <goal name="restrict&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.074700" steps="326"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustEquiv_Impl" proved="true">
 <goal name="abs_just_equiv&#39;vc" expl="VC for abs_just_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abs_just_equiv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abstract_justification self just == abstract_justification other just)">
   <goal name="abs_just_equiv&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.096803" steps="1317"/></proof>
   </goal>
   <goal name="abs_just_equiv&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.015513" steps="20"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AddJustified">
 <goal name="add_justified&#39;vc" expl="VC for add_justified">
 <transf name="split_vc" >
  <goal name="add_justified&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.030605" steps="38"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.025289" steps="34"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.045015" steps="328"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.3" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.032888" steps="117"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.029139" steps="53"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.052500" steps="359"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.038287" steps="67"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.036132" steps="73"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.029707" steps="52"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.9" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.033328" steps="52"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.10" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.075708" steps="662"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.11" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.042657" steps="177"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.12" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.034577" steps="81"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.115315" steps="1214"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.033119" steps="60"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.039046" steps="83"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.16" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.039502" steps="91"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.17" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.251936" steps="3266"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.18" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.064561" steps="345"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.19" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.049072" steps="117"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.20" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.057252" steps="118"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.21" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.041763" steps="80"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.22" expl="assertion" proved="true">
  <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="2.683002" steps="35516"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.23" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.121500" steps="443867"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.24" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.045035" steps="87"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.25" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.072426" steps="405"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.26" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.056238" steps="153"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.27" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.049526" steps="155"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.28" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.058310" steps="165"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.29" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.057636" steps="165"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.30" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.185253" steps="2181"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.31" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.176367" steps="2035"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_justified&#39;vc.32.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.616776" steps="96484"/></proof>
   </goal>
   <goal name="add_justified&#39;vc.32.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.100995" steps="578"/></proof>
   </goal>
   <goal name="add_justified&#39;vc.32.2" expl="precondition" proved="true">
   <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="3.771175" steps="45522"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.33" expl="assertion" proved="true">
  <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.539613" steps="1766033"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.34" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.545517" steps="110463"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.35" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.557101" steps="5797"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.36" expl="assertion">
  <transf name="inline_goal" >
   <goal name="add_justified&#39;vc.36.0" expl="assertion">
   <transf name="split_all_full" >
    <goal name="add_justified&#39;vc.36.0.0" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.576715" steps="91743"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.1" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.542761" steps="89378"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.2" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.933280" steps="144244"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.3" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.761840" steps="113406"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.4" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.558429" steps="85863"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.5" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.527379" steps="85829"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.6" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="add_justified&#39;vc.36.0.6.0" expl="assertion" proved="true">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.938769" steps="145718"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="add_justified&#39;vc.36.0.7" expl="assertion">
    <proof prover="0"><result status="timeout" time="1.000000" steps="148151"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="139117"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000"/></proof>
    <proof prover="5"><result status="timeout" time="1.000000" steps="9504"/></proof>
    <transf name="split_vc" >
     <goal name="add_justified&#39;vc.36.0.7.0" expl="assertion">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="860019"/></proof>
     <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="8.848664"/></proof>
     <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="80239"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.37" expl="assertion">
  <transf name="inline_goal" >
   <goal name="add_justified&#39;vc.37.0" expl="assertion">
   <transf name="split_all_full" >
    <goal name="add_justified&#39;vc.37.0.0" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.756416" steps="7628"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.37.0.1" expl="VC for add_justified">
    <proof prover="0"><result status="timeout" time="1.000000" steps="149041"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="146013"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000"/></proof>
    <proof prover="5"><result status="timeout" time="1.000000" steps="10487"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.37.0.2" expl="VC for add_justified">
    <transf name="split_vc" >
     <goal name="add_justified&#39;vc.37.0.2.0" expl="VC for add_justified">
     <proof prover="0"><result status="timeout" time="1.000000" steps="148760"/></proof>
     <proof prover="1"><result status="timeout" time="1.000000" steps="185062"/></proof>
     <proof prover="3"><result status="timeout" time="1.000000"/></proof>
     <proof prover="5"><result status="timeout" time="1.000000" steps="11760"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.38" expl="postcondition">
  <transf name="inline_goal" >
   <goal name="add_justified&#39;vc.38.0" expl="postcondition">
   <transf name="split_all_full" >
    <goal name="add_justified&#39;vc.38.0.0" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.075305" steps="181"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.1" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.110841" steps="699"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.2" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.078338" steps="193"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.3" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.113542" steps="696"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.4" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.147379" steps="717"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.5" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.519676" steps="4706"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.6" expl="VC for add_justified" proved="true">
    <proof prover="1"><result status="valid" time="0.556590" steps="88048"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.7" expl="VC for add_justified" proved="true">
    <proof prover="1"><result status="valid" time="0.524391" steps="88065"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.8" expl="VC for add_justified" proved="true">
    <proof prover="1"><result status="valid" time="0.468644" steps="84496"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.9" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.077451" steps="181"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.10" expl="VC for add_justified">
    <proof prover="0"><result status="timeout" time="1.000000" steps="142956"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="125631"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000"/></proof>
    <proof prover="5"><result status="timeout" time="1.000000" steps="10785"/></proof>
    <transf name="split_vc" >
     <goal name="add_justified&#39;vc.38.0.10.0" expl="VC for add_justified">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
     <proof prover="3" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
     <proof prover="5" timelimit="10" memlimit="4000"><result status="failure" time="0.000000"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.129661" steps="758"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="eq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="eq&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="eq&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="eq&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="5"><result status="valid" time="0.012513" steps="22"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="eq&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.012569" steps="28"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="eq&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.012278" steps="34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="eq&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.013477" steps="44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="eq&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eq&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.011227" steps="51"/></proof>
   </goal>
   <goal name="eq&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="eq&#39;vc.1.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="eq&#39;vc.1.1.0.0" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.015595" steps="20"/></proof>
     </goal>
     <goal name="eq&#39;vc.1.1.0.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.011391" steps="26"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="eq&#39;vc.1.1.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.013815" steps="52"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.010978" steps="53"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.005283" steps="14"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl4_Cmp" proved="true">
 <goal name="cmp&#39;vc" expl="VC for cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.032419" steps="595"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl3_PartialCmp" proved="true">
 <goal name="partial_cmp&#39;vc" expl="VC for partial_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.006588" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Len" proved="true">
 <goal name="len&#39;vc" expl="VC for len" proved="true">
 <proof prover="5"><result status="valid" time="0.015750" steps="33"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_LemmaAbsJust_Impl" proved="true">
 <goal name="lemma_abs_just&#39;vc" expl="VC for lemma_abs_just" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_abs_just&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.020889" steps="26"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.021848" steps="28"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.021986" steps="83"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.011381" steps="12723"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.822150" steps="133489"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.045948" steps="488"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.006837" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsJustified" proved="true">
 <goal name="is_justified&#39;vc" expl="VC for is_justified" proved="true">
 <proof prover="5"><result status="valid" time="0.011187" steps="48"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsInput" proved="true">
 <goal name="is_input&#39;vc" expl="VC for is_input" proved="true">
 <proof prover="5"><result status="valid" time="0.012724" steps="77"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Value" proved="true">
 <goal name="value&#39;vc" expl="VC for value" proved="true">
 <proof prover="5"><result status="valid" time="0.008111" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Term" proved="true">
 <goal name="term&#39;vc" expl="VC for term" proved="true">
 <proof prover="5"><result status="valid" time="0.007551" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl3" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007920" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl8" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004723" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009340" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl19" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007313" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007062" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl13" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005661" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl21" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006736" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl27" proved="true">
 <goal name="eq_refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq_refn.0" proved="true">
  <proof prover="5"><result status="valid" time="0.006748" steps="10"/></proof>
  </goal>
  <goal name="eq_refn.1" proved="true">
  <proof prover="5"><result status="valid" time="0.006888" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl5" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004340" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl10" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004960" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004399" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl21" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006363" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl26" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004352" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl15" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005344" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl23" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <transf name="split_vc" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl29" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004326" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl7" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007259" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl12" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004892" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl23" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009759" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl12" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004952" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl20" proved="true">
 <goal name="fmt_refn" proved="true">
 <transf name="split_vc" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl26" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007619" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.010660" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.011748" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006973" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl11" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="clone&#39;_refn.0" proved="true">
  <proof prover="5"><result status="valid" time="0.005545" steps="6"/></proof>
  </goal>
  <goal name="clone&#39;_refn.1" proved="true">
  <proof prover="5"><result status="valid" time="0.004704" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl19" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004584" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl25" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005327" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl0" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004571" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl2" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004348" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl3" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004701" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl3" proved="true">
 <goal name="partial_cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005871" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl4" proved="true">
 <goal name="cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007370" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5" proved="true">
 <goal name="trans_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007169" steps="12"/></proof>
 </goal>
 <goal name="eq_cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007963" steps="2"/></proof>
 </goal>
 <goal name="cmp_gt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005815" steps="2"/></proof>
 </goal>
 <goal name="cmp_ge_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006935" steps="2"/></proof>
 </goal>
 <goal name="cmp_le_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005771" steps="2"/></proof>
 </goal>
 <goal name="cmp_lt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006186" steps="2"/></proof>
 </goal>
 <goal name="refl_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006443" steps="2"/></proof>
 </goal>
 <goal name="antisym1_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006495" steps="8"/></proof>
 </goal>
 <goal name="antisym2_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009510" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11" proved="true">
 <goal name="index_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004680" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl18" proved="true">
 <goal name="hash_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004996" steps="4"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl24" proved="true">
 <goal name="hash_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007396" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl30" proved="true">
 <goal name="hash_refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hash_refn.0" proved="true">
  <proof prover="5"><result status="valid" time="0.007260" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
