<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg">
<path name=".."/><path name="trail.mlcfg"/>
<theory name="Cdsat_Trail_Impl15_AbstractJustification_Impl" proved="true">
 <goal name="abstract_justification&#39;vc" expl="VC for abstract_justification" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abstract_justification&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="19"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="59"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.01" steps="63"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="222"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="875"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.5" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="abstract_justification&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.03" steps="385"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_Len" proved="true">
 <goal name="len&#39;vc" expl="VC for len" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="18"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl17_Index" proved="true">
 <goal name="index&#39;vc" expl="VC for index" proved="true">
 <proof prover="5"><result status="valid" time="0.02" steps="96"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl35_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="45"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl31_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="174"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl23_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="21"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl19_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="28"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="110"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_Restrict">
 <goal name="restrict&#39;vc" expl="VC for restrict">
 <transf name="split_vc" >
  <goal name="restrict&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
  <goal name="restrict&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="restrict&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="37"/></proof>
  </goal>
  <goal name="restrict&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="104"/></proof>
  </goal>
  <goal name="restrict&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.02" steps="40"/></proof>
  </goal>
  <goal name="restrict&#39;vc.5" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="95"/></proof>
  </goal>
  <goal name="restrict&#39;vc.6" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="68"/></proof>
  </goal>
  <goal name="restrict&#39;vc.7" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="68"/></proof>
  </goal>
  <goal name="restrict&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="105"/></proof>
  </goal>
  <goal name="restrict&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="116"/></proof>
  </goal>
  <goal name="restrict&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="383"/></proof>
  </goal>
  <goal name="restrict&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="380"/></proof>
  </goal>
  <goal name="restrict&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="259"/></proof>
  </goal>
  <goal name="restrict&#39;vc.13" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="restrict&#39;vc.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="149"/></proof>
  </goal>
  <goal name="restrict&#39;vc.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.05" steps="151"/></proof>
  </goal>
  <goal name="restrict&#39;vc.16" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.04" steps="106"/></proof>
  </goal>
  <goal name="restrict&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.19" steps="41553"/></proof>
  </goal>
  <goal name="restrict&#39;vc.18" expl="loop invariant preservation">
  <transf name="destruct" arg1="Ensures1">
   <goal name="restrict&#39;vc.18.0" expl="loop invariant preservation">
   <proof prover="0"><result status="timeout" time="1.00" steps="251893"/></proof>
   <proof prover="3"><result status="timeout" time="1.00"/></proof>
   <proof prover="4"><result status="timeout" time="1.00" steps="157955"/></proof>
   <proof prover="5"><result status="timeout" time="1.00"/></proof>
   <transf name="inline_goal" >
    <goal name="restrict&#39;vc.18.0.0" expl="loop invariant preservation">
    <transf name="split_vc" >
     <goal name="restrict&#39;vc.18.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="restrict&#39;vc.18.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="restrict&#39;vc.18.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="3"><result status="valid" time="0.04" steps="277444"/></proof>
       </goal>
       <goal name="restrict&#39;vc.18.0.0.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="3"><result status="valid" time="0.09" steps="508807"/></proof>
       </goal>
       <goal name="restrict&#39;vc.18.0.0.0.0.2" expl="loop invariant preservation" proved="true">
       <proof prover="5"><result status="valid" time="0.33" steps="3750"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="restrict&#39;vc.18.0.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="348"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.0.0.2" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="269"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.0.0.3" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.06" steps="356"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.0.0.4" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="193"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.0.0.5" expl="loop invariant preservation" proved="true">
     <proof prover="4"><result status="valid" time="0.42" steps="79516"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.0.0.6" expl="loop invariant preservation">
     <proof prover="0"><result status="timeout" time="1.00" steps="294321"/></proof>
     <proof prover="3"><result status="timeout" time="1.00"/></proof>
     <proof prover="4"><result status="timeout" time="1.00" steps="174855"/></proof>
     <proof prover="5"><result status="timeout" time="1.00"/></proof>
     <transf name="inline_goal" >
      <goal name="restrict&#39;vc.18.0.0.6.0" expl="loop invariant preservation">
      <transf name="split_vc" >
       <goal name="restrict&#39;vc.18.0.0.6.0.0" expl="loop invariant preservation">
       </goal>
       <goal name="restrict&#39;vc.18.0.0.6.0.1" expl="loop invariant preservation">
       </goal>
       <goal name="restrict&#39;vc.18.0.0.6.0.2" expl="loop invariant preservation">
       </goal>
       <goal name="restrict&#39;vc.18.0.0.6.0.3" expl="loop invariant preservation">
       <proof prover="0"><result status="timeout" time="1.00" steps="223722"/></proof>
       <proof prover="3"><result status="timeout" time="1.00"/></proof>
       <proof prover="4"><result status="timeout" time="1.00" steps="187581"/></proof>
       <proof prover="5"><result status="timeout" time="1.00"/></proof>
       </goal>
       <goal name="restrict&#39;vc.18.0.0.6.0.4" expl="loop invariant preservation">
       <proof prover="0"><result status="timeout" time="1.00" steps="223718"/></proof>
       <proof prover="3"><result status="timeout" time="1.00"/></proof>
       <proof prover="4"><result status="timeout" time="1.00" steps="193079"/></proof>
       <proof prover="5"><result status="timeout" time="1.00"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="restrict&#39;vc.18.1" expl="loop invariant preservation" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="restrict&#39;vc.18.1.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="restrict&#39;vc.18.1.0.0" expl="loop invariant preservation" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="restrict&#39;vc.18.1.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="restrict&#39;vc.18.1.0.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="3"><result status="valid" time="0.04" steps="226435"/></proof>
       </goal>
       <goal name="restrict&#39;vc.18.1.0.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="3"><result status="valid" time="0.10" steps="226822"/></proof>
       </goal>
       <goal name="restrict&#39;vc.18.1.0.0.0.2" expl="loop invariant preservation" proved="true">
       <proof prover="5"><result status="valid" time="0.04" steps="186"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="restrict&#39;vc.18.1.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.06" steps="185"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.1.0.2" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.06" steps="185"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.1.0.3" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.07" steps="195"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.1.0.4" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.06" steps="196"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.1.0.5" expl="loop invariant preservation" proved="true">
     <proof prover="4"><result status="valid" time="0.15" steps="40394"/></proof>
     </goal>
     <goal name="restrict&#39;vc.18.1.0.6" expl="loop invariant preservation" proved="true">
     <proof prover="5"><result status="valid" time="0.05" steps="184"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.07" steps="106"/></proof>
  </goal>
  <goal name="restrict&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.12" steps="555"/></proof>
  </goal>
  <goal name="restrict&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.10" steps="194"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10_Negate" proved="true">
 <goal name="negate&#39;vc" expl="VC for negate" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="329"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_AddJustified">
 <goal name="add_justified&#39;vc" expl="VC for add_justified">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="159544"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="99454"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="add_justified&#39;vc.0" expl="precondition">
  </goal>
  <goal name="add_justified&#39;vc.1" expl="precondition">
  </goal>
  <goal name="add_justified&#39;vc.2" expl="precondition">
  </goal>
  <goal name="add_justified&#39;vc.3" expl="assertion">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="433131"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="84684"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.4" expl="assertion">
  </goal>
  <goal name="add_justified&#39;vc.5" expl="precondition">
  </goal>
  <goal name="add_justified&#39;vc.6" expl="postcondition">
  <transf name="inline_goal" >
   <goal name="add_justified&#39;vc.6.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="add_justified&#39;vc.6.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="234655"/></proof>
    <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="100201"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="inline_goal" >
     <goal name="add_justified&#39;vc.6.0.0.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="add_justified&#39;vc.6.0.0.0.0" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="177710"/></proof>
      <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="126357"/></proof>
      <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.6.0.0.0.1" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="245187"/></proof>
      <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="188024"/></proof>
      <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.6.0.0.0.2" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="214822"/></proof>
      <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="152633"/></proof>
      <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_justified&#39;vc.6.0.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.04" steps="266"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.6.0.2" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="233543"/></proof>
    <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="102783"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <transf name="inline_goal" >
     <goal name="add_justified&#39;vc.6.0.2.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="add_justified&#39;vc.6.0.2.0.0" expl="postcondition" proved="true">
      <proof prover="5"><result status="valid" time="0.05" steps="831"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.6.0.2.0.1" expl="postcondition">
      <proof prover="5" obsolete="true"><result status="timeout" time="2.00"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.6.0.2.0.2" expl="postcondition">
      <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="284023"/></proof>
      <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
      <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="124702"/></proof>
      <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.6.0.2.0.3" expl="postcondition" proved="true">
      <proof prover="5"><result status="valid" time="0.05" steps="1256"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.6.0.2.0.4" expl="postcondition" proved="true">
      <proof prover="5"><result status="valid" time="0.04" steps="445"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_justified&#39;vc.6.0.3" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.05" steps="467"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.6.0.4" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.05" steps="465"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.6.0.5" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="177321"/></proof>
    <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
    <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="119794"/></proof>
    <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.6.0.6" expl="postcondition">
    <proof prover="5" obsolete="true"><result status="timeout" time="1.06"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.2" expl="precondition">
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_IsFirstOrder" proved="true">
 <goal name="is_first_order&#39;vc" expl="VC for is_first_order" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><result status="timeout" time="1.00" steps="164185"/></proof>
 <proof prover="3"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="127320"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_IsDecision" proved="true">
 <goal name="is_decision&#39;vc" expl="VC for is_decision" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="78"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_Justification">
 <goal name="justification&#39;vc" expl="VC for justification">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="289962"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="146296"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="use_th" arg1="seq.FreeMonoid">
  <goal name="justification&#39;vc.0" expl="VC for justification">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="189059"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="159222"/></proof>
  <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" >
   <goal name="justification&#39;vc.0.0" expl="precondition">
   <transf name="subst_all" >
    <goal name="justification&#39;vc.0.0.0" expl="precondition">
    <proof prover="5" obsolete="true"><result status="valid" time="0.01" steps="28"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="justification&#39;vc.0.1" expl="assertion">
   </goal>
   <goal name="justification&#39;vc.0.2" expl="postcondition">
   <transf name="subst_all" >
    <goal name="justification&#39;vc.0.2.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="justification&#39;vc.0.2.0.0" expl="postcondition">
     <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="34"/></proof>
     </goal>
     <goal name="justification&#39;vc.0.2.0.1" expl="postcondition">
     <proof prover="5" obsolete="true"><result status="valid" time="0.01" steps="34"/></proof>
     </goal>
     <goal name="justification&#39;vc.0.2.0.2" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="220216"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="164292"/></proof>
     <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="justification&#39;vc.0.3" expl="postcondition">
   <transf name="subst_all" >
    <goal name="justification&#39;vc.0.3.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="justification&#39;vc.0.3.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="166093"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="193391"/></proof>
     <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
     </goal>
     <goal name="justification&#39;vc.0.3.0.1" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="165668"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="190665"/></proof>
     <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
     </goal>
     <goal name="justification&#39;vc.0.3.0.2" expl="postcondition">
     <proof prover="5" obsolete="true"><result status="valid" time="0.04" steps="359"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="justification&#39;vc.0.4" expl="postcondition">
   <transf name="subst_all" >
    <goal name="justification&#39;vc.0.4.0" expl="postcondition">
    <transf name="split_vc" >
     <goal name="justification&#39;vc.0.4.0.0" expl="postcondition">
     <proof prover="5" obsolete="true"><result status="valid" time="0.01" steps="36"/></proof>
     </goal>
     <goal name="justification&#39;vc.0.4.0.1" expl="postcondition">
     <proof prover="5" obsolete="true"><result status="valid" time="0.01" steps="36"/></proof>
     </goal>
     <goal name="justification&#39;vc.0.4.0.2" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="208472"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
     <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="163647"/></proof>
     <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_CmpLeLog_Impl" proved="true">
 <goal name="cmp_le_log&#39;vc" expl="VC for cmp_le_log" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_CmpLtLog_Impl" proved="true">
 <goal name="cmp_lt_log&#39;vc" expl="VC for cmp_lt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_CmpGeLog_Impl" proved="true">
 <goal name="cmp_ge_log&#39;vc" expl="VC for cmp_ge_log" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_CmpGtLog_Impl" proved="true">
 <goal name="cmp_gt_log&#39;vc" expl="VC for cmp_gt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Refl_Impl" proved="true">
 <goal name="refl&#39;vc" expl="VC for refl" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="24"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Trans_Impl" proved="true">
 <goal name="trans&#39;vc" expl="VC for trans" proved="true">
 <proof prover="5"><result status="valid" time="0.05" steps="838"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Antisym1_Impl" proved="true">
 <goal name="antisym1&#39;vc" expl="VC for antisym1" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="204"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Antisym2_Impl" proved="true">
 <goal name="antisym2&#39;vc" expl="VC for antisym2" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="196"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_EqCmp_Impl" proved="true">
 <goal name="eq_cmp&#39;vc" expl="VC for eq_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="152"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl36_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.06" steps="1289"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl28_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="20"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl32_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><result status="unknown" time="0.54" steps="104611"/></proof>
 <proof prover="3"><result status="timeout" time="0.63"/></proof>
 <proof prover="4"><result status="timeout" time="0.70" steps="173190"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl20_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="4"><result status="valid" time="0.81" steps="101969"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10_Bool" proved="true">
 <goal name="bool&#39;vc" expl="VC for bool" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="45"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl39_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="53"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl42_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="16"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_AbsJustCons_Impl">
 <goal name="abs_just_cons&#39;vc" expl="VC for abs_just_cons">
 <transf name="split_vc" >
  <goal name="abs_just_cons&#39;vc.0" expl="postcondition">
  <transf name="rewrite" arg1="def">
   <goal name="abs_just_cons&#39;vc.0.0" expl="postcondition">
   <transf name="eliminate_if" >
    <goal name="abs_just_cons&#39;vc.0.0.0" expl="VC for abs_just_cons">
    <transf name="split_vc" >
     <goal name="abs_just_cons&#39;vc.0.0.0.0" expl="postcondition">
     <transf name="use_th" arg1="seq.FreeMonoid">
      <goal name="abs_just_cons&#39;vc.0.0.0.0.0" expl="postcondition">
      <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="91"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="abs_just_cons&#39;vc.0.0.0.1" expl="postcondition">
     <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="106"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_AbsJustSnoc_Impl">
 <goal name="abs_just_snoc&#39;vc" expl="VC for abs_just_snoc">
 <transf name="use_th" arg1="seq.FreeMonoid">
  <goal name="abs_just_snoc&#39;vc.0" expl="VC for abs_just_snoc">
  <transf name="split_vc" >
   <goal name="abs_just_snoc&#39;vc.0.0" expl="precondition">
   <proof prover="5" obsolete="true"><result status="valid" time="0.04" steps="686"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.1" expl="precondition">
   <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="92"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.2" expl="variant decrease">
   <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="75"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.3" expl="precondition">
   <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="230"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.4" expl="precondition">
   <proof prover="5" obsolete="true"><result status="valid" time="0.01" steps="32"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.5" expl="postcondition">
   <transf name="assert" arg1="(forall i j s. insert (insert s j) i = insert (insert s i) j)">
    <goal name="abs_just_snoc&#39;vc.0.5.0" expl="asserted formula">
    <transf name="assert" arg1="(forall i j s. insert (insert s j) i == insert (insert s i) j)">
     <goal name="abs_just_snoc&#39;vc.0.5.0.0" expl="asserted formula">
     <proof prover="5" obsolete="true"><result status="valid" time="0.03" steps="146"/></proof>
     </goal>
     <goal name="abs_just_snoc&#39;vc.0.5.0.1" expl="asserted formula">
     <proof prover="5" obsolete="true"><result status="valid" time="0.02" steps="79"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="abs_just_snoc&#39;vc.0.5.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.47" steps="92136"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_IndexOf">
 <goal name="index_of&#39;vc" expl="VC for index_of">
 <proof prover="0"><result status="timeout" time="1.00" steps="238755"/></proof>
 <proof prover="3"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="0.69" steps="61983"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_IsJustified" proved="true">
 <goal name="is_justified&#39;vc" expl="VC for is_justified" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="46"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_IsInput" proved="true">
 <goal name="is_input&#39;vc" expl="VC for is_input" proved="true">
 <proof prover="5"><result status="valid" time="0.01" steps="78"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Value" proved="true">
 <goal name="value&#39;vc" expl="VC for value" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Term" proved="true">
 <goal name="term&#39;vc" expl="VC for term" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Theory_Impl4_TrailPlausible_Impl" proved="true">
 <goal name="trail_plausible&#39;vc" expl="VC for trail_plausible" proved="true">
 <proof prover="5"><result status="valid" time="0.25" steps="5006"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl19" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl23" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl31" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl35" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl42" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl20" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl28" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl32" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl36" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl39" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl44">
 <goal name="partial_cmp_refn">
 <proof prover="0"><result status="timeout" time="1.00" steps="391117"/></proof>
 <proof prover="3"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="0.73" steps="191812"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl45">
 <goal name="cmp_refn">
 <proof prover="0"><result status="unknown" time="0.02" steps="1587"/></proof>
 <proof prover="3"><result status="unknown" time="0.02" steps="7107"/></proof>
 <proof prover="4"><result status="unknown" time="0.02" steps="2602"/></proof>
 <proof prover="5"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11" proved="true">
 <goal name="cmp_le_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="cmp_gt_log_refn" proved="true">
 <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.01" steps="360"/></proof>
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="refl_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="antisym2_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="cmp_lt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="trans_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="cmp_ge_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="antisym1_refn" proved="true">
 <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.01" steps="236"/></proof>
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="eq_cmp_refn" proved="true">
 <proof prover="0" timelimit="5" memlimit="2000"><result status="valid" time="0.01" steps="268"/></proof>
 <proof prover="5"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_MaxLevel">
 <goal name="max_level&#39;vc" expl="VC for max_level">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.00" steps="211649"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="166255"/></proof>
 <proof prover="5" obsolete="true"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" >
  <goal name="max_level&#39;vc.0" expl="precondition">
  <proof prover="5"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="max_level&#39;vc.1" expl="loop invariant init">
  <proof prover="5"><result status="valid" time="0.01" steps="42"/></proof>
  </goal>
  <goal name="max_level&#39;vc.2" expl="loop invariant init">
  <proof prover="5"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
  <goal name="max_level&#39;vc.3" expl="loop invariant init">
  <proof prover="5"><result status="valid" time="0.01" steps="44"/></proof>
  </goal>
  <goal name="max_level&#39;vc.4" expl="loop invariant init">
  <proof prover="5"><result status="valid" time="0.03" steps="481"/></proof>
  </goal>
  <goal name="max_level&#39;vc.5" expl="postcondition">
  </goal>
  <goal name="max_level&#39;vc.6" expl="assertion">
  <proof prover="5"><result status="valid" time="0.02" steps="70"/></proof>
  </goal>
  <goal name="max_level&#39;vc.7" expl="assertion">
  <proof prover="5" obsolete="true"><result status="timeout" time="1.06"/></proof>
  </goal>
  <goal name="max_level&#39;vc.8" expl="assertion">
  <transf name="use_th" arg1="seq.FreeMonoid">
   <goal name="max_level&#39;vc.8.0" expl="assertion">
   <transf name="destruct_rec" arg1="Ensures5">
    <goal name="max_level&#39;vc.8.0.0" expl="assertion">
    <proof prover="3" obsolete="true"><result status="timeout" time="1.34"/></proof>
    </goal>
    <goal name="max_level&#39;vc.8.0.1" expl="assertion">
    <proof prover="5"><result status="timeout" time="1.04"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="max_level&#39;vc.9" expl="assertion">
  <transf name="use_th" arg1="seq.FreeMonoid">
   <goal name="max_level&#39;vc.9.0" expl="assertion">
   <proof prover="5"><result status="valid" time="0.03" steps="394"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="max_level&#39;vc.10" expl="assertion">
  <proof prover="5"><result status="valid" time="0.07" steps="879"/></proof>
  </goal>
  <goal name="max_level&#39;vc.11" expl="assertion">
  <proof prover="5"><result status="valid" time="0.02" steps="84"/></proof>
  </goal>
  <goal name="max_level&#39;vc.12" expl="assertion">
  <proof prover="5"><result status="valid" time="0.02" steps="84"/></proof>
  </goal>
  <goal name="max_level&#39;vc.13" expl="loop invariant preservation">
  <proof prover="5"><result status="valid" time="0.02" steps="56"/></proof>
  </goal>
  <goal name="max_level&#39;vc.14" expl="loop invariant preservation">
  <proof prover="4"><result status="valid" time="0.12" steps="37320"/></proof>
  </goal>
  <goal name="max_level&#39;vc.15" expl="loop invariant preservation">
  <proof prover="5"><result status="valid" time="0.02" steps="58"/></proof>
  </goal>
  <goal name="max_level&#39;vc.16" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="max_level&#39;vc.16.0" expl="loop invariant preservation">
   <transf name="split_vc" >
    <goal name="max_level&#39;vc.16.0.0" expl="loop invariant preservation">
    <transf name="instantiate" arg1="set_level_max_spec" arg2="(inner (trail_ghost self))">
     <goal name="max_level&#39;vc.16.0.0.0" expl="loop invariant preservation">
     <transf name="instantiate" arg1="Hinst" arg2="(abstract_justification self (inner produced_13))">
      <goal name="max_level&#39;vc.16.0.0.0.0" expl="loop invariant preservation">
      <transf name="instantiate" arg1="Hinst" arg2="(index_logic self x)">
       <goal name="max_level&#39;vc.16.0.0.0.0.0" expl="loop invariant preservation">
       <transf name="destruct_rec" arg1="Hinst">
        <goal name="max_level&#39;vc.16.0.0.0.0.0.0" expl="destruct premise">
        <proof prover="5"><result status="valid" time="0.03" steps="426"/></proof>
        </goal>
        <goal name="max_level&#39;vc.16.0.0.0.0.0.1" expl="destruct premise">
        <proof prover="5" obsolete="true"><result status="timeout" time="1.10"/></proof>
        </goal>
        <goal name="max_level&#39;vc.16.0.0.0.0.0.2" expl="loop invariant preservation">
        <transf name="instantiate" arg1="abs_just_snoc_spec" arg2="self,produced_13,x">
         <goal name="max_level&#39;vc.16.0.0.0.0.0.2.0" expl="loop invariant preservation">
         <transf name="destruct_rec" arg1="Hinst">
          <goal name="max_level&#39;vc.16.0.0.0.0.0.2.0.0" expl="destruct premise">
          </goal>
          <goal name="max_level&#39;vc.16.0.0.0.0.0.2.0.1" expl="destruct premise">
          <proof prover="3"><result status="valid" time="0.29" steps="1065940"/></proof>
          </goal>
          <goal name="max_level&#39;vc.16.0.0.0.0.0.2.0.2" expl="loop invariant preservation">
          <transf name="use_th" arg1="seq.FreeMonoid">
           <goal name="max_level&#39;vc.16.0.0.0.0.0.2.0.2.0" expl="loop invariant preservation">
           <proof prover="5" obsolete="true"><result status="timeout" time="1.06"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="max_level&#39;vc.16.0.1" expl="loop invariant preservation">
    <transf name="instantiate" arg1="set_level_min_spec" arg2="(inner (trail_ghost self)),((abstract_justification self (inner produced_13))),((index_logic self x))">
     <goal name="max_level&#39;vc.16.0.1.0" expl="loop invariant preservation">
     <transf name="destruct_rec" arg1="Hinst">
      <goal name="max_level&#39;vc.16.0.1.0.0" expl="destruct premise">
      <proof prover="5"><result status="valid" time="0.03" steps="409"/></proof>
      </goal>
      <goal name="max_level&#39;vc.16.0.1.0.1" expl="destruct premise">
      <proof prover="5" obsolete="true"><result status="timeout" time="1.04"/></proof>
      </goal>
      <goal name="max_level&#39;vc.16.0.1.0.2" expl="loop invariant preservation">
      <transf name="instantiate" arg1="abs_just_snoc_spec" arg2="self,produced_13,x">
       <goal name="max_level&#39;vc.16.0.1.0.2.0" expl="loop invariant preservation">
       <transf name="use_th" arg1="seq.FreeMonoid">
        <goal name="max_level&#39;vc.16.0.1.0.2.0.0" expl="loop invariant preservation">
        <transf name="destruct_rec" arg1="Hinst">
         <goal name="max_level&#39;vc.16.0.1.0.2.0.0.0" expl="destruct premise">
         </goal>
         <goal name="max_level&#39;vc.16.0.1.0.2.0.0.1" expl="destruct premise">
         <proof prover="3"><result status="timeout" time="1.38"/></proof>
         </goal>
         <goal name="max_level&#39;vc.16.0.1.0.2.0.0.2" expl="loop invariant preservation">
         <proof prover="5" obsolete="true"><result status="timeout" time="1.04"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
