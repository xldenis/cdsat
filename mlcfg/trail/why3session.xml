<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="trail.mlcfg"/>
<theory name="Cdsat_Trail_Remove_Impl" proved="true">
 <goal name="remove&#39;vc" expl="VC for remove" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="remove&#39;vc.0" expl="VC for remove" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.000000" steps="21"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.006821" steps="6"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.000000" steps="21"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.006675" steps="6"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.0.4.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.000000" steps="12"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.4.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.020000" steps="582"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.4.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(contains (subsequence s 0 (length s - 1)) t)">
     <goal name="remove&#39;vc.0.4.2.0" expl="true case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="888"/></proof>
     </goal>
     <goal name="remove&#39;vc.0.4.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="943"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.0.5.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.000000" steps="10"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.5.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.020000" steps="497"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.5.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(contains (subsequence s 0 (length s - 1)) t)">
     <goal name="remove&#39;vc.0.5.2.0" expl="true case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="929"/></proof>
     </goal>
     <goal name="remove&#39;vc.0.5.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="1003"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.0.6" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.050000" steps="1099"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.7" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.060000" steps="1691"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.8" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.010000" steps="60"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbstractJustification_Impl" proved="true">
 <goal name="abstract_justification&#39;vc" expl="VC for abstract_justification" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abstract_justification&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.013438" steps="17"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.014749" steps="55"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.576194" steps="82165"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.023424" steps="164"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.033746" steps="349"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.046255" steps="582"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.6" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="abstract_justification&#39;vc.6.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.886499" steps="130421"/></proof>
   </goal>
   <goal name="abstract_justification&#39;vc.6.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.013555" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpLeLog_Impl" proved="true">
 <goal name="cmp_le_log&#39;vc" expl="VC for cmp_le_log" proved="true">
 <proof prover="5"><result status="valid" time="0.006965" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpLtLog_Impl" proved="true">
 <goal name="cmp_lt_log&#39;vc" expl="VC for cmp_lt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.006798" steps="11"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpGeLog_Impl" proved="true">
 <goal name="cmp_ge_log&#39;vc" expl="VC for cmp_ge_log" proved="true">
 <proof prover="5"><result status="valid" time="0.007100" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_CmpGtLog_Impl" proved="true">
 <goal name="cmp_gt_log&#39;vc" expl="VC for cmp_gt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.006912" steps="11"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Refl_Impl" proved="true">
 <goal name="refl&#39;vc" expl="VC for refl" proved="true">
 <proof prover="5"><result status="valid" time="0.006686" steps="24"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Trans_Impl" proved="true">
 <goal name="trans&#39;vc" expl="VC for trans" proved="true">
 <proof prover="5"><result status="valid" time="0.037222" steps="838"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Antisym1_Impl" proved="true">
 <goal name="antisym1&#39;vc" expl="VC for antisym1" proved="true">
 <proof prover="5"><result status="valid" time="0.012844" steps="204"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Antisym2_Impl" proved="true">
 <goal name="antisym2&#39;vc" expl="VC for antisym2" proved="true">
 <proof prover="5"><result status="valid" time="0.013175" steps="196"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_EqCmp_Impl" proved="true">
 <goal name="eq_cmp&#39;vc" expl="VC for eq_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.011545" steps="152"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbs_Impl" proved="true">
 <goal name="ix_to_abs&#39;vc" expl="VC for ix_to_abs" proved="true">
 <proof prover="5"><result status="valid" time="0.278199" steps="8371"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsRemove_Impl" proved="true">
 <goal name="ix_to_abs_remove&#39;vc" expl="VC for ix_to_abs_remove" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_remove&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(ix_to_abs t (remove s x) ==&#39; remove1 (ix_to_abs t s) (index_logic2 t x))
">
   <goal name="ix_to_abs_remove&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.390900" steps="6661"/></proof>
   </goal>
   <goal name="ix_to_abs_remove&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_SetMax_Impl" proved="true">
 <goal name="set_max&#39;vc" expl="VC for set_max" proved="true">
 <proof prover="5"><result status="valid" time="0.070000" steps="1257"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsLevel_Impl" proved="true">
 <goal name="ix_to_abs_level&#39;vc" expl="VC for ix_to_abs_level" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_level&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="ix_to_abs_level&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ix_to_abs_level&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.874904" steps="3270017"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ix_to_abs_level&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.030000" steps="200"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsInsert_Impl" proved="true">
 <goal name="ix_to_abs_insert&#39;vc" expl="VC for ix_to_abs_insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_insert&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( ix_to_abs t (insert s x) ==&#39; insert1 (ix_to_abs t s) (index_logic2 t x))">
   <goal name="ix_to_abs_insert&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.074017" steps="891"/></proof>
   </goal>
   <goal name="ix_to_abs_insert&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.027801" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustCons_Impl" proved="true">
 <goal name="abs_just_cons&#39;vc" expl="VC for abs_just_cons" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abs_just_cons&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abstract_justification self (singleton1 elem ++ just) ==
  insert (abstract_justification self just) (index_logic self elem))">
   <goal name="abs_just_cons&#39;vc.0.0" expl="asserted formula" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="abs_just_cons&#39;vc.0.0.0" expl="asserted formula" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="abs_just_cons&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.177729" steps="2538"/></proof>
     </goal>
     <goal name="abs_just_cons&#39;vc.0.0.0.1" expl="asserted formula" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="abs_just_cons&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="5"><result status="valid" time="0.329614" steps="5605"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="abs_just_cons&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.018037" steps="24"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustSnoc_Impl" proved="true">
 <goal name="abs_just_snoc&#39;vc" expl="VC for abs_just_snoc" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="abs_just_snoc&#39;vc.0" expl="VC for abs_just_snoc" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="abs_just_snoc&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.181728" steps="41336"/></proof>
   <proof prover="1"><result status="valid" time="0.152831" steps="31761"/></proof>
   <proof prover="3"><result status="valid" time="0.025420" steps="130897"/></proof>
   <proof prover="5"><result status="valid" time="0.018904" steps="79"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.051026" steps="734"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.213257" steps="45249"/></proof>
   <proof prover="1"><result status="valid" time="0.194611" steps="37285"/></proof>
   <proof prover="3"><result status="valid" time="0.026602" steps="136627"/></proof>
   <proof prover="5"><result status="valid" time="0.021195" steps="106"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.136585" steps="36208"/></proof>
   <proof prover="1"><result status="valid" time="0.075698" steps="22507"/></proof>
   <proof prover="3"><result status="valid" time="0.012105" steps="11650"/></proof>
   <proof prover="5"><result status="valid" time="0.016627" steps="20"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.238317" steps="45888"/></proof>
   <proof prover="1"><result status="valid" time="0.204387" steps="38620"/></proof>
   <proof prover="3"><result status="valid" time="0.039527" steps="177386"/></proof>
   <proof prover="5"><result status="valid" time="0.060961" steps="693"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall i j s. insert (insert s j) i = insert (insert s i) j)">
    <goal name="abs_just_snoc&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(forall i j s. insert (insert s j) i == insert (insert s i) j)">
     <goal name="abs_just_snoc&#39;vc.0.5.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.460455" steps="85025"/></proof>
     <proof prover="1"><result status="valid" time="0.602107" steps="86423"/></proof>
     <proof prover="5"><result status="valid" time="0.028833" steps="137"/></proof>
     </goal>
     <goal name="abs_just_snoc&#39;vc.0.5.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.225442" steps="47673"/></proof>
     <proof prover="1"><result status="valid" time="0.211771" steps="39646"/></proof>
     <proof prover="3"><result status="valid" time="0.028843" steps="134078"/></proof>
     <proof prover="5"><result status="valid" time="0.020312" steps="65"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="abs_just_snoc&#39;vc.0.5.1" expl="postcondition" proved="true">
    <proof prover="5" timelimit="10" memlimit="4000"><result status="valid" time="1.835202" steps="35477"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_AbstractJustificationInsert_Impl" proved="true">
 <goal name="abstract_justification_insert&#39;vc" expl="VC for abstract_justification_insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abstract_justification_insert&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.024192" steps="26"/></proof>
  </goal>
  <goal name="abstract_justification_insert&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.031095" steps="155"/></proof>
  </goal>
  <goal name="abstract_justification_insert&#39;vc.2" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="abstract_justification_insert&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="abstract_justification_insert&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.022653" steps="30"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Theory_Impl4_TrailPlausible_Impl" proved="true">
 <goal name="trail_plausible&#39;vc" expl="VC for trail_plausible" proved="true">
 <proof prover="5"><result status="valid" time="0.250000" steps="5368"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_SeqToSet_Impl" proved="true">
 <goal name="seq_to_set&#39;vc" expl="VC for seq_to_set" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="seq_to_set&#39;vc.0" expl="VC for seq_to_set" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="seq_to_set&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.014739" steps="18"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="71"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="99"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="94"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.4" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_to_set&#39;vc.0.4.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.030000" steps="335"/></proof>
    </goal>
    <goal name="seq_to_set&#39;vc.0.4.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(abstract_justification trail s == ix_to_abs trail t)">
     <goal name="seq_to_set&#39;vc.0.4.1.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.439658" steps="6720"/></proof>
     </goal>
     <goal name="seq_to_set&#39;vc.0.4.1.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.020000" steps="41"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.005127" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Index" proved="true">
 <goal name="index&#39;vc" expl="VC for index" proved="true">
 <proof prover="5"><result status="valid" time="0.021630" steps="180"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.006981" steps="45"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="clone&#39;&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.009456" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="5"><result status="valid" time="0.007712" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsFirstOrder" proved="true">
 <goal name="is_first_order&#39;vc" expl="VC for is_first_order" proved="true">
 <proof prover="5"><result status="valid" time="0.007765" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl19_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.021364" steps="449"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsDecision" proved="true">
 <goal name="is_decision&#39;vc" expl="VC for is_decision" proved="true">
 <proof prover="5"><result status="valid" time="0.011931" steps="74"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Justification" proved="true">
 <goal name="justification&#39;vc" expl="VC for justification" proved="true">
 <proof prover="5"><result status="valid" time="0.692686" steps="9209"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Restrict" proved="true">
 <goal name="restrict&#39;vc" expl="VC for restrict" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="restrict&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.037659" steps="44"/></proof>
  </goal>
  <goal name="restrict&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.015708" steps="18602"/></proof>
  </goal>
  <goal name="restrict&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.049804" steps="103"/></proof>
  </goal>
  <goal name="restrict&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.013556" steps="18508"/></proof>
  </goal>
  <goal name="restrict&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.052504" steps="70"/></proof>
  </goal>
  <goal name="restrict&#39;vc.5" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.060469" steps="212"/></proof>
  </goal>
  <goal name="restrict&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.050671" steps="107"/></proof>
  </goal>
  <goal name="restrict&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.051946" steps="105"/></proof>
  </goal>
  <goal name="restrict&#39;vc.8" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="restrict&#39;vc.8.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="1.761767" steps="5103580"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.9" expl="assertion" proved="true">
  <transf name="assert" proved="true" arg1="(abstract_justification ( * self) js ==
  abstract_justification ( * inner old&#39;) js)">
   <goal name="restrict&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.890378" steps="8759"/></proof>
   </goal>
   <goal name="restrict&#39;vc.9.1" expl="assertion" proved="true">
   <proof prover="5"><result status="valid" time="0.073093" steps="134"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.10" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="restrict&#39;vc.10.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="restrict&#39;vc.10.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.119120" steps="933323"/></proof>
    </goal>
    <goal name="restrict&#39;vc.10.0.1" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.133793" steps="709087"/></proof>
    </goal>
    <goal name="restrict&#39;vc.10.0.2" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.293250" steps="936382"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.11" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="restrict&#39;vc.11.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="restrict&#39;vc.11.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.419080" steps="1356418"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.1" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.487444" steps="1459448"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.2" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.278608" steps="1045701"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.3" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.242802" steps="1043507"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.4" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.182642" steps="1054903"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.5" expl="assertion" proved="true">
    <proof prover="5"><result status="valid" time="0.177363" steps="870"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.6" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.303096" steps="1108904"/></proof>
    </goal>
    <goal name="restrict&#39;vc.11.0.7" expl="assertion" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="2.199535" steps="8018539"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.175816" steps="1102166"/></proof>
  </goal>
  <goal name="restrict&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="restrict&#39;vc.13.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="restrict&#39;vc.13.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.095725" steps="84"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.090202" steps="283"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.051726" steps="316397"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.060949" steps="326937"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.094257" steps="647365"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.063738" steps="401036"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.6" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.276443" steps="940436"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.7" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.262239" steps="1095289"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.8" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.259437" steps="832981"/></proof>
    </goal>
    <goal name="restrict&#39;vc.13.0.9" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.016116" steps="21153"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.062754" steps="328562"/></proof>
  </goal>
  <goal name="restrict&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.108887" steps="161"/></proof>
  </goal>
  <goal name="restrict&#39;vc.16" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.044282" steps="257240"/></proof>
  </goal>
  <goal name="restrict&#39;vc.17" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.047472" steps="258495"/></proof>
  </goal>
  <goal name="restrict&#39;vc.18" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.075761" steps="333"/></proof>
  </goal>
  <goal name="restrict&#39;vc.19" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.074700" steps="322"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AbsJustEquiv_Impl" proved="true">
 <goal name="abs_just_equiv&#39;vc" expl="VC for abs_just_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abs_just_equiv&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abstract_justification self just == abstract_justification other just)">
   <goal name="abs_just_equiv&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.096803" steps="1282"/></proof>
   </goal>
   <goal name="abs_just_equiv&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.015513" steps="19"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AddJustified" proved="true">
 <goal name="add_justified&#39;vc" expl="VC for add_justified" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add_justified&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.029139" steps="38"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.025289" steps="34"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.2" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.045015" steps="282"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.3" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.032888" steps="112"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.4" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.030605" steps="52"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.5" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.052500" steps="321"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.6" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.034577" steps="64"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.7" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.036132" steps="70"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.029707" steps="50"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.9" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.033119" steps="50"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.10" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.075708" steps="610"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.11" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.042657" steps="167"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.12" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.038287" steps="78"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.115315" steps="1156"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.14" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.033328" steps="58"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.039046" steps="81"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.16" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.039502" steps="88"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.17" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.251936" steps="2876"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.18" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.064561" steps="333"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.19" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.049072" steps="113"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.20" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.049526" steps="114"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.21" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.041763" steps="78"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.22" expl="assertion" proved="true">
  <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="3.032441" steps="42969"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.23" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.121500" steps="718253"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.24" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.045035" steps="87"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.25" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.072426" steps="398"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.26" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.056238" steps="149"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.27" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.057252" steps="150"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.28" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.058310" steps="161"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.29" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.057636" steps="162"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.30" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.185253" steps="2114"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.31" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.176367" steps="1949"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="add_justified&#39;vc.32.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.616776" steps="91595"/></proof>
   </goal>
   <goal name="add_justified&#39;vc.32.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.100995" steps="566"/></proof>
   </goal>
   <goal name="add_justified&#39;vc.32.2" expl="precondition" proved="true">
   <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="2.850199" steps="41768"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.33" expl="assertion" proved="true">
  <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.378885" steps="1471751"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.34" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="1.271065" steps="3672200"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.35" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.557101" steps="5258"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.36" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="add_justified&#39;vc.36.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="add_justified&#39;vc.36.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.343989" steps="1203607"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.1" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.149005" steps="727439"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.2" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.334402" steps="1203365"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.3" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.145335" steps="727354"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.4" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.149182" steps="994814"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.5" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.527379" steps="81832"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.6" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.332912" steps="1220793"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.36.0.7" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.213697" steps="848572"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.37" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="add_justified&#39;vc.37.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="add_justified&#39;vc.37.0.0" expl="VC for add_justified" proved="true">
    <proof prover="3"><result status="valid" time="0.253874" steps="980922"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.37.0.1" expl="VC for add_justified" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="add_justified&#39;vc.37.0.1.0" expl="VC for add_justified" proved="true">
     <transf name="case" proved="true" arg1="(ix = new_ix)">
      <goal name="add_justified&#39;vc.37.0.1.0.0" expl="true case" proved="true">
      <proof prover="3"><result status="valid" time="0.143657" steps="810904"/></proof>
      </goal>
      <goal name="add_justified&#39;vc.37.0.1.0.1" expl="false case" proved="true">
      <proof prover="5"><result status="valid" time="0.496624" steps="5925"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_justified&#39;vc.37.0.2" expl="VC for add_justified" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="add_justified&#39;vc.37.0.2.0" expl="VC for add_justified" proved="true">
     <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.308446" steps="1161574"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.38" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="add_justified&#39;vc.38.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="add_justified&#39;vc.38.0.0" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.075305" steps="177"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.1" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.110841" steps="689"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.2" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.078338" steps="188"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.3" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.113542" steps="681"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.4" expl="VC for add_justified" proved="true">
    <proof prover="3"><result status="valid" time="0.115239" steps="724710"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.5" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.519676" steps="4535"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.6" expl="VC for add_justified" proved="true">
    <proof prover="3"><result status="valid" time="0.131954" steps="758100"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.7" expl="VC for add_justified" proved="true">
    <proof prover="3"><result status="valid" time="0.332497" steps="1420424"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.8" expl="VC for add_justified" proved="true">
    <proof prover="1"><result status="valid" time="0.468644" steps="81177"/></proof>
    </goal>
    <goal name="add_justified&#39;vc.38.0.9" expl="VC for add_justified" proved="true">
    <proof prover="5"><result status="valid" time="0.077451" steps="177"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.129661" steps="738"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eq&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="eq&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="eq&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="eq&#39;vc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="split_all_full" proved="true" >
       <goal name="eq&#39;vc.0.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="5"><result status="valid" time="0.012513" steps="22"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="eq&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.012569" steps="28"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="eq&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.012278" steps="34"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="eq&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.013477" steps="44"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="eq&#39;vc.1" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="eq&#39;vc.1.0" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.011227" steps="50"/></proof>
   </goal>
   <goal name="eq&#39;vc.1.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="eq&#39;vc.1.1.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.013815" steps="16"/></proof>
    </goal>
    <goal name="eq&#39;vc.1.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="eq&#39;vc.1.1.1.0" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.011391" steps="18"/></proof>
     </goal>
     <goal name="eq&#39;vc.1.1.1.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.015595" steps="51"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.010978" steps="53"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.005283" steps="14"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl4_Cmp" proved="true">
 <goal name="cmp&#39;vc" expl="VC for cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.032419" steps="595"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl3_PartialCmp" proved="true">
 <goal name="partial_cmp&#39;vc" expl="VC for partial_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.006588" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Len" proved="true">
 <goal name="len&#39;vc" expl="VC for len" proved="true">
 <proof prover="5"><result status="valid" time="0.015750" steps="33"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_LemmaAbsJust_Impl" proved="true">
 <goal name="lemma_abs_just&#39;vc" expl="VC for lemma_abs_just" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_abs_just&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.021848" steps="27"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.021986" steps="85"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.011381" steps="12351"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.822150" steps="127386"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.045948" steps="475"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_IndexOf" proved="true">
 <goal name="index_of&#39;vc" expl="VC for index_of" proved="true">
 <proof prover="3"><result status="valid" time="0.177495" steps="797869"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.006837" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsJustified" proved="true">
 <goal name="is_justified&#39;vc" expl="VC for is_justified" proved="true">
 <proof prover="5"><result status="valid" time="0.011187" steps="48"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_IsInput" proved="true">
 <goal name="is_input&#39;vc" expl="VC for is_input" proved="true">
 <proof prover="5"><result status="valid" time="0.012724" steps="74"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Value" proved="true">
 <goal name="value&#39;vc" expl="VC for value" proved="true">
 <proof prover="5"><result status="valid" time="0.008111" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Term" proved="true">
 <goal name="term&#39;vc" expl="VC for term" proved="true">
 <proof prover="5"><result status="valid" time="0.007551" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl3" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007920" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl8" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004723" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009340" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl19" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007313" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007062" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl13" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005661" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl21" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006736" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl27" proved="true">
 <goal name="eq_refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="eq_refn.0" proved="true">
  <proof prover="5"><result status="valid" time="0.006748" steps="10"/></proof>
  </goal>
  <goal name="eq_refn.1" proved="true">
  <proof prover="5"><result status="valid" time="0.006888" steps="10"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl5" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004340" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl10" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004960" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004399" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl21" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006363" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl26" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004352" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl15" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005344" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl23" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <transf name="split_vc" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl29" proved="true">
 <goal name="assert_receiver_is_total_eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004326" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl7" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007259" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Concrete_Impl12" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004892" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl23" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009759" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl12" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004952" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl20" proved="true">
 <goal name="fmt_refn" proved="true">
 <transf name="split_vc" proved="true" >
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl26" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007619" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.010660" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.011748" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006973" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl11" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="clone&#39;_refn.0" proved="true">
  <proof prover="5"><result status="valid" time="0.005545" steps="6"/></proof>
  </goal>
  <goal name="clone&#39;_refn.1" proved="true">
  <proof prover="5"><result status="valid" time="0.004704" steps="4"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl19" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004584" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl25" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005327" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl0" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004571" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl2" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004348" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl3" proved="true">
 <goal name="fmt_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004701" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl3" proved="true">
 <goal name="partial_cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005871" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl4" proved="true">
 <goal name="cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007370" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5" proved="true">
 <goal name="trans_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007169" steps="12"/></proof>
 </goal>
 <goal name="eq_cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007963" steps="2"/></proof>
 </goal>
 <goal name="cmp_gt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005815" steps="2"/></proof>
 </goal>
 <goal name="cmp_ge_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006935" steps="2"/></proof>
 </goal>
 <goal name="cmp_le_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005771" steps="2"/></proof>
 </goal>
 <goal name="cmp_lt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006186" steps="2"/></proof>
 </goal>
 <goal name="refl_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006443" steps="2"/></proof>
 </goal>
 <goal name="antisym1_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006495" steps="8"/></proof>
 </goal>
 <goal name="antisym2_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009510" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11" proved="true">
 <goal name="index_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004680" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl18" proved="true">
 <goal name="hash_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.004996" steps="4"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl24" proved="true">
 <goal name="hash_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007396" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Term_Impl30" proved="true">
 <goal name="hash_refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="hash_refn.0" proved="true">
  <proof prover="5"><result status="valid" time="0.007260" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
