<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.14" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg">
<path name=".."/><path name="trail.mlcfg"/>
<theory name="Cdsat_Trail_Impl10_Index">
 <goal name="index&#39;vc" expl="VC for index">
 <proof prover="1"><undone/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl28_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="45"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl20_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl28" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl20" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="174"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="21"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl24" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="28"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="110"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_AbsJustInner_Impl" proved="true">
 <goal name="abs_just_inner&#39;vc" expl="VC for abs_just_inner" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="14"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_MaxLevel">
 <goal name="max_level&#39;vc" expl="VC for max_level">
 <proof prover="1"><undone/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_AddJustified">
 <goal name="add_justified&#39;vc" expl="VC for add_justified">
 <proof prover="1"><undone/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_IsFirstOrder" proved="true">
 <goal name="is_first_order&#39;vc" expl="VC for is_first_order" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl17_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="282"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl17" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Term" proved="true">
 <goal name="term&#39;vc" expl="VC for term" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl11_Value" proved="true">
 <goal name="value&#39;vc" expl="VC for value" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Negate" proved="true">
 <goal name="negate&#39;vc" expl="VC for negate" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="329"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10" proved="true">
 <goal name="Index1.index&#39;refn&#39;vc" expl="VC for index&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_Level">
 <goal name="level&#39;vc" expl="VC for level">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_IndexOf">
 <goal name="index_of&#39;vc" expl="VC for index_of">
 <proof prover="1"><undone/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_AddJustified">
 <goal name="add_justified&#39;vc" expl="VC for add_justified">
 <proof prover="1"><undone/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_Len" proved="true">
 <goal name="len&#39;vc" expl="VC for len" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="18"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl29_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="1290"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl21_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="20"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl29" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl21" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl25_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="1"><undone/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl25" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="136"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl5_Bool" proved="true">
 <goal name="bool&#39;vc" expl="VC for bool" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="45"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl32_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="53"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl35_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="16"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl37_PartialCmp">
 <goal name="partial_cmp&#39;vc" expl="VC for partial_cmp">
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Theory_Impl4_TrailPlausible_Impl" proved="true">
 <goal name="trail_plausible&#39;vc" expl="VC for trail_plausible" proved="true">
 <proof prover="2"><result status="valid" time="0.25" steps="4987"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl35" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl32" proved="true">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl22">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl26">
 <goal name="Eq1.eq&#39;refn&#39;vc" expl="VC for eq&#39;refn">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl37" proved="true">
 <goal name="PartialCmp1.partial_cmp&#39;refn&#39;vc" expl="VC for partial_cmp&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl38">
 <goal name="Cmp1.cmp&#39;refn&#39;vc" expl="VC for cmp&#39;refn">
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl25_Clone">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl26_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_Len">
 <goal name="len&#39;vc" expl="VC for len">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_IsBool">
 <goal name="is_bool&#39;vc" expl="VC for is_bool">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl21_Clone">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl7_Index">
 <goal name="index&#39;vc" expl="VC for index">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl22_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_IndexOf">
 <goal name="index_of&#39;vc" expl="VC for index_of">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_Restrict">
 <goal name="restrict&#39;vc" expl="VC for restrict">
 <transf name="split_vc" >
  <goal name="restrict&#39;vc.0" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.1" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.2" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.3" expl="assertion">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.4" expl="postcondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.5" expl="postcondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.6" expl="precondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.7" expl="precondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.8" expl="integer overflow">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.9" expl="loop invariant preservation">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.10" expl="loop invariant preservation">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="restrict&#39;vc.11" expl="loop invariant preservation">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Clone">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_FirstOrder">
 <goal name="first_order&#39;vc" expl="VC for first_order">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl14_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_AbstractJustification_Impl">
 <goal name="abstract_justification&#39;vc" expl="VC for abstract_justification">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Clone">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl10_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_MaxLevel">
 <goal name="max_level&#39;vc" expl="VC for max_level">
 <transf name="split_vc" >
  <goal name="max_level&#39;vc.0" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.1" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.2" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.3" expl="loop invariant init">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.4" expl="integer overflow">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.5" expl="assertion">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.6" expl="precondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.7" expl="assertion">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.8" expl="assertion">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.9" expl="integer overflow">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.10" expl="loop invariant preservation">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.11" expl="loop invariant preservation">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.12" expl="loop invariant preservation">
  <transf name="split_vc" >
   <goal name="max_level&#39;vc.12.0" expl="loop invariant preservation">
   <transf name="split_vc" >
    <goal name="max_level&#39;vc.12.0.0" expl="loop invariant preservation">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
    <goal name="max_level&#39;vc.12.0.1" expl="loop invariant preservation">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="max_level&#39;vc.13" expl="loop invariant preservation">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="max_level&#39;vc.14" expl="postcondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_AbsJustInner_Impl">
 <goal name="abs_just_inner&#39;vc" expl="VC for abs_just_inner">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl7">
 <goal name="Index1.index&#39;refn&#39;vc" expl="VC for index&#39;refn">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_Get">
 <goal name="get&#39;vc" expl="VC for get">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl17_Clone">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;">
 <proof prover="0"><undone/></proof>
 <proof prover="1"><undone/></proof>
 <proof prover="2"><undone/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_AddJustified">
 <goal name="add_justified&#39;vc" expl="VC for add_justified">
 <transf name="split_vc" >
  <goal name="add_justified&#39;vc.0" expl="precondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="add_justified&#39;vc.1" expl="precondition">
  <proof prover="0"><undone/></proof>
  <proof prover="1"><undone/></proof>
  <proof prover="2"><undone/></proof>
  </goal>
  <goal name="add_justified&#39;vc.2" expl="assertion">
  <transf name="inline_goal" >
   <goal name="add_justified&#39;vc.2.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="add_justified&#39;vc.2.0.0" expl="assertion">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
    <goal name="add_justified&#39;vc.2.0.1" expl="assertion">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
    <goal name="add_justified&#39;vc.2.0.2" expl="assertion">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
    <goal name="add_justified&#39;vc.2.0.3" expl="assertion">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
    <goal name="add_justified&#39;vc.2.0.4" expl="assertion">
    <transf name="subst_all" >
     <goal name="add_justified&#39;vc.2.0.4.0" expl="assertion">
     <transf name="compute_in_goal" >
      <goal name="add_justified&#39;vc.2.0.4.0.0" expl="assertion">
      <proof prover="0"><undone/></proof>
      <proof prover="1"><undone/></proof>
      <proof prover="2"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.3" expl="postcondition">
  <transf name="inline_goal" >
   <goal name="add_justified&#39;vc.3.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="add_justified&#39;vc.3.0.0" expl="postcondition">
    <transf name="unfold" arg1="abstract_relation">
     <goal name="add_justified&#39;vc.3.0.0.0" expl="VC for add_justified">
     <transf name="split_vc" >
      <goal name="add_justified&#39;vc.3.0.0.0.0" expl="VC for add_justified">
      <transf name="case" arg1="(i = (length (model3 (cdsat_trail_trail_Trail_assignments (^ self)))) -&#39; 1)">
       <goal name="add_justified&#39;vc.3.0.0.0.0.0" expl="true case">
       <proof prover="0"><undone/></proof>
       <proof prover="1"><undone/></proof>
       <proof prover="2"><undone/></proof>
       </goal>
       <goal name="add_justified&#39;vc.3.0.0.0.0.1" expl="false case">
       <transf name="assert" arg1="(forall j . contains1 (cdsat_trail_trail_Trail_ghost ( * self)) j -&gt; contains1 (cdsat_trail_trail_Trail_ghost (^ self)) j)">
        <goal name="add_justified&#39;vc.3.0.0.0.0.1.0" expl="asserted formula">
        <proof prover="0"><undone/></proof>
        <proof prover="1"><undone/></proof>
        <proof prover="2"><undone/></proof>
        </goal>
        <goal name="add_justified&#39;vc.3.0.0.0.0.1.1" expl="false case">
        <proof prover="0"><undone/></proof>
        <proof prover="1"><undone/></proof>
        <proof prover="2"><undone/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="add_justified&#39;vc.3.0.0.0.1" expl="VC for add_justified">
      <transf name="case" arg1="(i &lt;&#39; length (model3 (cdsat_trail_trail_Trail_assignments (^ self))) -&#39; 1)">
       <goal name="add_justified&#39;vc.3.0.0.0.1.0" expl="true case">
       <transf name="assert" arg1="((get1 (model3 (cdsat_trail_trail_Trail_assignments (^ self))) i) = (get1 (model3 (cdsat_trail_trail_Trail_assignments ( * self))) i))">
        <goal name="add_justified&#39;vc.3.0.0.0.1.0.0" expl="asserted formula">
        <proof prover="0"><undone/></proof>
        <proof prover="1"><undone/></proof>
        <proof prover="2"><undone/></proof>
        </goal>
        <goal name="add_justified&#39;vc.3.0.0.0.1.0.1" expl="true case">
        <proof prover="0"><undone/></proof>
        <proof prover="1"><undone/></proof>
        <proof prover="2"><undone/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.3.0.0.0.1.1" expl="false case">
       <proof prover="0"><undone/></proof>
       <proof prover="1"><undone/></proof>
       <proof prover="2"><undone/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_justified&#39;vc.3.0.1" expl="postcondition">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
    <goal name="add_justified&#39;vc.3.0.2" expl="postcondition">
    <transf name="inline_goal" >
     <goal name="add_justified&#39;vc.3.0.2.0" expl="postcondition">
     <transf name="split_vc" >
      <goal name="add_justified&#39;vc.3.0.2.0.0" expl="postcondition">
      <proof prover="0"><undone/></proof>
      <proof prover="1"><undone/></proof>
      <proof prover="2"><undone/></proof>
      </goal>
      <goal name="add_justified&#39;vc.3.0.2.0.1" expl="postcondition">
      <proof prover="0"><undone/></proof>
      <proof prover="1"><undone/></proof>
      <proof prover="2"><undone/></proof>
      </goal>
      <goal name="add_justified&#39;vc.3.0.2.0.2" expl="postcondition">
      <proof prover="0"><undone/></proof>
      <proof prover="1"><undone/></proof>
      <proof prover="2"><undone/></proof>
      </goal>
      <goal name="add_justified&#39;vc.3.0.2.0.3" expl="postcondition">
      <proof prover="0"><undone/></proof>
      <proof prover="1"><undone/></proof>
      <proof prover="2"><undone/></proof>
      </goal>
      <goal name="add_justified&#39;vc.3.0.2.0.4" expl="postcondition">
      <proof prover="0"><undone/></proof>
      <proof prover="1"><undone/></proof>
      <proof prover="2"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="add_justified&#39;vc.3.0.3" expl="postcondition">
    <proof prover="0"><undone/></proof>
    <proof prover="1"><undone/></proof>
    <proof prover="2"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
