<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg">
<path name=".."/><path name="trail.mlcfg"/>
<theory name="Cdsat_Trail_Remove_Impl" proved="true">
 <goal name="remove&#39;vc" expl="VC for remove" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="remove&#39;vc.0" expl="VC for remove" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.000000" steps="19"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.1" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.000000" steps="19"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.0.2.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.000000" steps="8"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.2.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.020000" steps="580"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.2.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(contains (subsequence s 0 (length s - 1)) t)">
     <goal name="remove&#39;vc.0.2.2.0" expl="true case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="886"/></proof>
     </goal>
     <goal name="remove&#39;vc.0.2.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="943"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.0.3.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.000000" steps="6"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.3.1" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.020000" steps="492"/></proof>
    </goal>
    <goal name="remove&#39;vc.0.3.2" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(contains (subsequence s 0 (length s - 1)) t)">
     <goal name="remove&#39;vc.0.3.2.0" expl="true case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="931"/></proof>
     </goal>
     <goal name="remove&#39;vc.0.3.2.1" expl="false case (postcondition)" proved="true">
     <proof prover="5"><result status="valid" time="0.040000" steps="1003"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.050000" steps="1093"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.060000" steps="1721"/></proof>
   </goal>
   <goal name="remove&#39;vc.0.6" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.010000" steps="59"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_AbstractJustification_Impl" proved="true">
 <goal name="abstract_justification&#39;vc" expl="VC for abstract_justification" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="abstract_justification&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.017169" steps="41"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.629430" steps="79793"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.025832" steps="146"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.036868" steps="310"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.039932" steps="340"/></proof>
  </goal>
  <goal name="abstract_justification&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="abstract_justification&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.948974" steps="126588"/></proof>
   </goal>
   <goal name="abstract_justification&#39;vc.5.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.015265" steps="16"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbs_Impl" proved="true">
 <goal name="ix_to_abs&#39;vc" expl="VC for ix_to_abs" proved="true">
 <proof prover="5"><result status="valid" time="0.440000" steps="11049"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsRemove_Impl" proved="true">
 <goal name="ix_to_abs_remove&#39;vc" expl="VC for ix_to_abs_remove" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_remove&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(ix_to_abs t (remove s x) ==&#39; remove1 (ix_to_abs t s) (index_logic2 t x))
">
   <goal name="ix_to_abs_remove&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.210000" steps="3631"/></proof>
   </goal>
   <goal name="ix_to_abs_remove&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="36"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_CmpLeLog_Impl" proved="true">
 <goal name="cmp_le_log&#39;vc" expl="VC for cmp_le_log" proved="true">
 <proof prover="5"><result status="valid" time="0.008250" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_CmpLtLog_Impl" proved="true">
 <goal name="cmp_lt_log&#39;vc" expl="VC for cmp_lt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.008105" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_CmpGeLog_Impl" proved="true">
 <goal name="cmp_ge_log&#39;vc" expl="VC for cmp_ge_log" proved="true">
 <proof prover="5"><result status="valid" time="0.008067" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_CmpGtLog_Impl" proved="true">
 <goal name="cmp_gt_log&#39;vc" expl="VC for cmp_gt_log" proved="true">
 <proof prover="5"><result status="valid" time="0.008131" steps="6"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Refl_Impl" proved="true">
 <goal name="refl&#39;vc" expl="VC for refl" proved="true">
 <proof prover="5"><result status="valid" time="0.007877" steps="24"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Trans_Impl" proved="true">
 <goal name="trans&#39;vc" expl="VC for trans" proved="true">
 <proof prover="5"><result status="valid" time="0.045102" steps="838"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Antisym1_Impl" proved="true">
 <goal name="antisym1&#39;vc" expl="VC for antisym1" proved="true">
 <proof prover="5"><result status="valid" time="0.016105" steps="204"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_Antisym2_Impl" proved="true">
 <goal name="antisym2&#39;vc" expl="VC for antisym2" proved="true">
 <proof prover="5"><result status="valid" time="0.015816" steps="196"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9_EqCmp_Impl" proved="true">
 <goal name="eq_cmp&#39;vc" expl="VC for eq_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.013736" steps="152"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_SetMax_Impl" proved="true">
 <goal name="set_max&#39;vc" expl="VC for set_max" proved="true">
 <proof prover="5"><result status="valid" time="0.070000" steps="1385"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsLevel_Impl" proved="true">
 <goal name="ix_to_abs_level&#39;vc" expl="VC for ix_to_abs_level" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_level&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="ix_to_abs_level&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="ix_to_abs_level&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="1.000000" steps="4231273"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="ix_to_abs_level&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.030000" steps="187"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Theory_Impl4_TrailPlausible_Impl" proved="true">
 <goal name="trail_plausible&#39;vc" expl="VC for trail_plausible" proved="true">
 <proof prover="5"><result status="valid" time="0.250000" steps="5368"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_SeqToSet_Impl" proved="true">
 <goal name="seq_to_set&#39;vc" expl="VC for seq_to_set" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="seq_to_set&#39;vc.0" expl="VC for seq_to_set" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="seq_to_set&#39;vc.0.0" expl="variant decrease" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="66"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="94"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.2" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.020000" steps="90"/></proof>
   </goal>
   <goal name="seq_to_set&#39;vc.0.3" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_to_set&#39;vc.0.3.0" expl="postcondition" proved="true">
    <proof prover="5"><result status="valid" time="0.030000" steps="331"/></proof>
    </goal>
    <goal name="seq_to_set&#39;vc.0.3.1" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(abstract_justification trail s == ix_to_abs trail t)">
     <goal name="seq_to_set&#39;vc.0.3.1.0" expl="asserted formula" proved="true">
     <proof prover="5"><result status="valid" time="0.660000" steps="8586"/></proof>
     </goal>
     <goal name="seq_to_set&#39;vc.0.3.1.1" expl="postcondition" proved="true">
     <proof prover="5"><result status="valid" time="0.020000" steps="40"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_IxToAbsInsert_Impl" proved="true">
 <goal name="ix_to_abs_insert&#39;vc" expl="VC for ix_to_abs_insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="ix_to_abs_insert&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="( ix_to_abs t (insert s x) ==&#39; insert1 (ix_to_abs t s) (index_logic2 t x))">
   <goal name="ix_to_abs_insert&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="5"><result status="valid" time="0.074017" steps="692"/></proof>
   </goal>
   <goal name="ix_to_abs_insert&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.027801" steps="36"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_AbstractJustificationInsert_Impl">
 <goal name="abstract_justification_insert&#39;vc" expl="VC for abstract_justification_insert">
 <proof prover="0"><result status="timeout" time="1.000000" steps="198900"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="141410"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000"/></proof>
 <proof prover="5"><result status="timeout" time="1.000000"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl12_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.006837" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl15_Index" proved="true">
 <goal name="index&#39;vc" expl="VC for index" proved="true">
 <proof prover="5"><result status="valid" time="0.022856" steps="112"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl36_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.008585" steps="41"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.005283" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl32_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.014844" steps="174"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl22_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.008155" steps="21"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl17_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.009679" steps="19"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="5"><result status="valid" time="0.010000" steps="110"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_IsBool" proved="true">
 <goal name="is_bool&#39;vc" expl="VC for is_bool" proved="true">
 <proof prover="5"><result status="valid" time="0.008627" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Restrict">
 <goal name="restrict&#39;vc" expl="VC for restrict">
 <transf name="split_vc" >
  <goal name="restrict&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.031035" steps="34"/></proof>
  </goal>
  <goal name="restrict&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.030952" steps="30"/></proof>
  </goal>
  <goal name="restrict&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.030906" steps="30"/></proof>
  </goal>
  <goal name="restrict&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.040938" steps="79"/></proof>
  </goal>
  <goal name="restrict&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="5"><result status="valid" time="0.032815" steps="33"/></proof>
  </goal>
  <goal name="restrict&#39;vc.5" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.056606" steps="203"/></proof>
  </goal>
  <goal name="restrict&#39;vc.6" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.048116" steps="65"/></proof>
  </goal>
  <goal name="restrict&#39;vc.7" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.052098" steps="65"/></proof>
  </goal>
  <goal name="restrict&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.055716" steps="108"/></proof>
  </goal>
  <goal name="restrict&#39;vc.9" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.054936" steps="107"/></proof>
  </goal>
  <goal name="restrict&#39;vc.10" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.103700" steps="522592"/></proof>
  </goal>
  <goal name="restrict&#39;vc.11" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.123481" steps="612890"/></proof>
  </goal>
  <goal name="restrict&#39;vc.12" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.082053" steps="84"/></proof>
  </goal>
  <goal name="restrict&#39;vc.13" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.120258" steps="414"/></proof>
  </goal>
  <goal name="restrict&#39;vc.14" expl="assertion">
  <proof prover="0"><result status="timeout" time="1.000000" steps="122209"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="127688"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000"/></proof>
  <proof prover="5"><result status="timeout" time="1.000000"/></proof>
  <transf name="inline_goal" >
   <goal name="restrict&#39;vc.14.0" expl="assertion">
   <transf name="split_vc" >
    <goal name="restrict&#39;vc.14.0.0" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.062654" steps="313513"/></proof>
    </goal>
    <goal name="restrict&#39;vc.14.0.1" expl="assertion" proved="true">
    <proof prover="1"><result status="valid" time="0.691468" steps="85045"/></proof>
    <proof prover="3"><result status="valid" time="0.071418" steps="342941"/></proof>
    </goal>
    <goal name="restrict&#39;vc.14.0.2" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.067226" steps="313039"/></proof>
    </goal>
    <goal name="restrict&#39;vc.14.0.3" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.086335" steps="334962"/></proof>
    </goal>
    <goal name="restrict&#39;vc.14.0.4" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.111901" steps="463083"/></proof>
    </goal>
    <goal name="restrict&#39;vc.14.0.5" expl="assertion" proved="true">
    <proof prover="3"><result status="valid" time="0.172361" steps="665366"/></proof>
    </goal>
    <goal name="restrict&#39;vc.14.0.6" expl="assertion">
    <transf name="assert" arg1="(level_log i &lt;= level_log ix)">
     <goal name="restrict&#39;vc.14.0.6.0" expl="asserted formula">
     <proof prover="0"><result status="timeout" time="1.000000" steps="113776"/></proof>
     <proof prover="1"><result status="timeout" time="1.000000" steps="131837"/></proof>
     <proof prover="3"><result status="timeout" time="1.000000"/></proof>
     <proof prover="5"><result status="timeout" time="1.000000"/></proof>
     <transf name="use_th" arg1="seq.FreeMonoid">
      <goal name="restrict&#39;vc.14.0.6.0.0" expl="asserted formula">
      <proof prover="0"><result status="timeout" time="1.000000" steps="122083"/></proof>
      <proof prover="1"><result status="timeout" time="1.000000" steps="152754"/></proof>
      <proof prover="3"><result status="timeout" time="1.000000"/></proof>
      <proof prover="5"><result status="timeout" time="1.000000"/></proof>
      <transf name="assert" arg1="(reason = assignment_reason
  (index_logic1
   (index_logic (trail_assignments ( * self3)) (to_int (trailindex_0 ix)))
   (to_int (trailindex_1 ix))))">
       <goal name="restrict&#39;vc.14.0.6.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.333977" steps="60545"/></proof>
       </goal>
       <goal name="restrict&#39;vc.14.0.6.0.0.1" expl="asserted formula">
       <proof prover="0"><result status="timeout" time="1.000000" steps="123983"/></proof>
       <proof prover="1"><result status="timeout" time="1.000000" steps="152803"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000"/></proof>
       <transf name="assert" arg1="(justified_is_justified ( * self3))">
        <goal name="restrict&#39;vc.14.0.6.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="5"><result status="valid" time="0.093187" steps="159"/></proof>
        </goal>
        <goal name="restrict&#39;vc.14.0.6.0.0.1.1" expl="asserted formula">
        <proof prover="5"><result status="timeout" time="1.000000"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="restrict&#39;vc.14.0.6.1" expl="assertion" proved="true">
     <proof prover="3"><result status="valid" time="0.346977" steps="1480424"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="restrict&#39;vc.14.0.7" expl="assertion">
    <transf name="use_th" arg1="seq.FreeMonoid">
     <goal name="restrict&#39;vc.14.0.7.0" expl="assertion">
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.118442" steps="563971"/></proof>
  </goal>
  <goal name="restrict&#39;vc.16" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="restrict&#39;vc.16.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="restrict&#39;vc.16.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.757813" steps="3620639"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.101203" steps="262"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.093450" steps="135"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.096740" steps="199"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.086817" steps="440517"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.129280" steps="514"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.6" expl="loop invariant preservation" proved="true">
    <proof prover="1"><result status="valid" time="0.802023" steps="106796"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.7" expl="loop invariant preservation" proved="true">
    <proof prover="1"><result status="valid" time="0.833263" steps="108151"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.8" expl="loop invariant preservation" proved="true">
    <proof prover="3"><result status="valid" time="0.232442" steps="1033481"/></proof>
    </goal>
    <goal name="restrict&#39;vc.16.0.9" expl="loop invariant preservation" proved="true">
    <proof prover="5"><result status="valid" time="0.086732" steps="85"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="restrict&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.088144" steps="86"/></proof>
  </goal>
  <goal name="restrict&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.131547" steps="450"/></proof>
  </goal>
  <goal name="restrict&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="5"><result status="valid" time="0.103294" steps="161"/></proof>
  </goal>
  <goal name="restrict&#39;vc.20" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.044455" steps="62"/></proof>
  </goal>
  <goal name="restrict&#39;vc.21" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.039149" steps="45"/></proof>
  </goal>
  <goal name="restrict&#39;vc.22" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.040363" steps="46"/></proof>
  </goal>
  <goal name="restrict&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.046728" steps="67"/></proof>
  </goal>
  <goal name="restrict&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.049549" steps="80"/></proof>
  </goal>
  <goal name="restrict&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.072082" steps="331"/></proof>
  </goal>
  <goal name="restrict&#39;vc.26" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.071531" steps="319"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_Negate" proved="true">
 <goal name="negate&#39;vc" expl="VC for negate" proved="true">
 <proof prover="5"><result status="valid" time="0.010000" steps="257"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_LemmaAbsJust_Impl" proved="true">
 <goal name="lemma_abs_just&#39;vc" expl="VC for lemma_abs_just" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_abs_just&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.023888" steps="78"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.019067" steps="24"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.894940" steps="124466"/></proof>
  </goal>
  <goal name="lemma_abs_just&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.052915" steps="471"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_AddJustified">
 <goal name="add_justified&#39;vc" expl="VC for add_justified">
 <transf name="split_vc" >
  <goal name="add_justified&#39;vc.0" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.030919" steps="36"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.1" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.035479" steps="58"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.2" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.040855" steps="119"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.3" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.037183" steps="66"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.4" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.037692" steps="52"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.5" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.045523" steps="86"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.6" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.101006" steps="842"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.7" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.072307" steps="447"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.8" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.045128" steps="82"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.9" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.039544" steps="65"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.10" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.045271" steps="87"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.11" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.047701" steps="81"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.12" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.528571" steps="80372"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.13" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.075874" steps="353"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.14" expl="assertion">
  <proof prover="0"><result status="timeout" time="1.000000" steps="141393"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="109025"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000"/></proof>
  <proof prover="5"><result status="timeout" time="1.000000"/></proof>
  <transf name="split_vc" >
   <goal name="add_justified&#39;vc.14.0" expl="assertion">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="399609"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <transf name="inline_goal" >
    <goal name="add_justified&#39;vc.14.0.0" expl="assertion">
    <transf name="split_all_full" >
     <goal name="add_justified&#39;vc.14.0.0.0" expl="assertion">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="810644"/></proof>
     <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
     <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.15" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.083829" steps="401"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.820690" steps="127015"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.17" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.350474" steps="3408"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.18" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.320325" steps="2811"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.19" expl="assertion" proved="true">
  <proof prover="5"><result status="valid" time="0.314626" steps="2923"/></proof>
  </goal>
  <goal name="add_justified&#39;vc.20" expl="postcondition">
  <proof prover="0"><result status="timeout" time="1.000000" steps="145197"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="111222"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000"/></proof>
  <proof prover="5"><result status="timeout" time="1.000000"/></proof>
  <transf name="split_vc" >
   <goal name="add_justified&#39;vc.20.0" expl="postcondition">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="403229"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <transf name="inline_goal" >
    <goal name="add_justified&#39;vc.20.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="add_justified&#39;vc.20.0.0.0" expl="VC for add_justified">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="306063"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
     <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
     <transf name="inline_goal" >
      <goal name="add_justified&#39;vc.20.0.0.0.0" expl="VC for add_justified">
      <transf name="split_all_full" >
       <goal name="add_justified&#39;vc.20.0.0.0.0.0" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.0.0.0.0" expl="VC for add_justified" proved="true">
        <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="3.906827" steps="262854"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.0.0.1" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.0.0.1.0" expl="VC for add_justified" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="add_justified&#39;vc.20.0.0.0.0.1.0.0" expl="VC for add_justified" proved="true">
         <proof prover="5" timelimit="10" memlimit="4000"><result status="valid" time="7.543456" steps="79783"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.0.0.2" expl="VC for add_justified">
       <proof prover="1"><result status="timeout" time="1.000000" steps="131857"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000"/></proof>
       <transf name="split_vc" >
        <goal name="add_justified&#39;vc.20.0.0.0.0.2.0" expl="VC for add_justified">
        <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="411087"/></proof>
        <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
        <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
        <transf name="inline_goal" >
         <goal name="add_justified&#39;vc.20.0.0.0.0.2.0.0" expl="VC for add_justified">
         <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="679950"/></proof>
         <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
         <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.1" expl="VC for add_justified" proved="true">
     <proof prover="5"><result status="valid" time="0.101126" steps="504"/></proof>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.2" expl="VC for add_justified" proved="true">
     <proof prover="5"><result status="valid" time="0.075404" steps="179"/></proof>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.3" expl="VC for add_justified" proved="true">
     <proof prover="5"><result status="valid" time="0.105882" steps="519"/></proof>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.4" expl="VC for add_justified" proved="true">
     <proof prover="5"><result status="valid" time="0.106365" steps="532"/></proof>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.5" expl="VC for add_justified" proved="true">
     <proof prover="5"><result status="valid" time="0.596560" steps="6481"/></proof>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.6" expl="VC for add_justified" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="add_justified&#39;vc.20.0.0.6.0" expl="VC for add_justified" proved="true">
      <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.221157" steps="217263"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.7" expl="VC for add_justified" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="add_justified&#39;vc.20.0.0.7.0" expl="VC for add_justified" proved="true">
      <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.982191" steps="117871"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.8" expl="VC for add_justified" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="add_justified&#39;vc.20.0.0.8.0" expl="VC for add_justified" proved="true">
      <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="2.252083" steps="208945"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="add_justified&#39;vc.20.0.0.9" expl="VC for add_justified">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="1477918"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
     <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
     <transf name="inline_goal" >
      <goal name="add_justified&#39;vc.20.0.0.9.0" expl="VC for add_justified">
      <transf name="split_all_full" >
       <goal name="add_justified&#39;vc.20.0.0.9.0.0" expl="VC for add_justified">
       <proof prover="1"><result status="timeout" time="1.000000" steps="117422"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000"/></proof>
       <transf name="split_vc" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.0.0" expl="VC for add_justified">
        <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="412304"/></proof>
        <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
        <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
        <transf name="inline_goal" >
         <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0" expl="VC for add_justified">
         <transf name="split_all_full" >
          <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0.0" expl="VC for add_justified">
          <proof prover="1"><result status="timeout" time="1.000000" steps="137678"/></proof>
          <proof prover="3"><result status="timeout" time="1.000000"/></proof>
          <proof prover="5"><result status="timeout" time="1.000000"/></proof>
          <transf name="split_vc" >
           <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0.0.0" expl="VC for add_justified">
           <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="1010523"/></proof>
           <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
           <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0.1" expl="VC for add_justified" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0.1.0" expl="VC for add_justified" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0.1.0.0" expl="VC for add_justified" proved="true">
            <proof prover="5" timelimit="10" memlimit="4000"><result status="valid" time="6.531597" steps="68683"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="add_justified&#39;vc.20.0.0.9.0.0.0.0.2" expl="VC for add_justified" proved="true">
          <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="1.372807" steps="15159"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.1" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.1.0" expl="VC for add_justified" proved="true">
        <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.352709" steps="153825"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.2" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.2.0" expl="VC for add_justified" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0" expl="VC for add_justified" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0.0" expl="VC for add_justified" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0.0.0" expl="VC for add_justified" proved="true">
           <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="8.116693" steps="586692"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0.1" expl="VC for add_justified" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0.1.0" expl="VC for add_justified" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0.1.0.0" expl="VC for add_justified" proved="true">
            <proof prover="5" timelimit="10" memlimit="4000"><result status="valid" time="8.792988" steps="90705"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="add_justified&#39;vc.20.0.0.9.0.2.0.0.2" expl="VC for add_justified" proved="true">
          <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="1.293450" steps="13776"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.3" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.3.0" expl="VC for add_justified" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="add_justified&#39;vc.20.0.0.9.0.3.0.0" expl="VC for add_justified" proved="true">
         <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="8.377825" steps="613385"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.4" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.4.0" expl="VC for add_justified" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0" expl="VC for add_justified" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0.0" expl="VC for add_justified" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0.0.0" expl="VC for add_justified" proved="true">
           <proof prover="5" timelimit="10" memlimit="4000"><result status="valid" time="7.725123" steps="83662"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0.1" expl="VC for add_justified" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0.1.0" expl="VC for add_justified" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0.1.0.0" expl="VC for add_justified" proved="true">
            <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="8.148450" steps="607852"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="add_justified&#39;vc.20.0.0.9.0.4.0.0.2" expl="VC for add_justified" proved="true">
          <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="2.732152" steps="29450"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.5" expl="VC for add_justified">
       <proof prover="1"><result status="timeout" time="1.000000" steps="116128"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000"/></proof>
       <transf name="split_vc" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.5.0" expl="VC for add_justified">
        <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="458999"/></proof>
        <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
        <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
        <transf name="inline_goal" >
         <goal name="add_justified&#39;vc.20.0.0.9.0.5.0.0" expl="VC for add_justified">
         <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="563054"/></proof>
         <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
         <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.6" expl="VC for add_justified" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.6.0" expl="VC for add_justified" proved="true">
        <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.607600" steps="188562"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="add_justified&#39;vc.20.0.0.9.0.7" expl="VC for add_justified">
       <proof prover="1"><result status="timeout" time="1.000000" steps="119082"/></proof>
       <proof prover="3"><result status="timeout" time="1.000000"/></proof>
       <proof prover="5"><result status="timeout" time="1.000000"/></proof>
       <transf name="split_vc" >
        <goal name="add_justified&#39;vc.20.0.0.9.0.7.0" expl="VC for add_justified">
        <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="632055"/></proof>
        <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
        <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add_justified&#39;vc.21" expl="postcondition">
  <proof prover="0"><result status="timeout" time="1.000000" steps="151884"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="119152"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000"/></proof>
  <proof prover="5"><result status="timeout" time="1.000000"/></proof>
  <transf name="split_vc" >
   <goal name="add_justified&#39;vc.21.0" expl="postcondition">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="328468"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
   <transf name="inline_goal" >
    <goal name="add_justified&#39;vc.21.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="add_justified&#39;vc.21.0.0.0" expl="postcondition">
     <proof prover="1"><result status="timeout" time="1.000000" steps="126408"/></proof>
     <proof prover="3"><result status="timeout" time="1.000000"/></proof>
     <proof prover="5"><result status="timeout" time="1.000000"/></proof>
     <transf name="split_vc" >
      <goal name="add_justified&#39;vc.21.0.0.0.0" expl="postcondition">
      <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="433375"/></proof>
      <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
      <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000"/></proof>
      <transf name="inline_goal" >
       <goal name="add_justified&#39;vc.21.0.0.0.0.0" expl="postcondition">
       <proof prover="1" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000" steps="701477"/></proof>
       <proof prover="3" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
       <proof prover="5" timelimit="10" memlimit="4000"><result status="timeout" time="10.000000"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_IsFirstOrder" proved="true">
 <goal name="is_first_order&#39;vc" expl="VC for is_first_order" proved="true">
 <proof prover="5"><result status="valid" time="0.009008" steps="8"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl23_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.020164" steps="273"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_IsDecision" proved="true">
 <goal name="is_decision&#39;vc" expl="VC for is_decision" proved="true">
 <proof prover="5"><result status="valid" time="0.015246" steps="63"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Justification" proved="true">
 <goal name="justification&#39;vc" expl="VC for justification" proved="true">
 <proof prover="3"><result status="valid" time="0.237413" steps="784921"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl37_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.057015" steps="1005"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl28_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.007285" steps="19"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl33_Eq">
 <goal name="eq&#39;vc" expl="VC for eq">
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.017367" steps="93"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl6_Bool" proved="true">
 <goal name="bool&#39;vc" expl="VC for bool" proved="true">
 <proof prover="5"><result status="valid" time="0.010000" steps="44"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl41_Eq" proved="true">
 <goal name="eq&#39;vc" expl="VC for eq" proved="true">
 <proof prover="5"><result status="valid" time="0.009903" steps="49"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl44_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="5"><result status="valid" time="0.007780" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8_Cmp" proved="true">
 <goal name="cmp&#39;vc" expl="VC for cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.040178" steps="521"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl7_PartialCmp" proved="true">
 <goal name="partial_cmp&#39;vc" expl="VC for partial_cmp" proved="true">
 <proof prover="5"><result status="valid" time="0.010381" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_Len" proved="true">
 <goal name="len&#39;vc" expl="VC for len" proved="true">
 <proof prover="5"><result status="valid" time="0.014335" steps="14"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_AbsJustCons_Impl">
 <goal name="abs_just_cons&#39;vc" expl="VC for abs_just_cons">
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_AbsJustSnoc_Impl" proved="true">
 <goal name="abs_just_snoc&#39;vc" expl="VC for abs_just_snoc" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="abs_just_snoc&#39;vc.0" expl="VC for abs_just_snoc" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="abs_just_snoc&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.213148" steps="39220"/></proof>
   <proof prover="1"><result status="valid" time="0.184196" steps="29941"/></proof>
   <proof prover="3"><result status="valid" time="0.029602" steps="123793"/></proof>
   <proof prover="5"><result status="valid" time="0.022348" steps="77"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.054370" steps="642"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.2" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.237005" steps="43217"/></proof>
   <proof prover="1"><result status="valid" time="0.233712" steps="35352"/></proof>
   <proof prover="3"><result status="valid" time="0.030474" steps="129499"/></proof>
   <proof prover="5"><result status="valid" time="0.024345" steps="106"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.162217" steps="33905"/></proof>
   <proof prover="1"><result status="valid" time="0.086098" steps="20601"/></proof>
   <proof prover="3"><result status="valid" time="0.013093" steps="10759"/></proof>
   <proof prover="5"><result status="valid" time="0.017787" steps="20"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.252947" steps="43892"/></proof>
   <proof prover="1"><result status="valid" time="0.255917" steps="36754"/></proof>
   <proof prover="3"><result status="valid" time="0.056673" steps="170289"/></proof>
   <proof prover="5"><result status="valid" time="0.069964" steps="698"/></proof>
   </goal>
   <goal name="abs_just_snoc&#39;vc.0.5" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall i j s. insert (insert s j) i = insert (insert s i) j)">
    <goal name="abs_just_snoc&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <transf name="assert" proved="true" arg1="(forall i j s. insert (insert s j) i == insert (insert s i) j)">
     <goal name="abs_just_snoc&#39;vc.0.5.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.527757" steps="83368"/></proof>
     <proof prover="1"><result status="valid" time="0.683348" steps="84046"/></proof>
     <proof prover="5"><result status="valid" time="0.030003" steps="126"/></proof>
     </goal>
     <goal name="abs_just_snoc&#39;vc.0.5.0.1" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.252713" steps="45557"/></proof>
     <proof prover="1"><result status="valid" time="0.254744" steps="37787"/></proof>
     <proof prover="3"><result status="valid" time="0.029803" steps="126976"/></proof>
     <proof prover="5"><result status="valid" time="0.024469" steps="64"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="abs_just_snoc&#39;vc.0.5.1" expl="postcondition" proved="true">
    <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="4.615733" steps="62120"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl13_IndexOf">
 <goal name="index_of&#39;vc" expl="VC for index_of">
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_Level" proved="true">
 <goal name="level&#39;vc" expl="VC for level" proved="true">
 <proof prover="5"><result status="valid" time="0.011197" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_IsJustified" proved="true">
 <goal name="is_justified&#39;vc" expl="VC for is_justified" proved="true">
 <proof prover="5"><result status="valid" time="0.012332" steps="46"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_IsInput" proved="true">
 <goal name="is_input&#39;vc" expl="VC for is_input" proved="true">
 <proof prover="5"><result status="valid" time="0.013395" steps="63"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_Value" proved="true">
 <goal name="value&#39;vc" expl="VC for value" proved="true">
 <proof prover="5"><result status="valid" time="0.008722" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl16_Term" proved="true">
 <goal name="term&#39;vc" expl="VC for term" proved="true">
 <proof prover="5"><result status="valid" time="0.011626" steps="10"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl17" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.008335" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl22" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.008129" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl27" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006973" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl32" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007992" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl36" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.008399" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl44" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.008335" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl18" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.011748" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl23" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.009759" steps="7"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl28" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.005672" steps="0"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl33" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.013594" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl37" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007246" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl41" proved="true">
 <goal name="eq_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007456" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl7" proved="true">
 <goal name="partial_cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.000000" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl8" proved="true">
 <goal name="cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006898" steps="2"/></proof>
 </goal>
</theory>
<theory name="Cdsat_Trail_Impl9" proved="true">
 <goal name="cmp_le_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006889" steps="2"/></proof>
 </goal>
 <goal name="cmp_ge_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006953" steps="2"/></proof>
 </goal>
 <goal name="cmp_gt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007079" steps="2"/></proof>
 </goal>
 <goal name="trans_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007592" steps="2"/></proof>
 </goal>
 <goal name="antisym2_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007537" steps="2"/></proof>
 </goal>
 <goal name="cmp_lt_log_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007702" steps="2"/></proof>
 </goal>
 <goal name="eq_cmp_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.007014" steps="2"/></proof>
 </goal>
 <goal name="refl_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006957" steps="2"/></proof>
 </goal>
 <goal name="antisym1_refn" proved="true">
 <proof prover="5"><result status="valid" time="0.006816" steps="2"/></proof>
 </goal>
</theory>
</file>
</why3session>
