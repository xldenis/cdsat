
module Cdsat_Concrete_BoolTheory_Type
  type t_booltheory  =
    | C_BoolTheory
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  type t_solver  =
    | C_Solver (Cdsat_Concrete_BoolTheory_Type.t_booltheory)
    
  let function solver_bool_th (self : t_solver) : Cdsat_Concrete_BoolTheory_Type.t_booltheory
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver a -> a
      end
end
module Cdsat_Concrete_Impl0_New_Interface
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 26 4 26 24] (_1' : ()) : Cdsat_Concrete_Solver_Type.t_solver
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Cdsat_Trail_Sort_Type
  type t_sort  =
    | C_Boolean
    | C_Rational
    
end
module Cdsat_Trail_Value_Type
  use prelude.Int
  use prelude.UInt64
  type t_value  =
    | C_Bool bool
    | C_Rat uint64
    
  let function rat_0 (self : t_value) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool _ -> any uint64
      | C_Rat a -> a
      end
  let function bool_0 (self : t_value) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool a -> a
      | C_Rat _ -> any bool
      end
end
module Cdsat_Trail_Term_Type
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  type t_term  =
    | C_Variable usize (Cdsat_Trail_Sort_Type.t_sort)
    | C_Value (Cdsat_Trail_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    | C_Neg (t_term)
    | C_Disj (t_term) (t_term)
    | C_Impl (t_term) (t_term)
    
  let function impl_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl a _ -> a
      end
  let function impl_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ a -> a
      end
  let function disj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj a _ -> a
      | C_Impl _ _ -> any t_term
      end
  let function disj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ a -> a
      | C_Impl _ _ -> any t_term
      end
  let function neg_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg a -> a
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj a _ -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ a -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq a _ -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ a -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function plus_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus a _ -> a
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function plus_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ a -> a
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function value_0 (self : t_term) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Value a -> a
      | C_Plus _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Eq _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Conj _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Neg _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Disj _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Impl _ _ -> any Cdsat_Trail_Value_Type.t_value
      end
  let function variable_0 (self : t_term) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable a _ -> a
      | C_Value _ -> any usize
      | C_Plus _ _ -> any usize
      | C_Eq _ _ -> any usize
      | C_Conj _ _ -> any usize
      | C_Neg _ -> any usize
      | C_Disj _ _ -> any usize
      | C_Impl _ _ -> any usize
      end
  let function variable_1 (self : t_term) : Cdsat_Trail_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ a -> a
      | C_Value _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Plus _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Eq _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Conj _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Neg _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Disj _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Impl _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      end
end
module Cdsat_Trail_TrailIndex_Type
  use prelude.Int
  use prelude.UIntSize
  type t_trailindex  =
    | C_TrailIndex usize usize
    
  let function trailindex_0 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex a _ -> a
      end
  let function trailindex_1 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex _ a -> a
      end
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_reason  =
    | C_Justified (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision
    | C_Input
    
  let function justified_0 (self : t_reason) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Justified a -> a
      | C_Decision -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Input -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module Cdsat_Trail_Assignment_Type
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  type t_assignment  =
    | C_Assignment (Cdsat_Trail_Term_Type.t_term) (Cdsat_Trail_Value_Type.t_value) (Cdsat_Trail_Reason_Type.t_reason) usize
    
  let function assignment_term (self : t_assignment) : Cdsat_Trail_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment a _ _ _ -> a
      end
  let function assignment_val (self : t_assignment) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ a _ _ -> a
      end
  let function assignment_reason (self : t_assignment) : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ a _ -> a
      end
  let function assignment_level (self : t_assignment) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type t_sort  =
    | C_Rational
    | C_Boolean
    
end
module Cdsat_Theory_Var_Type
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  type t_var  =
    | C_Var int (Cdsat_Theory_Sort_Type.t_sort)
    
  let function var_1 (self : t_var) : Cdsat_Theory_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Var _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use prelude.Int
  type t_value  =
    | C_Bool bool
    | C_Rat int
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_term  =
    | C_Variable (Cdsat_Theory_Var_Type.t_var)
    | C_Value (Cdsat_Theory_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assign  =
    | C_Decision (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Justified (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Input (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Trail_Type
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  type t_trail  =
    | C_Empty
    | C_Assign (Cdsat_Theory_Assign_Type.t_assign) int (t_trail)
    
end
module Cdsat_Trail_Trail_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_trail  =
    | C_Trail (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) usize (Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail))
    
  let function trail_assignments (self : t_trail) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail a _ _ -> a
      end
  let function trail_ghost (self : t_trail) : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ _ a -> a
      end
  let function trail_level (self : t_trail) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ a _ -> a
      end
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/.rustup/toolchains/nightly-2023-05-26-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27] (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module Cdsat_Trail_Impl11_Contains_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 350 4 350 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl11_Contains_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 350 4 350 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl11_Contains
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 350 4 350 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 352 12 352 92] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix) < Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) /\ UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) < Seq.length (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix))))
  val contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 350 4 350 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { result = contains self ix }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/num.rs" 20 16 20 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl29_DeepModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 31 55 40] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl29_DeepModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 31 55 40] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl29_DeepModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 31 55 40] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 31 55 40] match (self) with
      | Cdsat_Trail_Sort_Type.C_Boolean -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Trail_Sort_Type.C_Rational -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 31 55 40] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl4_DeepModel
  function deep_model (self : bool) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 63 8 63 12] self
  val deep_model (self : bool) : bool
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl10_DeepModel_Stub
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Std1_Num_Impl10_DeepModel_Interface
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Std1_Num_Impl10_DeepModel
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/num.rs" 20 16 20 35] UInt64.to_int self
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl38_DeepModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 31 126 40] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl38_DeepModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 31 126 40] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl38_DeepModel
  clone CreusotContracts_Std1_Num_Impl10_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 31 126 40] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 31 126 40] match (self) with
      | Cdsat_Trail_Value_Type.C_Bool v0_1 -> Cdsat_Theory_Value_Type.C_Bool (DeepModel0.deep_model v0_1)
      | Cdsat_Trail_Value_Type.C_Rat v0_1 -> Cdsat_Theory_Value_Type.C_Rat (DeepModel1.deep_model v0_1)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 31 126 40] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl4_DeepModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 4 101 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl4_DeepModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 4 101 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl4_DeepModel
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel_Stub as DeepModel2
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl29_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 4 101 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 8 120 9] match (self) with
      | Cdsat_Trail_Term_Type.C_Variable v s -> Cdsat_Theory_Term_Type.C_Variable (Cdsat_Theory_Var_Type.C_Var (DeepModel0.deep_model v) (DeepModel1.deep_model s))
      | Cdsat_Trail_Term_Type.C_Value v -> Cdsat_Theory_Term_Type.C_Value (DeepModel2.deep_model v)
      | Cdsat_Trail_Term_Type.C_Plus l r -> Cdsat_Theory_Term_Type.C_Plus (deep_model l) (deep_model r)
      | Cdsat_Trail_Term_Type.C_Eq l r -> Cdsat_Theory_Term_Type.C_Eq (deep_model l) (deep_model r)
      | Cdsat_Trail_Term_Type.C_Conj l r -> Cdsat_Theory_Term_Type.C_Conj (deep_model l) (deep_model r)
      | _ -> Cdsat_Theory_Term_Type.C_Value (Cdsat_Theory_Value_Type.C_Bool true)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 4 101 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl3_ShallowModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl3_ShallowModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl3_ShallowModel
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 8 92 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl5_ShallowModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 138 4 138 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl5_ShallowModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 138 4 138 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl5_ShallowModel
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 138 4 138 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 139 8 139 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 138 4 138 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl14_TermValue_Stub
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 668 4 668 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl14_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 668 4 668 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl14_TermValue
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 668 4 668 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 669 8 669 61] (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term self), ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self))
  val term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 668 4 668 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = term_value self }
    
end
module Cdsat_Trail_Impl11_IndexLogic_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 603 4 603 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl11_IndexLogic_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 603 4 603 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl11_IndexLogic
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl14_TermValue_Stub as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 603 4 603 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 604 8 606 9] TermValue0.term_value (Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)))
  val index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 603 4 603 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = index_logic self ix }
    
end
module Cdsat_Theory_Impl1_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 52 8 55 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Value_Type.C_Rat _ -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl0_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 8 21 9] match (self) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Cdsat_Theory_Var_Type.var_1 v
      | Cdsat_Theory_Term_Type.C_Value v -> Sort1.sort v
      | Cdsat_Theory_Term_Type.C_Plus _ _ -> Cdsat_Theory_Sort_Type.C_Rational
      | Cdsat_Theory_Term_Type.C_Eq _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Conj _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl2_Invariant_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign)
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign)
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 83 8 87 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.C_Justified _ t v -> Sort0.sort t = Sort1.sort v /\ Sort0.sort t = Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Assign_Type.C_Input t v -> Sort0.sort t = Sort1.sort v
      end
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_InvariantAssign_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantAssign
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Stub as Invariant0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 264 8 267 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
  val invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_assign self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Cdsat_Theory_Impl2_ToPair_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 92 8 96 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Input t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Justified _ t val' -> (t, val')
      end
  val to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = to_pair self }
    
end
module Cdsat_Theory_Impl4_Len_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl4_Len_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 487 14 487 25] len self >= 0
end
module Cdsat_Theory_Impl4_Len
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 489 8 492 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> len tl + 1
      end
  val len [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { result = len self }
    
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 487 14 487 25] len self >= 0
end
module Cdsat_Theory_Impl4_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 477 4 477 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl4_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 477 4 477 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 475 14 475 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 25] level self >= 0)
end
module Cdsat_Theory_Impl4_Level
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 477 4 477 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 478 8 482 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> level tl
      end
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 477 4 477 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { result = level self }
    
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 475 14 475 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 25] level self >= 0)
end
module Cdsat_Theory_Impl4_InvariantNonneg_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantNonneg
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 256 8 259 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
  val invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_nonneg self }
    
end
module Cdsat_Theory_Impl4_Find_Stub
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
end
module Cdsat_Theory_Impl4_Find_Interface
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 366 4 366 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 365 4 365 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 361 14 364 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Find
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 368 8 377 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Core_Option_Option_Type.C_None
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.C_Some (a, l)
      else
        find tl d
      
      end
  val find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { result = find self d }
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 366 4 366 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 365 4 365 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 361 14 364 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Contains_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_Contains_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 333 4 333 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_Contains
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 8 338 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some ix -> true
      | Core_Option_Option_Type.C_None -> false
      end
  val contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = contains self d }
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 333 4 333 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_LevelOf_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl4_LevelOf_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 324 14 324 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Theory_Impl4_LevelOf
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 326 8 329 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (_, l) -> l
      | Core_Option_Option_Type.C_None -> 0
      end
  val level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self}
    ensures { result = level_of self d }
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 324 14 324 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Trail_Impl10_LevelLog_Stub
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
end
module Cdsat_Trail_Impl10_LevelLog_Interface
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
end
module Cdsat_Trail_Impl10_LevelLog
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 252 4 252 12] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 self)
  val level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    ensures { result = level_log self }
    
end
module Cdsat_Trail_Impl11_AbstractRelation_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 341 4 341 38] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl11_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 341 4 341 38] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl11_AbstractRelation
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl10_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 341 4 341 38] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 343 12 345 160] (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ LevelLog0.level_log ix = LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a /\ IndexLogic0.index_logic self ix = a))
  val abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 341 4 341 38] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = abstract_relation self }
    
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_model  =
    | C_Model (Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value))
    
  let function model_0 (self : t_model) : Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Model a -> a
      end
end
module Cdsat_Theory_Impl3_Invariant_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model)
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model)
end
module Cdsat_Theory_Impl3_Invariant
  use map.Map
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 116 8 118 9] forall v : Cdsat_Theory_Value_Type.t_value . forall k : Cdsat_Theory_Var_Type.t_var . Map.get (Cdsat_Theory_Model_Type.model_0 self) k = v -> Cdsat_Theory_Var_Type.var_1 k = Sort0.sort v
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Stub
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 15 8 15 26] Fset.mem e self
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Cdsat_Theory_Impl3_Interp_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl3_Interp_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Interp
  use map.Map
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 124 8 136 9] match (t) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Map.get (Cdsat_Theory_Model_Type.model_0 self) v
      | Cdsat_Theory_Term_Type.C_Value v -> v
      | Cdsat_Theory_Term_Type.C_Plus l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Rat r1, Cdsat_Theory_Value_Type.C_Rat r2) -> Cdsat_Theory_Value_Type.C_Rat (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.C_Rat (- 1)
        end
      | Cdsat_Theory_Term_Type.C_Conj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Eq l r -> Cdsat_Theory_Value_Type.C_Bool (interp self l = interp self r)
      end
  val interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    ensures { result = interp self t }
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Satisfies_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Satisfies_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Satisfies
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Stub as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 8 141 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
  val satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfies self v }
    
end
module Cdsat_Theory_Impl3_SatisfySet_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 146 8 146 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains v a -> Satisfies0.satisfies self a
  val satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfy_set self v }
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 101 8 106 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Justified just t val' -> forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
  val justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = justified_sound self }
    
end
module Cdsat_Theory_Impl4_Sound_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Sound_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Sound
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 189 8 192 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sound self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Stub
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 45 8 45 26] Fset.remove a self
  val remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
    ensures { result = remove self a }
    
end
module Cdsat_Theory_Impl4_SetLevel_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl4_SetLevel_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 210 14 210 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 209 14 209 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 208 4 208 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 207 4 207 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_SetLevel
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self}
    ensures { result = set_level self s }
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 204 4 204 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 210 14 210 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 209 14 209 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 208 4 208 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 207 4 207 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_InvariantLevel_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantLevel
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 241 8 251 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Input _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.C_Decision _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> SetLevel0.set_level tl j = l
        end
      end
  val invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_level self }
    
end
module Cdsat_Theory_Impl4_InvariantContains_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantContains
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 272 8 285 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
  val invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_contains self }
    
end
module Cdsat_Theory_Impl1_IsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value)
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value)
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 47 8 47 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_Negate_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 62 8 65 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
      | _ -> self
      end
  val negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self}
    ensures { result = negate self }
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl4_TrailUnique_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_TrailUnique
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 290 8 302 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
  val trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = trail_unique self }
    
end
module Cdsat_Theory_Impl4_Invariant_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Invariant_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Invariant
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  clone Cdsat_Theory_Impl4_InvariantContains_Stub as InvariantContains0
  clone Cdsat_Theory_Impl4_InvariantLevel_Stub as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 307 8 311 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_IsJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsJustified
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 397 8 400 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified _ _ _, _) -> true
      | _ -> false
      end
  val is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_justified self d }
    
end
module Cdsat_Theory_Impl3_Entails_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Entails_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Entails
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 151 8 151 84] Invariant0.invariant' self -> SatisfySet0.satisfy_set self j -> Satisfies0.satisfies self c
  val entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = entails self j c }
    
end
module Cdsat_Theory_Impl4_IsInput_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsInput_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsInput
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 413 8 416 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Input _ _, _) -> true
      | _ -> false
      end
  val is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_input self d }
    
end
module Cdsat_Theory_Impl4_IsDecision_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsDecision_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsDecision
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 405 8 408 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Decision _ _, _) -> true
      | _ -> false
      end
  val is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_decision self d }
    
end
module Cdsat_Theory_Impl4_FindJustified_Stub
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_FindJustified_Interface
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 496 15 496 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 497 15 497 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_FindJustified
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 500 8 509 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else find_justified tl kv
      end
  val find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 496 15 496 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 497 15 497 32] Contains0.contains self kv}
    ensures { result = find_justified self kv }
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 496 15 496 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 497 15 497 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_Justification_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 385 4 385 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl4_Justification
  use set.Fset
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_FindJustified_Stub as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 388 8 388 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified j _ _, _) -> j
      | _ -> Fset.empty 
      end
  val justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self}
    ensures { result = justification self d }
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 385 4 385 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (justification self d) d)
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Stub
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains
  type t
  use seq.Seq
  use prelude.Int
  predicate contains (self : Seq.seq t) (e : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/seq.rs" 108 8 108 78] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 27 8 27 26] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module Cdsat_Trail_Impl11_AbstractJustification_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 378 4 381 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl11_AbstractJustification_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 378 4 381 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 373 4 373 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 377 4 377 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 376 4 376 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 375 4 375 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 374 14 374 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl11_AbstractJustification
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use seq_ext.SeqExt
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 378 4 381 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 378 4 381 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 373 4 373 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { result = abstract_justification self just }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 371 4 371 12] if Seq.length just > 0 then
    let set = abstract_justification self (SeqExt.subsequence just 1 (Seq.length just)) in let ix = Seq.get just 0 in let a = IndexLogic0.index_logic self ix in Insert0.insert set a
  else
    Fset.empty 
  )
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 373 4 373 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 377 4 377 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 376 4 376 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 375 4 375 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 374 14 374 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 16 8 16 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Cdsat_Trail_Impl11_JustifiedIsJustified_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 327 4 327 43] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl11_JustifiedIsJustified_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 327 4 327 43] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl11_JustifiedIsJustified
  use prelude.Ghost
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type s = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 327 4 327 43] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 8 337 9] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> match (Cdsat_Trail_Assignment_Type.assignment_reason (IndexLogic1.index_logic (Seq.get (ShallowModel1.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)))) with
      | Cdsat_Trail_Reason_Type.C_Justified j -> IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) /\ Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model j) /\ (forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model j) i -> Contains0.contains self i)
      | Cdsat_Trail_Reason_Type.C_Decision -> IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)
      | Cdsat_Trail_Reason_Type.C_Input -> IsInput0.is_input (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)
      end
  val justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 327 4 327 43] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = justified_is_justified self }
    
end
module Cdsat_Trail_Impl11_Invariant_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 315 4 315 34] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl11_Invariant_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 315 4 315 34] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl11_Invariant
  use prelude.Ghost
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_JustifiedIsJustified_Stub as JustifiedIsJustified0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Trail_Impl11_AbstractRelation_Stub as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 315 4 315 34] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 316 8 323 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Invariant0.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) /\ UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) - 1 /\ (forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self i -> Contains0.contains self j -> i <> j -> IndexLogic0.index_logic self i <> IndexLogic0.index_logic self j) /\ JustifiedIsJustified0.justified_is_justified self
  val invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 315 4 315 34] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_SatisfiedBy_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 531 4 531 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 531 4 531 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 531 4 531 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 532 8 532 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Satisfies0.satisfies m a
  val satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 531 4 531 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = satisfied_by self m }
    
end
module Cdsat_Theory_Impl4_CountBounds_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
end
module Cdsat_Theory_Impl4_CountBounds_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 590 4 590 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_CountBounds
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 592 8 597 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Input _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified _ _ _) _ tl -> count_bounds tl
      end
  val count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 31] Invariant0.invariant' self}
    ensures { result = count_bounds self }
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 590 4 590 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_Restrict_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 440 4 440 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
end
module Cdsat_Theory_Impl4_Restrict_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 440 4 440 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 15 429 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 431 15 431 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 439 14 439 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 438 4 438 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 437 4 437 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 436 4 436 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 435 4 435 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 434 4 434 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 433 4 433 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 430 14 430 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Restrict
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 440 4 440 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 441 8 452 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Cdsat_Theory_Trail_Type.C_Empty
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.C_Assign a l tl
      else
        tl
      
      end
  val restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 440 4 440 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 429 15 429 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 431 15 431 25] level >= 0}
    ensures { result = restrict self level }
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 15 429 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 431 15 431 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 439 14 439 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 438 4 438 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 437 4 437 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 436 4 436 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 435 4 435 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 434 4 434 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 433 4 433 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 430 14 430 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Unsat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 30] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Unsat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 30] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Unsat
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 30] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 8 538 100] forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
  val unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl4_Impls_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 548 4 548 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Impls_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 548 4 548 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 55] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Theory_Impl4_Impls
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 548 4 548 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 549 8 549 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  val impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 548 4 548 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = impls self rhs }
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 55] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Concrete_Answer_Type
  type t_answer  =
    | C_Sat
    | C_Unsat
    | C_Unknown
    
end
module Cdsat_Trail_Impl11_Unsat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 305 4 305 30] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl11_Unsat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 305 4 305 30] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl11_Unsat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 305 4 305 30] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 16] Unsat0.unsat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 305 4 305 30] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  type t_theorystate  =
    | C_Sat
    | C_Decision (Cdsat_Trail_Term_Type.t_term) (Cdsat_Trail_Value_Type.t_value)
    | C_Unknown
    
  let function decision_0 (self : t_theorystate) : Cdsat_Trail_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Trail_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Unknown -> any Cdsat_Trail_Term_Type.t_term
      end
  let function decision_1 (self : t_theorystate) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Trail_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Unknown -> any Cdsat_Trail_Value_Type.t_value
      end
end
module Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_extendresult  =
    | C_Conflict (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision (Cdsat_Trail_Term_Type.t_term) (Cdsat_Trail_Value_Type.t_value)
    | C_Satisfied
    
  let function decision_0 (self : t_extendresult) : Cdsat_Trail_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Trail_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Satisfied -> any Cdsat_Trail_Term_Type.t_term
      end
  let function decision_1 (self : t_extendresult) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Satisfied -> any Cdsat_Trail_Value_Type.t_value
      end
  let function conflict_0 (self : t_extendresult) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a -> a
      | C_Decision _ _ -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Satisfied -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 23 20 23 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 47 8 47 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_normal  =
    | C_Normal (Cdsat_Theory_Trail_Type.t_trail)
    
  let function normal_0 (self : t_normal) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Normal a -> a
      end
end
module Cdsat_Theory_Impl5_Sound_Stub
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 4 663 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 4 663 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 4 663 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 4 661 16] Sound0.sound (Cdsat_Theory_Normal_Type.normal_0 self)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 4 663 30] (self : Cdsat_Theory_Normal_Type.t_normal) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl5_Fail2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 728 4 728 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 728 4 728 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 725 15 725 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 726 15 726 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 727 4 727 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 728 4 728 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 732 12 734 39] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just = 0
  val fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 728 4 728 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 725 15 725 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 726 15 726 27] Sound0.sound self}
    ensures { result = fail2 self just }
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 725 15 725 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 726 15 726 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 727 4 727 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 38 8 38 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 62 26 62 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Trail_Impl11_Len_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val len [#"/Users/xavier/Code/cdsat/src/trail.rs" 300 4 300 30] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 14 299 50] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) }
    
end
module Cdsat_Theory_Impl4_Acceptable_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Acceptable_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Acceptable
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 8 318 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
  val acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = acceptable self t val' }
    
end
module Cdsat_Concrete_Impl1_Extend_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl3_ShallowModel_Stub as ShallowModel0
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val extend [#"/Users/xavier/Code/cdsat/src/concrete.rs" 417 4 417 56] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory)) (tl : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_ExtendResult_Type.t_extendresult
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 403 4 403 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 403 4 403 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 404 14 415 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> true
      | Cdsat_Concrete_ExtendResult_Type.C_Decision t v -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) (ShallowModel0.shallow_model t) (ShallowModel1.shallow_model v)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (ShallowModel2.shallow_model c) in true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 416 4 416 44] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * tl))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) }
    
end
module Alloc_Vec_Impl9_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : slice t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 133 26 133 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    
end
module Cdsat_Trail_Impl11_MaxLevel_Interface
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val max_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 582 4 582 71] (self : Cdsat_Trail_Trail_Type.t_trail) (assignments : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 579 15 579 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 580 4 580 102] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model assignments) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model assignments) i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 581 14 581 88] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model assignments)) = UIntSize.to_int result }
    
end
module Cdsat_Concrete_ConflictHeap_Type
  type t_conflictheap
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_conflict  =
    | C_Conflict (Cdsat_Theory_Trail_Type.t_trail) (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  let function conflict_1 (self : t_conflict) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ a -> a
      end
  let function conflict_0 (self : t_conflict) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a _ -> a
      end
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 215 12 215 41] ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Cdsat_Concrete_Impl2_ShallowModel_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 497 4 497 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Concrete_Impl2_ShallowModel_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 497 4 497 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Concrete_Impl2_ShallowModel
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 497 4 497 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 497 4 497 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 200 8 200 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Theory_Impl6_Sound_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 789 4 789 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 789 4 789 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 789 4 789 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 8 790 109] Sound0.sound (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.conflict_1 self) -> false)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 789 4 789 30] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl6_Invariant_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Invariant_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Invariant
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 784 8 784 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 34] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl6_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
end
module Cdsat_Theory_Impl6_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
end
module Cdsat_Theory_Impl6_Level
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    ensures { result = level self }
    
end
module Cdsat_Concrete_IxToAbs_Stub
  use set.Fset
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/concrete.rs" 308 0 308 82] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Concrete_IxToAbs_Interface
  use set.Fset
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/concrete.rs" 308 0 308 82] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  axiom ix_to_abs_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 307 0 307 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (ix_to_abs t s) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix)) && ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 306 0 306 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains (ix_to_abs t s) (IndexLogic0.index_logic t ix))
end
module Cdsat_Concrete_IxToAbs
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/concrete.rs" 308 0 308 82] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val ix_to_abs [#"/Users/xavier/Code/cdsat/src/concrete.rs" 308 0 308 82] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = ix_to_abs t s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs t s = ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 304 0 304 8] if s = Fset.empty  then
    Fset.empty 
  else
    let a = Fset.pick s in Insert0.insert (ix_to_abs t (Remove0.remove s a)) (IndexLogic0.index_logic t a)
  )
  axiom ix_to_abs_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 307 0 307 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (ix_to_abs t s) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix)) && ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 306 0 306 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains (ix_to_abs t s) (IndexLogic0.index_logic t ix))
end
module Cdsat_Concrete_IxToAbs_Impl
  use set.Fset
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel5
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel4
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl29_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl5_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl3_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl14_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  let rec ghost function ix_to_abs [#"/Users/xavier/Code/cdsat/src/concrete.rs" 308 0 308 82] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 306 0 306 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains result (IndexLogic0.index_logic t ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 307 0 307 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix) }
    variant {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 305 10 305 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 304 0 304 8] if pure {s = Fset.empty } then
      Fset.empty 
    else
      let a = Fset.pick s in let a' = let b' = Remove0.remove s a in ix_to_abs t b' in let b' = IndexLogic0.index_logic t a in Insert0.insert a' b'
    
end
module Cdsat_Concrete_IxToAbsRemove_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/concrete.rs" 357 0 357 65] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Concrete_IxToAbsRemove_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/concrete.rs" 357 0 357 65] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  axiom ix_to_abs_remove_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 11 353 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 354 11 354 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 355 0 355 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 356 10 356 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Concrete_IxToAbsRemove
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/concrete.rs" 357 0 357 65] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/concrete.rs" 357 0 357 65] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 11 353 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 354 11 354 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 355 0 355 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { result = ix_to_abs_remove t x s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs_remove t x s = ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 358 3 358 5] ())
  axiom ix_to_abs_remove_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 11 353 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 354 11 354 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 355 0 355 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 356 10 356 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Concrete_IxToAbsRemove_Impl
  use set.Fset
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel5
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel4
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl29_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains3.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove1.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl5_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl3_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type s = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl14_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl11_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl11_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl11_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains4.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains3.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl10_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl11_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains4.contains,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl11_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_IxToAbs as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl11_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/concrete.rs" 357 0 357 65] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 11 353 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 354 11 354 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 355 0 355 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 356 10 356 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    variant {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 352 10 352 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 358 3 358 5] ()
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub
  type t
  use set.Fset
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Interface
  type t
  use set.Fset
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 88 4 88 40] ext_eq self other -> self = other
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq
  type t
  use set.Fset
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = t
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 93 8 95 9] forall e : t . Contains0.contains self e = Contains0.contains other e
  val ext_eq (self : Fset.fset t) (other : Fset.fset t) : bool
    ensures { result = ext_eq self other }
    
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 88 4 88 40] ext_eq self other -> self = other
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 10 20 10 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 28 20 28 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 14 14 14 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 14 14 14 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 19 20 19 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 23 14 23 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 23 14 23 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 32 14 32 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 32 14 32 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate gt_log (self : self) (o : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 37 20 37 56] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 41 14 41 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 41 14 41 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 15 49 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 15 50 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 51 14 51 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 15 49 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 15 50 32] CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 15 49 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 15 50 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 51 14 51 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 15 55 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 14 56 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 15 55 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 15 55 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 14 56 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 15 60 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 14 61 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 15 60 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 15 60 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 14 61 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_Impl8_CmpLog_Stub
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl8_CmpLog_Interface
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl8_CmpLog
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 72 12 80 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Cdsat_Trail_Impl7_CmpLog_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl7_CmpLog_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl7_CmpLog
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog_Stub as CmpLog0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 8 183 9] match (CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_0 self) (Cdsat_Trail_TrailIndex_Type.trailindex_0 rhs)) with
      | Core_Cmp_Ordering_Type.C_Less -> Core_Cmp_Ordering_Type.C_Less
      | Core_Cmp_Ordering_Type.C_Greater -> Core_Cmp_Ordering_Type.C_Greater
      | Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_1 self) (Cdsat_Trail_TrailIndex_Type.trailindex_1 rhs)
      end
  val cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self rhs }
    
end
module Cdsat_Trail_Impl7_CmpLeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_CmpLeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 187 14 187 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl7_CmpLeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 186 4 186 10] ()
  val cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 187 14 187 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl7_CmpLtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_CmpLtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 191 14 191 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl7_CmpLtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 190 4 190 10] ()
  val cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 191 14 191 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl7_CmpGeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_CmpGeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 194 14 194 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl7_CmpGeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 193 4 193 10] ()
  val cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 194 14 194 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl7_CmpGtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_CmpGtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 198 14 198 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl7_CmpGtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 197 4 197 10] ()
  val cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 198 14 198 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl7_Refl_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_Refl_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl7_Refl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 4 201 10] ()
  val refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl7_Trans_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
end
module Cdsat_Trail_Impl7_Trans_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 208 14 208 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl7_Trans
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 205 4 205 10] ()
  val trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 208 14 208 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl7_Antisym1_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_Antisym1_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 213 14 213 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl7_Antisym1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 211 4 211 10] ()
  val antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 213 14 213 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl7_Antisym2_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_Antisym2_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl7_Antisym2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 216 4 216 10] ()
  val antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl7_EqCmp_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl7_EqCmp_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 222 14 222 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl7_EqCmp
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl7_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 221 4 221 10] ()
  val eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 222 14 222 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Concrete_SetMax_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/concrete.rs" 322 0 322 45] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Concrete_SetMax_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/concrete.rs" 322 0 322 45] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  axiom set_max_spec : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 318 11 318 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 321 0 321 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o (set_max s)) && ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 320 10 320 28] Contains0.contains s (set_max s))
end
module Cdsat_Concrete_SetMax
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/concrete.rs" 322 0 322 45] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val set_max [#"/Users/xavier/Code/cdsat/src/concrete.rs" 322 0 322 45] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 318 11 318 24] not Fset.is_empty s}
    ensures { result = set_max s }
    
  axiom def : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . set_max s = ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 317 0 317 8] let x = Fset.pick s in let s = Remove0.remove s x in if Fset.is_empty s then
    x
  else
    let rec' = set_max s in if GeLog0.ge_log x rec' then x else rec'
  )
  axiom set_max_spec : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 318 11 318 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 321 0 321 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o (set_max s)) && ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 320 10 320 28] Contains0.contains s (set_max s))
end
module Cdsat_Concrete_IxToAbsLevel_Stub
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl10_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Concrete_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 0 347 1] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Concrete_IxToAbsLevel_Interface
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl10_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Concrete_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 0 347 1] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  axiom ix_to_abs_level_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 339 11 339 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 341 0 341 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 342 11 342 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 10 343 70] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s))
end
module Cdsat_Concrete_IxToAbsLevel
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl10_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Concrete_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 0 347 1] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 0 347 1] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 339 11 339 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 341 0 341 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 342 11 342 24] not Fset.is_empty s}
    ensures { result = ix_to_abs_level t s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs_level t s = ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 348 4 348 6] ())
  axiom ix_to_abs_level_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 339 11 339 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 341 0 341 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 342 11 342 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 10 343 70] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s))
end
module Cdsat_Concrete_IxToAbsLevel_Impl
  use set.Fset
  use prelude.Ghost
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel5
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel4
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl29_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl7_EqCmp as EqCmp1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl7_Antisym2 as Antisym21 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl7_Antisym1 as Antisym11 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl7_Trans as Trans1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl7_Refl as Refl1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl7_CmpGtLog as CmpGtLog1 with
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl7_CmpGeLog as CmpGeLog1 with
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl7_CmpLtLog as CmpLtLog1 with
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl7_CmpLeLog as CmpLeLog1 with
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains3.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl5_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl3_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type s = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl14_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl11_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl11_Contains as Contains1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl11_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains4.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove1.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains3.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl11_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains4.contains,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl10_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl11_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_SetMax as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    predicate LeLog0.le_log = LeLog0.le_log,
    function Remove0.remove = Remove0.remove,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    axiom .
  clone Cdsat_Concrete_IxToAbs as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl11_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 0 347 1] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 339 11 339 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 341 0 341 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 342 11 342 24] not Fset.is_empty s}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 10 343 70] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s) }
    variant {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 340 10 340 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 348 4 348 6] ()
end
module Cdsat_Theory_Impl0_IsBool_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term)
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term)
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 26 8 26 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl6_Backjump2Pre_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 872 4 872 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl6_Backjump2Pre_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 872 4 872 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom backjump2_pre_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 871 14 871 70] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l
end
module Cdsat_Theory_Impl6_Backjump2Pre
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 872 4 872 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 870 4 870 16] Invariant0.invariant' self /\ Sound0.sound self /\ Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)
  val backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 872 4 872 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = backjump2_pre self l }
    
  axiom backjump2_pre_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 871 14 871 70] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l
end
module Cdsat_Theory_Impl4_RestrictSound_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
end
module Cdsat_Theory_Impl4_RestrictSound_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 555 15 555 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 556 14 556 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_RestrictSound
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 558 8 563 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let _ = restrict_sound tl level in ()
      end
  val restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 555 15 555 27] Sound0.sound self}
    ensures { result = restrict_sound self level }
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 555 15 555 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 556 14 556 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_TrailPlausible_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 632 15 632 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 633 15 633 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 634 4 634 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 635 14 635 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_TrailPlausible
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 8 646 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  val trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 632 15 632 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 633 15 633 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 634 4 634 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { result = trail_plausible self d }
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 632 15 632 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 633 15 633 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 634 4 634 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 635 14 635 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 620 15 620 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 621 15 621 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 623 14 623 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictIdempotent
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 625 8 628 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> restrict_idempotent tl l1 l2
      end
  val restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 620 15 620 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 621 15 621 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 23] l1 <= l2}
    ensures { result = restrict_idempotent self l1 l2 }
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 620 15 620 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 621 15 621 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 623 14 623 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 68 4 68 12] ()
  val negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self}
    ensures { result = negate_involutive self }
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl3_Lemma_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl3_Lemma_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 14 171 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl3_Lemma
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Stub as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort2.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 8 176 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> ()
      | _ -> ()
      end
  val lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self}
    ensures { result = lemma' self t v }
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 14 171 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl6_LearnJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl6_LearnJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 799 15 799 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 800 15 800 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 801 4 801 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 802 4 802 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 803 4 803 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl6_LearnJustified
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl3_Lemma_Stub as Lemma0 with
    function Sort0.sort = Sort0.sort,
    function Sort2.sort = Sort2.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 798 4 798 12] let _ = () in ()
  val learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 799 15 799 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 800 15 800 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 801 4 801 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 802 4 802 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { result = learn_justified self ass }
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 799 15 799 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 800 15 800 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 801 4 801 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 802 4 802 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 803 4 803 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl6_Backjump2_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 888 4 888 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
end
module Cdsat_Theory_Impl6_Backjump2_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 888 4 888 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
  axiom backjump2_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 879 15 879 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 880 15 880 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 881 4 881 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 882 4 882 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 883 15 883 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 887 4 887 43] Acceptable0.acceptable (Cdsat_Theory_Conflict_Type.conflict_0 self) (let (a, _) = l in a) (let (_, a) = l in a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 886 4 886 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 885 14 885 28] Sound1.sound (backjump2 self l)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 884 4 884 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l)))
end
module Cdsat_Theory_Impl6_Backjump2
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant2
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl6_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 888 4 888 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 878 4 878 12] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Cdsat_Theory_Normal_Type.C_Normal (Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted)
  val backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 888 4 888 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 879 15 879 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 880 15 880 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 881 4 881 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 882 4 882 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 883 15 883 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)}
    ensures { result = backjump2 self l }
    
  axiom backjump2_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 879 15 879 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 880 15 880 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 881 4 881 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 882 4 882 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 883 15 883 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 887 4 887 43] Acceptable0.acceptable (Cdsat_Theory_Conflict_Type.conflict_0 self) (let (a, _) = l in a) (let (_, a) = l in a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 886 4 886 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 885 14 885 28] Sound1.sound (backjump2 self l)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 884 4 884 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l)))
end
module Cdsat_Trail_ReasonDeepModel_Type
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  type t_reasondeepmodel  =
    | C_Justified (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex))
    | C_Decision
    | C_Input
    
end
module Cdsat_Trail_AssignmentDeepModel_Type
  use prelude.Int
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assignmentdeepmodel  =
    | C_AssignmentDeepModel (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value) (Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel) int
    
  let function assignmentdeepmodel_val (self : t_assignmentdeepmodel) : Cdsat_Theory_Value_Type.t_value
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_AssignmentDeepModel _ a _ _ -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 29 4 30 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 28 14 28 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 29 4 30 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 28 14 28 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module Cdsat_Trail_Impl9_DeepModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 241 4 241 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl9_DeepModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 241 4 241 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl9_DeepModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 241 4 241 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 242 8 242 12] self
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 241 4 241 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl24_DeepModel_Stub
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 31 37 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl24_DeepModel_Interface
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 31 37 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl24_DeepModel
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl9_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type s = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 31 37 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 31 37 40] match (self) with
      | Cdsat_Trail_Reason_Type.C_Justified v0_1 -> Cdsat_Trail_ReasonDeepModel_Type.C_Justified (DeepModel0.deep_model v0_1)
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Trail_ReasonDeepModel_Type.C_Decision
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Trail_ReasonDeepModel_Type.C_Input
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 31 37 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl19_DeepModel_Stub
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 31 13 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl19_DeepModel_Interface
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 31 13 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl19_DeepModel
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel3
  clone Cdsat_Trail_Impl24_DeepModel_Stub as DeepModel2
  clone Cdsat_Trail_Impl38_DeepModel_Stub as DeepModel1
  clone Cdsat_Trail_Impl4_DeepModel_Stub as DeepModel0
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 31 13 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 31 650 44] Cdsat_Trail_AssignmentDeepModel_Type.C_AssignmentDeepModel (DeepModel0.deep_model (Cdsat_Trail_Assignment_Type.assignment_term self)) (DeepModel1.deep_model (Cdsat_Trail_Assignment_Type.assignment_val self)) (DeepModel2.deep_model (Cdsat_Trail_Assignment_Type.assignment_reason self)) (DeepModel3.deep_model (Cdsat_Trail_Assignment_Type.assignment_level self))
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 31 13 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl0_ShallowModel_Stub
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 4 30 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl0_ShallowModel_Interface
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 4 30 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl0_ShallowModel
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl19_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 4 30 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 31 8 31 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 4 30 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Theory_Impl4_IsInputInv_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 48] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_IsInputInv_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 48] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom is_input_inv_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 421 15 421 31] IsInput0.is_input self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 422 14 422 35] LevelOf0.level_of self d = 0)
end
module Cdsat_Theory_Impl4_IsInputInv
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 48] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 424 8 424 10] ()
  val is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 48] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 421 15 421 31] IsInput0.is_input self d}
    ensures { result = is_input_inv self d }
    
  axiom is_input_inv_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 421 15 421 31] IsInput0.is_input self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 422 14 422 35] LevelOf0.level_of self d = 0)
end
module Cdsat_Theory_Impl4_JustifiedIsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 53] (self : Cdsat_Theory_Trail_Type.t_trail) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_JustifiedIsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 53] (self : Cdsat_Theory_Trail_Type.t_trail) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom justified_is_bool_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 38] InvariantAssign0.invariant_assign self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] IsJustified0.is_justified self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 652 4 652 29] IsBool0.is_bool (let (_, a) = a in a))
end
module Cdsat_Theory_Impl4_JustifiedIsBool
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 53] (self : Cdsat_Theory_Trail_Type.t_trail) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 649 4 649 12] ()
  val justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 53] (self : Cdsat_Theory_Trail_Type.t_trail) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 38] InvariantAssign0.invariant_assign self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] IsJustified0.is_justified self a}
    ensures { result = justified_is_bool self a }
    
  axiom justified_is_bool_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 38] InvariantAssign0.invariant_assign self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] IsJustified0.is_justified self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 652 4 652 29] IsBool0.is_bool (let (_, a) = a in a))
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
  axiom to_ref_seq_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 78 4 78 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 77 14 77 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 78 4 78 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 77 14 77 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = slice t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 348 12 348 66] ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module Cdsat_Theory_Impl4_JustificationContains_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 517 4 517 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_JustificationContains_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 517 4 517 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 513 15 513 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 514 15 514 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 516 14 516 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 515 4 515 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl4_JustificationContains
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 517 4 517 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 518 8 527 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else justification_contains tl kv
      end
  val justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 517 4 517 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 513 15 513 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 514 15 514 36] IsJustified0.is_justified self kv}
    ensures { result = justification_contains self kv }
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 513 15 513 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 514 15 514 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 516 14 516 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 515 4 515 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl3_ResolveSound_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl3_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 158 14 158 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl3_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 154 4 154 12] ()
  val resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a}
    ensures { result = resolve_sound self cflct just a }
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 158 14 158 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl6_Resolvef_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 4 818 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
end
module Cdsat_Theory_Impl6_Resolvef_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 4 818 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 811 15 811 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 813 4 813 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 817 14 817 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 816 14 816 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl6_Resolvef
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains_Stub as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 4 818 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 810 4 810 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 4 818 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 811 15 811 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 813 4 813 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { result = resolvef self a }
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 811 15 811 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 813 4 813 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 817 14 817 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 816 14 816 32] Invariant0.invariant' (resolvef self a))
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/ghost.rs" 24 20 24 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Cdsat_Theory_Impl6_Resolve_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Resolve_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 828 15 828 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 829 15 829 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 830 4 830 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 832 4 832 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 831 4 831 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl6_Resolve
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl3_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains_Stub as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 827 4 827 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) a -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 828 15 828 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 829 15 829 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 830 4 830 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    ensures { result = resolve self a tgt }
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 828 15 828 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 829 15 829 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 830 4 830 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 832 4 832 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 831 4 831 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Concrete_Impl3_New_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel0
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 508 4 508 20] (_1' : ()) : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 507 14 507 36] ShallowModel0.shallow_model result = Fset.empty  }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 153 20 153 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost
  type t
  type a
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 158 20 158 33] ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPre0.into_iter_pre self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-05-26-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2738 4 2738 40] Invariant0.invariant' result }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 54 8 54 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 209 20 209 57] Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl8_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  val next (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 85 26 88 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Cdsat_Concrete_Impl3_Insert_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel0
  val insert [#"/Users/xavier/Code/cdsat/src/concrete.rs" 514 4 514 47] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) (e : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 513 14 513 43] ShallowModel0.shallow_model ( ^ self) = Insert0.insert (ShallowModel1.shallow_model self) e }
    
end
module Cdsat_Concrete_Impl3_Last_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  use Core_Option_Option_Type as Core_Option_Option_Type
  val last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 524 4 524 41] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 519 4 522 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) other -> LeLog0.le_log other a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 523 14 523 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/option.rs" 16 0 113 1] self <> Core_Option_Option_Type.C_None}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/option.rs" 16 0 113 1] Core_Option_Option_Type.C_Some result = self }
    
end
module Cdsat_Trail_Impl10_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 248 4 248 32] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 247 14 247 30] result = Cdsat_Trail_TrailIndex_Type.trailindex_0 self }
    
end
module Cdsat_Concrete_Impl3_PopLast_Interface
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  val pop_last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 534 4 534 48] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 529 14 529 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 530 4 533 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> ShallowModel1.shallow_model ( ^ self) = Remove0.remove (ShallowModel0.shallow_model self) a /\ Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model ( ^ self)) other -> LeLog0.le_log other a) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl13_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 127 27 127 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 128 26 128 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 102 20 102 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 108 20 108 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Cdsat_Trail_Impl13_Index_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  val index [#"/Users/xavier/Code/cdsat/src/trail.rs" 661 4 661 55] (self : Cdsat_Trail_Trail_Type.t_trail) (index : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Assignment_Type.t_assignment
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 659 15 659 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 660 14 660 67] result = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 index)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 index)) }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' (self : t) : t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Core_Clone_Impls_Impl9_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  val clone' (self : uint64) : uint64
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' (self : bool) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Cdsat_Trail_Impl34_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 9 126 14] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Trail_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 9 126 14] result = self }
    
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  val clone' (self : usize) : usize
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Cdsat_Trail_Impl25_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 9 55 14] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Trail_Sort_Type.t_sort
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 9 55 14] result = self }
    
end
module Cdsat_Trail_Impl30_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 9 73 14] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Trail_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 9 73 14] result = self }
    
end
module Alloc_Vec_Impl11_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clone' (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Cdsat_Trail_Impl20_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 9 37 14] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_Reason_Type.t_reason
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 9 37 14] result = self }
    
end
module Cdsat_Trail_Impl15_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Assignment_Type.t_assignment
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] result = self }
    
end
module Cdsat_Trail_Impl6_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 153 4 153 33] (self : Cdsat_Trail_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 152 14 152 41] result = IsBool0.is_bool (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Trail_Impl14_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 678 4 678 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 677 14 677 45] result = IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Theory_Impl4_RestrictFind_Stub
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 460 4 460 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictFind_Interface
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 460 4 460 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 456 15 456 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 457 15 457 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 458 15 458 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 459 14 459 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl4_RestrictFind
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 460 4 460 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 461 8 470 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then () else restrict_find tl level d
      end
  val restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 460 4 460 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 456 15 456 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 457 15 457 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 458 15 458 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { result = restrict_find self level d }
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 456 15 456 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 457 15 457 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 458 15 458 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 459 14 459 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Stub
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 574 4 574 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Interface
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 574 4 574 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 567 15 567 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 568 15 568 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 569 15 569 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 573 4 573 69] IsInput0.is_input self d -> IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 572 4 572 75] IsDecision0.is_decision self d -> IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 571 14 571 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 570 4 570 78] IsJustified0.is_justified self d -> IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictFind_Stub as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 574 4 574 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 575 8 575 36] let _ = RestrictFind0.restrict_find self level d in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_kind_unchanged tl level d in ()
      
      end
  val restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 574 4 574 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 567 15 567 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 568 15 568 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 569 15 569 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { result = restrict_kind_unchanged self level d }
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 567 15 567 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 568 15 568 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 569 15 569 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 573 4 573 69] IsInput0.is_input self d -> IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 572 4 572 75] IsDecision0.is_decision self d -> IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 571 14 571 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 570 4 570 78] IsJustified0.is_justified self d -> IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val pop (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 68 26 73 17] match (result) with
      | Core_Option_Option_Type.C_Some t -> ShallowModel0.shallow_model ( ^ self) = SeqExt.subsequence (ShallowModel1.shallow_model self) 0 (Seq.length (ShallowModel1.shallow_model self) - 1) /\ ShallowModel1.shallow_model self = Seq.snoc (ShallowModel0.shallow_model ( ^ self)) t
      | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (ShallowModel1.shallow_model self) = 0
      end }
    
end
module Cdsat_Trail_Impl11_Restrict_Interface
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl10_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val restrict [#"/Users/xavier/Code/cdsat/src/trail.rs" 549 4 549 51] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 543 4 543 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 544 15 544 36] UIntSize.to_int level <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 543 4 543 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 545 14 545 59] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 547 4 547 111] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . LevelLog0.level_log ix <= UIntSize.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 548 4 548 112] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
end
module Cdsat_Concrete_Impl3_IntoVec_Interface
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel0
  val into_vec [#"/Users/xavier/Code/cdsat/src/concrete.rs" 541 4 541 40] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 539 4 539 75] forall e : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) e -> Contains1.contains (ShallowModel1.shallow_model result) e }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 540 4 540 94] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result) -> Contains0.contains (ShallowModel0.shallow_model self) (Seq.get (ShallowModel1.shallow_model result) i) }
    
end
module Cdsat_Trail_Impl6_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel1
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val negate [#"/Users/xavier/Code/cdsat/src/trail.rs" 162 4 162 39] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Trail_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 160 15 160 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 161 14 161 41] ShallowModel1.shallow_model result = Negate0.negate (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl14_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 118 27 118 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 119 26 119 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 120 26 120 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 121 26 121 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 122 26 122 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 65 26 65 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 114 8 114 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  axiom shallow_model_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module Cdsat_Trail_Impl11_AddJustified_Interface
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Trail_Impl3_ShallowModel_Stub as ShallowModel2
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel0
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 522 4 522 93] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Trail_Term_Type.t_term) (val' : Cdsat_Trail_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 517 4 517 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 518 15 518 31] IsBool0.is_bool (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 519 4 519 96] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model into_vec) -> Contains0.contains ( * self) (Seq.get (ShallowModel1.shallow_model into_vec) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 520 4 520 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel2.shallow_model term) (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 521 4 521 145] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel1.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel2.shallow_model term, ShallowModel0.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 517 4 517 40] Invariant0.invariant' ( ^ self) }
    
end
module Cdsat_Trail_Impl14_IsFirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_first_order [#"/Users/xavier/Code/cdsat/src/trail.rs" 683 4 683 47] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 682 14 682 45] result <> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 30 8 30 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 15 8 15 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = Alloc_Vec_Vec_Type.t_vec t a1
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec u a2,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a1,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : Alloc_Vec_Vec_Type.t_vec t a1) (other : Alloc_Vec_Vec_Type.t_vec u a2) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 33 8 33 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Trail_Impl21_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 16 37 25] (self : Cdsat_Trail_Reason_Type.t_reason) (rhs : Cdsat_Trail_Reason_Type.t_reason) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 16 37 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl14_IsDecision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 693 4 693 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 14 692 57] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Decision) }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 55 26 55 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Cdsat_Trail_Impl11_Justification_Interface
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl10_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 506 4 506 72] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 501 15 501 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 502 15 502 31] Contains0.contains self a}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 503 4 503 91] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 504 14 504 99] AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model result) = Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 505 4 505 105] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> LevelLog0.level_log (Seq.get (ShallowModel0.shallow_model result) i) <= LevelLog0.level_log a }
    
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  val iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 208 0 301 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 55 20 55 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-05-26-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 17 281 21] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-05-26-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 4 281 27] Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 342 20 342 61] Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl15_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 85 26 88 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Cdsat_Trail_Impl11_AddDecision_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl3_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val add_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 471 4 471 65] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (term : Cdsat_Trail_Term_Type.t_term) (val' : Cdsat_Trail_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 466 15 466 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 468 4 468 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 467 14 467 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 469 4 469 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 18 8 18 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 220 14 220 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 219 4 219 10] ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 220 14 220 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 224 15 224 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 225 15 225 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 226 14 226 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 223 4 223 10] ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 224 15 224 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 225 15 225 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 224 15 224 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 225 15 225 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 226 14 226 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate into_iter_pre (self : i) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 65 8 65 24] Invariant0.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 70 8 70 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 353 14 353 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 352 4 352 10] ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 353 14 353 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 357 15 357 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 358 15 358 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 359 14 359 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 356 4 356 10] ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 357 15 357 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 358 15 358 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 357 15 357 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 358 15 358 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 359 14 359 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val resolve_conflict [#"/Users/xavier/Code/cdsat/src/concrete.rs" 112 4 112 80] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 15 104 36] Seq.length (ShallowModel0.shallow_model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 105 4 105 99] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model conflict) -> Contains0.contains ( * trail) (Seq.get (ShallowModel0.shallow_model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 106 4 110 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (ShallowModel0.shallow_model conflict) in SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) conflict > 0 /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 111 126] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * trail) ix -> (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) = 0) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (IndexLogic0.index_logic ( * trail) ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 41] Invariant0.invariant' ( ^ trail) }
    
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat1
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_Unsat_Stub as Unsat0
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat1.unsat,
    axiom .
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val solver [#"/Users/xavier/Code/cdsat/src/concrete.rs" 40 4 40 57] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_Answer_Type.t_answer
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 32 15 32 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 33 14 33 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 34 4 34 50] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 14 39 5] match (result) with
      | Cdsat_Concrete_Answer_Type.C_Unsat -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.C_Sat -> true
      | Cdsat_Concrete_Answer_Type.C_Unknown -> true
      end }
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Cdsat_Concrete_Impl1_Eval_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  val eval [#"/Users/xavier/Code/cdsat/src/concrete.rs" 451 4 451 87] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Trail_Term_Type.t_term) : Core_Result_Result_Type.t_result (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Cdsat_Trail_Value_Type.t_value) (Cdsat_Trail_Term_Type.t_term)
    
end
module Cdsat_Concrete_Impl1_EvalMemo_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  val eval_memo [#"/Users/xavier/Code/cdsat/src/concrete.rs" 483 4 483 92] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Trail_Term_Type.t_term) : Core_Result_Result_Type.t_result (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Cdsat_Trail_Value_Type.t_value) (Cdsat_Trail_Term_Type.t_term)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : t) (other : t) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Core_Cmp_Impls_Impl25_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = uint64,
    type DeepModelTy0.deepModelTy = int
  val eq (self : uint64) (other : uint64) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Core_Cmp_Impls_Impl19_Eq_Interface
  use prelude.Borrow
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = bool,
    type DeepModelTy0.deepModelTy = bool
  val eq (self : bool) (other : bool) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl35_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 16 126 25] (self : Cdsat_Trail_Value_Type.t_value) (rhs : Cdsat_Trail_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 16 126 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl26_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 16 55 25] (self : Cdsat_Trail_Sort_Type.t_sort) (rhs : Cdsat_Trail_Sort_Type.t_sort) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 16 55 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int
  val eq (self : usize) (other : usize) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel_Stub
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel_Interface
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/boxed.rs" 9 8 9 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl31_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 16 73 25] (self : Cdsat_Trail_Term_Type.t_term) (rhs : Cdsat_Trail_Term_Type.t_term) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 16 73 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl16_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] (self : Cdsat_Trail_Assignment_Type.t_assignment) (rhs : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl18_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 27 13 29] (self : Cdsat_Trail_Assignment_Type.t_assignment) : ()
    
end
module Cdsat_Trail_Impl23_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 27 37 29] (self : Cdsat_Trail_Reason_Type.t_reason) : ()
    
end
module Cdsat_Trail_Impl1_ShallowModel_Stub
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 49 4 49 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl1_ShallowModel_Interface
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 49 4 49 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl1_ShallowModel
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl24_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 49 4 49 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 50 8 50 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 49 4 49 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 27 55 29] (self : Cdsat_Trail_Sort_Type.t_sort) : ()
    
end
module Cdsat_Trail_Impl2_ShallowModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 67 4 67 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl2_ShallowModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 67 4 67 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl2_ShallowModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl29_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 67 4 67 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 68 8 68 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 67 4 67 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl33_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 27 73 29] (self : Cdsat_Trail_Term_Type.t_term) : ()
    
end
module Cdsat_Trail_Impl37_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 27 126 29] (self : Cdsat_Trail_Value_Type.t_value) : ()
    
end
module Cdsat_Trail_Impl6_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 145 4 145 30] (self : Cdsat_Trail_Value_Type.t_value) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 144 15 144 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    
end
module Cdsat_Trail_Impl39_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 9 171 18] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 9 171 18] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl41_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 20 171 22] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl42_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 24 171 29] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 24 171 29] result = self }
    
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 72 12 80 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Core_Cmp_Impls_Impl54_PartialCmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  val partial_cmp (self : usize) (other : usize) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 24 26 24 91] result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other)) }
    
end
module Cdsat_Trail_Impl44_PartialCmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val partial_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 37 171 47] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    
end
module Core_Cmp_Impls_Impl55_Cmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  val cmp (self : usize) (other : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 44 26 44 85] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl45_Cmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 49 171 52] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl8_ShallowModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl8_ShallowModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl8_ShallowModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 232 8 232 12] self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl11_New_Interface
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_Invariant_Stub as Invariant0
  val new [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 50] (inputs : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Term_Type.t_term, Cdsat_Trail_Value_Type.t_value) (Alloc_Alloc_Global_Type.t_global)) : Cdsat_Trail_Trail_Type.t_trail
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 276 14 276 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 277 4 277 36] Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost result)) }
    
end
module Cdsat_Theory_Impl4_Sat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 542 4 542 28] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Sat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 542 4 542 28] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Sat
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 542 4 542 28] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 543 8 543 56] exists m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m
  val sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 542 4 542 28] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl11_Sat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 28] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl11_Sat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 28] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl11_Sat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sat_Stub as Sat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 28] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 16] Sat0.sat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 28] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl11_AbstractAssign_Stub
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
end
module Cdsat_Trail_Impl11_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
end
module Cdsat_Trail_Impl11_AbstractAssign
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl5_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl3_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 358 8 368 9] match (Cdsat_Trail_Assignment_Type.assignment_reason a) with
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Theory_Assign_Type.C_Input (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Theory_Assign_Type.C_Decision (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Justified just -> Cdsat_Theory_Assign_Type.C_Justified (AbstractJustification0.abstract_justification self (ShallowModel2.shallow_model just)) (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      end
  val abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    ensures { result = abstract_assign self a }
    
end
module Cdsat_Trail_Impl11_AbsJustCons_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 443 4 443 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_AbsJustCons_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 443 4 443 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 440 15 440 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 441 4 441 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 442 14 442 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl11_AbsJustCons
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 443 4 443 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 443 4 443 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 440 15 440 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 441 4 441 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { result = abs_just_cons self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_cons self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 444 8 444 10] ())
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 440 15 440 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 441 4 441 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 442 14 442 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl11_AbsJustSnoc_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 452 4 452 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_AbsJustSnoc_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 452 4 452 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 449 15 449 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 450 4 450 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 451 14 451 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl11_AbsJustSnoc
  use prelude.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl11_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl11_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl11_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl11_AbsJustCons_Stub as AbsJustCons0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 452 4 452 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 452 4 452 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 449 15 449 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 450 4 450 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { result = abs_just_snoc self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_snoc self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 447 4 447 12] if just = Seq.empty  then
    ()
  else
    let j = Seq.snoc just elem in let _ = AbsJustCons0.abs_just_cons self (SeqExt.subsequence j 1 (Seq.length j)) (Seq.get j 0) in abs_just_snoc self (SeqExt.subsequence just 1 (Seq.length just)) elem
  )
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 449 15 449 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 450 4 450 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 451 14 451 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl11_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 462 4 462 39] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 165 20 165 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel1 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 170 20 170 34] ShallowModel0.shallow_model self = ShallowModel2.shallow_model (ShallowModel1.shallow_model res)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl17_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPre0.into_iter_pre self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-05-26-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2766 4 2766 40] Invariant0.invariant' result }
    
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : a) (other : b) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module Cdsat_Trail_Impl11_IndexOf_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val index_of [#"/Users/xavier/Code/cdsat/src/trail.rs" 483 4 483 65] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Term_Type.t_term) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_IndexIterator_Type
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  type t_indexiterator  =
    | C_IndexIterator (borrowed (Cdsat_Trail_Trail_Type.t_trail)) (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  let function indexiterator_trail (self : t_indexiterator) : borrowed (Cdsat_Trail_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IndexIterator a _ -> a
      end
end
module Cdsat_Trail_Impl11_Indices_Interface
  use prelude.Borrow
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val indices [#"/Users/xavier/Code/cdsat/src/trail.rs" 609 4 609 57] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Trail_IndexIterator_Type.t_indexiterator
    
end
module Cdsat_Trail_Impl12_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 626 4 626 82] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) (just : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Trail_Term_Type.t_term) (value : Cdsat_Trail_Value_Type.t_value) : ()
    
end
module Cdsat_Trail_Impl12_Trail_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val trail [#"/Users/xavier/Code/cdsat/src/trail.rs" 630 4 630 33] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : Cdsat_Trail_Trail_Type.t_trail
    
end
module Cdsat_Trail_Impl12_Next_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val next [#"/Users/xavier/Code/cdsat/src/trail.rs" 636 4 636 48] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl14_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 673 4 673 39] (self : Cdsat_Trail_Assignment_Type.t_assignment) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 672 14 672 34] result = Cdsat_Trail_Assignment_Type.assignment_level self }
    
end
module Cdsat_Trail_Impl14_IsJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 688 4 688 45] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 687 14 687 75] result = (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Justified j) }
    
end
module Cdsat_Trail_Impl14_IsInput_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_input [#"/Users/xavier/Code/cdsat/src/trail.rs" 698 4 698 41] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 697 14 697 54] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Input) }
    
end
module Cdsat_Trail_Impl14_Value_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val value [#"/Users/xavier/Code/cdsat/src/trail.rs" 703 4 703 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 702 14 702 33] result = Cdsat_Trail_Assignment_Type.assignment_val self }
    
end
module Cdsat_Trail_Impl14_Term_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val term [#"/Users/xavier/Code/cdsat/src/trail.rs" 708 4 708 38] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 707 14 707 34] result = Cdsat_Trail_Assignment_Type.assignment_term self }
    
end
module Cdsat_Theory_Impl4_IsSetLevel_Stub
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel_Interface
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 198 12 200 67] s = Fset.empty  /\ m = 0 \/ (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
  val is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int) : bool
    ensures { result = is_set_level self s m }
    
end
module Cdsat_Theory_Impl4_SetLevelMax_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMax_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMax
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 12] ()
  val set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { result = set_level_max self set elem }
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMin_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMin_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 236 14 236 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_SetLevelMin
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 233 4 233 12] ()
  val set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { result = set_level_min self set elem }
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 236 14 236 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_ContainsInverse_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_ContainsInverse_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 345 14 345 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_ContainsInverse
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 341 4 341 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then () else contains_inverse tl d
      end
  val contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { result = contains_inverse self d }
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 345 14 345 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_RestrictTooBig_Stub
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 606 4 606 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictTooBig_Interface
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 606 4 606 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 601 15 601 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 602 15 602 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 603 15 603 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 604 15 604 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 605 14 605 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictTooBig
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 606 4 606 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 607 8 616 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  val restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 606 4 606 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 601 15 601 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 602 15 602 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 603 15 603 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 604 15 604 39] level < LevelOf0.level_of self d}
    ensures { result = restrict_too_big self level d }
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 601 15 601 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 602 15 602 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 603 15 603 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 604 15 604 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 605 14 605 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl5_Decide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 674 4 674 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Decide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 674 4 674 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 670 15 670 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 671 4 671 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Decide
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 674 4 674 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 668 4 668 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision t val') (Level0.level (Cdsat_Theory_Normal_Type.normal_0 self) + 1) (Cdsat_Theory_Normal_Type.normal_0 self)
  val decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 674 4 674 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 670 15 670 27] Sound0.sound self}
    ensures { result = decide self t val' tgt }
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 670 15 670 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 671 4 671 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 686 15 686 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 687 15 687 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 690 4 690 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 688 4 688 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 685 4 685 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.normal_0 self)
  val deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 686 15 686 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 687 15 687 27] Sound0.sound self}
    ensures { result = deduce self just tgt }
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 686 15 686 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 687 15 687 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 690 4 690 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 688 4 688 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Fail_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 4 712 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 4 712 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 707 15 707 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 708 15 708 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 709 4 709 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 710 4 710 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 711 4 711 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 4 712 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 713 8 720 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a) = 0
  val fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 4 712 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 707 15 707 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 708 15 708 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 709 4 709 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 710 4 710 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)}
    ensures { result = fail self just }
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 707 15 707 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 708 15 708 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 709 4 709 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 710 4 710 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 711 4 711 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_ConflictSolve_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl5_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 741 15 741 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 742 15 742 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 743 4 743 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 4 746 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 745 4 745 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 744 4 744 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 8 758 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 741 15 741 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 742 15 742 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 743 4 743 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    ensures { result = conflict_solve self just tgt }
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 741 15 741 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 742 15 742 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 743 4 743 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 4 746 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 745 4 745 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 744 4 744 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl5_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 764 15 764 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 765 15 765 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 768 4 768 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 767 4 767 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 766 4 766 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 771 10 774 43] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 764 15 764 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 765 15 765 27] Sound0.sound self}
    ensures { result = conflict_solve2 self conflict tgt }
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 764 15 764 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 765 15 765 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 768 4 768 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 767 4 767 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 766 4 766 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_Backjump_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 845 15 845 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 846 15 846 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 849 4 849 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 848 4 848 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 847 4 847 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant2
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl6_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 844 4 844 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  val backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 845 15 845 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 846 15 846 27] Sound0.sound self}
    ensures { result = backjump self l tgt }
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 845 15 845 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 846 15 846 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 849 4 849 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 848 4 848 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 847 4 847 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_UndoClear_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 931 4 931 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 930 4 930 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel_Stub as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 934 8 940 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : int . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1)
  val undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self}
    ensures { result = undo_clear self a tgt }
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 931 4 931 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 930 4 930 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 951 4 951 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 951 4 951 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 945 15 945 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 946 15 946 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 950 4 950 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound2.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Stub as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 951 4 951 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 944 4 944 16] let _ = () in let _ = () in let _ = () in let _ = () in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  val undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 951 4 951 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 945 15 945 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 946 15 946 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l}
    ensures { result = undo_decide self l tgt }
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 945 15 945 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 946 15 946 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 950 4 950 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Main_Interface
  val main [#"/Users/xavier/Code/cdsat/src/main.rs" 28 0 28 9] (_1' : ()) : ()
end
module Cdsat_Concrete_Impl2
  
end
module Cdsat_Trail_Impl0
  
end
module Cdsat_Trail_Impl1
  
end
module Cdsat_Trail_Impl2
  
end
module Cdsat_Trail_Impl3
  
end
module Cdsat_Trail_Impl5
  
end
module Cdsat_Trail_Impl8
  
end
module Cdsat_Trail_Impl15
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] forall self : Cdsat_Trail_Assignment_Type.t_assignment . forall result : Cdsat_Trail_Assignment_Type.t_assignment . result = self -> result = self
end
module Cdsat_Trail_Impl20
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 9 37 14] forall self : Cdsat_Trail_Reason_Type.t_reason . forall result : Cdsat_Trail_Reason_Type.t_reason . result = self -> result = self
end
module Cdsat_Trail_Impl25
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 9 55 14] forall self : Cdsat_Trail_Sort_Type.t_sort . forall result : Cdsat_Trail_Sort_Type.t_sort . result = self -> result = self
end
module Cdsat_Trail_Impl30
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 9 73 14] forall self : Cdsat_Trail_Term_Type.t_term . forall result : Cdsat_Trail_Term_Type.t_term . result = self -> result = self
end
module Cdsat_Trail_Impl34
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 9 126 14] forall self : Cdsat_Trail_Value_Type.t_value . forall result : Cdsat_Trail_Value_Type.t_value . result = self -> result = self
end
module Cdsat_Trail_Impl42
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 24 171 29] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = self -> result = self
end
module Cdsat_Trail_Impl16
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel10
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type s = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel as DeepModel9 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel10.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel8
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel7
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl29_DeepModel as DeepModel6
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel5
  clone Cdsat_Trail_Impl24_DeepModel as DeepModel4 with
    function DeepModel0.deep_model = DeepModel9.deep_model,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel10.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl38_DeepModel as DeepModel3 with
    function DeepModel0.deep_model = DeepModel7.deep_model,
    function DeepModel1.deep_model = DeepModel8.deep_model
  clone Cdsat_Trail_Impl4_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel5.deep_model,
    function DeepModel1.deep_model = DeepModel6.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl19_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model,
    function DeepModel3.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] forall self : Cdsat_Trail_Assignment_Type.t_assignment . forall other : Cdsat_Trail_Assignment_Type.t_assignment . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl21
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type s = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel as DeepModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl24_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 37 16 37 25] forall self : Cdsat_Trail_Reason_Type.t_reason . forall other : Cdsat_Trail_Reason_Type.t_reason . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl26
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl29_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 55 16 55 25] forall self : Cdsat_Trail_Sort_Type.t_sort . forall other : Cdsat_Trail_Sort_Type.t_sort . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl31
  use prelude.Borrow
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel6
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel5
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel as DeepModel4 with
    function DeepModel0.deep_model = DeepModel5.deep_model,
    function DeepModel1.deep_model = DeepModel6.deep_model
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl29_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 16 73 25] forall self : Cdsat_Trail_Term_Type.t_term . forall other : Cdsat_Trail_Term_Type.t_term . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl35
  use prelude.Borrow
  clone CreusotContracts_Std1_Num_Impl10_DeepModel as DeepModel3
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl38_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 126 16 126 25] forall self : Cdsat_Trail_Value_Type.t_value . forall other : Cdsat_Trail_Value_Type.t_value . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl39
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 9 171 18] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl17
  
end
module Cdsat_Trail_Impl22
  
end
module Cdsat_Trail_Impl27
  
end
module Cdsat_Trail_Impl32
  
end
module Cdsat_Trail_Impl36
  
end
module Cdsat_Trail_Impl40
  
end
module Cdsat_Trail_Impl18
  
end
module Cdsat_Trail_Impl23
  
end
module Cdsat_Trail_Impl28
  
end
module Cdsat_Trail_Impl33
  
end
module Cdsat_Trail_Impl37
  
end
module Cdsat_Trail_Impl41
  
end
module Cdsat_Trail_Impl19
  
end
module Cdsat_Trail_Impl24
  
end
module Cdsat_Trail_Impl29
  
end
module Cdsat_Trail_Impl4
  
end
module Cdsat_Trail_Impl38
  
end
module Cdsat_Trail_Impl9
  
end
module Cdsat_Trail_Impl43
  
end
module Cdsat_Trail_Impl44
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel0
  use Core_Option_Option_Type as Core_Option_Option_Type
  goal partial_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 37 171 47] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering) . result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl45
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel0
  goal cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 171 49 171 52] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : Core_Cmp_Ordering_Type.t_ordering . result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl7
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  goal cmp_le_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) -> LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
  goal cmp_ge_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) -> GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
  goal cmp_gt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
  goal trans_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall z : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall o : Core_Cmp_Ordering_Type.t_ordering . CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o /\ (forall result : () . CmpLog0.cmp_log x z = o -> CmpLog0.cmp_log x z = o)
  goal antisym2_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
  goal cmp_lt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
  goal eq_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) -> (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
  goal refl_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
  goal antisym1_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl13
  
end
