
module Cdsat_Concrete_BoolTheory_Type
  type cdsat_concrete_booltheory_type  =
    | Cdsat_Concrete_BoolTheory_Type
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Concrete_BoolTheory_Type
  type cdsat_concrete_solver_type  =
    | Cdsat_Concrete_Solver_Type (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)
    
  let function cdsat_concrete_solver_type_Solver_bool_th (self : cdsat_concrete_solver_type) : Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_Solver_Type a -> a
      end
end
module Cdsat_Concrete_Impl0_New_Interface
  use Cdsat_Concrete_Solver_Type
  val new [@cfg:stackify] (_ : ()) : Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Cdsat_Trail_Sort_Type
  type cdsat_trail_sort_type  =
    | Cdsat_Trail_Sort_Boolean_Type
    | Cdsat_Trail_Sort_Rational_Type
    
end
module Cdsat_Trail_Value_Type
  use mach.int.Int
  use mach.int.UInt64
  type cdsat_trail_value_type  =
    | Cdsat_Trail_Value_Bool_Type bool
    | Cdsat_Trail_Value_Rat_Type uint64
    
  let function cdsat_trail_value_type_Rat_0 (self : cdsat_trail_value_type) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Value_Bool_Type _ -> any uint64
      | Cdsat_Trail_Value_Rat_Type a -> a
      end
  let function cdsat_trail_value_type_Bool_0 (self : cdsat_trail_value_type) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Value_Bool_Type a -> a
      | Cdsat_Trail_Value_Rat_Type _ -> any bool
      end
end
module Cdsat_Trail_Term_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Sort_Type
  type cdsat_trail_term_type  =
    | Cdsat_Trail_Term_Variable_Type usize (Cdsat_Trail_Sort_Type.cdsat_trail_sort_type)
    | Cdsat_Trail_Term_Value_Type (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Trail_Term_Plus_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Eq_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Conj_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Neg_Type (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Disj_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Impl_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    
  let function cdsat_trail_term_type_Impl_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type a _ -> a
      end
  let function cdsat_trail_term_type_Impl_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ a -> a
      end
  let function cdsat_trail_term_type_Disj_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type a _ -> a
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Disj_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ a -> a
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Neg_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type a -> a
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Conj_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type a _ -> a
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Conj_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ a -> a
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Eq_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type a _ -> a
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Eq_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ a -> a
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Plus_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type a _ -> a
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Plus_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ a -> a
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Value_0 (self : cdsat_trail_term_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Value_Type a -> a
      | Cdsat_Trail_Term_Plus_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Neg_Type _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
  let function cdsat_trail_term_type_Variable_0 (self : cdsat_trail_term_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type a _ -> a
      | Cdsat_Trail_Term_Value_Type _ -> any usize
      | Cdsat_Trail_Term_Plus_Type _ _ -> any usize
      | Cdsat_Trail_Term_Eq_Type _ _ -> any usize
      | Cdsat_Trail_Term_Conj_Type _ _ -> any usize
      | Cdsat_Trail_Term_Neg_Type _ -> any usize
      | Cdsat_Trail_Term_Disj_Type _ _ -> any usize
      | Cdsat_Trail_Term_Impl_Type _ _ -> any usize
      end
  let function cdsat_trail_term_type_Variable_1 (self : cdsat_trail_term_type) : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ a -> a
      | Cdsat_Trail_Term_Value_Type _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Neg_Type _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      end
end
module Cdsat_Trail_TrailIndex_Type
  use mach.int.Int
  use prelude.UIntSize
  type cdsat_trail_trailindex_type  =
    | Cdsat_Trail_TrailIndex_Type usize usize
    
  let function cdsat_trail_trailindex_type_TrailIndex_0 (self : cdsat_trail_trailindex_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_TrailIndex_Type a _ -> a
      end
  let function cdsat_trail_trailindex_type_TrailIndex_1 (self : cdsat_trail_trailindex_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_TrailIndex_Type _ a -> a
      end
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  type cdsat_trail_reason_type  =
    | Cdsat_Trail_Reason_Justified_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Cdsat_Trail_Reason_Decision_Type
    | Cdsat_Trail_Reason_Input_Type
    
  let function cdsat_trail_reason_type_Justified_0 (self : cdsat_trail_reason_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Reason_Justified_Type a -> a
      | Cdsat_Trail_Reason_Decision_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      | Cdsat_Trail_Reason_Input_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      end
end
module Cdsat_Trail_Assignment_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  type cdsat_trail_assignment_type  =
    | Cdsat_Trail_Assignment_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) usize
    
  let function cdsat_trail_assignment_type_Assignment_term (self : cdsat_trail_assignment_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type a _ _ _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_val (self : cdsat_trail_assignment_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ a _ _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_reason (self : cdsat_trail_assignment_type) : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ _ a _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_level (self : cdsat_trail_assignment_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type cdsat_theory_sort_type  =
    | Cdsat_Theory_Sort_Rational_Type
    | Cdsat_Theory_Sort_Boolean_Type
    
end
module Cdsat_Theory_Var_Type
  use mach.int.Int
  use Cdsat_Theory_Sort_Type
  type cdsat_theory_var_type  =
    | Cdsat_Theory_Var_Type int (Cdsat_Theory_Sort_Type.cdsat_theory_sort_type)
    
  let function cdsat_theory_var_type_Var_1 (self : cdsat_theory_var_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Var_Type _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use mach.int.Int
  type cdsat_theory_value_type  =
    | Cdsat_Theory_Value_Bool_Type bool
    | Cdsat_Theory_Value_Rat_Type int
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type
  type cdsat_theory_term_type  =
    | Cdsat_Theory_Term_Variable_Type (Cdsat_Theory_Var_Type.cdsat_theory_var_type)
    | Cdsat_Theory_Term_Value_Type (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Term_Plus_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    | Cdsat_Theory_Term_Eq_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    | Cdsat_Theory_Term_Conj_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  type cdsat_theory_assign_type  =
    | Cdsat_Theory_Assign_Decision_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Assign_Justified_Type (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Assign_Input_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Trail_Type
  use mach.int.Int
  use Cdsat_Theory_Assign_Type
  type cdsat_theory_trail_type  =
    | Cdsat_Theory_Trail_Empty_Type
    | Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) int (cdsat_theory_trail_type)
    
end
module Cdsat_Trail_Trail_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  type cdsat_trail_trail_type  =
    | Cdsat_Trail_Trail_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) usize (ghost Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
  let function cdsat_trail_trail_type_Trail_level (self : cdsat_trail_trail_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type _ a _ -> a
      end
  let function cdsat_trail_trail_type_Trail_assignments (self : cdsat_trail_trail_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type a _ _ -> a
      end
  let ghost function cdsat_trail_trail_type_Trail_ghost (self : cdsat_trail_trail_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type _ _ a -> a
      end
end
module Cdsat_Trail_Impl9_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) : usize
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_slice_iter_iter_type 't =
    | Core_Slice_Iter_Iter_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) opaque_ptr (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module CreusotContracts_Std1_Slice_Impl4_Model_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  function model (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_Model
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  function model (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl20_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t, type a = a
  use Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface
  type self
  predicate completed (self : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed
  type self
  predicate completed (self : self)
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module Core_Slice_Iter_Impl173_Item_Type
  type t
  use prelude.Borrow
  type item  =
    t
end
module Core_Slice_Iter_Impl173_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl173_Item_Type as Item0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t,
  type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy_Type
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = b,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : a) (other : b) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Alloc_Vec_Impl20
  type t
  type a
end
module Core_Slice_Iter_Impl173
  type t
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Core_Cmp_Impls_Impl9
  type a
  type b
end
module CreusotContracts_Std1_Slice_Impl4
  type t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Std1_Slice_Impl5_Completed_Interface
  type t
  use Core_Slice_Iter_Iter_Type
  predicate completed (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
end
module CreusotContracts_Std1_Slice_Impl5_Completed
  type t
  use Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate completed (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Std1_Slice_Impl5
  type t
end
module CreusotContracts_Std1_Slice_Impl5_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
    
end
module CreusotContracts_Std1_Slice_Impl5_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : () =
    ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Cdsat_Trail_Impl3_ModelTy_Type
  use Cdsat_Theory_Term_Type
  type modelTy  =
    Cdsat_Theory_Term_Type.cdsat_theory_term_type
end
module Cdsat_Trail_Impl2_Model_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  function model (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Trail_Impl2_Model
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 84 4 84 35] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 85 8 88 9] match (self) with
      | Cdsat_Trail_Sort_Type.Cdsat_Trail_Sort_Boolean_Type -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Trail_Sort_Type.Cdsat_Trail_Sort_Rational_Type -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      end
end
module Cdsat_Trail_Impl4_Model_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  function model (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Trail_Impl4_Model
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use mach.int.UInt64
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 35] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 137 8 140 9] match (self) with
      | Cdsat_Trail_Value_Type.Cdsat_Trail_Value_Bool_Type b -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b
      | Cdsat_Trail_Value_Type.Cdsat_Trail_Value_Rat_Type r -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (UInt64.to_int r)
      end
end
module Cdsat_Trail_Impl3_Model_Interface
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  function model (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Theory_Term_Type.cdsat_theory_term_type
end
module Cdsat_Trail_Impl3_Model
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  use mach.int.UInt64
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl2_Model_Interface as Model0
  use Cdsat_Theory_Var_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 4 111 35] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Theory_Term_Type.cdsat_theory_term_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 8 119 9] match (self) with
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Variable_Type v s -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type (Cdsat_Theory_Var_Type.Cdsat_Theory_Var_Type (UInt64.to_int v) (Model0.model s))
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Value_Type v -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type (Model1.model v)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Plus_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type (model l) (model r)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Eq_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type (model l) (model r)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Conj_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type (model l) (model r)
      | _ -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type true)
      end
end
module Cdsat_Trail_Impl3
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl2_Model as Model2
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl3_Model as Model0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl2_ModelTy_Type
  use Cdsat_Theory_Sort_Type
  type modelTy  =
    Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Trail_Impl2
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl4_ModelTy_Type
  use Cdsat_Theory_Value_Type
  type modelTy  =
    Cdsat_Theory_Value_Type.cdsat_theory_value_type
end
module Cdsat_Trail_Impl4
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl4_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl9_IndexOf_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  val index_of [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Trail_IndexIterator_Type
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  type cdsat_trail_indexiterator_type  =
    | Cdsat_Trail_IndexIterator_Type (borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
  let function cdsat_trail_indexiterator_type_IndexIterator_trail (self : cdsat_trail_indexiterator_type) : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_IndexIterator_Type a _ -> a
      end
end
module Cdsat_Trail_Impl9_Indices_Interface
  use prelude.Borrow
  use Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_Trail_Type
  val indices [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Cdsat_Trail_Impl9_Contains_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  predicate contains (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Trail_Impl9_Contains
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 337 4 337 49] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 339 12 339 92] UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix) < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) /\ UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix) < Seq.length (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix))))
end
module Cdsat_Trail_Impl12_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type
  function term_value (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl12_TermValue
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 562 4 562 61] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 563 8 563 45] (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self), Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self))
end
module Cdsat_Trail_Impl9_IndexLogic_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  function index_logic (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl9_IndexLogic
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl12_TermValue_Interface as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 498 4 498 77] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 500 12 500 61] TermValue0.term_value (Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix)))
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  function sort (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 52 8 55 9] match (self) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      end
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  function sort (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 8 21 9] match (self) with
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type v -> Cdsat_Theory_Var_Type.cdsat_theory_var_type_Var_1 v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type v -> Sort1.sort v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      end
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type
  predicate invariant' (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 30] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 83 8 87 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type t v -> Sort0.sort t = Sort1.sort v
      end
end
module Cdsat_Theory_Impl4_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_assign (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantAssign
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Interface as Invariant0
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 264 8 267 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  function to_pair (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 92 8 96 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ t val' -> (t, val')
      end
end
module Cdsat_Theory_Impl4_Len_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  function len (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
end
module Cdsat_Theory_Impl4_Len
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 442 4 442 27] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 8 446 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> 0
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> len tl + 1
      end
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 441 14 441 25] len self >= 0
end
module Cdsat_Theory_Impl4_Level_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  function level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
end
module Cdsat_Theory_Impl4_Level
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 29] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 8 436 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> 0
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> level tl
      end
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 14 429 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 14 428 25] level self >= 0)
end
module Cdsat_Theory_Impl4_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_nonneg (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantNonneg
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 256 8 259 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
end
module CreusotContracts_Logic_Int_Int_Type
  use prelude.Opaque
  type creusotcontracts_logic_int_int_type  =
    | CreusotContracts_Logic_Int_Int_Type opaque_ptr
    
end
module Cdsat_Theory_Impl4_Find_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Core_Option_Option_Type
  function find (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)
    
end
module Cdsat_Theory_Impl4_Find
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 368 8 377 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> Core_Option_Option_Type.Core_Option_Option_None_Type
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l)
      else
        find tl d
      
      end
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 366 4 366 104] InvariantAssign0.invariant_assign self -> (forall p : ((Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)) . find self d = Core_Option_Option_Type.Core_Option_Option_Some_Type p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 365 4 365 111] InvariantNonneg0.invariant_nonneg self -> (forall p : ((Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)) . find self d = Core_Option_Option_Type.Core_Option_Option_Some_Type p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 361 14 364 5] match (find self d) with
    | Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Contains_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  predicate contains (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl4_Contains
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use mach.int.Int
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 8 338 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type ix -> true
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> false
      end
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 333 4 333 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_LevelOf_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  function level_of (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
end
module Cdsat_Theory_Impl4_LevelOf
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 326 8 329 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (_, l) -> l
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> 0
      end
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 324 14 324 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Trail_Impl8_LevelLog_Interface
  use mach.int.Int
  use Cdsat_Trail_TrailIndex_Type
  function level_log (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : int
end
module Cdsat_Trail_Impl8_LevelLog
  use mach.int.Int
  use Cdsat_Trail_TrailIndex_Type
  use mach.int.UInt64
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 243 4 243 33] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 242 4 242 12] UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 self)
end
module Cdsat_Trail_Impl9_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type
  predicate abstract_relation (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_AbstractRelation
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Interface as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 4 328 38] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 330 12 332 160] (forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix -> Contains1.contains (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (IndexLogic0.index_logic self ix)) /\ (forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix -> LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (IndexLogic0.index_logic self ix) = UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)) /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix /\ LevelLog0.level_log ix = LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) a /\ IndexLogic0.index_logic self ix = a))
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type
  type cdsat_theory_model_type  =
    | Cdsat_Theory_Model_Type (Map.map (Cdsat_Theory_Var_Type.cdsat_theory_var_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
  let function cdsat_theory_model_type_Model_0 (self : cdsat_theory_model_type) : Map.map (Cdsat_Theory_Var_Type.cdsat_theory_var_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Model_Type a -> a
      end
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type
  predicate invariant' (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
end
module Cdsat_Theory_Impl3_Invariant
  use Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  use Cdsat_Theory_Var_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 116 8 118 9] forall v : (Cdsat_Theory_Value_Type.cdsat_theory_value_type) . forall k : (Cdsat_Theory_Var_Type.cdsat_theory_var_type) . Map.get (Cdsat_Theory_Model_Type.cdsat_theory_model_type_Model_0 self) k = v -> Cdsat_Theory_Var_Type.cdsat_theory_var_type_Var_1 k = Sort0.sort v
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    Fset.mem e self
end
module Cdsat_Theory_Impl3_Interp_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  function interp (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Theory_Impl3_Interp
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use map.Map
  use mach.int.Int
  use mach.int.Int32
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 124 8 136 9] match (t) with
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type v -> Map.get (Cdsat_Theory_Model_Type.cdsat_theory_model_type_Model_0 self) v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type v -> v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type r1, Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type r2) -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (- 1)
        end
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b1, Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b2) -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false
        end
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type l r -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (interp self l = interp self r)
      end
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Satisfies_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate satisfies (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_Satisfies
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Interface as Interp0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 8 141 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
end
module Cdsat_Theory_Impl3_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate satisfy_set (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 146 8 146 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains v a -> Satisfies0.satisfies self a
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type
  predicate justified_sound (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 36] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 101 8 106 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type just t val' -> forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
end
module Cdsat_Theory_Impl4_Sound_Interface
  use Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Sound
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 189 8 192 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    Fset.remove a self
end
module Cdsat_Theory_Impl4_SetLevel_Interface
  use mach.int.Int
  use set.Fset
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
end
module Cdsat_Theory_Impl4_SetLevel
  use mach.int.Int
  use set.Fset
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 204 4 204 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 210 14 210 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 209 14 209 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 208 4 208 94] s <> Fset.empty  -> (exists i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 207 4 207 74] forall i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantLevel
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 241 8 251 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _ -> SetLevel0.set_level tl j = l
        end
      end
end
module Cdsat_Theory_Impl4_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_contains (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantContains
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 272 8 285 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _ -> forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type
  predicate is_bool (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 47 8 47 36] Sort0.sort self = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  function negate (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 62 8 65 9] match (self) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (not b)
      | _ -> self
      end
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl4_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type
  predicate trail_unique (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_TrailUnique
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 290 8 302 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
end
module Cdsat_Theory_Impl4_Invariant_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant' (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Invariant
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  clone Cdsat_Theory_Impl4_InvariantContains_Interface as InvariantContains0
  clone Cdsat_Theory_Impl4_InvariantLevel_Interface as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 307 8 311 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
end
module Cdsat_Theory_Impl4_IsJustified_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate is_justified (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl4_IsJustified
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 393 4 393 55] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 394 8 397 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ _ _, _) -> true
      | _ -> false
      end
end
module Cdsat_Trail_Impl9_JustifiedIsJustified_Interface
  use Cdsat_Trail_Trail_Type
  predicate justified_is_justified (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_JustifiedIsJustified
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 317 4 317 43] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 318 8 324 9] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix -> match (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason (Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix)))) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type _ -> IsJustified0.is_justified (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (IndexLogic0.index_logic self ix)
      | _ -> true
      end
end
module Cdsat_Trail_Impl9_Invariant_Interface
  use Cdsat_Trail_Trail_Type
  predicate invariant' (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_Invariant
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Trail_Impl9_JustifiedIsJustified_Interface as JustifiedIsJustified0
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Trail_Impl9_AbstractRelation_Interface as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 305 4 305 34] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 306 8 313 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) /\ Invariant0.invariant' (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) /\ Level0.level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) = UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level self) /\ UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level self) = Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) - 1 /\ (forall j : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . forall i : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self i -> Contains0.contains self j -> i <> j -> IndexLogic0.index_logic self i <> IndexLogic0.index_logic self j) /\ JustifiedIsJustified0.justified_is_justified self
end
module Cdsat_Theory_Impl4_Acceptable_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate acceptable (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl4_Acceptable
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 8 318 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
end
module CreusotContracts_Logic_Seq_Impl2_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl2_Contains
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate contains (self : Seq.seq t) (e : t) =
    exists i : (int) . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    Fset.add e self
end
module Cdsat_Trail_Impl9_AbsJustInner_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  function abs_just_inner (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) (ix : int) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl9_AbsJustInner
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl4_Model_Interface as Model3
  clone Cdsat_Trail_Impl3_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function abs_just_inner [#"/Users/xavier/Code/cdsat/src/trail.rs" 373 4 377 44] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) (ix : int) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type), ix : int . abs_just_inner self just ix = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 12] if ix < Seq.length just then
    let set = abs_just_inner self just (ix + 1) in let ix = Seq.get just ix in let a = Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix)) in Insert0.insert set (Model2.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a), Model3.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
  else
    Fset.empty 
  )
  axiom abs_just_inner_spec : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type), ix : int . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 372 15 372 22] ix >= 0) -> true
end
module Cdsat_Trail_Impl9_AbstractJustification_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  function abstract_justification (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl9_AbstractJustification
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl9_AbsJustInner_Interface as AbsJustInner0 with axiom .
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 363 4 366 44] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 367 8 367 36] AbsJustInner0.abs_just_inner self just 0)
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 82] forall i : (int) . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 362 4 362 101] forall i : (int) . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 115] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (abstract_justification self just) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 360 4 360 115] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (abstract_justification self just) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 358 14 358 40] Fset.cardinal (abstract_justification self just) = Seq.length just)
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl10_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : seq t
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Core_Slice_Iter_Impl0_IntoIter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Slice_Iter_Impl0
  type t
end
module Cdsat_Trail_Impl9_MaxLevel_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains2.contains, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val max_level [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (assignments : seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 482 15 482 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 483 14 483 88] SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (AbstractJustification0.abstract_justification self (Model0.model assignments)) = UInt64.to_int result }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl10
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module Cdsat_Trail_Impl9_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  use Cdsat_Theory_Trail_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains2.contains, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl3_Model_Interface as Model1
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val add_justified [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (into_vec : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (val' : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 438 4 438 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 439 15 439 31] IsBool0.is_bool (Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 440 4 440 51] Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Model1.model term) (Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 441 4 441 145] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (Model3.model into_vec)) -> Satisfies0.satisfies m (Model1.model term, Model0.model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 438 4 438 40] Invariant0.invariant' ( ^ self) }
    
end
module Cdsat_Trail_Impl10_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_IndexIterator_Type
  val add_justified [@cfg:stackify] (self : borrowed (Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type)) (just : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (value : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    
end
module Cdsat_Trail_Impl10_Trail_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type
  val trail [@cfg:stackify] (self : Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type) : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
    
end
module Cdsat_Trail_ReasonModel_Type
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type
  type cdsat_trail_reasonmodel_type  =
    | Cdsat_Trail_ReasonModel_Justified_Type (Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type))
    | Cdsat_Trail_ReasonModel_Decision_Type
    | Cdsat_Trail_ReasonModel_Input_Type
    
end
module Cdsat_Trail_Impl1_ModelTy_Type
  use Cdsat_Trail_ReasonModel_Type
  type modelTy  =
    Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
end
module Cdsat_Trail_Impl1_Model_Interface
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  function model (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
    
end
module Cdsat_Trail_Impl1_Model
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 63 4 63 35] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 64 8 68 9] match (self) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type a1 -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Justified_Type (Model0.model a1)
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Decision_Type -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Decision_Type
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Input_Type -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Input_Type
      end
end
module Cdsat_Trail_Impl1
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Reason_Type
  use Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1) (other : Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module Alloc_Vec_PartialEq_Impl0
  type t
  type u
  type a1
  type a2
end
module Cdsat_Trail_Impl18_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) (rhs : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 44 16 44 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Borrow
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Cdsat_Trail_Impl18
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl1_Model as Model1 with function Model0.model = Model2.model
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type rhs = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
  clone Cdsat_Trail_Impl18_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type rhs = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl12_Decision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val decision [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
end
module Cdsat_Theory_Impl4_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  predicate satisfied_by (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (m : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 467 4 467 43] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (m : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 8 468 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> Satisfies0.satisfies m a
end
module Cdsat_Theory_Impl4_CountBounds_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function count_bounds (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : ()
end
module Cdsat_Theory_Impl4_CountBounds
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 505 4 505 31] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 506 8 511 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ _ _) _ tl -> count_bounds tl
      end
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 503 15 503 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 504 4 504 83] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_Restrict_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function restrict (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
end
module Cdsat_Theory_Impl4_Restrict
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Interface as CountBounds0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 45] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 413 8 424 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl
      else
        tl
      
      end
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 401 15 401 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 403 15 403 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 411 14 411 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 410 4 410 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 409 4 409 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 408 4 408 77] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 406 4 406 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 4 405 142] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 141] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 402 14 402 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Unsat_Interface
  use Cdsat_Theory_Trail_Type
  predicate unsat (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Unsat
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 473 4 473 30] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 474 8 474 100] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
end
module Cdsat_Theory_Impl4_Impls_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  predicate impls (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
end
module Cdsat_Theory_Impl4_Impls
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 484 4 484 41] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 485 8 485 126] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 483 4 483 57] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Concrete_Answer_Type
  type cdsat_concrete_answer_type  =
    | Cdsat_Concrete_Answer_Sat_Type
    | Cdsat_Concrete_Answer_Unsat_Type
    | Cdsat_Concrete_Answer_Unknown_Type
    
end
module Cdsat_Trail_Impl9_Unsat_Interface
  use Cdsat_Trail_Trail_Type
  predicate unsat (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_Unsat
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 295 4 295 30] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 294 4 294 16] Unsat0.unsat (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self)
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type
  type cdsat_theory_normal_type  =
    | Cdsat_Theory_Normal_Type (Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
  let function cdsat_theory_normal_type_Normal_0 (self : cdsat_theory_normal_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Normal_Type a -> a
      end
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 569 4 569 30] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 567 4 567 16] Sound0.sound (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
end
module Cdsat_Theory_Impl5_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate fail2 (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl5_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 632 4 632 57] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 12 638 39] (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) just = 0
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 629 15 629 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 630 15 630 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 631 4 631 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self))
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Cdsat_Trail_Impl9_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val len [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 14 289 50] UInt64.to_int result = Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) }
    
end
module Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  type cdsat_concrete_extendresult_type  =
    | Cdsat_Concrete_ExtendResult_Conflict_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Cdsat_Concrete_ExtendResult_Decision_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Concrete_ExtendResult_Satisfied_Type
    
  let function cdsat_concrete_extendresult_type_Decision_0 (self : cdsat_concrete_extendresult_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type _ -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      | Cdsat_Concrete_ExtendResult_Decision_Type a _ -> a
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      end
  let function cdsat_concrete_extendresult_type_Decision_1 (self : cdsat_concrete_extendresult_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Concrete_ExtendResult_Decision_Type _ a -> a
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
  let function cdsat_concrete_extendresult_type_Conflict_0 (self : cdsat_concrete_extendresult_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type a -> a
      | Cdsat_Concrete_ExtendResult_Decision_Type _ _ -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      end
end
module Cdsat_Concrete_Impl1_Extend_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Concrete_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains2.contains, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  use Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val extend [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 286 4 286 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 286 4 286 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 287 14 298 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Satisfied_Type -> true
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type t v -> Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) (Model0.model t) (Model1.model v)
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (Model2.model c) in true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 299 4 299 44] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * tl)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  type cdsat_concrete_theorystate_type  =
    | Cdsat_Concrete_TheoryState_Sat_Type
    | Cdsat_Concrete_TheoryState_Decision_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Concrete_TheoryState_Unknown_Type
    
  let function cdsat_concrete_theorystate_type_Decision_0 (self : cdsat_concrete_theorystate_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_TheoryState_Sat_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      | Cdsat_Concrete_TheoryState_Decision_Type a _ -> a
      | Cdsat_Concrete_TheoryState_Unknown_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      end
  let function cdsat_concrete_theorystate_type_Decision_1 (self : cdsat_concrete_theorystate_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_TheoryState_Sat_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Concrete_TheoryState_Decision_Type _ a -> a
      | Cdsat_Concrete_TheoryState_Unknown_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  type cdsat_theory_conflict_type  =
    | Cdsat_Theory_Conflict_Type (Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
  let function cdsat_theory_conflict_type_Conflict_1 (self : cdsat_theory_conflict_type) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Conflict_Type _ a -> a
      end
  let function cdsat_theory_conflict_type_Conflict_0 (self : cdsat_theory_conflict_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Conflict_Type a _ -> a
      end
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type core_mem_manuallydrop_manuallydrop_type 't =
    | Core_Mem_ManuallyDrop_ManuallyDrop_Type 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type alloc_vec_intoiter_intoiter_type 't 'a =
    | Alloc_Vec_IntoIter_IntoIter_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.core_mem_manuallydrop_manuallydrop_type 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl2_Model_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_Model
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl1_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
    
end
module CreusotContracts_Std1_Vec_Impl1_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module Cdsat_Concrete_ConflictHeap_Type
  type cdsat_concrete_conflictheap_type
end
module Cdsat_Concrete_Impl2_Model_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type
  function model (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Fset.fset (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Concrete_Impl2_Model
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type
  function model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 380 4 380 35] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Fset.fset (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 30] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 693 8 693 109] Sound0.sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) -> false)
end
module Cdsat_Theory_Impl6_Invariant_Interface
  use Cdsat_Theory_Conflict_Type
  predicate invariant' (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
end
module Cdsat_Theory_Impl6_Invariant
  use Cdsat_Theory_Conflict_Type
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 686 4 686 34] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 687 8 687 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a)
end
module Cdsat_Theory_Impl4_RestrictTooBig_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_too_big (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictTooBig
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 520 4 520 63] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 8 530 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 515 15 515 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 516 15 516 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 517 15 517 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 518 15 518 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 519 14 519 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  function negate_involutive (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 68 4 68 12] ()
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl4_ContainsInverse_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  function contains_inverse (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_ContainsInverse
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 341 4 341 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        contains_inverse tl d
      
      end
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 345 14 345 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type
  predicate is_bool (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type)
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 26 8 26 36] Sort0.sort self = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
end
module Cdsat_Theory_Impl3_Lemma_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  function lemma' (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (v : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
end
module Cdsat_Theory_Impl3_Lemma
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Interp_Interface as Interp0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort2.sort, axiom .
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (v : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 8 176 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type _ -> ()
      | _ -> ()
      end
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type, v : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 14 171 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl6_LearnJustified_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  function learn_justified (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (ass : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl6_LearnJustified
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use map.Const
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Lemma_Interface as Lemma0 with function Sort0.sort = Sort0.sort,
  function Sort2.sort = Sort2.sort, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Satisfies0.satisfies = Satisfies0.satisfies, function Negate0.negate = Negate0.negate,
  predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 707 4 707 52] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (ass : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 708 8 708 67] let _ = Lemma0.lemma' (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (let (a, _) = ass in a) (let (_, a) = ass in a) in ()
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, ass : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 702 15 702 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 703 15 703 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 704 4 704 37] Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 705 4 705 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 706 4 706 126] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl3_Entails_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate entails (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (j : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (c : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_Entails
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (j : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (c : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 151 8 151 84] Invariant0.invariant' self -> SatisfySet0.satisfy_set self j -> Satisfies0.satisfies self c
end
module Cdsat_Theory_Impl4_FindJustified_Interface
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function find_justified (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_FindJustified
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 4 453 46] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 454 8 463 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = kv then
        ()
      else
        find_justified tl kv
      
      end
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 450 15 450 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 451 15 451 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 452 4 452 90] forall l : (int) . forall a : (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) . Find0.find self kv = Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  function justification (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl4_Justification
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_FindJustified_Interface as FindJustified0 with predicate Sound0.sound = Sound0.sound,
  predicate Contains0.contains = Contains0.contains, function Find0.find = Find0.find,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 71] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 385 8 385 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _, _) -> j
      | _ -> Fset.empty 
      end
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 383 4 383 54] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl3_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  function resolve_sound (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl3_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 154 4 154 12] ()
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 158 14 158 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl6_Resolvef_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound1
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  function resolvef (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type
    
end
module Cdsat_Theory_Impl6_Resolvef
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound1
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use map.Const
  use set.Fset
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_ResolveSound_Interface as ResolveSound0 with predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, predicate Contains0.contains = Contains0.contains,
  function Remove0.remove = Remove0.remove, axiom .
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 720 4 720 51] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 4 712 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) just a in Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a) just)
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 713 15 713 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 714 15 714 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 715 4 715 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 716 4 716 35] Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 717 4 717 135] forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a) j /\ not IsBool0.is_bool (let (_, a) = j in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) j <= SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 719 14 719 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 718 14 718 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl6_Resolve_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate resolve (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl6_Resolve
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use map.Const
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl3_ResolveSound_Interface as ResolveSound0 with predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, predicate Contains0.contains = Contains0.contains,
  function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails, axiom .
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 733 4 733 61] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 728 4 728 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) just a in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a <= SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)) /\ Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a) just)
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 729 15 729 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 730 15 730 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 732 4 732 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  type a
end
module Cdsat_Concrete_Impl2_ModelTy_Type
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type
  type modelTy  =
    Fset.fset (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
end
module Cdsat_Concrete_Impl2
  use Cdsat_Concrete_ConflictHeap_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  clone Cdsat_Concrete_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : () =
    ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Cdsat_Concrete_Impl3_New_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val new [@cfg:stackify] (_ : ()) : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 390 14 390 36] Model0.model result = Fset.empty  }
    
end
module Alloc_Vec_Impl19_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
    ensures { Model0.model result = Model1.model self }
    
end
module Alloc_Vec_IntoIter_Impl5_Item_Type
  type t
  type a
  type item  =
    t
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with type t = t, type a = a
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a,
  type Item0.item = Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self) /\ Resolve0.resolve self
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module Cdsat_Concrete_Impl3_Insert_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val insert [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) (e : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 397 14 397 41] Model0.model ( ^ self) = Insert0.insert (Model1.model self) e }
    
end
module Core_Cmp_Ordering_Type
  type core_cmp_ordering_type  =
    | Core_Cmp_Ordering_Less_Type
    | Core_Cmp_Ordering_Equal_Type
    | Core_Cmp_Ordering_Greater_Type
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.core_cmp_ordering_type =
    if self < o then
      Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
    else
      if self = o then
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
      else
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
      
    
end
module Cdsat_Trail_Impl6_CmpLog_Interface
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  function cmp_log (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (rhs : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    
end
module Cdsat_Trail_Impl6_CmpLog
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface as CmpLog0
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 43] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (rhs : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 8 183 9] match (CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 self) (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 rhs)) with
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type -> CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 self) (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 rhs)
      end
end
module Cdsat_Concrete_Impl3_Last_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  val last [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 403 4 406 6] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type a -> Contains0.contains (Model0.model self) a /\ (forall other : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains (Model0.model self) other -> LeLog0.le_log other a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 407 14 407 58] (Model0.model self = Fset.empty ) = (result = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : t
    requires {self <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    ensures { Core_Option_Option_Type.Core_Option_Option_Some_Type result = self }
    
end
module Cdsat_Trail_Impl8_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 14 237 30] result = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 self }
    
end
module Cdsat_Concrete_Impl3_PopLast_Interface
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model1
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val pop_last [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 413 14 413 58] (Model0.model self = Fset.empty ) = (result = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 414 4 417 6] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type a -> Model1.model ( ^ self) = Remove0.remove (Model0.model self) a /\ Contains0.contains (Model0.model self) a /\ (forall other : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains (Model1.model ( ^ self)) other -> LeLog0.le_log other a) }
    
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module Cdsat_Trail_Impl11_Index_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  val index [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (index : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 553 15 553 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 554 14 554 67] result = Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 index)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 index)) }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl9_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  val clone' [@cfg:stackify] (self : uint64) : uint64
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl9
  
end
module Core_Clone_Impls_Impl19
  
end
module Cdsat_Trail_Impl29_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 125 9 125 14] result = self }
    
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Cdsat_Trail_Impl21_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 9 73 14] result = self }
    
end
module Alloc_Boxed_Impl12
  type t
  type a
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Cdsat_Trail_Impl29
  use Cdsat_Trail_Value_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type
  clone Cdsat_Trail_Impl29_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  val clone' = Clone0.clone'
end
module Core_Clone_Impls_Impl5
  
end
module Cdsat_Trail_Impl21
  use Cdsat_Trail_Sort_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
  clone Cdsat_Trail_Impl21_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl25_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 93 9 93 14] result = self }
    
end
module Alloc_Vec_Impl14_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type
  val clone' [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a
    ensures { result = self }
    
end
module Alloc_Vec_Impl14
  type t
  type a
end
module Cdsat_Trail_Impl17_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 44 9 44 14] result = self }
    
end
module Cdsat_Trail_Impl25
  use Cdsat_Trail_Term_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type
  clone Cdsat_Trail_Impl25_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl17
  use Cdsat_Trail_Reason_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
  clone Cdsat_Trail_Impl17_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl13_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] result = self }
    
end
module Cdsat_Trail_Impl5_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val is_bool [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 153 14 153 41] result = IsBool0.is_bool (Model0.model self) }
    
end
module Cdsat_Trail_Impl12_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  val is_bool [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 571 14 571 45] result = IsBool0.is_bool (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) }
    
end
module Cdsat_Concrete_Impl3_IntoVec_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val into_vec [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 423 4 423 75] forall e : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains (Model0.model self) e -> Contains1.contains (Model1.model result) e }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 424 4 424 94] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model result) -> Contains0.contains (Model0.model self) (Seq.get (Model1.model result) i) }
    
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_idempotent (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (l1 : int) (l2 : int) : ()
end
module Cdsat_Theory_Impl4_RestrictIdempotent
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 4 538 54] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 539 8 542 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> restrict_idempotent tl l1 l2
      end
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 534 15 534 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 535 15 535 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 536 15 536 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 537 14 537 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictSound_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function restrict_sound (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : ()
end
module Cdsat_Theory_Impl4_RestrictSound
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 493 4 493 43] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 494 8 499 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let _ = restrict_sound tl level in ()
      end
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 491 15 491 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 492 14 492 42] Sound0.sound (Restrict0.restrict self level))
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  use Core_Option_Option_Type
  val pop [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) /\ Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Core_Option_Option_Type.Core_Option_Option_None_Type ->  * self =  ^ self /\ Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module Cdsat_Trail_Impl9_Restrict_Interface
  use prelude.Borrow
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl8_LevelLog_Interface as LevelLog0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val restrict [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 456 4 456 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 457 15 457 36] UInt64.to_int level <= UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 456 4 456 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 458 14 458 59] Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ self) = Restrict0.restrict (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (UInt64.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 460 4 460 111] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . LevelLog0.level_log ix <= UInt64.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 461 4 461 112] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
end
module Cdsat_Trail_Impl5_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val negate [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 161 15 161 32] IsBool0.is_bool (Model0.model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 162 14 162 41] Model1.model result = Negate0.negate (Model0.model self) }
    
end
module Cdsat_Trail_Impl12_IsFirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  val is_first_order [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 576 14 576 45] result <> IsBool0.is_bool (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Cdsat_Trail_Impl11_Output_Type
  use Cdsat_Trail_Assignment_Type
  type output  =
    Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
end
module Core_Ops_Index_Index_Output_Type
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Borrow
  clone Core_Ops_Index_Index_Output_Type as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Cdsat_Trail_Impl11
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Contains as Contains0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Cdsat_Trail_Impl11_Output_Type as Output0
  clone Cdsat_Trail_Impl11_Index_Interface as Index0 with predicate Contains0.contains = Contains0.contains,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type,
  type idx = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, val index = Index0.index,
  type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output_Type as Output1 with type self = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type,
  type idx = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, type output = Output0.output
end
module Cdsat_Trail_Impl9_Justification_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl8_LevelLog_Interface as LevelLog0
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound0.sound, predicate Entails0.entails = Entails0.entails, axiom .
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains2.contains, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val justification [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 427 4 427 91] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model result) -> Contains0.contains self (Seq.get (Model0.model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 428 14 428 99] AbstractJustification0.abstract_justification self (Model0.model result) = Justification0.justification (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 429 4 429 105] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model result) -> LevelLog0.level_log (Seq.get (Model0.model result) i) <= LevelLog0.level_log a }
    
end
module Cdsat_Trail_Impl12_IsJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  val is_justified [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 581 14 581 75] result = (exists j : (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) . Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason self = Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type j) }
    
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Cdsat_Trail_Impl9_AddDecision_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val add_decision [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (val' : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 392 15 392 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 394 4 394 51] Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Model0.model term) (Model1.model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 393 14 393 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 395 4 395 48] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ self)) }
    
end
module Alloc_Vec_Impl19
  type t
  type a
end
module Alloc_Vec_IntoIter_Impl5
  type t
  type a
end
module Cdsat_Trail_Impl13
  use Cdsat_Trail_Assignment_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
  clone Cdsat_Trail_Impl13_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  val clone' = Clone0.clone'
end
module Core_Iter_Traits_Collect_Impl0
  type i
end
module CreusotContracts_Std1_Vec_Impl1_Completed_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
end
module CreusotContracts_Std1_Vec_Impl1_Completed
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  predicate completed (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
end
module CreusotContracts_Logic_Ord_Impl2
  
end
module CreusotContracts_Logic_Ord_Impl2_CmpLeLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_le_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpLeLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_le_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpLtLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_lt_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpLtLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_lt_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGeLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_ge_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGeLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_ge_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGtLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_gt_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGtLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_gt_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Refl_Interface
  use mach.int.Int
  use prelude.UIntSize
  function refl (_1' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Refl
  use mach.int.Int
  use prelude.UIntSize
  function refl (_1' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Trans_Interface
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function trans (_1' : usize) (_2' : usize) (_3' : usize) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Trans
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function trans (_1' : usize) (_2' : usize) (_3' : usize) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym1_Interface
  use mach.int.Int
  use prelude.UIntSize
  function antisym1 (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym1
  use mach.int.Int
  use prelude.UIntSize
  function antisym1 (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym2_Interface
  use mach.int.Int
  use prelude.UIntSize
  function antisym2 (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym2
  use mach.int.Int
  use prelude.UIntSize
  function antisym2 (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_EqCmp_Interface
  use mach.int.Int
  use prelude.UIntSize
  function eq_cmp (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_EqCmp
  use mach.int.Int
  use prelude.UIntSize
  function eq_cmp (_1' : usize) (_2' : usize) : () =
    ()
end
module Cdsat_Trail_Impl6_CmpLeLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_le_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpLeLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 186 4 186 10] ()
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 187 14 187 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module Cdsat_Trail_Impl6_CmpLtLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_lt_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpLtLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 190 4 190 10] ()
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 191 14 191 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module Cdsat_Trail_Impl6_CmpGeLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_ge_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpGeLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 193 4 193 10] ()
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 194 14 194 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module Cdsat_Trail_Impl6_CmpGtLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_gt_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpGtLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 197 4 197 10] ()
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 198 14 198 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module Cdsat_Trail_Impl6_Refl_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function refl (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
end
module Cdsat_Trail_Impl6_Refl
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 4 201 10] ()
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
end
module Cdsat_Trail_Impl6_Trans_Interface
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function trans (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
    
end
module Cdsat_Trail_Impl6_Trans
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 205 4 205 10] ()
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 208 14 208 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl6_Antisym1_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym1 (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_Antisym1
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 211 4 211 10] ()
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 213 14 213 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module Cdsat_Trail_Impl6_Antisym2_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym2 (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_Antisym2
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 216 4 216 10] ()
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module Cdsat_Trail_Impl6_EqCmp_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function eq_cmp (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_EqCmp
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 221 4 221 10] ()
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 222 14 222 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
end
module Cdsat_Trail_Impl6
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog2
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog as CmpLog0 with function CmpLog0.cmp_log = CmpLog2.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLeLog as CmpLeLog0 with predicate LeLog0.le_log = LeLog0.le_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_le_log = CmpLeLog0.cmp_le_log, predicate LeLog0.le_log = LeLog0.le_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_log = CmpLog0.cmp_log
  goal cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 187 14 187 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 309 8 309 58] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type))
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLtLog as CmpLtLog0 with predicate LtLog0.lt_log = LtLog0.lt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_lt_log = CmpLtLog0.cmp_lt_log, predicate LtLog0.lt_log = LtLog0.lt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 191 14 191 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 313 38 314 38] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type))
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGeLog as CmpGeLog0 with predicate GeLog0.ge_log = GeLog0.ge_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_ge_log = CmpGeLog0.cmp_ge_log, predicate GeLog0.ge_log = GeLog0.ge_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 194 14 194 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 324 7 327 0] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type))
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGtLog as CmpGtLog0 with predicate GtLog0.gt_log = GtLog0.gt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_gt_log = CmpGtLog0.cmp_gt_log, predicate GtLog0.gt_log = GtLog0.gt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 198 14 198 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 332 18 332 68] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type))
  clone Cdsat_Trail_Impl6_Refl as Refl0 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function refl = Refl0.refl, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 332 134 334 12] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
  clone Cdsat_Trail_Impl6_Trans as Trans0 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function trans = Trans0.trans, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . (([#"/Users/xavier/Code/cdsat/src/concrete.rs" 335 9 336 7] CmpLog0.cmp_log y z = o) && ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 334 64 334 81] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o)) /\ (forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 208 14 208 31] CmpLog0.cmp_log x z = o) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 336 24 337 9] CmpLog0.cmp_log x z = o))
  clone Cdsat_Trail_Impl6_Antisym1 as Antisym10 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym11 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function antisym1 = Antisym10.antisym1, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . (([#"/Users/xavier/Code/cdsat/src/concrete.rs" 338 34 339 9] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)) /\ (forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 213 14 213 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 339 26 340 28] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type))
  clone Cdsat_Trail_Impl6_Antisym2 as Antisym20 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym21 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function antisym2 = Antisym20.antisym2, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . (([#"/Users/xavier/Code/cdsat/src/concrete.rs" 342 23 343 22] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)) /\ (forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 39 344 10] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type))
  clone Cdsat_Trail_Impl6_EqCmp as EqCmp0 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function eq_cmp = EqCmp0.eq_cmp, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 222 14 222 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)) -> ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 19 346 33] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type))
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Concrete_Solver_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains2.contains, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val resolve_conflict [@cfg:stackify] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (conflict : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 102 15 102 36] Seq.length (Model0.model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 99] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model conflict) -> Contains0.contains ( * trail) (Seq.get (Model0.model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 4 108 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (Model0.model conflict) in SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) conflict > 0 /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant0.invariant' ( ^ trail) }
    
end
module Cdsat_Concrete_Impl0_ResolveConflict
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use set.Fset
  use mach.int.UInt64
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with function Level0.level = Level0.level,
  function Len0.len = Len0.len
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant4 with function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains4 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate Contains0.contains = Contains4.contains, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains3 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with predicate Contains0.contains = Contains3.contains,
  predicate Contains1.contains = Contains4.contains,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains3.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with function Level0.level = Level0.level,
  function SetLevel0.set_level = SetLevel0.set_level, function Len0.len = Len0.len,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains3.contains, function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant2 with predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
  predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
  predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains4.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Sort0.sort = Sort1.sort, function Sort1.sort = Sort0.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with function Interp0.interp = Interp0.interp,
  predicate Invariant0.invariant' = Invariant3.invariant', function Sort0.sort = Sort1.sort,
  function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with predicate Contains0.contains = Contains3.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl3_ResolveSound as ResolveSound0 with predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, predicate Contains0.contains = Contains3.contains,
  function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with predicate Sound0.sound = Sound1.sound,
  predicate Contains0.contains = Contains4.contains, function Find0.find = Find0.find,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len
  use Cdsat_Trail_TrailIndex_Type
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model9 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model9.model
  clone CreusotContracts_Std1_Slice_Impl5_ProducesTrans as ProducesTrans1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate Produces0.produces = Produces1.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl5_ProducesRefl as ProducesRefl1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate Produces0.produces = Produces1.produces, axiom .
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with function Sort0.sort = Sort1.sort, function Sort2.sort = Sort0.sort,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Satisfies0.satisfies = Satisfies0.satisfies,
  function Negate0.negate = Negate0.negate, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Interp0.interp = Interp0.interp, axiom .
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model8
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with predicate Contains0.contains = Contains4.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains4.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function CountBounds0.count_bounds = CountBounds0.count_bounds, axiom .
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Concrete_ConflictHeap_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_Model as Model7 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Std1_Vec_Impl1_Produces as Produces0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl1_ProducesTrans as ProducesTrans0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_ProducesRefl as ProducesRefl0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Produces0.produces = Produces0.produces, axiom .
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl4_Model as Model4
  clone Cdsat_Trail_Impl3_Model as Model3 with function Model0.model = Model8.model,
  function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_AbsJustInner as AbsJustInner0 with function Model0.model = Model5.model,
  function Model1.model = Model6.model, function Model2.model = Model3.model, function Model3.model = Model4.model,
  function Insert0.insert = Insert0.insert, axiom .
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with function Model0.model = Model3.model,
  function Model1.model = Model4.model
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with function Model0.model = Model5.model,
  function Model1.model = Model6.model, function TermValue0.term_value = TermValue0.term_value
  clone Cdsat_Trail_Impl9_Contains as Contains0 with function Model0.model = Model5.model,
  function Model1.model = Model6.model
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with predicate Contains0.contains = Contains0.contains,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate IsJustified0.is_justified = IsJustified0.is_justified, function Model0.model = Model5.model,
  function Model1.model = Model6.model
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with predicate Contains0.contains = Contains0.contains,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Contains1.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function LevelLog0.level_log = LevelLog0.level_log,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Justification as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails,
  function FindJustified0.find_justified = FindJustified0.find_justified, function Find0.find = Find0.find,
  predicate Contains0.contains = Contains4.contains,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with predicate Sound0.sound = Sound1.sound,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant1 with function SetLevel0.set_level = SetLevel0.set_level,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains3.contains,
  predicate Contains1.contains = Contains4.contains,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_Resolve as Resolve0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, function Justification0.justification = Justification0.justification,
  function ResolveSound0.resolve_sound = ResolveSound0.resolve_sound,
  predicate IsJustified0.is_justified = IsJustified0.is_justified, predicate Contains0.contains = Contains3.contains,
  predicate IsBool0.is_bool = IsBool1.is_bool, function LevelOf0.level_of = LevelOf0.level_of,
  function SetLevel0.set_level = SetLevel0.set_level, function Remove0.remove = Remove0.remove,
  predicate Sound1.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl6_Resolvef as Resolvef0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Contains0.contains = Contains3.contains,
  function Justification0.justification = Justification0.justification, predicate IsBool0.is_bool = IsBool1.is_bool,
  function LevelOf0.level_of = LevelOf0.level_of, function SetLevel0.set_level = SetLevel0.set_level,
  predicate Sound1.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, function ResolveSound0.resolve_sound = ResolveSound0.resolve_sound,
  function Remove0.remove = Remove0.remove, predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, axiom .
  clone Cdsat_Theory_Impl0_IsBool as IsBool0 with function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl6_LearnJustified as LearnJustified0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Contains0.contains = Contains3.contains,
  predicate IsBool0.is_bool = IsBool0.is_bool, predicate IsBool1.is_bool = IsBool1.is_bool,
  predicate Invariant1.invariant' = Invariant3.invariant', function Remove0.remove = Remove0.remove,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, function Negate0.negate = Negate0.negate,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, function Lemma0.lemma' = Lemma0.lemma',
  function Sort0.sort = Sort1.sort, function Sort2.sort = Sort0.sort, axiom .
  clone Cdsat_Theory_Impl4_ContainsInverse as ContainsInverse0 with predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate Contains0.contains = Contains4.contains, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function NegateInvolutive0.negate_involutive = NegateInvolutive0.negate_involutive,
  function ToPair0.to_pair = ToPair0.to_pair, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains4.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function ToPair0.to_pair = ToPair0.to_pair, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_Model as Model2
  clone CreusotContracts_Logic_Seq_Impl2_Contains as Contains1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains3.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains1.contains,
  function AbsJustInner0.abs_just_inner = AbsJustInner0.abs_just_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
  predicate Sound0.sound = Sound1.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  function Level0.level = Level0.level, function Model0.model = Model5.model,
  predicate Contains0.contains = Contains0.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
  function Len0.len = Len0.len
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Slice
  clone CreusotContracts_Logic_Ord_Impl2_EqCmp as EqCmp2
  clone CreusotContracts_Logic_Ord_Impl2_Antisym2 as Antisym22
  clone CreusotContracts_Logic_Ord_Impl2_Antisym1 as Antisym12
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_Trans as Trans2
  clone CreusotContracts_Logic_Ord_Impl2_Refl as Refl2
  clone CreusotContracts_Logic_Ord_Impl2_CmpGtLog as CmpGtLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpGeLog as CmpGeLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpLtLog as CmpLtLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpLeLog as CmpLeLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl6_CmpLog as CmpLog0 with function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl6_EqCmp as EqCmp1 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Antisym2 as Antisym21 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Antisym1 as Antisym11 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Trans as Trans1 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Refl as Refl1 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGtLog as CmpGtLog1 with predicate GtLog0.gt_log = GtLog0.gt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGeLog as CmpGeLog1 with predicate GeLog0.ge_log = GeLog0.ge_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLtLog as CmpLtLog1 with predicate LtLog0.lt_log = LtLog0.lt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLeLog as CmpLeLog1 with predicate LeLog0.le_log = LeLog0.le_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Impls as Impls0 with predicate Unsat0.unsat = Unsat0.unsat,
  predicate Invariant0.invariant' = Invariant3.invariant', function Restrict0.restrict = Restrict0.restrict,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Core_Slice_Iter_Impl173_Item_Type as Item1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Slice_Impl5_Completed as Completed1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model9.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model13 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model14 with type t = seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model13.model
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with predicate Contains0.contains = Contains4.contains,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model12 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Model_Impl1_Model as Model10 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Vec_Impl1_Completed as Completed0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model7.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl9_AddDecision_Interface as AddDecision0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate Acceptable0.acceptable = Acceptable0.acceptable, predicate Impls0.impls = Impls0.impls,
  predicate Unsat0.unsat = Unsat0.unsat
  clone Core_Slice_Iter_Impl173_Next_Interface as Next1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate Completed0.completed = Completed1.completed, predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter2 with type i = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
  clone Core_Slice_Impl0_Iter_Interface as Iter1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model9.model, function Model1.model = Model14.model
  clone Alloc_Vec_Impl10_Deref_Interface as Deref0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model13.model,
  function Model1.model = Model0.model
  clone Cdsat_Trail_Impl12_IsJustified_Interface as IsJustified1
  clone Cdsat_Trail_Impl9_Justification_Interface as Justification1 with function Model0.model = Model0.model,
  predicate Contains0.contains = Contains0.contains,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function Justification0.justification = Justification0.justification,
  function LevelLog0.level_log = LevelLog0.level_log, predicate Contains1.contains = Contains3.contains,
  predicate Contains2.contains = Contains1.contains, predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Entails0.entails = Entails0.entails
  clone Cdsat_Trail_Impl12_Decision_Interface as Decision0
  clone Cdsat_Trail_Impl12_IsFirstOrder_Interface as IsFirstOrder0 with function Model0.model = Model4.model,
  predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl9_AddJustified_Interface as AddJustified0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model4.model, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Model1.model = Model3.model, predicate Acceptable0.acceptable = Acceptable0.acceptable,
  predicate Invariant1.invariant' = Invariant3.invariant', function Model3.model = Model0.model,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate Contains0.contains = Contains0.contains, predicate Contains1.contains = Contains3.contains,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Contains2.contains = Contains1.contains
  clone Cdsat_Trail_Impl5_Negate_Interface as Negate1 with function Model0.model = Model12.model,
  predicate IsBool0.is_bool = IsBool1.is_bool, function Model1.model = Model4.model,
  function Negate0.negate = Negate0.negate
  clone Cdsat_Trail_Impl9_Restrict_Interface as Restrict1 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Restrict0.restrict = Restrict0.restrict, function LevelLog0.level_log = LevelLog0.level_log,
  predicate Contains0.contains = Contains0.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains1.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Concrete_Impl3_IntoVec_Interface as IntoVec0 with function Model0.model = Model2.model,
  predicate Contains0.contains = Contains2.contains, function Model1.model = Model0.model,
  predicate Contains1.contains = Contains1.contains
  clone Cdsat_Trail_Impl12_IsBool_Interface as IsBool2 with function Model0.model = Model4.model,
  predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl13_Clone_Interface as Clone0
  clone Cdsat_Trail_Impl11_Index_Interface as Index0 with predicate Contains0.contains = Contains0.contains,
  function Model0.model = Model5.model, function Model1.model = Model6.model
  clone Cdsat_Concrete_Impl3_PopLast_Interface as PopLast0 with function Model0.model = Model10.model,
  function Model1.model = Model2.model, function Remove0.remove = Remove1.remove,
  predicate Contains0.contains = Contains2.contains, predicate LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Trail_Impl8_Level_Interface as Level1
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl3_Last_Interface as Last0 with function Model0.model = Model11.model,
  predicate Contains0.contains = Contains2.contains, predicate LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Concrete_Impl3_Insert_Interface as Insert1 with function Model0.model = Model2.model,
  function Model1.model = Model10.model, function Insert0.insert = Insert2.insert
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Produces0.produces = Produces0.produces
  clone Alloc_Vec_Impl19_IntoIter_Interface as IntoIter1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model7.model,
  function Model1.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve4.resolve
  clone Cdsat_Concrete_Impl3_New_Interface as New0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type
  let rec cfg resolve_conflict [@cfg:stackify] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 109 4 109 80] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (conflict : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 102 15 102 36] Seq.length (Model0.model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 99] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model conflict) -> Contains0.contains ( * trail) (Seq.get (Model0.model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 4 108 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (Model0.model conflict) in SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) conflict > 0 /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant0.invariant' ( ^ trail) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type);
  var trail_2 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var conflict_3 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var heap_4 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  ghost var abs_cflct_5 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _6 : ();
  var _7 : ();
  var iter_8 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var iter_old_10 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _11 : ();
  ghost var produced_12 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _13 : ();
  var _14 : ();
  var _15 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _16 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _17 : isize;
  var i_18 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  ghost var _19 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _20 : ();
  var a_21 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _22 : bool;
  var _23 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _24 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _25 : ();
  var _26 : ();
  var _27 : ();
  var max_ix_28 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _29 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _30 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _31 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var conflict_level_32 : usize;
  var _33 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _34 : ();
  var _35 : ();
  var _36 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _37 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _38 : isize;
  var ix_39 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _40 : ();
  var _41 : ();
  var rem_level_42 : usize;
  var _43 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _44 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _45 : isize;
  var ix2_46 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _47 : ();
  var _48 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var a_49 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _50 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _51 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _52 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _53 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _54 : ();
  var _55 : ();
  var _56 : ();
  var _57 : bool;
  var _58 : bool;
  var _59 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _60 : bool;
  var _61 : usize;
  var _62 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _63 : usize;
  var _64 : ();
  var _65 : ();
  var _66 : ();
  var just_67 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _68 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _69 : ();
  var _70 : ();
  var _71 : ();
  var _72 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _73 : usize;
  var _74 : ();
  var _75 : ();
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var _79 : ();
  var _80 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _81 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _82 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _83 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _84 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _85 : ();
  var _86 : bool;
  var _87 : bool;
  var _88 : bool;
  var _89 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _90 : bool;
  var _91 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _92 : bool;
  var _93 : usize;
  var _94 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _95 : usize;
  var _96 : ();
  var _97 : ();
  var _98 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _99 : usize;
  var _100 : usize;
  var _101 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var just_102 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _103 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _104 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _105 : bool;
  var _106 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _107 : ();
  var _108 : bool;
  var _109 : usize;
  var _110 : usize;
  var _111 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var iter_112 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _113 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _114 : seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _115 : seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _116 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var iter_old_117 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _118 : ();
  ghost var produced_119 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _120 : ();
  var _121 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _122 : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type));
  var _123 : isize;
  var i_124 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  ghost var _125 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _126 : ();
  var jix_127 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var j_128 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _129 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _130 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _131 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _132 : bool;
  var _133 : bool;
  var _134 : bool;
  var _135 : usize;
  var _136 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _137 : usize;
  var _138 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _139 : bool;
  var _140 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _141 : bool;
  var _142 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _143 : ();
  var _144 : ();
  var _145 : ();
  var _146 : ();
  var _147 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _148 : usize;
  var _149 : usize;
  var _150 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _151 : ();
  var _152 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _153 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _154 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _155 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _156 : ();
  var _157 : ();
  var _158 : ();
  var _159 : ();
  var _160 : ();
  var _161 : ();
  var _162 : ();
  var _163 : ();
  ghost var old_c_164 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _165 : ();
  ghost var _166 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _167 : ();
  var _168 : ();
  var _169 : ();
  var _170 : ();
  var _171 : ();
  ghost var old_heap_172 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _173 : ();
  ghost var abs_just_174 : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type);
  var _175 : ();
  var _176 : ();
  var _177 : ();
  var iter_178 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _179 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var iter_old_180 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _181 : ();
  ghost var produced_182 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _183 : ();
  var _184 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _185 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _186 : isize;
  var i_187 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  ghost var _188 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _189 : ();
  var a_190 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _191 : bool;
  var _192 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _193 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _194 : ();
  var _195 : ();
  var _196 : ();
  var _197 : ();
  var _198 : ();
  var _199 : ();
  var _200 : ();
  var _201 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    conflict_3 <- conflict;
    goto BB0
  }
  BB0 {
    assume { Resolve1.resolve self_1 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    heap_4 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 37 111 56] New0.new ());
    goto BB4
  }
  BB4 {
    _6 <- ();
    abs_cflct_5 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 112 53 112 148] Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model conflict_3)));
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _9 };
    _9 <- conflict_3;
    conflict_3 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    iter_8 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] IntoIter1.into_iter _9);
    goto BB6
  }
  BB6 {
    _11 <- ();
    iter_old_10 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] iter_8);
    goto BB7
  }
  BB7 {
    _13 <- ();
    produced_12 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] Seq.empty );
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] Produces0.produces iter_old_10 produced_12 iter_8 };
    invariant mem { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains produced_12 a -> Contains2.contains (Model2.model heap_4) a };
    invariant mem { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] forall i : (int) . 0 <= i /\ i < Seq.length produced_12 -> Contains2.contains (Model2.model heap_4) (Seq.get produced_12 i) };
    invariant mem2 { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains1.contains produced_12 a };
    _16 <- borrow_mut iter_8;
    iter_8 <-  ^ _16;
    _15 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] Next0.next _16);
    goto BB14
  }
  BB14 {
    switch (_15)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB15
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB17
      end
  }
  BB15 {
    _7 <- ();
    goto BB20
  }
  BB16 {
    assume { Resolve3.resolve trail_2 };
    absurd
  }
  BB17 {
    i_18 <- Core_Option_Option_Type.core_option_option_type_Some_0 _15;
    _20 <- ();
    _19 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 8 114 85] Seq.snoc produced_12 i_18);
    goto BB18
  }
  BB18 {
    produced_12 <- _19;
    _19 <- any Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
    a_21 <- i_18;
    _23 <- borrow_mut heap_4;
    heap_4 <-  ^ _23;
    _24 <- a_21;
    _22 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 118 12 118 26] Insert1.insert _23 _24);
    goto BB19
  }
  BB19 {
    _14 <- ();
    goto BB13
  }
  BB20 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 120 8 120 103] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    goto BB21
  }
  BB21 {
    _26 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 122 22 122 44] Model2.model heap_4 <> Fset.empty  };
    goto BB22
  }
  BB22 {
    _27 <- ();
    _31 <- heap_4;
    _30 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 22 123 33] Last0.last _31);
    goto BB23
  }
  BB23 {
    _29 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 22 123 42] Unwrap0.unwrap _30);
    goto BB24
  }
  BB24 {
    max_ix_28 <- _29;
    _33 <- max_ix_28;
    conflict_level_32 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 29 124 43] Level1.level _33);
    goto BB25
  }
  BB25 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 125 8 125 80] exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) ix /\ LevelLog0.level_log ix > 0 };
    goto BB26
  }
  BB26 {
    _34 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 126 22 126 41] 0 < UInt64.to_int conflict_level_32 };
    _35 <- ();
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    invariant cflict { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 28 127 55] Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 abs_cflct_5 = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2) };
    invariant cflct_sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 128 33 128 50] Sound0.sound abs_cflct_5 };
    invariant cflict_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 129 32 129 53] Invariant1.invariant' abs_cflct_5 };
    invariant level { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 57] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) ix -> LevelLog0.level_log ix <= UInt64.to_int conflict_level_32 };
    invariant to_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 57] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains0.contains ( * trail_2) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    invariant from_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 57] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( * trail_2) ix /\ Contains2.contains (Model2.model heap_4) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    _37 <- borrow_mut heap_4;
    heap_4 <-  ^ _37;
    _36 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 133 29 133 44] PopLast0.pop_last _37);
    goto BB31
  }
  BB31 {
    switch (_36)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB32
      | _ -> goto BB142
      end
  }
  BB32 {
    ix_39 <- Core_Option_Option_Type.core_option_option_type_Some_0 _36;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 134 26 134 47] not Contains2.contains (Model2.model heap_4) ix_39 };
    goto BB33
  }
  BB33 {
    _40 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 136 26 136 62] LevelLog0.level_log ix_39 <= LevelLog0.level_log max_ix_28 };
    _41 <- ();
    _44 <- heap_4;
    _43 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 137 34 137 45] Last0.last _44);
    goto BB34
  }
  BB34 {
    switch (_43)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB35
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB37
      end
  }
  BB35 {
    rem_level_42 <- (0 : usize);
    goto BB39
  }
  BB36 {
    assume { Resolve3.resolve trail_2 };
    absurd
  }
  BB37 {
    ix2_46 <- Core_Option_Option_Type.core_option_option_type_Some_0 _43;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 139 34 139 67] LevelLog0.level_log ix2_46 <= LevelLog0.level_log ix_39 };
    _47 <- ();
    _48 <- ix2_46;
    rem_level_42 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 140 20 140 31] Level1.level _48);
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    _52 <-  * trail_2;
    _53 <- ix_39;
    _51 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 145 20 145 29] Index0.index _52 _53);
    goto BB40
  }
  BB40 {
    _50 <- _51;
    a_49 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 145 20 145 37] Clone0.clone' _50);
    goto BB41
  }
  BB41 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 146 26 146 45] LevelLog0.level_log ix_39 >= 0 };
    _54 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 147 26 147 54] UInt64.to_int rem_level_42 <= LevelLog0.level_log ix_39 };
    _55 <- ();
    _59 <- a_49;
    _58 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 149 15 149 26] IsBool2.is_bool _59);
    goto BB45
  }
  BB42 {
    _57 <- false;
    goto BB44
  }
  BB43 {
    _62 <- ix_39;
    _61 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 149 30 149 40] Level1.level _62);
    goto BB46
  }
  BB44 {
    switch (_57)
      | False -> goto BB58
      | _ -> goto BB47
      end
  }
  BB45 {
    switch (_58)
      | False -> goto BB42
      | _ -> goto BB43
      end
  }
  BB46 {
    _63 <- rem_level_42;
    _60 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 149 30 149 52] _61 > _63);
    _57 <- _60;
    _60 <- any bool;
    goto BB44
  }
  BB47 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 151 16 151 97] let _ = RestrictTooBig0.restrict_too_big (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (LevelLog0.level_log ix_39) (TermValue0.term_value a_49) in true };
    _65 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 152 16 152 81] let _ = ContainsInverse0.contains_inverse (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (TermValue0.term_value a_49) in true };
    _66 <- ();
    _68 <- heap_4;
    heap_4 <- any Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
    just_67 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 27 153 42] IntoVec0.into_vec _68);
    goto BB48
  }
  BB48 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 154 16 154 113] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model just_67) -> LevelLog0.level_log (Seq.get (Model0.model just_67) i) <= UInt64.to_int rem_level_42 };
    goto BB49
  }
  BB49 {
    _69 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 156 16 156 162] forall b : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . b <> TermValue0.term_value a_49 -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) b -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains (Model0.model just_67) ix /\ IndexLogic0.index_logic ( * trail_2) ix = b) };
    goto BB50
  }
  BB50 {
    _70 <- ();
    _72 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _72) };
    _73 <- rem_level_42;
    _71 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 157 16 157 41] Restrict1.restrict _72 _73);
    goto BB51
  }
  BB51 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 158 16 158 162] forall b : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . b <> TermValue0.term_value a_49 -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) b -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains (Model0.model just_67) ix /\ IndexLogic0.index_logic ( * trail_2) ix = b) };
    goto BB52
  }
  BB52 {
    _74 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 30 160 49] IsBool0.is_bool (Model3.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a_49)) };
    goto BB53
  }
  BB53 {
    _75 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 161 16 161 103] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model just_67) -> Contains0.contains ( * trail_2) (Seq.get (Model0.model just_67) i) };
    goto BB54
  }
  BB54 {
    _76 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 162 30 162 71] let _ = LearnJustified0.learn_justified abs_cflct_5 (TermValue0.term_value a_49) in true };
    _77 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 163 16 163 144] forall b : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . b <> TermValue0.term_value a_49 -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) b -> Contains3.contains (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model just_67)) b };
    goto BB55
  }
  BB55 {
    _78 <- ();
    _80 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _80) };
    assume { Resolve2.resolve _81 };
    _81 <- just_67;
    just_67 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _82 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a_49;
    a_49 <- (let Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type a b c d = a_49 in Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type (any Cdsat_Trail_Term_Type.cdsat_trail_term_type) b c d);
    _84 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a_49;
    _83 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 50 164 64] Negate1.negate _84);
    goto BB56
  }
  BB56 {
    _79 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 16 164 65] AddJustified0.add_justified _80 _81 _82 _83);
    goto BB57
  }
  BB57 {
    assume { Resolve3.resolve trail_2 };
    _0 <- ();
    goto BB145
  }
  BB58 {
    _56 <- ();
    _89 <- a_49;
    _88 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 15 170 33] IsFirstOrder0.is_first_order _89);
    goto BB65
  }
  BB59 {
    _86 <- false;
    goto BB61
  }
  BB60 {
    _94 <- ix_39;
    _93 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 53 170 63] Level1.level _94);
    goto BB67
  }
  BB61 {
    switch (_86)
      | False -> goto BB71
      | _ -> goto BB68
      end
  }
  BB62 {
    _87 <- false;
    goto BB64
  }
  BB63 {
    _91 <- a_49;
    _90 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 37 170 49] Decision0.decision _91);
    goto BB66
  }
  BB64 {
    switch (_87)
      | False -> goto BB59
      | _ -> goto BB60
      end
  }
  BB65 {
    switch (_88)
      | False -> goto BB62
      | _ -> goto BB63
      end
  }
  BB66 {
    _87 <- _90;
    _90 <- any bool;
    goto BB64
  }
  BB67 {
    _95 <- rem_level_42;
    _92 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 53 170 75] _93 > _95);
    _86 <- _92;
    _92 <- any bool;
    goto BB61
  }
  BB68 {
    _98 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _98) };
    _101 <- ix_39;
    _100 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 31 171 41] Level1.level _101);
    goto BB69
  }
  BB69 {
    _99 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 31 171 45] _100 - (1 : usize));
    _97 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 16 171 46] Restrict1.restrict _98 _99);
    goto BB70
  }
  BB70 {
    assume { Resolve3.resolve trail_2 };
    _0 <- ();
    goto BB146
  }
  BB71 {
    _85 <- ();
    _103 <-  * trail_2;
    _104 <- ix_39;
    just_102 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 176 23 176 46] Justification1.justification _103 _104);
    goto BB72
  }
  BB72 {
    _106 <- a_49;
    _105 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 178 15 178 31] IsJustified1.is_justified _106);
    goto BB73
  }
  BB73 {
    switch (_105)
      | False -> goto BB138
      | _ -> goto BB74
      end
  }
  BB74 {
    _109 <- rem_level_42;
    _111 <- ix_39;
    _110 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 179 32 179 42] Level1.level _111);
    goto BB75
  }
  BB75 {
    _108 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 179 19 179 42] _109 = _110);
    switch (_108)
      | False -> goto BB106
      | _ -> goto BB76
      end
  }
  BB76 {
    _116 <- just_102;
    _115 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 181 31 181 42] Deref0.deref _116);
    goto BB77
  }
  BB77 {
    _114 <- _115;
    _113 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 181 31 181 42] Iter1.iter _114);
    goto BB78
  }
  BB78 {
    iter_112 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 45] IntoIter2.into_iter _113);
    goto BB79
  }
  BB79 {
    _118 <- ();
    iter_old_117 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 45] iter_112);
    goto BB80
  }
  BB80 {
    _120 <- ();
    produced_119 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 45] Seq.empty );
    goto BB81
  }
  BB81 {
    goto BB82
  }
  BB82 {
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 45] Produces1.produces iter_old_117 produced_119 iter_112 };
    invariant dummy { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 39 180 43] true };
    _122 <- borrow_mut iter_112;
    iter_112 <-  ^ _122;
    _121 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 45] Next1.next _122);
    goto BB83
  }
  BB83 {
    switch (_121)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB84
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB86
      end
  }
  BB84 {
    _107 <- ();
    goto BB107
  }
  BB85 {
    assume { Resolve3.resolve trail_2 };
    assume { Resolve2.resolve just_102 };
    absurd
  }
  BB86 {
    i_124 <- Core_Option_Option_Type.core_option_option_type_Some_0 _121;
    _126 <- ();
    _125 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 45] Seq.snoc produced_119 i_124);
    goto BB87
  }
  BB87 {
    produced_119 <- _125;
    _125 <- any Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
    jix_127 <- i_124;
    _130 <-  * trail_2;
    _131 <- jix_127;
    _129 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 33 182 44] Index0.index _130 _131);
    goto BB88
  }
  BB88 {
    j_128 <- _129;
    _136 <- jix_127;
    _135 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 27 184 38] Level1.level _136);
    goto BB95
  }
  BB89 {
    _132 <- false;
    goto BB91
  }
  BB90 {
    _142 <- j_128;
    _141 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 78 184 90] Decision0.decision _142);
    goto BB98
  }
  BB91 {
    switch (_132)
      | False -> goto BB105
      | _ -> goto BB99
      end
  }
  BB92 {
    _133 <- false;
    goto BB94
  }
  BB93 {
    _140 <- j_128;
    _139 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 56 184 74] IsFirstOrder0.is_first_order _140);
    goto BB97
  }
  BB94 {
    switch (_133)
      | False -> goto BB89
      | _ -> goto BB90
      end
  }
  BB95 {
    _138 <- ix_39;
    _137 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 42 184 52] Level1.level _138);
    goto BB96
  }
  BB96 {
    _134 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 27 184 52] _135 = _137);
    switch (_134)
      | False -> goto BB92
      | _ -> goto BB93
      end
  }
  BB97 {
    _133 <- _139;
    _139 <- any bool;
    goto BB94
  }
  BB98 {
    _132 <- _141;
    _141 <- any bool;
    goto BB91
  }
  BB99 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 186 42 186 61] LevelLog0.level_log jix_127 > 0 };
    _144 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 188 42 188 60] IsBool1.is_bool (Model4.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a_49)) };
    goto BB100
  }
  BB100 {
    _145 <- ();
    _147 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _147) };
    _150 <- ix_39;
    _149 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 190 43 190 53] Level1.level _150);
    goto BB101
  }
  BB101 {
    _148 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 190 43 190 57] _149 - (1 : usize));
    _146 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 190 28 190 58] Restrict1.restrict _147 _148);
    goto BB102
  }
  BB102 {
    _152 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _152) };
    _153 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a_49;
    a_49 <- (let Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type a b c d = a_49 in Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type (any Cdsat_Trail_Term_Type.cdsat_trail_term_type) b c d);
    _155 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a_49;
    _154 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 191 55 191 69] Negate1.negate _155);
    goto BB103
  }
  BB103 {
    _151 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 191 28 191 70] AddDecision0.add_decision _152 _153 _154);
    goto BB104
  }
  BB104 {
    assume { Resolve3.resolve trail_2 };
    _0 <- ();
    goto BB144
  }
  BB105 {
    _14 <- ();
    goto BB82
  }
  BB106 {
    _107 <- ();
    goto BB107
  }
  BB107 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 199 16 199 119] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Entails0.entails m (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model just_102)) (TermValue0.term_value a_49) };
    goto BB108
  }
  BB108 {
    _157 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 200 16 200 110] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    goto BB109
  }
  BB109 {
    _158 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 201 16 201 86] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains0.contains ( * trail_2) a };
    goto BB110
  }
  BB110 {
    _159 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 204 30 204 48] Contains0.contains ( * trail_2) ix_39 };
    _160 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 205 30 205 84] LevelLog0.level_log ix_39 = LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (TermValue0.term_value a_49) };
    _161 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 206 16 206 136] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) ix -> Contains3.contains (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (TermValue0.term_value a_49)) (IndexLogic0.index_logic ( * trail_2) ix) };
    goto BB111
  }
  BB111 {
    _162 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 30 209 117] AbstractJustification0.abstract_justification ( * trail_2) (Model0.model just_102) = Justification0.justification (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (IndexLogic0.index_logic ( * trail_2) ix_39) };
    goto BB112
  }
  BB112 {
    _163 <- ();
    _165 <- ();
    old_c_164 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 211 28 211 56] abs_cflct_5);
    goto BB113
  }
  BB113 {
    _167 <- ();
    _166 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 213 28 213 82] Resolvef0.resolvef abs_cflct_5 (TermValue0.term_value a_49));
    goto BB114
  }
  BB114 {
    abs_cflct_5 <- _166;
    _166 <- any Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 215 30 215 86] Resolve0.resolve old_c_164 (TermValue0.term_value a_49) abs_cflct_5 };
    _168 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 216 30 216 47] Sound0.sound abs_cflct_5 };
    _169 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 217 30 217 51] Invariant1.invariant' abs_cflct_5 };
    _170 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 220 16 220 110] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    goto BB115
  }
  BB115 {
    _171 <- ();
    _173 <- ();
    old_heap_172 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 221 53 221 68] heap_4);
    goto BB116
  }
  BB116 {
    _175 <- ();
    abs_just_174 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 222 48 222 101] AbstractJustification0.abstract_justification ( * trail_2) (Model0.model just_102));
    goto BB117
  }
  BB117 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 223 16 223 144] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains abs_just_174 a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains (Model0.model just_102) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    goto BB118
  }
  BB118 {
    _176 <- ();
    assume { Resolve2.resolve _179 };
    _179 <- just_102;
    just_102 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    iter_178 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] IntoIter1.into_iter _179);
    goto BB119
  }
  BB119 {
    _181 <- ();
    iter_old_180 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] iter_178);
    goto BB120
  }
  BB120 {
    _183 <- ();
    produced_182 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] Seq.empty );
    goto BB121
  }
  BB121 {
    goto BB122
  }
  BB122 {
    goto BB123
  }
  BB123 {
    goto BB124
  }
  BB124 {
    goto BB125
  }
  BB125 {
    goto BB126
  }
  BB126 {
    goto BB127
  }
  BB127 {
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] Produces0.produces iter_old_180 produced_182 iter_178 };
    invariant level { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) ix -> LevelLog0.level_log ix <= UInt64.to_int conflict_level_32 };
    invariant to_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains0.contains ( * trail_2) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    invariant adding { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model old_heap_172) ix -> Contains2.contains (Model2.model heap_4) ix };
    invariant seen { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] forall i : (int) . 0 <= i /\ i < Seq.length produced_182 -> Contains2.contains (Model2.model heap_4) (Seq.get produced_182 i) };
    _185 <- borrow_mut iter_178;
    iter_178 <-  ^ _185;
    _184 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] Next0.next _185);
    goto BB128
  }
  BB128 {
    switch (_184)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB129
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB131
      end
  }
  BB129 {
    _177 <- ();
    goto BB134
  }
  BB130 {
    assume { Resolve3.resolve trail_2 };
    absurd
  }
  BB131 {
    i_187 <- Core_Option_Option_Type.core_option_option_type_Some_0 _184;
    _189 <- ();
    _188 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 16 225 110] Seq.snoc produced_182 i_187);
    goto BB132
  }
  BB132 {
    produced_182 <- _188;
    _188 <- any Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
    a_190 <- i_187;
    _192 <- borrow_mut heap_4;
    heap_4 <-  ^ _192;
    _193 <- a_190;
    _191 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 231 20 231 34] Insert1.insert _192 _193);
    goto BB133
  }
  BB133 {
    _14 <- ();
    goto BB127
  }
  BB134 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 234 16 234 158] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains abs_just_174 a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( * trail_2) ix /\ Contains2.contains (Model2.model heap_4) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    goto BB135
  }
  BB135 {
    _195 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 236 16 236 137] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( * trail_2) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    _196 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 237 16 237 139] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    goto BB136
  }
  BB136 {
    _197 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 238 16 238 161] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( * trail_2) ix /\ Contains2.contains (Model2.model heap_4) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    goto BB137
  }
  BB137 {
    _198 <- ();
    _14 <- ();
    goto BB139
  }
  BB138 {
    _14 <- ();
    goto BB139
  }
  BB139 {
    goto BB140
  }
  BB140 {
    goto BB141
  }
  BB141 {
    goto BB30
  }
  BB142 {
    assume { Resolve3.resolve trail_2 };
    _0 <- ();
    goto BB143
  }
  BB143 {
    goto BB149
  }
  BB144 {
    assume { Resolve2.resolve just_102 };
    goto BB146
  }
  BB145 {
    goto BB146
  }
  BB146 {
    goto BB147
  }
  BB147 {
    goto BB148
  }
  BB148 {
    goto BB149
  }
  BB149 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat1
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl9_Unsat_Interface as Unsat0
  use Cdsat_Concrete_Answer_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat1.unsat, axiom .
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val solver [@cfg:stackify] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_Answer_Type.cdsat_concrete_answer_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 30 15 30 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 31 14 31 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 32 4 32 50] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ trail)) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 33 14 37 5] match (result) with
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unsat_Type -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Sat_Type -> true
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unknown_Type -> true
      end }
    
end
module Core_Result_Result_Type
  type core_result_result_type 't 'e =
    | Core_Result_Result_Ok_Type 't
    | Core_Result_Result_Err_Type 'e
    
end
module Cdsat_Concrete_Impl1_Eval_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type
  use Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  val eval [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (tm : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Result_Result_Type.core_result_result_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type), Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Term_Type.cdsat_trail_term_type)
    
end
module Cdsat_Concrete_Impl1_EvalMemo_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type
  use Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  val eval_memo [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (tm : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Result_Result_Type.core_result_result_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type), Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Term_Type.cdsat_trail_term_type)
    
end
module Cdsat_Trail_AssignmentModel_Type
  use mach.int.Int
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  type cdsat_trail_assignmentmodel_type  =
    | Cdsat_Trail_AssignmentModel_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type) (Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type) int
    
end
module Cdsat_Trail_Impl0_ModelTy_Type
  use Cdsat_Trail_AssignmentModel_Type
  type modelTy  =
    Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
end
module Cdsat_Trail_Impl0_Model_Interface
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  function model (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
    
end
module Cdsat_Trail_Impl0_Model
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  use mach.int.UInt64
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model_Interface as Model2
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 35] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 20 30 113] Cdsat_Trail_AssignmentModel_Type.Cdsat_Trail_AssignmentModel_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) (Model2.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason self)) (UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level self))
end
module Cdsat_Trail_Impl0
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl3_Model as Model2 with function Model0.model = Model5.model,
  function Model1.model = Model3.model
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_AssignmentModel_Type
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl0_Model as Model0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module CreusotContracts_Logic_Model_Impl2_ModelTy_Type
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy_Type as ModelTy1 with type t = t, type a = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : t) (other : t) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module CreusotContracts_Logic_Int_Impl16_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module Core_Cmp_Impls_Impl25_Eq_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl16_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = uint64,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : uint64) (other : uint64) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module CreusotContracts_Logic_Model_Impl5_ModelTy_Type
  type modelTy  =
    bool
end
module Core_Cmp_Impls_Impl19_Eq_Interface
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Impl5_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = bool,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : bool) (other : bool) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module Core_Cmp_Impls_Impl25
  
end
module Core_Cmp_Impls_Impl19
  
end
module CreusotContracts_Logic_Int_Impl16
  
end
module CreusotContracts_Logic_Model_Impl5
  
end
module CreusotContracts_Logic_Int_Impl16_Model_Interface
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl16_Model
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int =
    UInt64.to_int self
end
module CreusotContracts_Logic_Model_Impl5_Model_Interface
  function model (self : bool) : bool
end
module CreusotContracts_Logic_Model_Impl5_Model
  function model (self : bool) : bool =
    self
end
module Cdsat_Trail_Impl30_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) (rhs : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 125 16 125 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl22_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Sort_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) (rhs : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 16 73 25] result = (Model0.model self = Model0.model rhs) }
    
end
module CreusotContracts_Logic_Int_Impl20_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : usize) (other : usize) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module Alloc_Boxed_Impl14
  type t
  type a
end
module Cdsat_Trail_Impl30
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model1
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type rhs = Cdsat_Trail_Value_Type.cdsat_trail_value_type
  clone Cdsat_Trail_Impl30_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type rhs = Cdsat_Trail_Value_Type.cdsat_trail_value_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl22
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model1
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type rhs = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
  clone Cdsat_Trail_Impl22_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type rhs = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl21
  
end
module CreusotContracts_Logic_Model_Impl2
  type t
  type a
end
module CreusotContracts_Logic_Int_Impl20
  
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Logic_Int_Impl20_Model_Interface
  use mach.int.Int
  use prelude.UIntSize
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl20_Model
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function model (self : usize) : int =
    UInt64.to_int self
end
module Cdsat_Trail_Impl26_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Term_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (rhs : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 93 16 93 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl26
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl2_Model as Model2
  use Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl3_Model as Model1 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type rhs = Cdsat_Trail_Term_Type.cdsat_trail_term_type
  clone Cdsat_Trail_Impl26_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type rhs = Cdsat_Trail_Term_Type.cdsat_trail_term_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl14_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentModel_Type
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (rhs : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : ()
end
module Cdsat_Trail_Impl20_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : ()
end
module Cdsat_Trail_Impl24_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : ()
end
module Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : ()
end
module Cdsat_Trail_Impl32_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
end
module Cdsat_Trail_Impl5_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val bool [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 145 15 145 32] IsBool0.is_bool (Model0.model self)}
    
end
module Cdsat_Trail_Impl7_ModelTy_Type
  use Cdsat_Trail_TrailIndex_Type
  type modelTy  =
    Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
end
module Cdsat_Trail_Impl7_Model_Interface
  use Cdsat_Trail_TrailIndex_Type
  function model (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
    
end
module Cdsat_Trail_Impl7_Model
  use Cdsat_Trail_TrailIndex_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 35] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 232 8 232 12] self
end
module Cdsat_Trail_Impl7
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl7_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl33_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (rhs : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 172 9 172 18] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl35_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
end
module Cdsat_Trail_Impl36_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 172 24 172 29] result = self }
    
end
module Core_Cmp_Impls_Impl54_PartialCmp_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  val partial_cmp [@cfg:stackify] (self : usize) (other : usize) : Core_Option_Option_Type.core_option_option_type (Core_Cmp_Ordering_Type.core_cmp_ordering_type)
    requires {false}
    
end
module Core_Cmp_Impls_Impl54
  
end
module Cdsat_Trail_Impl38_PartialCmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_TrailIndex_Type
  val partial_cmp [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (other : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Option_Option_Type.core_option_option_type (Core_Cmp_Ordering_Type.core_cmp_ordering_type)
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog_Interface
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.core_cmp_ordering_type =
    if self < o then
      Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
    else
      if self = o then
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
      else
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
      
    
end
module Core_Cmp_Impls_Impl55_Cmp_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy0
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : usize) (other : usize) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    ensures { result = CmpLog0.cmp_log (Model0.model self) (UInt64.to_int other) }
    
end
module Core_Cmp_Impls_Impl55
  
end
module CreusotContracts_Logic_Ord_Impl1
  
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface
  use mach.int.Int
  function cmp_le_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog
  use mach.int.Int
  function cmp_le_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface
  use mach.int.Int
  function cmp_lt_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog
  use mach.int.Int
  function cmp_lt_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface
  use mach.int.Int
  function cmp_ge_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog
  use mach.int.Int
  function cmp_ge_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface
  use mach.int.Int
  function cmp_gt_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog
  use mach.int.Int
  function cmp_gt_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Interface
  use mach.int.Int
  function refl (_1' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl
  use mach.int.Int
  function refl (_1' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Interface
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function trans (_1' : int) (_2' : int) (_3' : int) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function trans (_1' : int) (_2' : int) (_3' : int) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface
  use mach.int.Int
  function antisym1 (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1
  use mach.int.Int
  function antisym1 (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface
  use mach.int.Int
  function antisym2 (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2
  use mach.int.Int
  function antisym2 (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface
  use mach.int.Int
  function eq_cmp (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp
  use mach.int.Int
  function eq_cmp (_1' : int) (_2' : int) : () =
    ()
end
module Cdsat_Trail_Impl39_Cmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  val cmp [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (other : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    
end
module Cdsat_Trail_Impl9_New_Interface
  use Cdsat_Theory_Trail_Type
  use Cdsat_Trail_Trail_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (inputs : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Term_Type.cdsat_trail_term_type, Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 266 14 266 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 36] Sound0.sound (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost result) }
    
end
module Cdsat_Theory_Impl4_Sat_Interface
  use Cdsat_Theory_Trail_Type
  predicate sat (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Sat
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 478 4 478 28] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 8 479 56] exists m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfiedBy0.satisfied_by self m
end
module Cdsat_Trail_Impl9_Sat_Interface
  use Cdsat_Trail_Trail_Type
  predicate sat (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_Sat
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sat_Interface as Sat0
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 300 4 300 28] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 16] Sat0.sat (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self)
end
module Cdsat_Trail_Impl9_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  function abstract_assign (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type
    
end
module Cdsat_Trail_Impl9_AbstractAssign
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Contains2.contains = Contains2.contains, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  use Cdsat_Trail_Reason_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 344 4 344 62] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 345 8 353 9] match (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason a) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Input_Type -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Decision_Type -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type just -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type (AbstractJustification0.abstract_justification self (Model2.model just)) (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      end
end
module Cdsat_Trail_Impl10_Next_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_IndexIterator_Type
  val next [@cfg:stackify] (self : borrowed (Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Trail_Impl12_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 566 14 566 34] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level self }
    
end
module Cdsat_Trail_Impl12_Value_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  val value [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 590 14 590 33] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self }
    
end
module Cdsat_Trail_Impl12_Term_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Assignment_Type
  val term [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 595 14 595 34] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self }
    
end
module Cdsat_Theory_Impl4_IsSetLevel_Interface
  use set.Fset
  use mach.int.Int
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate is_set_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel
  use set.Fset
  use mach.int.Int
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 198 12 200 67] s = Fset.empty  /\ m = 0 \/ (exists i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
end
module Cdsat_Theory_Impl4_SetLevelMax_Interface
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level_max (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMax
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 12] ()
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMin_Interface
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function set_level_min (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMin
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 233 4 233 12] ()
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 236 14 236 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function trail_plausible (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_TrailPlausible
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 4 550 46] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 8 560 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 546 15 546 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 547 15 547 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 548 4 548 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 549 14 549 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl5_Decide_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate decide (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl5_Decide
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 580 4 580 63] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 574 4 574 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t val') (Level0.level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) + 1) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type, val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type, tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 575 15 575 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 576 15 576 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 579 4 579 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 578 4 578 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 577 4 577 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate deduce (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl5_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_CountBounds_Interface as CountBounds0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 597 4 597 84] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 593 15 593 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 596 4 596 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 595 4 595 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl5_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate fail (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl5_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 616 4 616 71] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 617 8 624 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (a, _, _) = just in a) = 0
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 613 15 613 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 614 15 614 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 615 4 615 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self))
end
module Cdsat_Theory_Impl5_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate conflict_solve (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl5_ConflictSolve
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 650 4 650 96] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 651 8 661 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l /\ (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 645 15 645 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 646 15 646 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 649 4 649 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 648 4 648 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate conflict_solve2 (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl5_ConflictSolve2
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 86] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 674 10 677 43] (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 667 15 667 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 668 15 668 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 671 4 671 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 670 4 670 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 669 4 669 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl6_Level_Interface
  use mach.int.Int
  use Cdsat_Theory_Conflict_Type
  function level (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : int
end
module Cdsat_Theory_Impl6_Level
  use mach.int.Int
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 697 4 697 29] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 696 4 696 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)
end
module Cdsat_Theory_Impl6_Backjump_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate backjump (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_Backjump
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl6_LearnJustified_Interface as LearnJustified0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Contains0.contains = Contains0.contains,
  predicate IsBool0.is_bool = IsBool1.is_bool, predicate IsBool1.is_bool = IsBool0.is_bool,
  predicate Invariant1.invariant' = Invariant2.invariant', function Remove0.remove = Remove0.remove,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, function Negate0.negate = Negate0.negate,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Interface as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 750 4 750 64] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 744 4 744 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l in let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) 0 (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let _ = LearnJustified0.learn_justified self l in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 745 15 745 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 15 746 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate undo_clear (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_UndoClear
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel_Interface as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Level_Interface as Level0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 800 4 800 66] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 801 8 807 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : (int) . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1)
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 795 15 795 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 796 15 796 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 799 4 799 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 798 4 798 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 797 4 797 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate undo_decide (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_UndoDecide
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Interface as Entails0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Level_Interface as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound2.sound, predicate Entails0.entails = Entails0.entails, axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Interface as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Level_Interface as Level0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 67] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 8 830 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 813 15 813 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 816 4 816 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Bag_Impl0_Empty
  
end
module Cdsat_Bag_Impl0_Singleton_Interface
  type t
  use bag.Bag
  function singleton (_1' : t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Singleton
  type t
  use bag.Bag
  function singleton [#"/Users/xavier/Code/cdsat/src/bag.rs" 14 4 14 35] (_1' : t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Contains_Interface
  type t
  use bag.Bag
  predicate contains [@inline:trivial] (self : Bag.bag t) (e : t)
end
module Cdsat_Bag_Impl0_Contains
  type t
  use bag.Bag
  predicate contains [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/bag.rs" 20 4 20 39] (self : Bag.bag t) (e : t) =
    [#"/Users/xavier/Code/cdsat/src/bag.rs" 21 8 21 26] Bag.mem e self
end
module Cdsat_Bag_Impl0_Mem_Interface
  type t
  use bag.Bag
  function mem (_1' : t) (_2' : Bag.bag t) : bool
end
module Cdsat_Bag_Impl0_Mem
  type t
  use bag.Bag
  function mem [#"/Users/xavier/Code/cdsat/src/bag.rs" 27 4 27 33] (_1' : t) (_2' : Bag.bag t) : bool
end
module Cdsat_Bag_Impl0_Insert_Interface
  type t
  use bag.Bag
  function insert [@inline:trivial] (self : Bag.bag t) (e : t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Insert
  type t
  use bag.Bag
  function insert [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/bag.rs" 33 4 33 37] (self : Bag.bag t) (e : t) : Bag.bag t
    
   =
    [#"/Users/xavier/Code/cdsat/src/bag.rs" 34 8 34 26] Bag.add e self
end
module Cdsat_Bag_Impl0_Add_Interface
  type t
  use bag.Bag
  function add (_1' : t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Add
  type t
  use bag.Bag
  function add [#"/Users/xavier/Code/cdsat/src/bag.rs" 40 4 40 33] (_1' : t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_IsEmpty_Interface
  type t
  use bag.Bag
  predicate is_empty (self : Bag.bag t)
end
module Cdsat_Bag_Impl0_IsEmpty
  type t
  use bag.Bag
  predicate is_empty [#"/Users/xavier/Code/cdsat/src/bag.rs" 47 4 47 33] (self : Bag.bag t)
end
module Cdsat_Bag_Impl0_Diff_Interface
  type t
  use bag.Bag
  function diff (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Diff
  type t
  use bag.Bag
  function diff [#"/Users/xavier/Code/cdsat/src/bag.rs" 54 4 54 38] (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Union_Interface
  type t
  use bag.Bag
  function union (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Union
  type t
  use bag.Bag
  function union [#"/Users/xavier/Code/cdsat/src/bag.rs" 61 4 61 39] (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Len_Interface
  type t
  use bag.Bag
  use mach.int.Int
  function len (self : Bag.bag t) : int
end
module Cdsat_Bag_Impl0_Len
  type t
  use bag.Bag
  use mach.int.Int
  function len [#"/Users/xavier/Code/cdsat/src/bag.rs" 68 4 68 27] (self : Bag.bag t) : int
end
module Cdsat_Bag_Impl0_Inter_Interface
  type t
  use bag.Bag
  function inter (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Inter
  type t
  use bag.Bag
  function inter [#"/Users/xavier/Code/cdsat/src/bag.rs" 75 4 75 40] (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Pick_Interface
  type t
  use bag.Bag
  function pick (self : Bag.bag t) : t
end
module Cdsat_Bag_Impl0_Pick
  type t
  use bag.Bag
  function pick [#"/Users/xavier/Code/cdsat/src/bag.rs" 82 4 83 19] (self : Bag.bag t) : t
end
module Cdsat_Bag_Impl0_Count_Interface
  type t
  use bag.Bag
  use mach.int.Int
  function count [@inline:trivial] (self : Bag.bag t) (e : t) : int
end
module Cdsat_Bag_Impl0_Count
  type t
  use bag.Bag
  use mach.int.Int
  function count [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/bag.rs" 95 4 95 36] (self : Bag.bag t) (e : t) : int
   =
    [#"/Users/xavier/Code/cdsat/src/bag.rs" 96 8 96 29] Bag.nb_occ e self
end
module Cdsat_Bag_Impl0_IsSet_Interface
  type t
  use bag.Bag
  predicate is_set (self : Bag.bag t)
end
module Cdsat_Bag_Impl0_IsSet
  type t
  use bag.Bag
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Bag_Impl0_Count_Interface as Count0 with type t = t
  predicate is_set [#"/Users/xavier/Code/cdsat/src/bag.rs" 88 4 89 19] (self : Bag.bag t) =
    [#"/Users/xavier/Code/cdsat/src/bag.rs" 90 8 90 54] forall a : (t) . Count0.count self a <= 1
end
module Cdsat_Bag_Impl0_NbOcc_Interface
  type t
  use bag.Bag
  use mach.int.Int
  function nb_occ (_1' : t) (_2' : Bag.bag t) : int
end
module Cdsat_Bag_Impl0_NbOcc
  type t
  use bag.Bag
  use mach.int.Int
  function nb_occ [#"/Users/xavier/Code/cdsat/src/bag.rs" 102 4 102 36] (_1' : t) (_2' : Bag.bag t) : int
end
module Cdsat_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Cdsat_Trail_Impl36
  use Cdsat_Trail_TrailIndex_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl36_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl14
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl3_Model as Model2 with function Model0.model = Model5.model,
  function Model1.model = Model3.model
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl0_Model as Model1 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type rhs = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
  clone Cdsat_Trail_Impl14_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type rhs = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type, val eq = Eq0.eq,
  function Model0.model = Model0.model, function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl33
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_Model as Model1
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl33_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, val eq = Eq0.eq,
  function Model0.model = Model0.model, function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl15
  
end
module Cdsat_Trail_Impl19
  
end
module Cdsat_Trail_Impl23
  
end
module Cdsat_Trail_Impl27
  
end
module Cdsat_Trail_Impl31
  
end
module Cdsat_Trail_Impl34
  
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self
  use prelude.Borrow
  val assert_receiver_is_total_eq [@cfg:stackify] (self : self) : ()
    requires {false}
    
end
module Cdsat_Trail_Impl16
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl20
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl20_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl24
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl24_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl28
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl32
  use Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl32_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl35
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl35_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl37
  
end
module Core_Cmp_PartialOrd_Lt_Interface
  type self
  type rhs
  use prelude.Borrow
  val lt [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_Le_Interface
  type self
  type rhs
  use prelude.Borrow
  val le [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_Gt_Interface
  type self
  type rhs
  use prelude.Borrow
  val gt [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_Ge_Interface
  type self
  type rhs
  use prelude.Borrow
  val ge [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_PartialCmp_Interface
  type self
  type rhs
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  val partial_cmp [@cfg:stackify] (self : self) (other : rhs) : Core_Option_Option_Type.core_option_option_type (Core_Cmp_Ordering_Type.core_cmp_ordering_type)
    requires {false}
    
end
module Cdsat_Trail_Impl38
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Core_Cmp_PartialOrd_Ge_Interface as Ge0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_PartialOrd_Gt_Interface as Gt0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_PartialOrd_Le_Interface as Le0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_PartialOrd_Lt_Interface as Lt0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl38_PartialCmp_Interface as PartialCmp0
  clone Core_Cmp_PartialOrd_PartialCmp_Interface as PartialCmp1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, val partial_cmp = PartialCmp0.partial_cmp
end
module Core_Cmp_Ord_Max_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max [@cfg:stackify] (self : self) (other : self) : self
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model self) }
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model other) }
    ensures { result = self \/ result = other }
    ensures { LeLog0.le_log (Model0.model self) (Model0.model other) -> result = other }
    ensures { LtLog0.lt_log (Model0.model other) (Model0.model self) -> result = self }
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Cdsat_Trail_Impl39
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog as CmpLog0 with function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl7_Model as Model1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_Ord_Clamp_Interface as Clamp0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_Ord_Min_Interface as Min0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_Ord_Max_Interface as Max0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model1.model, predicate GeLog0.ge_log = GeLog0.ge_log,
  predicate LeLog0.le_log = LeLog0.le_log, predicate LtLog0.lt_log = LtLog0.lt_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Trail_Impl39_Cmp_Interface as Cmp0
  clone Core_Cmp_Ord_Cmp_Interface as Cmp1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  val cmp = Cmp0.cmp, function Model0.model = Model0.model, function Model1.model = Model1.model,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, type ModelTy0.modelTy = ModelTy0.modelTy
end
