
module Cdsat_Concrete_BoolTheory_Type
  type cdsat_concrete_booltheory_type  =
    | Cdsat_Concrete_BoolTheory_Type
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Concrete_BoolTheory_Type
  type cdsat_concrete_solver_type  =
    | Cdsat_Concrete_Solver_Type (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)
    
  let function cdsat_concrete_solver_type_Solver_bool_th (self : cdsat_concrete_solver_type) : Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_Solver_Type a -> a
      end
end
module Cdsat_Concrete_Impl0_New_Interface
  use Cdsat_Concrete_Solver_Type
  val new [@cfg:stackify] (_ : ()) : Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Cdsat_Trail_Sort_Type
  type cdsat_trail_sort_type  =
    | Cdsat_Trail_Sort_Boolean_Type
    | Cdsat_Trail_Sort_Rational_Type
    
end
module Cdsat_Trail_Value_Type
  use mach.int.Int
  use mach.int.UInt64
  type cdsat_trail_value_type  =
    | Cdsat_Trail_Value_Bool_Type bool
    | Cdsat_Trail_Value_Rat_Type uint64
    
  let function cdsat_trail_value_type_Rat_0 (self : cdsat_trail_value_type) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Value_Bool_Type _ -> any uint64
      | Cdsat_Trail_Value_Rat_Type a -> a
      end
  let function cdsat_trail_value_type_Bool_0 (self : cdsat_trail_value_type) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Value_Bool_Type a -> a
      | Cdsat_Trail_Value_Rat_Type _ -> any bool
      end
end
module Cdsat_Trail_Term_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Sort_Type
  type cdsat_trail_term_type  =
    | Cdsat_Trail_Term_Variable_Type usize (Cdsat_Trail_Sort_Type.cdsat_trail_sort_type)
    | Cdsat_Trail_Term_Value_Type (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Trail_Term_Plus_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Eq_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Conj_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Neg_Type (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Disj_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Impl_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    
  let function cdsat_trail_term_type_Impl_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type a _ -> a
      end
  let function cdsat_trail_term_type_Impl_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ a -> a
      end
  let function cdsat_trail_term_type_Disj_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type a _ -> a
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Disj_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ a -> a
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Neg_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type a -> a
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Conj_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type a _ -> a
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Conj_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ a -> a
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Eq_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type a _ -> a
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Eq_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ a -> a
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Plus_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type a _ -> a
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Plus_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ a -> a
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Neg_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Value_0 (self : cdsat_trail_term_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Value_Type a -> a
      | Cdsat_Trail_Term_Plus_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Neg_Type _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
  let function cdsat_trail_term_type_Variable_0 (self : cdsat_trail_term_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type a _ -> a
      | Cdsat_Trail_Term_Value_Type _ -> any usize
      | Cdsat_Trail_Term_Plus_Type _ _ -> any usize
      | Cdsat_Trail_Term_Eq_Type _ _ -> any usize
      | Cdsat_Trail_Term_Conj_Type _ _ -> any usize
      | Cdsat_Trail_Term_Neg_Type _ -> any usize
      | Cdsat_Trail_Term_Disj_Type _ _ -> any usize
      | Cdsat_Trail_Term_Impl_Type _ _ -> any usize
      end
  let function cdsat_trail_term_type_Variable_1 (self : cdsat_trail_term_type) : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ a -> a
      | Cdsat_Trail_Term_Value_Type _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Neg_Type _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Disj_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Impl_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      end
end
module Cdsat_Trail_TrailIndex_Type
  use mach.int.Int
  use prelude.UIntSize
  type cdsat_trail_trailindex_type  =
    | Cdsat_Trail_TrailIndex_Type usize usize
    
  let function cdsat_trail_trailindex_type_TrailIndex_0 (self : cdsat_trail_trailindex_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_TrailIndex_Type a _ -> a
      end
  let function cdsat_trail_trailindex_type_TrailIndex_1 (self : cdsat_trail_trailindex_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_TrailIndex_Type _ a -> a
      end
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  type cdsat_trail_reason_type  =
    | Cdsat_Trail_Reason_Justified_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Cdsat_Trail_Reason_Decision_Type
    | Cdsat_Trail_Reason_Input_Type
    
  let function cdsat_trail_reason_type_Justified_0 (self : cdsat_trail_reason_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Reason_Justified_Type a -> a
      | Cdsat_Trail_Reason_Decision_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      | Cdsat_Trail_Reason_Input_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      end
end
module Cdsat_Trail_Assignment_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  type cdsat_trail_assignment_type  =
    | Cdsat_Trail_Assignment_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) usize
    
  let function cdsat_trail_assignment_type_Assignment_term (self : cdsat_trail_assignment_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type a _ _ _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_reason (self : cdsat_trail_assignment_type) : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ _ a _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_val (self : cdsat_trail_assignment_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ a _ _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_level (self : cdsat_trail_assignment_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type cdsat_theory_sort_type  =
    | Cdsat_Theory_Sort_Rational_Type
    | Cdsat_Theory_Sort_Boolean_Type
    
end
module Cdsat_Theory_Var_Type
  use mach.int.Int
  use Cdsat_Theory_Sort_Type
  type cdsat_theory_var_type  =
    | Cdsat_Theory_Var_Type int (Cdsat_Theory_Sort_Type.cdsat_theory_sort_type)
    
  let function cdsat_theory_var_type_Var_1 (self : cdsat_theory_var_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Var_Type _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use mach.int.Int
  type cdsat_theory_value_type  =
    | Cdsat_Theory_Value_Bool_Type bool
    | Cdsat_Theory_Value_Rat_Type int
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type
  type cdsat_theory_term_type  =
    | Cdsat_Theory_Term_Variable_Type (Cdsat_Theory_Var_Type.cdsat_theory_var_type)
    | Cdsat_Theory_Term_Value_Type (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Term_Plus_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    | Cdsat_Theory_Term_Eq_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    | Cdsat_Theory_Term_Conj_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  type cdsat_theory_assign_type  =
    | Cdsat_Theory_Assign_Decision_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Assign_Justified_Type (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Assign_Input_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Trail_Type
  use mach.int.Int
  use Cdsat_Theory_Assign_Type
  type cdsat_theory_trail_type  =
    | Cdsat_Theory_Trail_Empty_Type
    | Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) int (cdsat_theory_trail_type)
    
end
module Cdsat_Trail_Trail_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  type cdsat_trail_trail_type  =
    | Cdsat_Trail_Trail_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) usize (ghost Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
  let function cdsat_trail_trail_type_Trail_level (self : cdsat_trail_trail_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type _ a _ -> a
      end
  let function cdsat_trail_trail_type_Trail_assignments (self : cdsat_trail_trail_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type a _ _ -> a
      end
  let ghost function cdsat_trail_trail_type_Trail_ghost (self : cdsat_trail_trail_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type _ _ a -> a
      end
end
module Cdsat_Trail_Impl9_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) : usize
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_slice_iter_iter_type 't =
    | Core_Slice_Iter_Iter_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) opaque_ptr (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module CreusotContracts_Std1_Slice_Impl4_Model_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  function model (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_Model
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  function model (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : Seq.seq t
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl20_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t, type a = a
  use Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface
  type self
  predicate completed (self : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed
  type self
  predicate completed (self : self)
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module Core_Slice_Iter_Impl173_Item_Type
  type t
  use prelude.Borrow
  type item  =
    t
end
module Core_Slice_Iter_Impl173_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl173_Item_Type as Item0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t,
  type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy_Type
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = b,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : a) (other : b) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Alloc_Vec_Impl20
  type t
  type a
end
module Core_Slice_Iter_Impl173
  type t
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Core_Cmp_Impls_Impl9
  type a
  type b
end
module CreusotContracts_Std1_Slice_Impl4
  type t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Std1_Slice_Impl5_Completed_Interface
  type t
  use Core_Slice_Iter_Iter_Type
  predicate completed (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
end
module CreusotContracts_Std1_Slice_Impl5_Completed
  type t
  use Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate completed (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Std1_Slice_Impl5
  type t
end
module CreusotContracts_Std1_Slice_Impl5_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
    
end
module CreusotContracts_Std1_Slice_Impl5_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : () =
    ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Cdsat_Trail_Impl3_ModelTy_Type
  use Cdsat_Theory_Term_Type
  type modelTy  =
    Cdsat_Theory_Term_Type.cdsat_theory_term_type
end
module Cdsat_Trail_Impl2_Model_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  function model (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Trail_Impl2_Model
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 84 4 84 35] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 85 8 88 9] match (self) with
      | Cdsat_Trail_Sort_Type.Cdsat_Trail_Sort_Boolean_Type -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Trail_Sort_Type.Cdsat_Trail_Sort_Rational_Type -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      end
end
module Cdsat_Trail_Impl4_Model_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  function model (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Trail_Impl4_Model
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use mach.int.UInt64
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 35] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 137 8 140 9] match (self) with
      | Cdsat_Trail_Value_Type.Cdsat_Trail_Value_Bool_Type b -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b
      | Cdsat_Trail_Value_Type.Cdsat_Trail_Value_Rat_Type r -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (UInt64.to_int r)
      end
end
module Cdsat_Trail_Impl3_Model_Interface
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  function model (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Theory_Term_Type.cdsat_theory_term_type
end
module Cdsat_Trail_Impl3_Model
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  use mach.int.UInt64
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl2_Model_Interface as Model0
  use Cdsat_Theory_Var_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 4 111 35] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Theory_Term_Type.cdsat_theory_term_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 8 119 9] match (self) with
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Variable_Type v s -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type (Cdsat_Theory_Var_Type.Cdsat_Theory_Var_Type (UInt64.to_int v) (Model0.model s))
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Value_Type v -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type (Model1.model v)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Plus_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type (model l) (model r)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Eq_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type (model l) (model r)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Conj_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type (model l) (model r)
      | _ -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type true)
      end
end
module Cdsat_Trail_Impl3
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl2_Model as Model2
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl3_Model as Model0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl2_ModelTy_Type
  use Cdsat_Theory_Sort_Type
  type modelTy  =
    Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Trail_Impl2
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl4_ModelTy_Type
  use Cdsat_Theory_Value_Type
  type modelTy  =
    Cdsat_Theory_Value_Type.cdsat_theory_value_type
end
module Cdsat_Trail_Impl4
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl4_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl9_IndexOf_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  val index_of [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Alloc_Vec_Impl14_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type
  val clone' [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a
    ensures { result = self }
    
end
module Alloc_Vec_Impl14
  type t
  type a
end
module Cdsat_Trail_Impl9_Justification_Interface
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  val justification [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Core_Option_Option_Type.core_option_option_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
end
module Cdsat_Trail_IndexIterator_Type
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  type cdsat_trail_indexiterator_type  =
    | Cdsat_Trail_IndexIterator_Type (borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
  let function cdsat_trail_indexiterator_type_IndexIterator_trail (self : cdsat_trail_indexiterator_type) : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_IndexIterator_Type a _ -> a
      end
end
module Cdsat_Trail_Impl9_Indices_Interface
  use prelude.Borrow
  use Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_Trail_Type
  val indices [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Cdsat_Trail_Impl9_Contains_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  predicate contains (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Trail_Impl9_Contains
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 325 4 325 49] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 327 12 327 92] UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix) < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) /\ UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix) < Seq.length (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix))))
end
module Cdsat_Trail_Impl12_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type
  function term_value (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl12_TermValue
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 547 4 547 61] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 548 8 548 45] (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self), Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self))
end
module Cdsat_Trail_Impl9_IndexLogic_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  function index_logic (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl9_IndexLogic
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl12_TermValue_Interface as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 483 4 483 77] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (ix : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 485 12 485 61] TermValue0.term_value (Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix)))
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  function sort (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 52 8 55 9] match (self) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      end
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  function sort (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 8 21 9] match (self) with
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type v -> Cdsat_Theory_Var_Type.cdsat_theory_var_type_Var_1 v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type v -> Sort1.sort v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      end
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type
  predicate invariant' (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 30] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 83 8 87 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type t v -> Sort0.sort t = Sort1.sort v
      end
end
module Cdsat_Theory_Impl4_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_assign (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantAssign
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Interface as Invariant0
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 258 4 258 37] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 8 262 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  function to_pair (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 92 8 96 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ t val' -> (t, val')
      end
end
module Cdsat_Theory_Impl4_Len_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  function len (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
end
module Cdsat_Theory_Impl4_Len
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 437 4 437 27] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 438 8 441 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> 0
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> len tl + 1
      end
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 436 14 436 25] len self >= 0
end
module Cdsat_Theory_Impl4_Level_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  function level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
end
module Cdsat_Theory_Impl4_Level
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 426 4 426 29] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 427 8 431 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> 0
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> level tl
      end
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 424 14 424 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 423 14 423 25] level self >= 0)
end
module Cdsat_Theory_Impl4_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_nonneg (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantNonneg
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 37] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 251 8 254 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
end
module CreusotContracts_Logic_Int_Int_Type
  use prelude.Opaque
  type creusotcontracts_logic_int_int_type  =
    | CreusotContracts_Logic_Int_Int_Type opaque_ptr
    
end
module Cdsat_Theory_Impl4_Find_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Core_Option_Option_Type
  function find (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)
    
end
module Cdsat_Theory_Impl4_Find
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 362 4 362 64] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 363 8 372 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> Core_Option_Option_Type.Core_Option_Option_None_Type
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l)
      else
        find tl d
      
      end
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 104] InvariantAssign0.invariant_assign self -> (forall p : ((Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)) . find self d = Core_Option_Option_Type.Core_Option_Option_Some_Type p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 111] InvariantNonneg0.invariant_nonneg self -> (forall p : ((Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)) . find self d = Core_Option_Option_Type.Core_Option_Option_Some_Type p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 356 14 359 5] match (find self d) with
    | Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Contains_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  predicate contains (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl4_Contains
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use mach.int.Int
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 329 4 329 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 8 333 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type ix -> true
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> false
      end
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 328 4 328 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_LevelOf_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  function level_of (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
end
module Cdsat_Theory_Impl4_LevelOf
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 320 4 320 50] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 321 8 324 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (_, l) -> l
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> 0
      end
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 318 15 318 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 319 14 319 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Trail_Impl8_LevelLog_Interface
  use mach.int.Int
  use Cdsat_Trail_TrailIndex_Type
  function level_log (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : int
end
module Cdsat_Trail_Impl8_LevelLog
  use mach.int.Int
  use Cdsat_Trail_TrailIndex_Type
  use mach.int.UInt64
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 243 4 243 33] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 242 4 242 12] UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 self)
end
module Cdsat_Trail_Impl9_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type
  predicate abstract_relation (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_AbstractRelation
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Interface as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 316 4 316 38] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 318 12 320 160] (forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix -> Contains1.contains (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (IndexLogic0.index_logic self ix)) /\ (forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix -> LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (IndexLogic0.index_logic self ix) = UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)) /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix /\ LevelLog0.level_log ix = LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) a /\ IndexLogic0.index_logic self ix = a))
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type
  type cdsat_theory_model_type  =
    | Cdsat_Theory_Model_Type (Map.map (Cdsat_Theory_Var_Type.cdsat_theory_var_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
  let function cdsat_theory_model_type_Model_0 (self : cdsat_theory_model_type) : Map.map (Cdsat_Theory_Var_Type.cdsat_theory_var_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Model_Type a -> a
      end
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type
  predicate invariant' (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
end
module Cdsat_Theory_Impl3_Invariant
  use Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  use Cdsat_Theory_Var_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 116 8 118 9] forall v : (Cdsat_Theory_Value_Type.cdsat_theory_value_type) . forall k : (Cdsat_Theory_Var_Type.cdsat_theory_var_type) . Map.get (Cdsat_Theory_Model_Type.cdsat_theory_model_type_Model_0 self) k = v -> Cdsat_Theory_Var_Type.cdsat_theory_var_type_Var_1 k = Sort0.sort v
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    Fset.mem e self
end
module Cdsat_Theory_Impl3_Interp_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  function interp (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Theory_Impl3_Interp
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use map.Map
  use mach.int.Int
  use mach.int.Int32
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 124 8 136 9] match (t) with
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type v -> Map.get (Cdsat_Theory_Model_Type.cdsat_theory_model_type_Model_0 self) v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type v -> v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type r1, Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type r2) -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (- 1)
        end
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b1, Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b2) -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false
        end
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type l r -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (interp self l = interp self r)
      end
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Satisfies_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate satisfies (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_Satisfies
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Interface as Interp0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 8 141 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
end
module Cdsat_Theory_Impl3_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate satisfy_set (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 146 8 146 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains v a -> Satisfies0.satisfies self a
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type
  predicate justified_sound (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 36] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 101 8 106 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type just t val' -> forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
end
module Cdsat_Theory_Impl4_Sound_Interface
  use Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Sound
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 183 4 183 30] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 184 8 187 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    Fset.remove a self
end
module Cdsat_Theory_Impl4_SetLevel_Interface
  use mach.int.Int
  use set.Fset
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
end
module Cdsat_Theory_Impl4_SetLevel
  use mach.int.Int
  use set.Fset
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 206 4 206 57] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 201 15 201 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 205 14 205 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 204 14 204 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 203 4 203 94] s <> Fset.empty  -> (exists i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 202 4 202 74] forall i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantLevel
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 235 4 235 36] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 236 8 246 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _ -> SetLevel0.set_level tl j = l
        end
      end
end
module Cdsat_Theory_Impl4_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_contains (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantContains
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 266 4 266 39] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 267 8 280 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _ -> forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type
  predicate is_bool (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 47 8 47 36] Sort0.sort self = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  function negate (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 62 8 65 9] match (self) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (not b)
      | _ -> self
      end
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl4_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type
  predicate trail_unique (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_TrailUnique
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 284 4 284 33] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 285 8 297 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
end
module Cdsat_Theory_Impl4_Invariant_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant' (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Invariant
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  clone Cdsat_Theory_Impl4_InvariantContains_Interface as InvariantContains0
  clone Cdsat_Theory_Impl4_InvariantLevel_Interface as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 301 4 301 34] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 302 8 306 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
end
module Cdsat_Trail_Impl9_Invariant_Interface
  use Cdsat_Trail_Trail_Type
  predicate invariant' (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_Invariant
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Trail_Impl9_AbstractRelation_Interface as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 305 4 305 34] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 306 8 312 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) /\ Invariant0.invariant' (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) /\ Level0.level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) = UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level self) /\ UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level self) = Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) - 1
end
module Cdsat_Theory_Impl4_Acceptable_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate acceptable (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl4_Acceptable
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 310 4 310 56] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 311 8 313 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    Fset.add e self
end
module Cdsat_Trail_Impl9_AbsJustInner_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  function abs_just_inner (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) (ix : int) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl9_AbsJustInner
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl4_Model_Interface as Model3
  clone Cdsat_Trail_Impl3_Model_Interface as Model2
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function abs_just_inner [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 365 44] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) (ix : int) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type), ix : int . abs_just_inner self just ix = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 358 4 358 12] if ix < Seq.length just then
    let set = abs_just_inner self just (ix + 1) in let ix = Seq.get just ix in let a = Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 ix)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 ix)) in Insert0.insert set (Model2.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a), Model3.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
  else
    Fset.empty 
  )
  axiom abs_just_inner_spec : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type), ix : int . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 360 15 360 22] ix >= 0) -> true
end
module Cdsat_Trail_Impl9_AbstractJustification_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  function abstract_justification (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl9_AbstractJustification
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl9_AbsJustInner_Interface as AbsJustInner0 with axiom .
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 351 4 354 44] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 355 8 355 36] AbsJustInner0.abs_just_inner self just 0)
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 347 4 347 82] forall i : (int) . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 350 4 350 101] forall i : (int) . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 349 4 349 130] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (abstract_justification self just) a -> (exists ix : (int) . 0 <= ix /\ ix < Seq.length just /\ a = IndexLogic0.index_logic self (Seq.get just ix))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 115] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (abstract_justification self just) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 346 14 346 40] Fset.cardinal (abstract_justification self just) = Seq.length just)
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl10_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : seq t
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Core_Slice_Iter_Impl0_IntoIter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val into_iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Slice_Iter_Impl0
  type t
end
module Cdsat_Trail_Impl9_MaxLevel_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val max_level [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (assignments : seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 467 15 467 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 468 14 468 88] SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (AbstractJustification0.abstract_justification self (Model0.model assignments)) = UInt64.to_int result }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl10
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module Cdsat_Trail_Impl9_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  use Cdsat_Theory_Trail_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl3_Model_Interface as Model1
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val add_justified [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (into_vec : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (val' : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 423 4 423 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 424 15 424 31] IsBool0.is_bool (Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 425 4 425 51] Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Model1.model term) (Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 426 4 426 145] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (Model3.model into_vec)) -> Satisfies0.satisfies m (Model1.model term, Model0.model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 423 4 423 40] Invariant0.invariant' ( ^ self) }
    
end
module Cdsat_Trail_Impl10_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_IndexIterator_Type
  val add_justified [@cfg:stackify] (self : borrowed (Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type)) (just : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (value : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    
end
module Cdsat_Trail_Impl10_Trail_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type
  val trail [@cfg:stackify] (self : Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type) : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
    
end
module Cdsat_Trail_ReasonModel_Type
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type
  type cdsat_trail_reasonmodel_type  =
    | Cdsat_Trail_ReasonModel_Justified_Type (Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type))
    | Cdsat_Trail_ReasonModel_Decision_Type
    | Cdsat_Trail_ReasonModel_Input_Type
    
end
module Cdsat_Trail_Impl1_ModelTy_Type
  use Cdsat_Trail_ReasonModel_Type
  type modelTy  =
    Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
end
module Cdsat_Trail_Impl1_Model_Interface
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  function model (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
    
end
module Cdsat_Trail_Impl1_Model
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 63 4 63 35] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 64 8 68 9] match (self) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type a1 -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Justified_Type (Model0.model a1)
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Decision_Type -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Decision_Type
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Input_Type -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Input_Type
      end
end
module Cdsat_Trail_Impl1
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Reason_Type
  use Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1) (other : Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module Alloc_Vec_PartialEq_Impl0
  type t
  type u
  type a1
  type a2
end
module Cdsat_Trail_Impl18_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) (rhs : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 44 16 44 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Borrow
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Cdsat_Trail_Impl18
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl1_Model as Model1 with function Model0.model = Model2.model
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type rhs = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
  clone Cdsat_Trail_Impl18_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type rhs = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl12_Decision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val decision [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
end
module Cdsat_Theory_Impl4_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  predicate satisfied_by (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (m : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 462 4 462 43] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (m : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 463 8 463 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> Satisfies0.satisfies m a
end
module Cdsat_Theory_Impl4_CountBounds_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function count_bounds (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : ()
end
module Cdsat_Theory_Impl4_CountBounds
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 500 4 500 31] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 8 506 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ _ _) _ tl -> count_bounds tl
      end
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 498 15 498 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 83] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_Restrict_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function restrict (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
end
module Cdsat_Theory_Impl4_Restrict
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Interface as CountBounds0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 45] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 408 8 419 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl
      else
        tl
      
      end
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 396 15 396 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 398 15 398 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 406 14 406 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 4 405 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 403 4 403 77] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 402 4 402 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 401 4 401 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 400 4 400 142] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 141] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 397 14 397 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Unsat_Interface
  use Cdsat_Theory_Trail_Type
  predicate unsat (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Unsat
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 30] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 469 8 469 100] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
end
module Cdsat_Theory_Impl4_Impls_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  predicate impls (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
end
module Cdsat_Theory_Impl4_Impls
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 4 479 41] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 480 8 480 126] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 478 4 478 57] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Concrete_Answer_Type
  type cdsat_concrete_answer_type  =
    | Cdsat_Concrete_Answer_Sat_Type
    | Cdsat_Concrete_Answer_Unsat_Type
    | Cdsat_Concrete_Answer_Unknown_Type
    
end
module Cdsat_Trail_Impl9_Unsat_Interface
  use Cdsat_Trail_Trail_Type
  predicate unsat (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_Unsat
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 295 4 295 30] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 294 4 294 16] Unsat0.unsat (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self)
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type
  type cdsat_theory_normal_type  =
    | Cdsat_Theory_Normal_Type (Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
  let function cdsat_theory_normal_type_Normal_0 (self : cdsat_theory_normal_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Normal_Type a -> a
      end
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 564 4 564 30] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 16] Sound0.sound (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
end
module Cdsat_Theory_Impl5_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate fail2 (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl5_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 627 4 627 57] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 631 12 633 39] (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) just = 0
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 624 15 624 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 625 15 625 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self))
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Cdsat_Trail_Impl9_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val len [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 14 289 50] UInt64.to_int result = Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) }
    
end
module Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  type cdsat_concrete_extendresult_type  =
    | Cdsat_Concrete_ExtendResult_Conflict_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Cdsat_Concrete_ExtendResult_Decision_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Concrete_ExtendResult_Satisfied_Type
    
  let function cdsat_concrete_extendresult_type_Decision_0 (self : cdsat_concrete_extendresult_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type _ -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      | Cdsat_Concrete_ExtendResult_Decision_Type a _ -> a
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      end
  let function cdsat_concrete_extendresult_type_Decision_1 (self : cdsat_concrete_extendresult_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Concrete_ExtendResult_Decision_Type _ a -> a
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
  let function cdsat_concrete_extendresult_type_Conflict_0 (self : cdsat_concrete_extendresult_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type a -> a
      | Cdsat_Concrete_ExtendResult_Decision_Type _ _ -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      end
end
module Cdsat_Concrete_Impl1_Extend_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Concrete_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  use Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val extend [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 233 4 233 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 233 4 233 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 234 14 245 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Satisfied_Type -> true
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type t v -> Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) (Model0.model t) (Model1.model v)
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (Model2.model c) in true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 246 4 246 44] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * tl)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  type cdsat_concrete_theorystate_type  =
    | Cdsat_Concrete_TheoryState_Sat_Type
    | Cdsat_Concrete_TheoryState_Decision_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Concrete_TheoryState_Unknown_Type
    
  let function cdsat_concrete_theorystate_type_Decision_0 (self : cdsat_concrete_theorystate_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_TheoryState_Sat_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      | Cdsat_Concrete_TheoryState_Decision_Type a _ -> a
      | Cdsat_Concrete_TheoryState_Unknown_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      end
  let function cdsat_concrete_theorystate_type_Decision_1 (self : cdsat_concrete_theorystate_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_TheoryState_Sat_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Concrete_TheoryState_Decision_Type _ a -> a
      | Cdsat_Concrete_TheoryState_Unknown_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  type cdsat_theory_conflict_type  =
    | Cdsat_Theory_Conflict_Type (Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
  let function cdsat_theory_conflict_type_Conflict_1 (self : cdsat_theory_conflict_type) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Conflict_Type _ a -> a
      end
  let function cdsat_theory_conflict_type_Conflict_0 (self : cdsat_theory_conflict_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Conflict_Type a _ -> a
      end
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type core_mem_manuallydrop_manuallydrop_type 't =
    | Core_Mem_ManuallyDrop_ManuallyDrop_Type 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type alloc_vec_intoiter_intoiter_type 't 'a =
    | Alloc_Vec_IntoIter_IntoIter_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.core_mem_manuallydrop_manuallydrop_type 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl2_Model_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_Model
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl1_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
    
end
module CreusotContracts_Std1_Vec_Impl1_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module CreusotContracts_Logic_Seq_Impl2_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl2_Contains
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate contains (self : Seq.seq t) (e : t) =
    exists i : (int) . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
end
module Cdsat_Concrete_ConflictHeap_Type
  type cdsat_concrete_conflictheap_type
end
module Cdsat_Concrete_Impl2_Model_Interface
  use bag.Bag
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type
  function model (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Bag.bag (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Concrete_Impl2_Model
  use bag.Bag
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type
  function model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 327 4 327 35] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Bag.bag (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Bag_Impl0_Contains_Interface
  type t
  use bag.Bag
  predicate contains [@inline:trivial] (self : Bag.bag t) (e : t)
end
module Cdsat_Bag_Impl0_Contains
  type t
  use bag.Bag
  predicate contains [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/bag.rs" 20 4 20 39] (self : Bag.bag t) (e : t) =
    [#"/Users/xavier/Code/cdsat/src/bag.rs" 21 8 21 26] Bag.mem e self
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 687 4 687 30] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 688 8 688 109] Sound0.sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) -> false)
end
module Cdsat_Theory_Impl6_Invariant_Interface
  use Cdsat_Theory_Conflict_Type
  predicate invariant' (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
end
module Cdsat_Theory_Impl6_Invariant
  use Cdsat_Theory_Conflict_Type
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 681 4 681 34] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 682 8 682 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a)
end
module Core_Cmp_Ordering_Type
  type core_cmp_ordering_type  =
    | Core_Cmp_Ordering_Less_Type
    | Core_Cmp_Ordering_Equal_Type
    | Core_Cmp_Ordering_Greater_Type
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module Cdsat_Theory_Impl4_RestrictTooBig_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_too_big (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictTooBig
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 515 4 515 63] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 516 8 525 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 510 15 510 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 511 15 511 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 512 15 512 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 513 15 513 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 514 14 514 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  function negate_involutive (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 68 4 68 12] ()
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl4_ContainsInverse_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  function contains_inverse (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_ContainsInverse
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 341 4 341 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 336 4 336 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        contains_inverse tl d
      
      end
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 337 15 337 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 338 15 338 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 339 4 339 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 340 14 340 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type
  predicate is_bool (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type)
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 26 8 26 36] Sort0.sort self = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
end
module Cdsat_Theory_Impl3_Lemma_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  function lemma' (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (v : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
end
module Cdsat_Theory_Impl3_Lemma
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Interp_Interface as Interp0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort2.sort, axiom .
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 37] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (v : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 168 8 171 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type _ -> ()
      | _ -> ()
      end
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type, v : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 163 15 163 40] Sort0.sort v = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 164 15 164 40] Sort2.sort t = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 165 15 165 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 166 14 166 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl6_LearnJustified_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  function learn_justified (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (ass : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl6_LearnJustified
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use map.Const
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Lemma_Interface as Lemma0 with function Sort0.sort = Sort0.sort,
  function Sort2.sort = Sort2.sort, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Satisfies0.satisfies = Satisfies0.satisfies, function Negate0.negate = Negate0.negate,
  predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 702 4 702 53] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (ass : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 703 8 703 67] let _ = Lemma0.lemma' (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (let (a, _) = ass in a) (let (_, a) = ass in a) in ()
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, ass : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 697 15 697 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 698 15 698 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 37] Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 700 4 700 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 701 4 701 126] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  type a
end
module Cdsat_Concrete_Impl2_ModelTy_Type
  use bag.Bag
  use Cdsat_Trail_TrailIndex_Type
  type modelTy  =
    Bag.bag (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
end
module Cdsat_Concrete_Impl2
  use Cdsat_Concrete_ConflictHeap_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  clone Cdsat_Concrete_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : () =
    ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.core_cmp_ordering_type =
    if self < o then
      Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
    else
      if self = o then
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
      else
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
      
    
end
module Cdsat_Trail_Impl6_CmpLog_Interface
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  function cmp_log (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (rhs : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    
end
module Cdsat_Trail_Impl6_CmpLog
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface as CmpLog0
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 43] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (rhs : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 8 183 9] match (CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 self) (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 rhs)) with
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type -> CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 self) (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 rhs)
      end
end
module CreusotContracts_Logic_Ord_Impl2
  
end
module CreusotContracts_Logic_Ord_Impl2_CmpLeLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_le_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpLeLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_le_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpLtLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_lt_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpLtLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_lt_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGeLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_ge_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGeLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_ge_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGtLog_Interface
  use mach.int.Int
  use prelude.UIntSize
  function cmp_gt_log (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_CmpGtLog
  use mach.int.Int
  use prelude.UIntSize
  function cmp_gt_log (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Refl_Interface
  use mach.int.Int
  use prelude.UIntSize
  function refl (_1' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Refl
  use mach.int.Int
  use prelude.UIntSize
  function refl (_1' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Trans_Interface
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function trans (_1' : usize) (_2' : usize) (_3' : usize) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Trans
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  function trans (_1' : usize) (_2' : usize) (_3' : usize) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym1_Interface
  use mach.int.Int
  use prelude.UIntSize
  function antisym1 (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym1
  use mach.int.Int
  use prelude.UIntSize
  function antisym1 (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym2_Interface
  use mach.int.Int
  use prelude.UIntSize
  function antisym2 (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_Antisym2
  use mach.int.Int
  use prelude.UIntSize
  function antisym2 (_1' : usize) (_2' : usize) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl2_EqCmp_Interface
  use mach.int.Int
  use prelude.UIntSize
  function eq_cmp (_1' : usize) (_2' : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl2_EqCmp
  use mach.int.Int
  use prelude.UIntSize
  function eq_cmp (_1' : usize) (_2' : usize) : () =
    ()
end
module Cdsat_Trail_Impl6_CmpLeLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_le_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpLeLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 188 4 188 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 186 4 186 10] ()
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 187 14 187 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module Cdsat_Trail_Impl6_CmpLtLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_lt_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpLtLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 192 4 192 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 190 4 190 10] ()
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 191 14 191 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module Cdsat_Trail_Impl6_CmpGeLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_ge_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpGeLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 193 4 193 10] ()
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 194 14 194 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module Cdsat_Trail_Impl6_CmpGtLog_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_gt_log (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_CmpGtLog
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 35] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 197 4 197 10] ()
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 198 14 198 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module Cdsat_Trail_Impl6_Refl_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function refl (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
end
module Cdsat_Trail_Impl6_Refl
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 20] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 4 201 10] ()
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
end
module Cdsat_Trail_Impl6_Trans_Interface
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function trans (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
    
end
module Cdsat_Trail_Impl6_Trans
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 209 4 209 52] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 205 4 205 10] ()
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 208 14 208 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl6_Antisym1_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym1 (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_Antisym1
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 214 4 214 33] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 211 4 211 10] ()
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 213 14 213 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module Cdsat_Trail_Impl6_Antisym2_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym2 (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_Antisym2
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 33] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 216 4 216 10] ()
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module Cdsat_Trail_Impl6_EqCmp_Interface
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function eq_cmp (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
end
module Cdsat_Trail_Impl6_EqCmp
  use Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl6_CmpLog_Interface as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 31] (x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 221 4 221 10] ()
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . [#"/Users/xavier/Code/cdsat/src/trail.rs" 222 14 222 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
end
module Cdsat_Trail_Impl6
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog2
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog as CmpLog0 with function CmpLog0.cmp_log = CmpLog2.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLeLog as CmpLeLog0 with predicate LeLog0.le_log = LeLog0.le_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_le_log = CmpLeLog0.cmp_le_log, predicate LeLog0.le_log = LeLog0.le_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_log = CmpLog0.cmp_log
  goal cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 187 14 187 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 10 49 11 27] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type))
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLtLog as CmpLtLog0 with predicate LtLog0.lt_log = LtLog0.lt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_lt_log = CmpLtLog0.cmp_lt_log, predicate LtLog0.lt_log = LtLog0.lt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 191 14 191 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 16 18 18 19] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type))
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGeLog as CmpGeLog0 with predicate GeLog0.ge_log = GeLog0.ge_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_ge_log = CmpGeLog0.cmp_ge_log, predicate GeLog0.ge_log = GeLog0.ge_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 194 14 194 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 27 0 29 33] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type))
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGtLog as CmpGtLog0 with predicate GtLog0.gt_log = GtLog0.gt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function cmp_gt_log = CmpGtLog0.cmp_gt_log, predicate GtLog0.gt_log = GtLog0.gt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 198 14 198 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 36 0 37 22] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type))
  clone Cdsat_Trail_Impl6_Refl as Refl0 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function refl = Refl0.refl, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 42 16 42 47] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
  clone Cdsat_Trail_Impl6_Trans as Trans0 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function trans = Trans0.trans, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, z : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . (([#"/Users/xavier/Code/cdsat/src/trail.rs" 44 22 45 7] CmpLog0.cmp_log y z = o) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 43 42 44 4] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 207 15 207 32] CmpLog0.cmp_log y z = o) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 206 15 206 32] CmpLog0.cmp_log x y = o)) /\ (forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 208 14 208 31] CmpLog0.cmp_log x z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 46 10 46 27] CmpLog0.cmp_log x z = o))
  clone Cdsat_Trail_Impl6_Antisym1 as Antisym10 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym11 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function antisym1 = Antisym10.antisym1, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . (([#"/Users/xavier/Code/cdsat/src/trail.rs" 53 2 54 0] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 212 15 212 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)) /\ (forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 213 14 213 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 55 3 58 22] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type))
  clone Cdsat_Trail_Impl6_Antisym2 as Antisym20 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym21 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function antisym2 = Antisym20.antisym2, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . (([#"/Users/xavier/Code/cdsat/src/trail.rs" 60 14 63 1] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 217 15 217 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)) /\ (forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 63 18 64 10] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type))
  clone Cdsat_Trail_Impl6_EqCmp as EqCmp0 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function eq_cmp = EqCmp0.eq_cmp, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  goal eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, y : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type . forall result : () . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 222 14 222 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 65 53 66 25] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type))
end
module Cdsat_Concrete_Impl3_New_Interface
  use bag.Bag
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val new [@cfg:stackify] (_ : ()) : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 337 14 337 35] Model0.model result = Bag.empty_bag  }
    
end
module Alloc_Vec_Impl19_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
    ensures { Model0.model result = Model1.model self }
    
end
module Alloc_Vec_IntoIter_Impl5_Item_Type
  type t
  type a
  type item  =
    t
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with type t = t, type a = a
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a,
  type Item0.item = Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self) /\ Resolve0.resolve self
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module Cdsat_Bag_Impl0_Insert_Interface
  type t
  use bag.Bag
  function insert [@inline:trivial] (self : Bag.bag t) (e : t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Insert
  type t
  use bag.Bag
  function insert [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/bag.rs" 33 4 33 37] (self : Bag.bag t) (e : t) : Bag.bag t
    
   =
    [#"/Users/xavier/Code/cdsat/src/bag.rs" 34 8 34 26] Bag.add e self
end
module Cdsat_Concrete_Impl3_Push_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Bag_Impl0_Insert_Interface as Insert0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val push [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) (e : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 14 343 41] Model0.model ( ^ self) = Insert0.insert (Model1.model self) e }
    
end
module Cdsat_Concrete_Impl3_Peek_Interface
  use prelude.Borrow
  use bag.Bag
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Bag_Impl0_Contains_Interface as Contains0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  val peek [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 349 4 352 6] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type a -> Contains0.contains (Model0.model self) a /\ (forall other : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains (Model0.model self) other -> LeLog0.le_log other a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 14 353 57] (Model0.model self = Bag.empty_bag ) = (result = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : t
    requires {self <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    ensures { Core_Option_Option_Type.Core_Option_Option_Some_Type result = self }
    
end
module Cdsat_Trail_Impl8_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 14 237 30] result = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 self }
    
end
module Cdsat_Concrete_Impl3_Pop_Interface
  use bag.Bag
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Bag_Impl0_Contains_Interface as Contains0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model1
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val pop [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 359 14 359 57] (Model0.model self = Bag.empty_bag ) = (result = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 360 4 363 6] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type a -> Model1.model ( ^ self) = Bag.diff (Model0.model self) (Bag.singleton a) /\ Contains0.contains (Model0.model self) a /\ (forall other : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains (Model0.model self) other -> LeLog0.le_log other a) }
    
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module Cdsat_Trail_Impl11_Index_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  val index [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (index : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 538 15 538 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 539 14 539 67] result = Seq.get (Model1.model (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_0 index)))) (UInt64.to_int (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type_TrailIndex_1 index)) }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl9_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  val clone' [@cfg:stackify] (self : uint64) : uint64
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl9
  
end
module Core_Clone_Impls_Impl19
  
end
module Cdsat_Trail_Impl29_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 125 9 125 14] result = self }
    
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Cdsat_Trail_Impl21_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 9 73 14] result = self }
    
end
module Alloc_Boxed_Impl12
  type t
  type a
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Cdsat_Trail_Impl29
  use Cdsat_Trail_Value_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type
  clone Cdsat_Trail_Impl29_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  val clone' = Clone0.clone'
end
module Core_Clone_Impls_Impl5
  
end
module Cdsat_Trail_Impl21
  use Cdsat_Trail_Sort_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
  clone Cdsat_Trail_Impl21_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl25_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 93 9 93 14] result = self }
    
end
module Cdsat_Trail_Impl17_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 44 9 44 14] result = self }
    
end
module Cdsat_Trail_Impl25
  use Cdsat_Trail_Term_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type
  clone Cdsat_Trail_Impl25_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl17
  use Cdsat_Trail_Reason_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
  clone Cdsat_Trail_Impl17_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl13_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] result = self }
    
end
module Cdsat_Trail_Impl5_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val is_bool [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 153 14 153 41] result = IsBool0.is_bool (Model0.model self) }
    
end
module Cdsat_Trail_Impl12_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  val is_bool [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 556 14 556 45] result = IsBool0.is_bool (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) }
    
end
module Cdsat_Concrete_Impl3_IntoVec_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Seq_Impl2_Contains_Interface as Contains1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Bag_Impl0_Contains_Interface as Contains0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val into_vec [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 369 4 369 75] forall e : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains (Model0.model self) e -> Contains1.contains (Model1.model result) e }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 370 4 370 94] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model result) -> Contains0.contains (Model0.model self) (Seq.get (Model1.model result) i) }
    
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_idempotent (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (l1 : int) (l2 : int) : ()
end
module Cdsat_Theory_Impl4_RestrictIdempotent
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 533 4 533 54] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 534 8 537 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> restrict_idempotent tl l1 l2
      end
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 529 15 529 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 530 15 530 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 531 15 531 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 532 14 532 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictSound_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function restrict_sound (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : ()
end
module Cdsat_Theory_Impl4_RestrictSound
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 43] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 489 8 494 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let _ = restrict_sound tl level in ()
      end
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 486 15 486 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 487 14 487 42] Sound0.sound (Restrict0.restrict self level))
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use seq_ext.SeqExt
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  use Core_Option_Option_Type
  val pop [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type t -> Model0.model ( ^ self) = SeqExt.subsequence (Model0.model ( * self)) 0 (Seq.length (Model0.model ( * self)) - 1) /\ Model0.model ( * self) = Seq.snoc (Model0.model ( ^ self)) t
      | Core_Option_Option_Type.Core_Option_Option_None_Type ->  * self =  ^ self /\ Seq.length (Model0.model ( * self)) = 0
      end }
    
end
module Cdsat_Trail_Impl9_Restrict_Interface
  use prelude.Borrow
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl8_LevelLog_Interface as LevelLog0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val restrict [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 441 4 441 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 442 15 442 36] UInt64.to_int level <= UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 441 4 441 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 443 14 443 59] Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ self) = Restrict0.restrict (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (UInt64.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 445 4 445 111] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . LevelLog0.level_log ix <= UInt64.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 446 4 446 112] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
end
module Cdsat_Trail_Impl5_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val negate [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 161 15 161 32] IsBool0.is_bool (Model0.model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 162 14 162 41] Model1.model result = Negate0.negate (Model0.model self) }
    
end
module Cdsat_Trail_Impl12_IsFirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  val is_first_order [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 561 14 561 45] result <> IsBool0.is_bool (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) }
    
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Cdsat_Trail_Impl12_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 551 14 551 34] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level self }
    
end
module Cdsat_Trail_Impl9_AddDecision_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val add_decision [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (val' : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 380 15 380 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 382 4 382 51] Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Model0.model term) (Model1.model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 381 14 381 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 383 4 383 48] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ self)) }
    
end
module Alloc_Vec_Impl19
  type t
  type a
end
module Alloc_Vec_IntoIter_Impl5
  type t
  type a
end
module Cdsat_Trail_Impl11_Output_Type
  use Cdsat_Trail_Assignment_Type
  type output  =
    Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
end
module Core_Ops_Index_Index_Output_Type
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Borrow
  clone Core_Ops_Index_Index_Output_Type as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Cdsat_Trail_Impl11
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Contains as Contains0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone Cdsat_Trail_Impl11_Output_Type as Output0
  clone Cdsat_Trail_Impl11_Index_Interface as Index0 with predicate Contains0.contains = Contains0.contains,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type,
  type idx = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, val index = Index0.index,
  type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output_Type as Output1 with type self = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type,
  type idx = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, type output = Output0.output
end
module Cdsat_Trail_Impl13
  use Cdsat_Trail_Assignment_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
  clone Cdsat_Trail_Impl13_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  val clone' = Clone0.clone'
end
module Core_Iter_Traits_Collect_Impl0
  type i
end
module CreusotContracts_Std1_Vec_Impl1_Completed_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
end
module CreusotContracts_Std1_Vec_Impl1_Completed
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  predicate completed (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Concrete_Solver_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val resolve_conflict [@cfg:stackify] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (conflict : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 100 4 100 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 15 101 36] Seq.length (Model0.model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 102 4 102 99] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model conflict) -> Contains0.contains ( * trail) (Seq.get (Model0.model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 107 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (Model0.model conflict) in SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) conflict > 0 /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 100 4 100 41] Invariant0.invariant' ( ^ trail) }
    
end
module Cdsat_Concrete_Impl0_ResolveConflict
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use bag.Bag
  use mach.int.UInt64
  clone CreusotContracts_Logic_Ord_Impl2_EqCmp as EqCmp2
  clone CreusotContracts_Logic_Ord_Impl2_Antisym2 as Antisym22
  clone CreusotContracts_Logic_Ord_Impl2_Antisym1 as Antisym12
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_Trans as Trans2
  clone CreusotContracts_Logic_Ord_Impl2_Refl as Refl2
  clone CreusotContracts_Logic_Ord_Impl2_CmpGtLog as CmpGtLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpGeLog as CmpGeLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpLtLog as CmpLtLog2
  clone CreusotContracts_Logic_Ord_Impl2_CmpLeLog as CmpLeLog2
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with function Level0.level = Level0.level,
  function Len0.len = Len0.len
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant4 with function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with predicate Invariant0.invariant' = Invariant4.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains4 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with predicate IsBool0.is_bool = IsBool1.is_bool, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate Contains0.contains = Contains4.contains, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains3 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with predicate Contains0.contains = Contains3.contains,
  predicate Contains1.contains = Contains4.contains,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains3.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with function Level0.level = Level0.level,
  function SetLevel0.set_level = SetLevel0.set_level, function Len0.len = Len0.len,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains3.contains, function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant2 with predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
  predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
  predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains4.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog as CmpLog0 with function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl6_EqCmp as EqCmp1 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Antisym2 as Antisym21 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Antisym1 as Antisym11 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Trans as Trans1 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone Cdsat_Trail_Impl6_Refl as Refl1 with function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGtLog as CmpGtLog1 with predicate GtLog0.gt_log = GtLog0.gt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpGeLog as CmpGeLog1 with predicate GeLog0.ge_log = GeLog0.ge_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLtLog as CmpLtLog1 with predicate LtLog0.lt_log = LtLog0.lt_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl6_CmpLeLog as CmpLeLog1 with predicate LeLog0.le_log = LeLog0.le_log,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Sort0.sort = Sort1.sort, function Sort1.sort = Sort0.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with function Interp0.interp = Interp0.interp,
  predicate Invariant0.invariant' = Invariant3.invariant', function Sort0.sort = Sort1.sort,
  function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with predicate Contains0.contains = Contains3.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with function Sort0.sort = Sort1.sort, function Sort2.sort = Sort0.sort,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Satisfies0.satisfies = Satisfies0.satisfies,
  function Negate0.negate = Negate0.negate, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Interp0.interp = Interp0.interp, axiom .
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model8
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with predicate Contains0.contains = Contains4.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains4.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function CountBounds0.count_bounds = CountBounds0.count_bounds, axiom .
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model as Model7
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use Cdsat_Concrete_ConflictHeap_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_Model as Model6 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Std1_Vec_Impl1_Produces as Produces0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl1_ProducesTrans as ProducesTrans0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_ProducesRefl as ProducesRefl0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Produces0.produces = Produces0.produces, axiom .
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl3_Model as Model4 with function Model0.model = Model8.model,
  function Model1.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_AbsJustInner as AbsJustInner0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model, function Model2.model = Model4.model, function Model3.model = Model7.model,
  function Insert0.insert = Insert0.insert, axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound1 with predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with function Model0.model = Model4.model,
  function Model1.model = Model7.model
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model, function TermValue0.term_value = TermValue0.term_value
  clone Cdsat_Trail_Impl9_Contains as Contains0 with function Model0.model = Model3.model,
  function Model1.model = Model5.model
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with predicate Contains0.contains = Contains0.contains,
  function IndexLogic0.index_logic = IndexLogic0.index_logic, predicate Contains1.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function LevelLog0.level_log = LevelLog0.level_log,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl0_IsBool as IsBool0 with function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl6_Sound as Sound0 with predicate Sound0.sound = Sound1.sound,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant1 with function SetLevel0.set_level = SetLevel0.set_level,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains3.contains,
  predicate Contains1.contains = Contains4.contains,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_LearnJustified as LearnJustified0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Contains0.contains = Contains3.contains,
  predicate IsBool0.is_bool = IsBool0.is_bool, predicate IsBool1.is_bool = IsBool1.is_bool,
  predicate Invariant1.invariant' = Invariant3.invariant', function Remove0.remove = Remove0.remove,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, function Negate0.negate = Negate0.negate,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, function Lemma0.lemma' = Lemma0.lemma',
  function Sort0.sort = Sort1.sort, function Sort2.sort = Sort0.sort, axiom .
  clone Cdsat_Theory_Impl4_ContainsInverse as ContainsInverse0 with predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate Contains0.contains = Contains4.contains, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function NegateInvolutive0.negate_involutive = NegateInvolutive0.negate_involutive,
  function ToPair0.to_pair = ToPair0.to_pair, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains4.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function ToPair0.to_pair = ToPair0.to_pair, axiom .
  clone Cdsat_Bag_Impl0_Contains as Contains2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl2_Model as Model2
  clone CreusotContracts_Logic_Seq_Impl2_Contains as Contains1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains3.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  function AbsJustInner0.abs_just_inner = AbsJustInner0.abs_just_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
  predicate Sound0.sound = Sound1.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  function Level0.level = Level0.level, function Model0.model = Model3.model, function Len0.len = Len0.len
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model13 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model13.model
  clone CreusotContracts_Std1_Slice_Impl5_ProducesTrans as ProducesTrans1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate Produces0.produces = Produces1.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl5_ProducesRefl as ProducesRefl1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate Produces0.produces = Produces1.produces, axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Impls as Impls0 with predicate Unsat0.unsat = Unsat0.unsat,
  predicate Invariant0.invariant' = Invariant3.invariant', function Restrict0.restrict = Restrict0.restrict,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Core_Slice_Iter_Impl173_Item_Type as Item1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Slice_Impl5_Completed as Completed1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model13.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model12 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model14 with type t = seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model12.model
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with predicate Contains0.contains = Contains4.contains,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model7.model
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Cdsat_Bag_Impl0_Insert as Insert1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Std1_Vec_Impl1_Completed as Completed0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Cdsat_Trail_Impl9_AddDecision_Interface as AddDecision0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model4.model, function Model1.model = Model7.model,
  predicate Acceptable0.acceptable = Acceptable0.acceptable, predicate Impls0.impls = Impls0.impls,
  predicate Unsat0.unsat = Unsat0.unsat
  clone Cdsat_Trail_Impl12_Level_Interface as Level2
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
  clone Core_Slice_Iter_Impl173_Next_Interface as Next1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  predicate Completed0.completed = Completed1.completed, predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter2 with type i = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
  clone Core_Slice_Impl0_Iter_Interface as Iter0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model13.model, function Model1.model = Model14.model
  clone Alloc_Vec_Impl10_Deref_Interface as Deref0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model12.model,
  function Model1.model = Model0.model
  clone Cdsat_Trail_Impl9_Justification_Interface as Justification0
  clone Cdsat_Trail_Impl12_Decision_Interface as Decision0
  clone Cdsat_Trail_Impl12_IsFirstOrder_Interface as IsFirstOrder0 with function Model0.model = Model7.model,
  predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl9_AddJustified_Interface as AddJustified0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model7.model, predicate IsBool0.is_bool = IsBool1.is_bool,
  function Model1.model = Model4.model, predicate Acceptable0.acceptable = Acceptable0.acceptable,
  predicate Invariant1.invariant' = Invariant3.invariant', function Model3.model = Model0.model,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate Contains0.contains = Contains0.contains, predicate Contains1.contains = Contains3.contains,
  function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone Cdsat_Trail_Impl5_Negate_Interface as Negate1 with function Model0.model = Model11.model,
  predicate IsBool0.is_bool = IsBool1.is_bool, function Model1.model = Model7.model,
  function Negate0.negate = Negate0.negate
  clone Cdsat_Trail_Impl9_Restrict_Interface as Restrict1 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Restrict0.restrict = Restrict0.restrict, function LevelLog0.level_log = LevelLog0.level_log,
  predicate Contains0.contains = Contains0.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains1.contains = Contains4.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Concrete_Impl3_IntoVec_Interface as IntoVec0 with function Model0.model = Model2.model,
  predicate Contains0.contains = Contains2.contains, function Model1.model = Model0.model,
  predicate Contains1.contains = Contains1.contains
  clone Cdsat_Trail_Impl12_IsBool_Interface as IsBool2 with function Model0.model = Model7.model,
  predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl13_Clone_Interface as Clone0
  clone Cdsat_Trail_Impl11_Index_Interface as Index0 with predicate Contains0.contains = Contains0.contains,
  function Model0.model = Model3.model, function Model1.model = Model5.model
  clone Cdsat_Concrete_Impl3_Pop_Interface as Pop0 with function Model0.model = Model9.model,
  function Model1.model = Model2.model, predicate Contains0.contains = Contains2.contains,
  predicate LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Trail_Impl8_Level_Interface as Level1
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Concrete_Impl3_Peek_Interface as Peek0 with function Model0.model = Model10.model,
  predicate Contains0.contains = Contains2.contains, predicate LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Concrete_Impl3_Push_Interface as Push0 with function Model0.model = Model2.model,
  function Model1.model = Model9.model, function Insert0.insert = Insert1.insert
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve4.resolve, predicate Produces0.produces = Produces0.produces
  clone Alloc_Vec_Impl19_IntoIter_Interface as IntoIter1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model,
  function Model1.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve5.resolve
  clone Cdsat_Concrete_Impl3_New_Interface as New0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type
  let rec cfg resolve_conflict [@cfg:stackify] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 108 4 108 80] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (conflict : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 100 4 100 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 15 101 36] Seq.length (Model0.model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 102 4 102 99] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model conflict) -> Contains0.contains ( * trail) (Seq.get (Model0.model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 107 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (Model0.model conflict) in SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) conflict > 0 /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 100 4 100 41] Invariant0.invariant' ( ^ trail) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type);
  var trail_2 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var conflict_3 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var heap_4 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  ghost var abs_cflct_5 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _6 : ();
  var _7 : ();
  var iter_8 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var iter_old_10 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _11 : ();
  ghost var produced_12 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _13 : ();
  var _14 : ();
  var _15 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _16 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _17 : isize;
  var i_18 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  ghost var _19 : Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _20 : ();
  var a_21 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _22 : ();
  var _23 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _24 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _25 : ();
  var _26 : ();
  var _27 : ();
  var max_ix_28 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _29 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _30 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _31 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var conflict_level_32 : usize;
  var _33 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _34 : ();
  var _35 : ();
  var _36 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _37 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _38 : isize;
  var ix_39 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _40 : ();
  var rem_level_41 : usize;
  var _42 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _43 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _44 : isize;
  var ix2_45 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _46 : ();
  var _47 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var a_48 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _49 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _50 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _51 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _52 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _53 : ();
  var _54 : ();
  var _55 : ();
  var _56 : bool;
  var _57 : bool;
  var _58 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _59 : bool;
  var _60 : usize;
  var _61 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _62 : usize;
  var _63 : ();
  var _64 : ();
  var _65 : ();
  var just_66 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _67 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _68 : ();
  var _69 : ();
  var _70 : ();
  var _71 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _72 : usize;
  var _73 : ();
  var _74 : ();
  var _75 : ();
  var _76 : ();
  var _77 : ();
  var _78 : ();
  var _79 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _80 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _81 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _82 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _83 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _84 : ();
  var _85 : bool;
  var _86 : bool;
  var _87 : bool;
  var _88 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _89 : bool;
  var _90 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _91 : bool;
  var _92 : usize;
  var _93 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _94 : usize;
  var _95 : ();
  var _96 : ();
  var _97 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _98 : usize;
  var _99 : usize;
  var _100 : Core_Option_Option_Type.core_option_option_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _101 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _102 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _103 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _104 : isize;
  var just_105 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _106 : ();
  var _107 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _108 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _109 : seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _110 : seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _111 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var iter_112 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _113 : ();
  var _114 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _115 : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type));
  var _116 : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type));
  var _117 : isize;
  var _118 : ();
  var j_119 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var j_120 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _121 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _122 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _123 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _124 : bool;
  var _125 : bool;
  var _126 : bool;
  var _127 : usize;
  var _128 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _129 : usize;
  var _130 : bool;
  var _131 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _132 : bool;
  var _133 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _134 : bool;
  var _135 : usize;
  var _136 : usize;
  var _137 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _138 : ();
  var _139 : ();
  var _140 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _141 : usize;
  var _142 : usize;
  var _143 : ();
  var _144 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _145 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _146 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _147 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _148 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _149 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var iter_150 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _151 : ();
  var _152 : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
  var _153 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _154 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _155 : isize;
  var _156 : ();
  var a_157 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _158 : ();
  var _159 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _160 : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type;
  var _161 : ();
  var _162 : ();
  var _163 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    conflict_3 <- conflict;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    heap_4 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 110 37 110 56] New0.new ());
    goto BB4
  }
  BB4 {
    _6 <- ();
    abs_cflct_5 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 54 111 149] Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model conflict_3)));
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _9 };
    _9 <- conflict_3;
    conflict_3 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    iter_8 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] IntoIter1.into_iter _9);
    goto BB6
  }
  BB6 {
    _11 <- ();
    iter_old_10 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] iter_8);
    goto BB7
  }
  BB7 {
    _13 <- ();
    produced_12 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] Seq.empty );
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] Produces0.produces iter_old_10 produced_12 iter_8 };
    invariant mem { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains produced_12 a -> Contains2.contains (Model2.model heap_4) a };
    invariant mem { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] forall i : (int) . 0 <= i /\ i < Seq.length produced_12 -> Contains2.contains (Model2.model heap_4) (Seq.get produced_12 i) };
    invariant mem2 { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains1.contains produced_12 a };
    _16 <- borrow_mut iter_8;
    iter_8 <-  ^ _16;
    _15 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] Next0.next _16);
    goto BB14
  }
  BB14 {
    switch (_15)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB15
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB17
      end
  }
  BB15 {
    _7 <- ();
    goto BB20
  }
  BB16 {
    assume { Resolve2.resolve trail_2 };
    absurd
  }
  BB17 {
    i_18 <- Core_Option_Option_Type.core_option_option_type_Some_0 _15;
    _20 <- ();
    _19 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 8 113 85] Seq.snoc produced_12 i_18);
    goto BB18
  }
  BB18 {
    produced_12 <- _19;
    _19 <- any Seq.seq (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
    a_21 <- i_18;
    _23 <- borrow_mut heap_4;
    heap_4 <-  ^ _23;
    _24 <- a_21;
    _22 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 117 12 117 24] Push0.push _23 _24);
    goto BB19
  }
  BB19 {
    _14 <- ();
    goto BB13
  }
  BB20 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 119 8 119 103] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    goto BB21
  }
  BB21 {
    _26 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 121 22 121 43] Model2.model heap_4 <> Bag.empty_bag  };
    goto BB22
  }
  BB22 {
    _27 <- ();
    _31 <- heap_4;
    _30 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 122 22 122 33] Peek0.peek _31);
    goto BB23
  }
  BB23 {
    _29 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 122 22 122 42] Unwrap0.unwrap _30);
    goto BB24
  }
  BB24 {
    max_ix_28 <- _29;
    _33 <- max_ix_28;
    conflict_level_32 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 29 123 43] Level1.level _33);
    goto BB25
  }
  BB25 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 125 22 125 66] UInt64.to_int conflict_level_32 < Seq.length (Model3.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) };
    _34 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 126 22 126 76] 0 < UInt64.to_int conflict_level_32 /\ UInt64.to_int conflict_level_32 <= UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level ( * trail_2)) };
    _35 <- ();
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    invariant cflct_sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 33 127 50] Sound0.sound abs_cflct_5 };
    invariant cflict_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 128 32 128 53] Invariant1.invariant' abs_cflct_5 };
    invariant level { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 52] forall ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) ix -> LeLog0.le_log ix max_ix_28 };
    invariant to_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 52] forall a : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains2.contains (Model2.model heap_4) a -> Contains0.contains ( * trail_2) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) (IndexLogic0.index_logic ( * trail_2) a) };
    invariant from_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 52] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) a -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains0.contains ( * trail_2) ix /\ Contains2.contains (Model2.model heap_4) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    _37 <- borrow_mut heap_4;
    heap_4 <-  ^ _37;
    _36 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 132 29 132 39] Pop0.pop _37);
    goto BB30
  }
  BB30 {
    switch (_36)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB31
      | _ -> goto BB112
      end
  }
  BB31 {
    ix_39 <- Core_Option_Option_Type.core_option_option_type_Some_0 _36;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 133 26 133 38] LeLog0.le_log ix_39 max_ix_28 };
    _40 <- ();
    _43 <- heap_4;
    _42 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 134 34 134 45] Peek0.peek _43);
    goto BB32
  }
  BB32 {
    switch (_42)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB33
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB35
      end
  }
  BB33 {
    rem_level_41 <- (0 : usize);
    goto BB37
  }
  BB34 {
    assume { Resolve2.resolve trail_2 };
    absurd
  }
  BB35 {
    ix2_45 <- Core_Option_Option_Type.core_option_option_type_Some_0 _42;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 135 45 135 54] LeLog0.le_log ix2_45 ix_39 };
    _46 <- ();
    _47 <- ix2_45;
    rem_level_41 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 135 57 135 68] Level1.level _47);
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    _51 <-  * trail_2;
    _52 <- ix_39;
    _50 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 139 20 139 29] Index0.index _51 _52);
    goto BB38
  }
  BB38 {
    _49 <- _50;
    a_48 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 139 20 139 37] Clone0.clone' _49);
    goto BB39
  }
  BB39 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 140 26 140 45] LevelLog0.level_log ix_39 >= 0 };
    _53 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 26 141 54] UInt64.to_int rem_level_41 <= LevelLog0.level_log ix_39 };
    _54 <- ();
    _58 <- a_48;
    _57 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 143 15 143 26] IsBool2.is_bool _58);
    goto BB43
  }
  BB40 {
    _56 <- false;
    goto BB42
  }
  BB41 {
    _61 <- ix_39;
    _60 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 143 30 143 40] Level1.level _61);
    goto BB44
  }
  BB42 {
    switch (_56)
      | False -> goto BB56
      | _ -> goto BB45
      end
  }
  BB43 {
    switch (_57)
      | False -> goto BB40
      | _ -> goto BB41
      end
  }
  BB44 {
    _62 <- rem_level_41;
    _59 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 143 30 143 52] _60 > _62);
    _56 <- _59;
    _59 <- any bool;
    goto BB42
  }
  BB45 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 144 16 144 97] let _ = RestrictTooBig0.restrict_too_big (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (LevelLog0.level_log ix_39) (TermValue0.term_value a_48) in true };
    _64 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 145 16 145 81] let _ = ContainsInverse0.contains_inverse (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (TermValue0.term_value a_48) in true };
    _65 <- ();
    _67 <- heap_4;
    heap_4 <- any Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
    just_66 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 146 27 146 42] IntoVec0.into_vec _67);
    goto BB46
  }
  BB46 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 147 16 147 113] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model just_66) -> LevelLog0.level_log (Seq.get (Model0.model just_66) i) <= UInt64.to_int rem_level_41 };
    goto BB47
  }
  BB47 {
    _68 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 149 16 149 162] forall b : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . b <> TermValue0.term_value a_48 -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) b -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains (Model0.model just_66) ix /\ IndexLogic0.index_logic ( * trail_2) ix = b) };
    goto BB48
  }
  BB48 {
    _69 <- ();
    _71 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _71) };
    _72 <- rem_level_41;
    _70 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 150 16 150 41] Restrict1.restrict _71 _72);
    goto BB49
  }
  BB49 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 151 16 151 162] forall b : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . b <> TermValue0.term_value a_48 -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) b -> (exists ix : (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) . Contains1.contains (Model0.model just_66) ix /\ IndexLogic0.index_logic ( * trail_2) ix = b) };
    goto BB50
  }
  BB50 {
    _73 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 30 153 49] IsBool0.is_bool (Model4.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a_48)) };
    goto BB51
  }
  BB51 {
    _74 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 154 16 154 103] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model just_66) -> Contains0.contains ( * trail_2) (Seq.get (Model0.model just_66) i) };
    goto BB52
  }
  BB52 {
    _75 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 30 155 71] let _ = LearnJustified0.learn_justified abs_cflct_5 (TermValue0.term_value a_48) in true };
    _76 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 156 16 156 144] forall b : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . b <> TermValue0.term_value a_48 -> Contains3.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abs_cflct_5) b -> Contains3.contains (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model just_66)) b };
    goto BB53
  }
  BB53 {
    _77 <- ();
    _79 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _79) };
    assume { Resolve1.resolve _80 };
    _80 <- just_66;
    just_66 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _81 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a_48;
    a_48 <- (let Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type a b c d = a_48 in Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type (any Cdsat_Trail_Term_Type.cdsat_trail_term_type) b c d);
    _83 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a_48;
    _82 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 157 50 157 64] Negate1.negate _83);
    goto BB54
  }
  BB54 {
    _78 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 157 16 157 65] AddJustified0.add_justified _79 _80 _81 _82);
    goto BB55
  }
  BB55 {
    assume { Resolve2.resolve trail_2 };
    _0 <- ();
    goto BB117
  }
  BB56 {
    _55 <- ();
    _88 <- a_48;
    _87 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 163 15 163 33] IsFirstOrder0.is_first_order _88);
    goto BB63
  }
  BB57 {
    _85 <- false;
    goto BB59
  }
  BB58 {
    _93 <- ix_39;
    _92 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 163 53 163 63] Level1.level _93);
    goto BB65
  }
  BB59 {
    switch (_85)
      | False -> goto BB68
      | _ -> goto BB66
      end
  }
  BB60 {
    _86 <- false;
    goto BB62
  }
  BB61 {
    _90 <- a_48;
    _89 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 163 37 163 49] Decision0.decision _90);
    goto BB64
  }
  BB62 {
    switch (_86)
      | False -> goto BB57
      | _ -> goto BB58
      end
  }
  BB63 {
    switch (_87)
      | False -> goto BB60
      | _ -> goto BB61
      end
  }
  BB64 {
    _86 <- _89;
    _89 <- any bool;
    goto BB62
  }
  BB65 {
    _94 <- rem_level_41;
    _91 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 163 53 163 75] _92 > _94);
    _85 <- _91;
    _91 <- any bool;
    goto BB59
  }
  BB66 {
    _97 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _97) };
    _99 <- conflict_level_32;
    _98 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 31 164 49] _99 - (1 : usize));
    _96 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 16 164 50] Restrict1.restrict _97 _98);
    goto BB67
  }
  BB67 {
    assume { Resolve2.resolve trail_2 };
    _0 <- ();
    goto BB118
  }
  BB68 {
    _84 <- ();
    _101 <-  * trail_2;
    _103 <- a_48;
    _102 <- _103;
    _100 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 169 32 169 55] Justification0.justification _101 _102);
    goto BB69
  }
  BB69 {
    switch (_100)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB70
      | _ -> goto BB107
      end
  }
  BB70 {
    assume { Resolve1.resolve just_105 };
    just_105 <- Core_Option_Option_Type.core_option_option_type_Some_0 _100;
    _100 <- (let Core_Option_Option_Type.Core_Option_Option_Some_Type a = _100 in Core_Option_Option_Type.Core_Option_Option_Some_Type (any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)));
    _111 <- just_105;
    _110 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 25 170 36] Deref0.deref _111);
    goto BB71
  }
  BB71 {
    _109 <- _110;
    _108 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 25 170 36] Iter0.iter _109);
    goto BB72
  }
  BB72 {
    _107 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 25 170 36] IntoIter2.into_iter _108);
    goto BB73
  }
  BB73 {
    iter_112 <- _107;
    _107 <- any Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type);
    goto BB74
  }
  BB74 {
    _116 <- borrow_mut iter_112;
    iter_112 <-  ^ _116;
    _115 <- borrow_mut ( * _116);
    _116 <- { _116 with current = ( ^ _115) };
    _114 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 25 170 36] Next1.next _115);
    goto BB75
  }
  BB75 {
    assume { Resolve3.resolve _116 };
    switch (_114)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB78
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB76
      end
  }
  BB76 {
    j_119 <- Core_Option_Option_Type.core_option_option_type_Some_0 _114;
    _122 <-  * trail_2;
    _123 <- j_119;
    _121 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 29 171 38] Index0.index _122 _123);
    goto BB79
  }
  BB77 {
    assume { Resolve2.resolve trail_2 };
    assume { Resolve1.resolve just_105 };
    absurd
  }
  BB78 {
    _106 <- ();
    assume { Resolve1.resolve _149 };
    _149 <- just_105;
    just_105 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _148 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 25 183 29] IntoIter1.into_iter _149);
    goto BB98
  }
  BB79 {
    j_120 <- _121;
    _128 <- j_120;
    _127 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 23 172 32] Level2.level _128);
    goto BB86
  }
  BB80 {
    _124 <- false;
    goto BB82
  }
  BB81 {
    _133 <- j_120;
    _132 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 76 172 88] Decision0.decision _133);
    goto BB88
  }
  BB82 {
    switch (_124)
      | False -> goto BB96
      | _ -> goto BB89
      end
  }
  BB83 {
    _125 <- false;
    goto BB85
  }
  BB84 {
    _131 <- j_120;
    _130 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 54 172 72] IsFirstOrder0.is_first_order _131);
    goto BB87
  }
  BB85 {
    switch (_125)
      | False -> goto BB80
      | _ -> goto BB81
      end
  }
  BB86 {
    _129 <- conflict_level_32;
    _126 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 23 172 50] _127 = _129);
    switch (_126)
      | False -> goto BB83
      | _ -> goto BB84
      end
  }
  BB87 {
    _125 <- _130;
    _130 <- any bool;
    goto BB85
  }
  BB88 {
    _124 <- _132;
    _132 <- any bool;
    goto BB82
  }
  BB89 {
    _135 <- rem_level_41;
    _137 <- ix_39;
    _136 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 40 174 50] Level1.level _137);
    goto BB90
  }
  BB90 {
    _134 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 27 174 50] _135 = _136);
    switch (_134)
      | False -> goto BB95
      | _ -> goto BB91
      end
  }
  BB91 {
    _140 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _140) };
    _142 <- conflict_level_32;
    _141 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 175 43 175 61] _142 - (1 : usize));
    _139 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 175 28 175 62] Restrict1.restrict _140 _141);
    goto BB92
  }
  BB92 {
    _144 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _144) };
    _145 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a_48;
    a_48 <- (let Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type a b c d = a_48 in Cdsat_Trail_Assignment_Type.Cdsat_Trail_Assignment_Type (any Cdsat_Trail_Term_Type.cdsat_trail_term_type) b c d);
    _147 <- Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a_48;
    _146 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 176 55 176 69] Negate1.negate _147);
    goto BB93
  }
  BB93 {
    _143 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 176 28 176 70] AddDecision0.add_decision _144 _145 _146);
    goto BB94
  }
  BB94 {
    assume { Resolve2.resolve trail_2 };
    _0 <- ();
    goto BB114
  }
  BB95 {
    _113 <- ();
    goto BB97
  }
  BB96 {
    _113 <- ();
    goto BB97
  }
  BB97 {
    _14 <- ();
    goto BB74
  }
  BB98 {
    iter_150 <- _148;
    _148 <- any Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    goto BB99
  }
  BB99 {
    _154 <- borrow_mut iter_150;
    iter_150 <-  ^ _154;
    _153 <- borrow_mut ( * _154);
    _154 <- { _154 with current = ( ^ _153) };
    _152 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 25 183 29] Next0.next _153);
    goto BB100
  }
  BB100 {
    assume { Resolve4.resolve _154 };
    switch (_152)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB103
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB101
      end
  }
  BB101 {
    a_157 <- Core_Option_Option_Type.core_option_option_type_Some_0 _152;
    _159 <- borrow_mut heap_4;
    heap_4 <-  ^ _159;
    _160 <- a_157;
    _158 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 20 184 32] Push0.push _159 _160);
    goto BB104
  }
  BB102 {
    assume { Resolve2.resolve trail_2 };
    absurd
  }
  BB103 {
    _14 <- ();
    goto BB105
  }
  BB104 {
    _151 <- ();
    _14 <- ();
    goto BB99
  }
  BB105 {
    goto BB106
  }
  BB106 {
    goto BB108
  }
  BB107 {
    _14 <- ();
    goto BB109
  }
  BB108 {
    goto BB109
  }
  BB109 {
    goto BB110
  }
  BB110 {
    goto BB111
  }
  BB111 {
    goto BB29
  }
  BB112 {
    assume { Resolve2.resolve trail_2 };
    _0 <- ();
    goto BB113
  }
  BB113 {
    goto BB122
  }
  BB114 {
    assume { Resolve1.resolve just_105 };
    goto BB115
  }
  BB115 {
    goto BB116
  }
  BB116 {
    goto BB120
  }
  BB117 {
    goto BB118
  }
  BB118 {
    goto BB119
  }
  BB119 {
    goto BB120
  }
  BB120 {
    goto BB121
  }
  BB121 {
    goto BB122
  }
  BB122 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat1
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl9_Unsat_Interface as Unsat0
  use Cdsat_Concrete_Answer_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat1.unsat, axiom .
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val solver [@cfg:stackify] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_Answer_Type.cdsat_concrete_answer_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 29 15 29 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 30 14 30 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 31 4 31 50] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ trail)) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 32 14 36 5] match (result) with
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unsat_Type -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Sat_Type -> true
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unknown_Type -> true
      end }
    
end
module Core_Result_Result_Type
  type core_result_result_type 't 'e =
    | Core_Result_Result_Ok_Type 't
    | Core_Result_Result_Err_Type 'e
    
end
module Cdsat_Concrete_Impl1_Eval_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type
  use Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  val eval [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (tm : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Result_Result_Type.core_result_result_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type), Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Term_Type.cdsat_trail_term_type)
    
end
module Cdsat_Concrete_Impl1_EvalMemo_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type
  use Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  val eval_memo [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (tm : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Result_Result_Type.core_result_result_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type), Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Term_Type.cdsat_trail_term_type)
    
end
module Cdsat_Trail_AssignmentModel_Type
  use mach.int.Int
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  type cdsat_trail_assignmentmodel_type  =
    | Cdsat_Trail_AssignmentModel_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type) (Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type) int
    
end
module Cdsat_Trail_Impl0_ModelTy_Type
  use Cdsat_Trail_AssignmentModel_Type
  type modelTy  =
    Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
end
module Cdsat_Trail_Impl0_Model_Interface
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  function model (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
    
end
module Cdsat_Trail_Impl0_Model
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  use mach.int.UInt64
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model_Interface as Model2
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 35] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 20 30 113] Cdsat_Trail_AssignmentModel_Type.Cdsat_Trail_AssignmentModel_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) (Model2.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason self)) (UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level self))
end
module Cdsat_Trail_Impl0
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl3_Model as Model2 with function Model0.model = Model5.model,
  function Model1.model = Model3.model
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_AssignmentModel_Type
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl0_Model as Model0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module CreusotContracts_Logic_Model_Impl2_ModelTy_Type
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy_Type as ModelTy1 with type t = t, type a = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : t) (other : t) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module CreusotContracts_Logic_Int_Impl16_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module Core_Cmp_Impls_Impl25_Eq_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl16_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = uint64,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : uint64) (other : uint64) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module CreusotContracts_Logic_Model_Impl5_ModelTy_Type
  type modelTy  =
    bool
end
module Core_Cmp_Impls_Impl19_Eq_Interface
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Impl5_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = bool,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : bool) (other : bool) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module Core_Cmp_Impls_Impl25
  
end
module Core_Cmp_Impls_Impl19
  
end
module CreusotContracts_Logic_Int_Impl16
  
end
module CreusotContracts_Logic_Model_Impl5
  
end
module CreusotContracts_Logic_Int_Impl16_Model_Interface
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl16_Model
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int =
    UInt64.to_int self
end
module CreusotContracts_Logic_Model_Impl5_Model_Interface
  function model (self : bool) : bool
end
module CreusotContracts_Logic_Model_Impl5_Model
  function model (self : bool) : bool =
    self
end
module Cdsat_Trail_Impl30_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) (rhs : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 125 16 125 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl22_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Sort_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) (rhs : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 16 73 25] result = (Model0.model self = Model0.model rhs) }
    
end
module CreusotContracts_Logic_Int_Impl20_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : usize) (other : usize) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module Alloc_Boxed_Impl14
  type t
  type a
end
module Cdsat_Trail_Impl30
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model1
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type rhs = Cdsat_Trail_Value_Type.cdsat_trail_value_type
  clone Cdsat_Trail_Impl30_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type rhs = Cdsat_Trail_Value_Type.cdsat_trail_value_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl22
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model1
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type rhs = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
  clone Cdsat_Trail_Impl22_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type rhs = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl21
  
end
module CreusotContracts_Logic_Model_Impl2
  type t
  type a
end
module CreusotContracts_Logic_Int_Impl20
  
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Logic_Int_Impl20_Model_Interface
  use mach.int.Int
  use prelude.UIntSize
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl20_Model
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function model (self : usize) : int =
    UInt64.to_int self
end
module Cdsat_Trail_Impl26_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Term_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (rhs : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 93 16 93 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl26
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl2_Model as Model2
  use Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl3_Model as Model1 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type rhs = Cdsat_Trail_Term_Type.cdsat_trail_term_type
  clone Cdsat_Trail_Impl26_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type rhs = Cdsat_Trail_Term_Type.cdsat_trail_term_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl14_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentModel_Type
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (rhs : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : ()
end
module Cdsat_Trail_Impl20_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : ()
end
module Cdsat_Trail_Impl24_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : ()
end
module Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : ()
end
module Cdsat_Trail_Impl32_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
end
module Cdsat_Trail_Impl5_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val bool [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 145 15 145 32] IsBool0.is_bool (Model0.model self)}
    
end
module Cdsat_Trail_Impl7_ModelTy_Type
  use Cdsat_Trail_TrailIndex_Type
  type modelTy  =
    Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
end
module Cdsat_Trail_Impl7_Model_Interface
  use Cdsat_Trail_TrailIndex_Type
  function model (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
    
end
module Cdsat_Trail_Impl7_Model
  use Cdsat_Trail_TrailIndex_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 35] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 232 8 232 12] self
end
module Cdsat_Trail_Impl7
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl7_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl33_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (rhs : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 172 9 172 18] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl35_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : ()
end
module Cdsat_Trail_Impl36_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 172 24 172 29] result = self }
    
end
module Core_Cmp_Impls_Impl54_PartialCmp_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  val partial_cmp [@cfg:stackify] (self : usize) (other : usize) : Core_Option_Option_Type.core_option_option_type (Core_Cmp_Ordering_Type.core_cmp_ordering_type)
    requires {false}
    
end
module Core_Cmp_Impls_Impl54
  
end
module Cdsat_Trail_Impl38_PartialCmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_TrailIndex_Type
  val partial_cmp [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (other : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Option_Option_Type.core_option_option_type (Core_Cmp_Ordering_Type.core_cmp_ordering_type)
    
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog_Interface
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_Impl1_CmpLog
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.core_cmp_ordering_type =
    if self < o then
      Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
    else
      if self = o then
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
      else
        Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
      
    
end
module Core_Cmp_Impls_Impl55_Cmp_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy0
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_CmpLog_Interface as CmpLog0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : usize) (other : usize) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    ensures { result = CmpLog0.cmp_log (Model0.model self) (UInt64.to_int other) }
    
end
module Core_Cmp_Impls_Impl55
  
end
module CreusotContracts_Logic_Ord_Impl1
  
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface
  use mach.int.Int
  function cmp_le_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog
  use mach.int.Int
  function cmp_le_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface
  use mach.int.Int
  function cmp_lt_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog
  use mach.int.Int
  function cmp_lt_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface
  use mach.int.Int
  function cmp_ge_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog
  use mach.int.Int
  function cmp_ge_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface
  use mach.int.Int
  function cmp_gt_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog
  use mach.int.Int
  function cmp_gt_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Interface
  use mach.int.Int
  function refl (_1' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl
  use mach.int.Int
  function refl (_1' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Interface
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function trans (_1' : int) (_2' : int) (_3' : int) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function trans (_1' : int) (_2' : int) (_3' : int) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface
  use mach.int.Int
  function antisym1 (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1
  use mach.int.Int
  function antisym1 (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface
  use mach.int.Int
  function antisym2 (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2
  use mach.int.Int
  function antisym2 (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface
  use mach.int.Int
  function eq_cmp (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp
  use mach.int.Int
  function eq_cmp (_1' : int) (_2' : int) : () =
    ()
end
module Cdsat_Trail_Impl39_Cmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type
  val cmp [@cfg:stackify] (self : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) (other : Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    
end
module Cdsat_Trail_Impl9_New_Interface
  use Cdsat_Theory_Trail_Type
  use Cdsat_Trail_Trail_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Trail_Impl9_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (inputs : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Term_Type.cdsat_trail_term_type, Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 266 14 266 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 36] Sound0.sound (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost result) }
    
end
module Cdsat_Theory_Impl4_Sat_Interface
  use Cdsat_Theory_Trail_Type
  predicate sat (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Sat
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 473 4 473 28] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 474 8 474 56] exists m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfiedBy0.satisfied_by self m
end
module Cdsat_Trail_Impl9_Sat_Interface
  use Cdsat_Trail_Trail_Type
  predicate sat (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl9_Sat
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sat_Interface as Sat0
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 300 4 300 28] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 16] Sat0.sat (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self)
end
module Cdsat_Trail_Impl9_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  function abstract_assign (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type
    
end
module Cdsat_Trail_Impl9_AbstractAssign
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Interface as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl9_Contains_Interface as Contains0
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains, function IndexLogic0.index_logic = IndexLogic0.index_logic, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  use Cdsat_Trail_Reason_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 332 4 332 62] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 333 8 341 9] match (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason a) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Input_Type -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Decision_Type -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type just -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type (AbstractJustification0.abstract_justification self (Model2.model just)) (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      end
end
module Cdsat_Trail_Impl10_Next_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_IndexIterator_Type
  val next [@cfg:stackify] (self : borrowed (Cdsat_Trail_IndexIterator_Type.cdsat_trail_indexiterator_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type)
    
end
module Cdsat_Trail_Impl12_Value_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  val value [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 570 14 570 33] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self }
    
end
module Cdsat_Trail_Impl12_Term_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Assignment_Type
  val term [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 575 14 575 34] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self }
    
end
module Cdsat_Theory_Impl3_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  function resolve_sound (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl3_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 154 4 159 5] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 149 4 149 12] ()
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 151 15 151 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 152 15 152 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 153 14 153 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl4_IsSetLevel_Interface
  use set.Fset
  use mach.int.Int
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate is_set_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel
  use set.Fset
  use mach.int.Int
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 191 4 191 69] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 12 195 67] s = Fset.empty  /\ m = 0 \/ (exists i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
end
module Cdsat_Theory_Impl4_SetLevelMax_Interface
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level_max (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMax
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 77] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 222 4 222 12] ()
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 223 15 223 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 224 4 224 90] forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 225 14 225 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMin_Interface
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function set_level_min (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMin
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 232 4 232 77] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 12] ()
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 15 229 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 15 230 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 231 14 231 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_IsJustified_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate is_justified (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl4_IsJustified
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 388 4 388 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 389 8 392 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ _ _, _) -> true
      | _ -> false
      end
end
module Cdsat_Theory_Impl4_FindJustified_Interface
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function find_justified (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_FindJustified
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 448 4 448 46] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 449 8 458 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = kv then
        ()
      else
        find_justified tl kv
      
      end
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 445 15 445 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 446 15 446 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 447 4 447 90] forall l : (int) . forall a : (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) . Find0.find self kv = Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  function justification (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl4_Justification
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_FindJustified_Interface as FindJustified0 with predicate Sound0.sound = Sound0.sound,
  predicate Contains0.contains = Contains0.contains, function Find0.find = Find0.find,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 379 4 379 67] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 380 8 380 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _, _) -> j
      | _ -> Fset.empty 
      end
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 376 15 376 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 377 15 377 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 378 4 378 92] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (justification self d) -> Satisfies0.satisfies m d)
end
module Cdsat_Theory_Impl4_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function trail_plausible (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_TrailPlausible
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 545 4 545 46] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 546 8 555 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 541 15 541 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 542 15 542 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 543 4 543 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 544 14 544 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl5_Decide_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate decide (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl5_Decide
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 575 4 575 63] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 569 4 569 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t val') (Level0.level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) + 1) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type, val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type, tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 570 15 570 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 571 15 571 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 574 4 574 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 573 4 573 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 572 4 572 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate deduce (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl5_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_CountBounds_Interface as CountBounds0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 592 4 592 84] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 586 4 586 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 587 15 587 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 588 15 588 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 590 4 590 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 589 4 589 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl5_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate fail (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl5_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 611 4 611 71] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 612 8 619 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (a, _, _) = just in a) = 0
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 608 15 608 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 609 15 609 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 610 4 610 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self))
end
module Cdsat_Theory_Impl5_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate conflict_solve (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl5_ConflictSolve
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 645 4 645 96] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 646 8 656 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l /\ (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 640 15 640 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 641 15 641 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 644 4 644 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 643 4 643 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 642 4 642 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate conflict_solve2 (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl5_ConflictSolve2
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 667 4 667 86] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 669 10 672 43] (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 662 15 662 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 663 15 663 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 666 4 666 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 664 4 664 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl6_Level_Interface
  use mach.int.Int
  use Cdsat_Theory_Conflict_Type
  function level (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : int
end
module Cdsat_Theory_Impl6_Level
  use mach.int.Int
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 29] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)
end
module Cdsat_Theory_Impl6_ConflictSize_Interface
  use Cdsat_Theory_Conflict_Type
  function conflict_size (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : ()
end
module Cdsat_Theory_Impl6_ConflictSize
  use Cdsat_Theory_Conflict_Type
  function conflict_size [#"/Users/xavier/Code/cdsat/src/theory.rs" 714 4 714 36] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 710 4 710 12] ()
end
module Cdsat_Theory_Impl6_Resolve_Interface
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate resolve (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl6_Resolve
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use map.Const
  use mach.int.Int
  use set.Fset
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl3_ResolveSound_Interface as ResolveSound0 with predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, predicate Contains0.contains = Contains0.contains,
  function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  axiom .
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 722 4 722 61] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 723 8 730 11] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) just a in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)) /\ Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a) just)
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 718 15 718 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 719 15 719 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 721 4 721 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 720 4 720 44] resolve self a tgt -> Invariant1.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate backjump (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_Backjump
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl6_LearnJustified_Interface as LearnJustified0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Contains0.contains = Contains0.contains,
  predicate IsBool0.is_bool = IsBool1.is_bool, predicate IsBool1.is_bool = IsBool0.is_bool,
  predicate Invariant1.invariant' = Invariant2.invariant', function Remove0.remove = Remove0.remove,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, function Negate0.negate = Negate0.negate,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Interface as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 740 4 740 64] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 734 4 734 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l in let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) 0 (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let _ = LearnJustified0.learn_justified self l in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 735 15 735 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 736 15 736 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 739 4 739 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 738 4 738 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 737 4 737 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate undo_clear (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_UndoClear
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel_Interface as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Level_Interface as Level0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 4 790 66] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 791 8 797 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : (int) . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1)
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 785 15 785 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 786 15 786 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 789 4 789 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 787 4 787 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate undo_decide (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_UndoDecide
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Level_Interface as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound2.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Interface as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Level_Interface as Level0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 67] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 8 820 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 802 15 802 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 803 15 803 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 806 4 806 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 805 4 805 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Bag_Impl0_Empty
  
end
module Cdsat_Bag_Impl0_Singleton_Interface
  type t
  use bag.Bag
  function singleton (_1' : t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Singleton
  type t
  use bag.Bag
  function singleton [#"/Users/xavier/Code/cdsat/src/bag.rs" 14 4 14 35] (_1' : t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Mem_Interface
  type t
  use bag.Bag
  function mem (_1' : t) (_2' : Bag.bag t) : bool
end
module Cdsat_Bag_Impl0_Mem
  type t
  use bag.Bag
  function mem [#"/Users/xavier/Code/cdsat/src/bag.rs" 27 4 27 33] (_1' : t) (_2' : Bag.bag t) : bool
end
module Cdsat_Bag_Impl0_Add_Interface
  type t
  use bag.Bag
  function add (_1' : t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Add
  type t
  use bag.Bag
  function add [#"/Users/xavier/Code/cdsat/src/bag.rs" 40 4 40 33] (_1' : t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_IsEmpty_Interface
  type t
  use bag.Bag
  predicate is_empty (self : Bag.bag t)
end
module Cdsat_Bag_Impl0_IsEmpty
  type t
  use bag.Bag
  predicate is_empty [#"/Users/xavier/Code/cdsat/src/bag.rs" 47 4 47 33] (self : Bag.bag t)
end
module Cdsat_Bag_Impl0_Diff_Interface
  type t
  use bag.Bag
  function diff (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Diff
  type t
  use bag.Bag
  function diff [#"/Users/xavier/Code/cdsat/src/bag.rs" 54 4 54 38] (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Union_Interface
  type t
  use bag.Bag
  function union (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Union
  type t
  use bag.Bag
  function union [#"/Users/xavier/Code/cdsat/src/bag.rs" 61 4 61 39] (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Len_Interface
  type t
  use bag.Bag
  use mach.int.Int
  function len (self : Bag.bag t) : int
end
module Cdsat_Bag_Impl0_Len
  type t
  use bag.Bag
  use mach.int.Int
  function len [#"/Users/xavier/Code/cdsat/src/bag.rs" 68 4 68 27] (self : Bag.bag t) : int
end
module Cdsat_Bag_Impl0_Inter_Interface
  type t
  use bag.Bag
  function inter (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Inter
  type t
  use bag.Bag
  function inter [#"/Users/xavier/Code/cdsat/src/bag.rs" 75 4 75 40] (self : Bag.bag t) (_2' : Bag.bag t) : Bag.bag t
end
module Cdsat_Bag_Impl0_Pick_Interface
  type t
  use bag.Bag
  function pick (self : Bag.bag t) : t
end
module Cdsat_Bag_Impl0_Pick
  type t
  use bag.Bag
  function pick [#"/Users/xavier/Code/cdsat/src/bag.rs" 82 4 83 19] (self : Bag.bag t) : t
end
module Cdsat_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Cdsat_Trail_Impl36
  use Cdsat_Trail_TrailIndex_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl36_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl14
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl3_Model as Model2 with function Model0.model = Model5.model,
  function Model1.model = Model3.model
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl0_Model as Model1 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type rhs = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
  clone Cdsat_Trail_Impl14_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type rhs = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type, val eq = Eq0.eq,
  function Model0.model = Model0.model, function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl33
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_Model as Model1
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl33_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, val eq = Eq0.eq,
  function Model0.model = Model0.model, function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl15
  
end
module Cdsat_Trail_Impl19
  
end
module Cdsat_Trail_Impl23
  
end
module Cdsat_Trail_Impl27
  
end
module Cdsat_Trail_Impl31
  
end
module Cdsat_Trail_Impl34
  
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self
  use prelude.Borrow
  val assert_receiver_is_total_eq [@cfg:stackify] (self : self) : ()
    requires {false}
    
end
module Cdsat_Trail_Impl16
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl20
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl20_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl24
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl24_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl28
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl32
  use Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl32_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl35
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl35_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl37
  
end
module Core_Cmp_PartialOrd_Lt_Interface
  type self
  type rhs
  use prelude.Borrow
  val lt [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_Le_Interface
  type self
  type rhs
  use prelude.Borrow
  val le [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_Gt_Interface
  type self
  type rhs
  use prelude.Borrow
  val gt [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_Ge_Interface
  type self
  type rhs
  use prelude.Borrow
  val ge [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialOrd_PartialCmp_Interface
  type self
  type rhs
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  val partial_cmp [@cfg:stackify] (self : self) (other : rhs) : Core_Option_Option_Type.core_option_option_type (Core_Cmp_Ordering_Type.core_cmp_ordering_type)
    requires {false}
    
end
module Cdsat_Trail_Impl38
  use Core_Cmp_Ordering_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_TrailIndex_Type
  clone Core_Cmp_PartialOrd_Ge_Interface as Ge0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_PartialOrd_Gt_Interface as Gt0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_PartialOrd_Le_Interface as Le0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_PartialOrd_Lt_Interface as Lt0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Cdsat_Trail_Impl38_PartialCmp_Interface as PartialCmp0
  clone Core_Cmp_PartialOrd_PartialCmp_Interface as PartialCmp1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type rhs = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type, val partial_cmp = PartialCmp0.partial_cmp
end
module Core_Cmp_Ord_Max_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max [@cfg:stackify] (self : self) (other : self) : self
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model self) }
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model other) }
    ensures { result = self \/ result = other }
    ensures { LeLog0.le_log (Model0.model self) (Model0.model other) -> result = other }
    ensures { LtLog0.lt_log (Model0.model other) (Model0.model self) -> result = self }
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Cdsat_Trail_Impl39
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl6_CmpLog as CmpLog0 with function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl7_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl7_Model as Model1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_Ord_Clamp_Interface as Clamp0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_Ord_Min_Interface as Min0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type
  clone Core_Cmp_Ord_Max_Interface as Max0 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  function Model0.model = Model1.model, predicate GeLog0.ge_log = GeLog0.ge_log,
  predicate LeLog0.le_log = LeLog0.le_log, predicate LtLog0.lt_log = LtLog0.lt_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Trail_Impl39_Cmp_Interface as Cmp0
  clone Core_Cmp_Ord_Cmp_Interface as Cmp1 with type self = Cdsat_Trail_TrailIndex_Type.cdsat_trail_trailindex_type,
  val cmp = Cmp0.cmp, function Model0.model = Model0.model, function Model1.model = Model1.model,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, type ModelTy0.modelTy = ModelTy0.modelTy
end
