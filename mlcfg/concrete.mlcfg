
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Cdsat_Trail_Sort_Type
  type cdsat_trail_sort_type  =
    | Cdsat_Trail_Sort_Boolean_Type
    | Cdsat_Trail_Sort_Rational_Type
    
end
module Cdsat_Trail_Value_Type
  use mach.int.Int
  use mach.int.UInt64
  type cdsat_trail_value_type  =
    | Cdsat_Trail_Value_Bool_Type bool
    | Cdsat_Trail_Value_Rat_Type uint64
    
  let function cdsat_trail_value_type_Rat_0 (self : cdsat_trail_value_type) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Value_Bool_Type _ -> any uint64
      | Cdsat_Trail_Value_Rat_Type a -> a
      end
  let function cdsat_trail_value_type_Bool_0 (self : cdsat_trail_value_type) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Value_Bool_Type a -> a
      | Cdsat_Trail_Value_Rat_Type _ -> any bool
      end
end
module Cdsat_Trail_Term_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Sort_Type
  type cdsat_trail_term_type  =
    | Cdsat_Trail_Term_Variable_Type usize (Cdsat_Trail_Sort_Type.cdsat_trail_sort_type)
    | Cdsat_Trail_Term_Value_Type (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Trail_Term_Plus_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Eq_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    | Cdsat_Trail_Term_Conj_Type (cdsat_trail_term_type) (cdsat_trail_term_type)
    
  let function cdsat_trail_term_type_Conj_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type a _ -> a
      end
  let function cdsat_trail_term_type_Conj_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ a -> a
      end
  let function cdsat_trail_term_type_Eq_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type a _ -> a
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Eq_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Eq_Type _ a -> a
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Plus_0 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type a _ -> a
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Plus_1 (self : cdsat_trail_term_type) : cdsat_trail_term_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Value_Type _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Plus_Type _ a -> a
      | Cdsat_Trail_Term_Eq_Type _ _ -> any cdsat_trail_term_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any cdsat_trail_term_type
      end
  let function cdsat_trail_term_type_Value_0 (self : cdsat_trail_term_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Value_Type a -> a
      | Cdsat_Trail_Term_Plus_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
  let function cdsat_trail_term_type_Variable_0 (self : cdsat_trail_term_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type a _ -> a
      | Cdsat_Trail_Term_Value_Type _ -> any usize
      | Cdsat_Trail_Term_Plus_Type _ _ -> any usize
      | Cdsat_Trail_Term_Eq_Type _ _ -> any usize
      | Cdsat_Trail_Term_Conj_Type _ _ -> any usize
      end
  let function cdsat_trail_term_type_Variable_1 (self : cdsat_trail_term_type) : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Term_Variable_Type _ a -> a
      | Cdsat_Trail_Term_Value_Type _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Plus_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Eq_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      | Cdsat_Trail_Term_Conj_Type _ _ -> any Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
      end
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module Cdsat_Trail_Reason_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type cdsat_trail_reason_type  =
    | Cdsat_Trail_Reason_Justified_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Cdsat_Trail_Reason_Decision_Type
    | Cdsat_Trail_Reason_Input_Type
    
  let function cdsat_trail_reason_type_Justified_0 (self : cdsat_trail_reason_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Reason_Justified_Type a -> a
      | Cdsat_Trail_Reason_Decision_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      | Cdsat_Trail_Reason_Input_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      end
end
module Cdsat_Trail_Assignment_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  type cdsat_trail_assignment_type  =
    | Cdsat_Trail_Assignment_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) usize
    
  let function cdsat_trail_assignment_type_Assignment_term (self : cdsat_trail_assignment_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type a _ _ _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_reason (self : cdsat_trail_assignment_type) : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ _ a _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_val (self : cdsat_trail_assignment_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ a _ _ -> a
      end
  let function cdsat_trail_assignment_type_Assignment_level (self : cdsat_trail_assignment_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Assignment_Type _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type cdsat_theory_sort_type  =
    | Cdsat_Theory_Sort_Rational_Type
    | Cdsat_Theory_Sort_Boolean_Type
    
end
module Cdsat_Theory_Var_Type
  use mach.int.Int
  use Cdsat_Theory_Sort_Type
  type cdsat_theory_var_type  =
    | Cdsat_Theory_Var_Type int (Cdsat_Theory_Sort_Type.cdsat_theory_sort_type)
    
  let function cdsat_theory_var_type_Var_1 (self : cdsat_theory_var_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Var_Type _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use mach.int.Int
  type cdsat_theory_value_type  =
    | Cdsat_Theory_Value_Bool_Type bool
    | Cdsat_Theory_Value_Rat_Type int
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type
  type cdsat_theory_term_type  =
    | Cdsat_Theory_Term_Variable_Type (Cdsat_Theory_Var_Type.cdsat_theory_var_type)
    | Cdsat_Theory_Term_Value_Type (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Term_Plus_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    | Cdsat_Theory_Term_Eq_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    | Cdsat_Theory_Term_Conj_Type (cdsat_theory_term_type) (cdsat_theory_term_type)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  type cdsat_theory_assign_type  =
    | Cdsat_Theory_Assign_Decision_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Assign_Justified_Type (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    | Cdsat_Theory_Assign_Input_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Trail_Type
  use mach.int.Int
  use Cdsat_Theory_Assign_Type
  type cdsat_theory_trail_type  =
    | Cdsat_Theory_Trail_Empty_Type
    | Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) int (cdsat_theory_trail_type)
    
end
module Cdsat_Trail_Trail_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  type cdsat_trail_trail_type  =
    | Cdsat_Trail_Trail_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) usize (ghost Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
  let function cdsat_trail_trail_type_Trail_level (self : cdsat_trail_trail_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type _ a _ -> a
      end
  let function cdsat_trail_trail_type_Trail_assignments (self : cdsat_trail_trail_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type a _ _ -> a
      end
  let ghost function cdsat_trail_trail_type_Trail_ghost (self : cdsat_trail_trail_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Trail_Trail_Type _ _ a -> a
      end
end
module Cdsat_Trail_Impl6_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) : usize
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Cdsat_Trail_Impl6_Len_Interface
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val len [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 189 14 189 50] UInt64.to_int result = Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module Cdsat_Trail_Impl7_Index_Interface
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val index [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (index : usize) : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 426 15 426 49] UInt64.to_int index < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 427 14 427 52] result = Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int index) }
    
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_ModelTy_Type
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = b,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : a) (other : b) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Cdsat_Trail_Impl7_Output_Type
  use Cdsat_Trail_Assignment_Type
  type output  =
    Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
end
module Core_Ops_Index_Index_Output_Type
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Borrow
  clone Core_Ops_Index_Index_Output_Type as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Cdsat_Trail_Impl7
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl7_Output_Type as Output0
  clone Cdsat_Trail_Impl7_Index_Interface as Index0 with function Model0.model = Model0.model
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output_Type as Output1 with type self = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type,
  type idx = usize, type output = Output0.output
end
module Core_Cmp_Impls_Impl9
  type a
  type b
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module Cdsat_Trail_Impl3_ModelTy_Type
  use Cdsat_Theory_Term_Type
  type modelTy  =
    Cdsat_Theory_Term_Type.cdsat_theory_term_type
end
module Cdsat_Trail_Impl2_Model_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  function model (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Trail_Impl2_Model
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 75 4 75 35] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 76 8 79 9] match (self) with
      | Cdsat_Trail_Sort_Type.Cdsat_Trail_Sort_Boolean_Type -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Trail_Sort_Type.Cdsat_Trail_Sort_Rational_Type -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      end
end
module Cdsat_Trail_Impl4_Model_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  function model (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Trail_Impl4_Model
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use mach.int.UInt64
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 35] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 8 126 9] match (self) with
      | Cdsat_Trail_Value_Type.Cdsat_Trail_Value_Bool_Type b -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b
      | Cdsat_Trail_Value_Type.Cdsat_Trail_Value_Rat_Type r -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (UInt64.to_int r)
      end
end
module Cdsat_Trail_Impl3_Model_Interface
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  function model (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Theory_Term_Type.cdsat_theory_term_type
end
module Cdsat_Trail_Impl3_Model
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  use mach.int.UInt64
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl2_Model_Interface as Model0
  use Cdsat_Theory_Var_Type
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 99 4 99 35] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Theory_Term_Type.cdsat_theory_term_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 100 8 106 9] match (self) with
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Variable_Type v s -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type (Cdsat_Theory_Var_Type.Cdsat_Theory_Var_Type (UInt64.to_int v) (Model0.model s))
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Value_Type v -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type (Model1.model v)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Plus_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type (model l) (model r)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Eq_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type (model l) (model r)
      | Cdsat_Trail_Term_Type.Cdsat_Trail_Term_Conj_Type l r -> Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type (model l) (model r)
      end
end
module Cdsat_Trail_Impl3
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl2_Model as Model2
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl3_Model as Model0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl2_ModelTy_Type
  use Cdsat_Theory_Sort_Type
  type modelTy  =
    Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Trail_Impl2
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl4_ModelTy_Type
  use Cdsat_Theory_Value_Type
  type modelTy  =
    Cdsat_Theory_Value_Type.cdsat_theory_value_type
end
module Cdsat_Trail_Impl4
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl4_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl6_IndexOf_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Core_Option_Option_Type
  val index_of [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Option_Option_Type.core_option_option_type usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 315 4 315 82] forall i : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type i -> UInt64.to_int i < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) }
    
end
module Cdsat_Trail_Impl6_Get_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  val get [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Option_Option_Type.core_option_option_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type)
    
end
module Alloc_Vec_Impl14_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type
  val clone' [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a
    ensures { result = self }
    
end
module Alloc_Vec_Impl14
  type t
  type a
end
module Cdsat_Trail_Impl6_Justification_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Core_Option_Option_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  val justification [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Core_Option_Option_Type.core_option_option_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
end
module Cdsat_Trail_ReasonModel_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  type cdsat_trail_reasonmodel_type  =
    | Cdsat_Trail_ReasonModel_Justified_Type (Seq.seq usize)
    | Cdsat_Trail_ReasonModel_Decision_Type
    | Cdsat_Trail_ReasonModel_Input_Type
    
end
module Cdsat_Trail_Impl1_ModelTy_Type
  use Cdsat_Trail_ReasonModel_Type
  type modelTy  =
    Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
end
module Cdsat_Trail_Impl1_Model_Interface
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  function model (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
    
end
module Cdsat_Trail_Impl1_Model
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 58 4 58 35] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 59 8 63 9] match (self) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type a1 -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Justified_Type (Model0.model a1)
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Decision_Type -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Decision_Type
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Input_Type -> Cdsat_Trail_ReasonModel_Type.Cdsat_Trail_ReasonModel_Input_Type
      end
end
module Cdsat_Trail_Impl1
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Reason_Type
  use Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl1_Model as Model0 with function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a1) (other : Alloc_Vec_Vec_Type.alloc_vec_vec_type u a2) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module Alloc_Vec_PartialEq_Impl0
  type t
  type u
  type a1
  type a2
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Cdsat_Trail_Impl14_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) (rhs : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 39 16 39 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Borrow
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Cdsat_Trail_Impl14
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl1_Model as Model1 with function Model0.model = Model2.model
  clone Cdsat_Trail_Impl1_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type rhs = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
  clone Cdsat_Trail_Impl14_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  type rhs = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl8_Decision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val decision [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
end
module Cdsat_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Cdsat_Trail_Impl8_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type
  function term_value (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl8_TermValue
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 435 4 435 61] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 436 8 436 45] (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self), Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self))
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  function sort (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 52 8 55 9] match (self) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      end
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  function sort (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Sort_Type.cdsat_theory_sort_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 8 21 9] match (self) with
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type v -> Cdsat_Theory_Var_Type.cdsat_theory_var_type_Var_1 v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type v -> Sort1.sort v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Rational_Type
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type _ _ -> Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
      end
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type
  predicate invariant' (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 30] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 83 8 87 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type t v -> Sort0.sort t = Sort1.sort v
      end
end
module Cdsat_Theory_Impl4_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_assign (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantAssign
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Interface as Invariant0
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 258 4 258 37] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 8 262 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  function to_pair (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 92 8 96 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ t val' -> (t, val')
      end
end
module Cdsat_Theory_Impl4_Len_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  function len (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
end
module Cdsat_Theory_Impl4_Len
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 418 4 418 27] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 419 8 422 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> 0
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> len tl + 1
      end
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 417 14 417 25] len self >= 0
end
module Cdsat_Theory_Impl4_Level_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  function level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
end
module Cdsat_Theory_Impl4_Level
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 29] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 408 8 412 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> 0
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> level tl
      end
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 14 405 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 404 14 404 25] level self >= 0)
end
module Cdsat_Theory_Impl4_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_nonneg (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantNonneg
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 37] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 251 8 254 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
end
module CreusotContracts_Logic_Int_Int_Type
  use prelude.Opaque
  type creusotcontracts_logic_int_int_type  =
    | CreusotContracts_Logic_Int_Int_Type opaque_ptr
    
end
module Cdsat_Theory_Impl4_Find_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Core_Option_Option_Type
  function find (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)
    
end
module Cdsat_Theory_Impl4_Find
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 343 4 343 64] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Core_Option_Option_Type.core_option_option_type (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 344 8 353 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> Core_Option_Option_Type.Core_Option_Option_None_Type
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l)
      else
        find tl d
      
      end
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 342 4 342 104] InvariantAssign0.invariant_assign self -> (forall p : ((Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)) . find self d = Core_Option_Option_Type.Core_Option_Option_Some_Type p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 341 4 341 111] InvariantNonneg0.invariant_nonneg self -> (forall p : ((Cdsat_Theory_Assign_Type.cdsat_theory_assign_type, int)) . find self d = Core_Option_Option_Type.Core_Option_Option_Some_Type p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 337 14 340 5] match (find self d) with
    | Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Contains_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  predicate contains (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl4_Contains
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use mach.int.Int
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 329 4 329 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 8 333 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type ix -> true
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> false
      end
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 328 4 328 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_LevelOf_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  function level_of (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
end
module Cdsat_Theory_Impl4_LevelOf
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 320 4 320 50] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 321 8 324 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (_, l) -> l
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> 0
      end
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 318 15 318 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 319 14 319 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Trail_Impl6_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type
  predicate abstract_relation (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl6_AbstractRelation
  use Cdsat_Trail_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 227 4 227 38] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 229 12 230 163] (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) -> Contains0.contains (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i))) /\ (forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) -> LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i)) = UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i)))
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type
  type cdsat_theory_model_type  =
    | Cdsat_Theory_Model_Type (Map.map (Cdsat_Theory_Var_Type.cdsat_theory_var_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
  let function cdsat_theory_model_type_Model_0 (self : cdsat_theory_model_type) : Map.map (Cdsat_Theory_Var_Type.cdsat_theory_var_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Model_Type a -> a
      end
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type
  predicate invariant' (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
end
module Cdsat_Theory_Impl3_Invariant
  use Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  use Cdsat_Theory_Var_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 116 8 118 9] forall v : (Cdsat_Theory_Value_Type.cdsat_theory_value_type) . forall k : (Cdsat_Theory_Var_Type.cdsat_theory_var_type) . Map.get (Cdsat_Theory_Model_Type.cdsat_theory_model_type_Model_0 self) k = v -> Cdsat_Theory_Var_Type.cdsat_theory_var_type_Var_1 k = Sort0.sort v
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    Fset.mem e self
end
module Cdsat_Theory_Impl3_Interp_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  function interp (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Theory_Impl3_Interp
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use map.Map
  use mach.int.Int
  use mach.int.Int32
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 124 8 136 9] match (t) with
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Variable_Type v -> Map.get (Cdsat_Theory_Model_Type.cdsat_theory_model_type_Model_0 self) v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Value_Type v -> v
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Plus_Type l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type r1, Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type r2) -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Rat_Type (- 1)
        end
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Conj_Type l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b1, Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b2) -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false
        end
      | Cdsat_Theory_Term_Type.Cdsat_Theory_Term_Eq_Type l r -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (interp self l = interp self r)
      end
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Satisfies_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate satisfies (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_Satisfies
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Interface as Interp0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 8 141 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
end
module Cdsat_Theory_Impl3_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  predicate satisfy_set (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl3_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (v : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 146 8 146 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains v a -> Satisfies0.satisfies self a
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type
  predicate justified_sound (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 36] (self : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 101 8 106 9] match (self) with
      | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type just t val' -> forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
end
module Cdsat_Theory_Impl4_Sound_Interface
  use Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Sound
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 183 4 183 30] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 184 8 187 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    Fset.remove a self
end
module Cdsat_Theory_Impl4_SetLevel_Interface
  use mach.int.Int
  use set.Fset
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
end
module Cdsat_Theory_Impl4_SetLevel
  use mach.int.Int
  use set.Fset
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 206 4 206 57] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : int
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 201 15 201 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 205 14 205 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 204 14 204 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 203 4 203 94] s <> Fset.empty  -> (exists i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 202 4 202 74] forall i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantLevel
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 235 4 235 36] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 236 8 246 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _ -> SetLevel0.set_level tl j = l
        end
      end
end
module Cdsat_Theory_Impl4_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant_contains (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_InvariantContains
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 266 4 266 39] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 267 8 280 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _ -> forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type
  predicate is_bool (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 47 8 47 36] Sort0.sort self = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  function negate (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : Cdsat_Theory_Value_Type.cdsat_theory_value_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 62 8 65 9] match (self) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type b -> Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type (not b)
      | _ -> self
      end
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl4_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type
  predicate trail_unique (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_TrailUnique
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 284 4 284 33] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 285 8 297 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> true
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
end
module Cdsat_Theory_Impl4_Invariant_Interface
  use Cdsat_Theory_Trail_Type
  predicate invariant' (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Invariant
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_TrailUnique_Interface as TrailUnique0
  clone Cdsat_Theory_Impl4_InvariantContains_Interface as InvariantContains0
  clone Cdsat_Theory_Impl4_InvariantLevel_Interface as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 301 4 301 34] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 302 8 306 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
end
module Cdsat_Trail_Impl6_Invariant_Interface
  use Cdsat_Trail_Trail_Type
  predicate invariant' (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl6_Invariant
  use Cdsat_Trail_Trail_Type
  use mach.int.UInt64
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Trail_Impl6_AbstractRelation_Interface as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 205 4 205 34] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 206 8 211 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) /\ Invariant0.invariant' (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) /\ Level0.level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) = UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level self)
end
module Cdsat_Theory_Impl4_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  predicate satisfied_by (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (m : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 4 443 43] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (m : Cdsat_Theory_Model_Type.cdsat_theory_model_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 444 8 444 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> Satisfies0.satisfies m a
end
module Cdsat_Theory_Impl4_CountBounds_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function count_bounds (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : ()
end
module Cdsat_Theory_Impl4_CountBounds
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 481 4 481 31] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 482 8 487 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ _ _) _ tl -> count_bounds tl
      end
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 479 15 479 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 480 4 480 83] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_Restrict_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function restrict (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
end
module Cdsat_Theory_Impl4_Restrict
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Interface as CountBounds0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 388 4 388 45] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 389 8 400 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl
      else
        tl
      
      end
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 377 15 377 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 379 15 379 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 387 14 387 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 385 4 385 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 77] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 383 4 383 71] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 382 4 382 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 381 4 381 100] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 380 4 380 141] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 378 14 378 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Unsat_Interface
  use Cdsat_Theory_Trail_Type
  predicate unsat (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Unsat
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 449 4 449 30] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 450 8 450 100] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
end
module Cdsat_Theory_Impl4_Impls_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  predicate impls (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
end
module Cdsat_Theory_Impl4_Impls
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 460 4 460 41] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 461 8 461 126] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, rhs : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type . [#"/Users/xavier/Code/cdsat/src/theory.rs" 459 4 459 57] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Concrete_Answer_Type
  type cdsat_concrete_answer_type  =
    | Cdsat_Concrete_Answer_Sat_Type
    | Cdsat_Concrete_Answer_Unsat_Type
    | Cdsat_Concrete_Answer_Unknown_Type
    
end
module Cdsat_Trail_Impl6_Unsat_Interface
  use Cdsat_Trail_Trail_Type
  predicate unsat (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl6_Unsat
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 195 4 195 30] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 194 4 194 16] Unsat0.unsat (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self)
end
module Cdsat_Concrete_BoolTheory_Type
  type cdsat_concrete_booltheory_type  =
    | Cdsat_Concrete_BoolTheory_Type
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Concrete_BoolTheory_Type
  type cdsat_concrete_solver_type  =
    | Cdsat_Concrete_Solver_Type (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)
    
  let function cdsat_concrete_solver_type_Solver_bool_th (self : cdsat_concrete_solver_type) : Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_Solver_Type a -> a
      end
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type
  type cdsat_theory_normal_type  =
    | Cdsat_Theory_Normal_Type (Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
  let function cdsat_theory_normal_type_Normal_0 (self : cdsat_theory_normal_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Normal_Type a -> a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    Fset.add e self
end
module Cdsat_Trail_Impl6_AbsJustInner_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use set.Fset
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function abs_just_inner (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq usize) (ix : int) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl6_AbsJustInner
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use set.Fset
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Trail_Impl4_Model_Interface as Model2
  clone Cdsat_Trail_Impl3_Model_Interface as Model1
  function abs_just_inner [#"/Users/xavier/Code/cdsat/src/trail.rs" 274 4 274 97] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq usize) (ix : int) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq usize, ix : int . abs_just_inner self just ix = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 12] if ix < Seq.length just then
    let set = abs_just_inner self just (ix + 1) in let a = Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Seq.get just ix)) in Insert0.insert set (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a), Model2.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
  else
    Fset.empty 
  )
  axiom abs_just_inner_spec : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq usize, ix : int . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 269 15 269 22] ix >= 0) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 270 4 270 96] forall i : (int) . 0 <= i /\ i < Seq.length just -> UInt64.to_int (Seq.get just i) < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self))) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 273 4 273 120] forall i : (int) . ix <= i /\ i < Seq.length just -> Contains0.contains (abs_just_inner self just ix) (TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Seq.get just i))))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 272 4 272 143] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (abs_just_inner self just ix) a -> (exists i : (int) . ix <= i /\ i < Seq.length just /\ a = TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Seq.get just i))))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 271 4 271 150] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (abs_just_inner self just ix) a -> (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) /\ a = TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i)))
end
module Cdsat_Trail_Impl6_AbstractJustification_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use set.Fset
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  function abstract_justification (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq usize) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Trail_Impl6_AbstractJustification
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.UIntSize
  use set.Fset
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbsJustInner_Interface as AbsJustInner0 with function Model0.model = Model0.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value, axiom .
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 263 4 263 97] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (just : Seq.seq usize) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq usize . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 264 8 264 36] AbsJustInner0.abs_just_inner self just 0)
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type, just : Seq.seq usize . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 258 4 258 96] forall i : (int) . 0 <= i /\ i < Seq.length just -> UInt64.to_int (Seq.get just i) < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self))) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 261 4 261 119] forall i : (int) . 0 <= i /\ i < Seq.length just -> Contains0.contains (abstract_justification self just) (TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Seq.get just i))))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 260 4 260 142] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (abstract_justification self just) a -> (exists i : (int) . 0 <= i /\ i < Seq.length just /\ a = TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) (UInt64.to_int (Seq.get just i))))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 259 4 259 150] forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (abstract_justification self just) a -> (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) /\ a = TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i)))
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 545 4 545 30] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 543 4 543 16] Sound0.sound (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
end
module Cdsat_Theory_Impl5_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate fail2 (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl5_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 608 4 608 57] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 612 12 614 39] (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) just = 0
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 605 15 605 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 606 15 606 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 607 4 607 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self))
end
module Cdsat_Concrete_ExtendResult_Type
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type cdsat_concrete_extendresult_type  =
    | Cdsat_Concrete_ExtendResult_Conflict_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    | Cdsat_Concrete_ExtendResult_Decision_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Concrete_ExtendResult_Satisfied_Type
    
  let function cdsat_concrete_extendresult_type_Decision_0 (self : cdsat_concrete_extendresult_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type _ -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      | Cdsat_Concrete_ExtendResult_Decision_Type a _ -> a
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      end
  let function cdsat_concrete_extendresult_type_Decision_1 (self : cdsat_concrete_extendresult_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type _ -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Concrete_ExtendResult_Decision_Type _ a -> a
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
  let function cdsat_concrete_extendresult_type_Conflict_0 (self : cdsat_concrete_extendresult_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_ExtendResult_Conflict_Type a -> a
      | Cdsat_Concrete_ExtendResult_Decision_Type _ _ -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      | Cdsat_Concrete_ExtendResult_Satisfied_Type -> any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
      end
end
module Cdsat_Theory_Impl4_Acceptable_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate acceptable (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl4_Acceptable
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 310 4 310 56] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 311 8 313 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
end
module Cdsat_Concrete_Impl1_Extend_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbstractJustification_Interface as AbstractJustification0 with function Model0.model = Model3.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  use Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val extend [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 234 4 234 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 234 4 234 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 235 14 245 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Satisfied_Type -> true
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type t v -> Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) (Model0.model t) (Model1.model v)
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (Model2.model c) in (forall i : (int) . 0 <= i /\ i < Seq.length (Model2.model c) -> UInt64.to_int (Seq.get (Model2.model c) i) < Seq.length (Model3.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( ^ tl)))) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 246 4 246 44] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * tl)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) }
    
end
module Cdsat_Concrete_Impl1_Extend
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort3
  clone Cdsat_Theory_Impl0_Sort as Sort2 with function Sort1.sort = Sort3.sort
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with function Level0.level = Level0.level,
  function Len0.len = Len0.len
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort2.sort, function Sort1.sort = Sort3.sort, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with function Sort0.sort = Sort3.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate Contains0.contains = Contains0.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with predicate Contains0.contains = Contains1.contains,
  predicate Contains1.contains = Contains0.contains,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with function Level0.level = Level0.level,
  function SetLevel0.set_level = SetLevel0.set_level, function Len0.len = Len0.len,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
  predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
  predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort2.sort, function Sort1.sort = Sort3.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with function Sort0.sort = Sort3.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Sort0.sort = Sort3.sort, function Sort1.sort = Sort2.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with function Interp0.interp = Interp0.interp,
  predicate Invariant0.invariant' = Invariant2.invariant', function Sort0.sort = Sort3.sort,
  function Sort1.sort = Sort2.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with predicate Contains0.contains = Contains1.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with predicate Contains0.contains = Contains0.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort2.sort, function Sort1.sort = Sort3.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function CountBounds0.count_bounds = CountBounds0.count_bounds, axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model as Model1
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  clone Cdsat_Trail_Impl3_Model as Model0 with function Model0.model = Model5.model,
  function Model1.model = Model1.model
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl8_TermValue as TermValue0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbsJustInner as AbsJustInner0 with function Model0.model = Model3.model,
  predicate Contains0.contains = Contains1.contains, function TermValue0.term_value = TermValue0.term_value,
  function Model1.model = Model0.model, function Model2.model = Model1.model, function Insert0.insert = Insert0.insert,
  axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Trail_Impl6_AbstractRelation as AbstractRelation0 with function Model0.model = Model3.model,
  function TermValue0.term_value = TermValue0.term_value, predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len
  use Cdsat_Concrete_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls as Impls0 with predicate Unsat0.unsat = Unsat0.unsat,
  predicate Invariant0.invariant' = Invariant2.invariant', function Restrict0.restrict = Restrict0.restrict,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort2.sort,
  function Sort1.sort = Sort3.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Trail_Impl6_AbstractJustification as AbstractJustification0 with function Model0.model = Model3.model,
  predicate Contains0.contains = Contains1.contains, function TermValue0.term_value = TermValue0.term_value,
  function AbsJustInner0.abs_just_inner = AbsJustInner0.abs_just_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with predicate Contains0.contains = Contains0.contains,
  function Sort0.sort = Sort2.sort, function Sort1.sort = Sort3.sort, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  use Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl6_Invariant as Invariant0 with predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
  predicate Sound0.sound = Sound0.sound, predicate Invariant0.invariant' = Invariant1.invariant',
  function Level0.level = Level0.level, function Len0.len = Len0.len
  val extend [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 234 4 234 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 234 4 234 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 235 14 245 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Satisfied_Type -> true
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type t v -> Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) (Model0.model t) (Model1.model v)
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (Model2.model c) in (forall i : (int) . 0 <= i /\ i < Seq.length (Model2.model c) -> UInt64.to_int (Seq.get (Model2.model c) i) < Seq.length (Model3.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( ^ tl)))) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 246 4 246 44] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * tl)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ tl)) }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  type cdsat_concrete_theorystate_type  =
    | Cdsat_Concrete_TheoryState_Sat_Type
    | Cdsat_Concrete_TheoryState_Decision_Type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Cdsat_Trail_Value_Type.cdsat_trail_value_type)
    | Cdsat_Concrete_TheoryState_Unknown_Type
    
  let function cdsat_concrete_theorystate_type_Decision_0 (self : cdsat_concrete_theorystate_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_TheoryState_Sat_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      | Cdsat_Concrete_TheoryState_Decision_Type a _ -> a
      | Cdsat_Concrete_TheoryState_Unknown_Type -> any Cdsat_Trail_Term_Type.cdsat_trail_term_type
      end
  let function cdsat_concrete_theorystate_type_Decision_1 (self : cdsat_concrete_theorystate_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Concrete_TheoryState_Sat_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      | Cdsat_Concrete_TheoryState_Decision_Type _ a -> a
      | Cdsat_Concrete_TheoryState_Unknown_Type -> any Cdsat_Trail_Value_Type.cdsat_trail_value_type
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl10_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : seq t
    ensures { Model0.model result = Model1.model self }
    
end
module Cdsat_Theory_Impl4_SetLevelMin_Interface
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function set_level_min (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMin
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 232 4 232 77] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 12] ()
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 15 229 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 15 230 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 231 14 231 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Cdsat_Trail_Impl8_Level_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type
  val level [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 439 14 439 34] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level self }
    
end
module Cdsat_Trail_Impl6_MaxLevel_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = usize
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbstractJustification_Interface as AbstractJustification0 with function Model0.model = Model1.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val max_level [@cfg:stackify] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (assignments : seq usize) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 389 15 389 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 390 4 390 116] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model assignments) -> UInt64.to_int (Seq.get (Model0.model assignments) i) < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 391 14 391 88] SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (AbstractJustification0.abstract_justification self (Model0.model assignments)) = UInt64.to_int result }
    
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  type cdsat_theory_conflict_type  =
    | Cdsat_Theory_Conflict_Type (Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
  let function cdsat_theory_conflict_type_Conflict_1 (self : cdsat_theory_conflict_type) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Conflict_Type _ a -> a
      end
  let function cdsat_theory_conflict_type_Conflict_0 (self : cdsat_theory_conflict_type) : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Cdsat_Theory_Conflict_Type a _ -> a
      end
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type core_mem_manuallydrop_manuallydrop_type 't =
    | Core_Mem_ManuallyDrop_ManuallyDrop_Type 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type alloc_vec_intoiter_intoiter_type 't 'a =
    | Alloc_Vec_IntoIter_IntoIter_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.core_mem_manuallydrop_manuallydrop_type 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl2_Model_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_Model
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl1_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
    
end
module CreusotContracts_Std1_Vec_Impl1_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module Cdsat_Concrete_ConflictHeap_Type
  type cdsat_concrete_conflictheap_type
end
module Cdsat_Concrete_Impl2_Model_Interface
  use map.Map
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  use Cdsat_Concrete_ConflictHeap_Type
  function model (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Map.map int (Core_Option_Option_Type.core_option_option_type int)
    
end
module Cdsat_Concrete_Impl2_Model
  use map.Map
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  use Cdsat_Concrete_ConflictHeap_Type
  function model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 316 4 316 35] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Map.map int (Core_Option_Option_Type.core_option_option_type int)
    
end
module Cdsat_Theory_Impl6_Invariant_Interface
  use Cdsat_Theory_Conflict_Type
  predicate invariant' (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
end
module Cdsat_Theory_Impl6_Invariant
  use Cdsat_Theory_Conflict_Type
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 662 4 662 34] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 8 663 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a)
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 668 4 668 30] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 669 8 669 109] Sound0.sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) -> false)
end
module Cdsat_Theory_Impl6_Level_Interface
  use mach.int.Int
  use Cdsat_Theory_Conflict_Type
  function level (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : int
end
module Cdsat_Theory_Impl6_Level
  use mach.int.Int
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 29] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)
end
module Cdsat_Theory_Impl4_RestrictSound_Interface
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function restrict_sound (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : ()
end
module Cdsat_Theory_Impl4_RestrictSound
  use mach.int.Int
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 469 4 469 43] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 470 8 475 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> let _ = restrict_sound tl level in ()
      end
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 467 15 467 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 468 14 468 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_RestrictTooBig_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_too_big (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictTooBig
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 496 4 496 59] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (level : int) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 497 8 506 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, level : int, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 491 15 491 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 492 15 492 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 493 15 493 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 494 15 494 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 495 14 495 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  function trail_plausible (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_TrailPlausible
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 526 4 526 46] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 527 8 536 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 522 15 522 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 523 15 523 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 524 4 524 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 525 14 525 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Interface
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_idempotent (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (l1 : int) (l2 : int) : ()
end
module Cdsat_Theory_Impl4_RestrictIdempotent
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 514 4 514 54] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 515 8 518 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type _ _ tl -> restrict_idempotent tl l1 l2
      end
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 510 15 510 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 511 15 511 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 512 15 512 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 513 14 513 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  function negate_involutive (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 68 4 68 12] ()
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl3_Lemma_Interface
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  function lemma' (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (v : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
end
module Cdsat_Theory_Impl3_Lemma
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort2
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl3_Interp_Interface as Interp0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort2.sort, axiom .
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 37] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (v : Cdsat_Theory_Value_Type.cdsat_theory_value_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 168 8 171 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type _ -> ()
      | _ -> ()
      end
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type, v : Cdsat_Theory_Value_Type.cdsat_theory_value_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 163 15 163 40] Sort0.sort v = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 164 15 164 40] Sort2.sort t = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 165 15 165 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 166 14 166 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type
  predicate is_bool (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type)
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 28] (self : Cdsat_Theory_Term_Type.cdsat_theory_term_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 26 8 26 36] Sort0.sort self = Cdsat_Theory_Sort_Type.Cdsat_Theory_Sort_Boolean_Type
end
module Cdsat_Theory_Impl6_Backjump_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate backjump (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_Backjump
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  use map.Const
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl0_IsBool_Interface as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl3_Lemma_Interface as Lemma0 with function Sort0.sort = Sort1.sort,
  function Sort2.sort = Sort0.sort, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Satisfies0.satisfies = Satisfies0.satisfies, function Negate0.negate = Negate0.negate,
  predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Interface as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 711 4 711 64] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 705 4 705 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l in let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) 0 (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let _ = Lemma0.lemma' (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (let (a, _) = l in a) (let (_, a) = l in a) in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 706 15 706 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 707 15 707 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 710 4 710 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 709 4 709 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 708 4 708 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl4_IsSetLevel_Interface
  use set.Fset
  use mach.int.Int
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate is_set_level (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel
  use set.Fset
  use mach.int.Int
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 191 4 191 69] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (s : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 12 195 67] s = Fset.empty  /\ m = 0 \/ (exists i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
end
module Cdsat_Theory_Impl6_UndoClear_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate undo_clear (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_UndoClear
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel_Interface as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant1.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Level_Interface as Level0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 761 4 761 66] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 762 8 768 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : (int) . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1)
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 756 15 756 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 757 15 757 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 760 4 760 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 759 4 759 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 758 4 758 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl4_IsJustified_Interface
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  predicate is_justified (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl4_IsJustified
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use mach.int.Int
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 369 4 369 51] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 370 8 373 9] match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type _ _ _, _) -> true
      | _ -> false
      end
end
module Cdsat_Theory_Impl4_FindJustified_Interface
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function find_justified (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_FindJustified
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 46] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 8 439 9] match (self) with
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Empty_Type -> ()
      | Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type a l tl -> if ToPair0.to_pair a = kv then
        ()
      else
        find_justified tl kv
      
      end
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, kv : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 90] forall l : (int) . forall a : (Cdsat_Theory_Assign_Type.cdsat_theory_assign_type) . Find0.find self kv = Core_Option_Option_Type.Core_Option_Option_Some_Type (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  function justification (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
end
module Cdsat_Theory_Impl4_Justification
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Interface as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Interface as JustifiedSound0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_FindJustified_Interface as FindJustified0 with predicate Sound0.sound = Sound0.sound,
  predicate Contains0.contains = Contains0.contains, function Find0.find = Find0.find,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 67] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 8 361 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type j _ _, _) -> j
      | _ -> Fset.empty 
      end
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, d : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 357 15 357 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 358 15 358 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 359 4 359 92] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (justification self d) -> Satisfies0.satisfies m d)
end
module Cdsat_Theory_Impl6_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate undo_decide (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl6_UndoDecide
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound2
  clone Cdsat_Theory_Impl4_Level_Interface as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound2.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Interface as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with predicate Sound0.sound = Sound2.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Level_Interface as Level0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 778 4 778 67] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 779 8 791 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Level0.level self - 1) in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) l /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, l : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 773 15 773 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 774 15 774 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 777 4 777 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 776 4 776 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 775 4 775 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  type a
end
module Cdsat_Concrete_Impl2_ModelTy_Type
  use map.Map
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  type modelTy  =
    Map.map int (Core_Option_Option_Type.core_option_option_type int)
end
module Cdsat_Concrete_Impl2
  use mach.int.Int
  use Cdsat_Concrete_ConflictHeap_Type
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  clone Cdsat_Concrete_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : () =
    ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Interface as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Cdsat_Concrete_Impl3_New_Interface
  use map.Const
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Concrete_ConflictHeap_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val new [@cfg:stackify] (_ : ()) : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 323 14 323 43] Model0.model result = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Cdsat_Concrete_Impl3_New
  use map.Const
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Concrete_ConflictHeap_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_Model as Model0
  val new [@cfg:stackify] (_ : ()) : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 323 14 323 43] Model0.model result = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Alloc_Vec_Impl19_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface
  type self
  predicate completed (self : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed
  type self
  predicate completed (self : self)
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module Alloc_Vec_IntoIter_Impl5_Item_Type
  type t
  type a
  type item  =
    t
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with type t = t, type a = a
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a,
  type Item0.item = Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self) /\ Resolve0.resolve self
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module Cdsat_Concrete_Impl3_Push_Interface
  use prelude.Borrow
  use mach.int.UInt64
  use map.Map
  use mach.int.Int
  use prelude.UIntSize
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Cdsat_Concrete_Impl2_Model_Interface as Model0
  val push [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) (e : usize) (prio : usize) : Core_Option_Option_Type.core_option_option_type usize
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 329 14 329 54] Model0.model ( ^ self) = Map.set (Model1.model self) (UInt64.to_int e) (Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int prio)) }
    
end
module Cdsat_Concrete_Impl3_Push
  use prelude.Borrow
  use mach.int.UInt64
  use map.Map
  use mach.int.Int
  use prelude.UIntSize
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_Model as Model0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  val push [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) (e : usize) (prio : usize) : Core_Option_Option_Type.core_option_option_type usize
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 329 14 329 54] Model0.model ( ^ self) = Map.set (Model1.model self) (UInt64.to_int e) (Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int prio)) }
    
end
module CreusotContracts_Logic_Int_Impl20_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl20_Model_Interface
  use mach.int.Int
  use prelude.UIntSize
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl20_Model
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function model (self : usize) : int =
    UInt64.to_int self
end
module Cdsat_Concrete_Impl3_Peek_Interface
  use map.Const
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use map.Map
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy1
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = usize,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val peek [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Core_Option_Option_Type.core_option_option_type (usize, usize)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 335 4 335 64] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model self = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 336 4 336 91] forall l : (usize) . forall e : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (e, l) -> Map.get (Model0.model self) (Model1.model e) = Core_Option_Option_Type.Core_Option_Option_Some_Type (Model1.model l) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 337 4 337 138] forall l : (usize) . forall e : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (e, l) -> (forall l2 : (usize) . forall e2 : (usize) . Map.get (Model0.model self) (UInt64.to_int e2) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l2) -> UInt64.to_int l2 <= Model1.model l) }
    
end
module Cdsat_Concrete_Impl3_Peek
  use map.Const
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use map.Map
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl20_Model as Model3
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy1
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_Model as Model2
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model
  val peek [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Core_Option_Option_Type.core_option_option_type (usize, usize)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 335 4 335 64] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model self = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 336 4 336 91] forall l : (usize) . forall e : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (e, l) -> Map.get (Model0.model self) (Model1.model e) = Core_Option_Option_Type.Core_Option_Option_Some_Type (Model1.model l) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 337 4 337 138] forall l : (usize) . forall e : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (e, l) -> (forall l2 : (usize) . forall e2 : (usize) . Map.get (Model0.model self) (UInt64.to_int e2) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l2) -> UInt64.to_int l2 <= Model1.model l) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : t
    requires {self <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    ensures { Core_Option_Option_Type.Core_Option_Option_Some_Type result = self }
    
end
module Cdsat_Concrete_Impl3_Pop_Interface
  use map.Const
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use map.Map
  use prelude.Borrow
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val pop [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) : Core_Option_Option_Type.core_option_option_type (usize, usize)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 4 343 64] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model self = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 4 344 129] forall l : (usize) . forall e : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (e, l) -> Map.get (Model0.model self) (UInt64.to_int e) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l) /\ Model1.model ( ^ self) = Map.set (Model1.model ( * self)) (UInt64.to_int e) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Cdsat_Concrete_Impl3_Pop
  use map.Const
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use map.Map
  use prelude.Borrow
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_Model as Model1
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val pop [@cfg:stackify] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type)) : Core_Option_Option_Type.core_option_option_type (usize, usize)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 4 343 64] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model self = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 4 344 129] forall l : (usize) . forall e : (usize) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (e, l) -> Map.get (Model0.model self) (UInt64.to_int e) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l) /\ Model1.model ( ^ self) = Map.set (Model1.model ( * self)) (UInt64.to_int e) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl9_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  val clone' [@cfg:stackify] (self : uint64) : uint64
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : bool) : bool
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl9
  
end
module Core_Clone_Impls_Impl19
  
end
module Cdsat_Trail_Impl25_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 9 111 14] result = self }
    
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  val clone' [@cfg:stackify] (self : usize) : usize
    ensures { result = self }
    
end
module Cdsat_Trail_Impl17_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 67 9 67 14] result = self }
    
end
module Alloc_Boxed_Impl12
  type t
  type a
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Cdsat_Trail_Impl25
  use Cdsat_Trail_Value_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type
  clone Cdsat_Trail_Impl25_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  val clone' = Clone0.clone'
end
module Core_Clone_Impls_Impl5
  
end
module Cdsat_Trail_Impl17
  use Cdsat_Trail_Sort_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
  clone Cdsat_Trail_Impl17_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl21_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 84 9 84 14] result = self }
    
end
module Cdsat_Trail_Impl13_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 39 9 39 14] result = self }
    
end
module Cdsat_Trail_Impl21
  use Cdsat_Trail_Term_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type
  clone Cdsat_Trail_Impl21_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl13
  use Cdsat_Trail_Reason_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type
  clone Cdsat_Trail_Impl13_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  val clone' = Clone0.clone'
end
module Cdsat_Trail_Impl9_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val clone' [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 9 9 9 14] result = self }
    
end
module Cdsat_Trail_Impl5_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val is_bool [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 139 14 139 41] result = IsBool0.is_bool (Model0.model self) }
    
end
module Cdsat_Trail_Impl8_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  val is_bool [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 444 14 444 45] result = IsBool0.is_bool (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Cdsat_Trail_Impl9
  use Cdsat_Trail_Assignment_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
  clone Cdsat_Trail_Impl9_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  val clone' = Clone0.clone'
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Cdsat_Trail_Impl6_Restrict_Interface
  use prelude.Borrow
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val restrict [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 361 15 361 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 363 15 363 36] UInt64.to_int level <= UInt64.to_int (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 362 14 362 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 364 14 364 59] Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ self) = Restrict0.restrict (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (UInt64.to_int level) }
    
end
module Cdsat_Concrete_Impl3_IntoVec_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use map.Map
  use CreusotContracts_Logic_Int_Int_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Concrete_ConflictHeap_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_Model_Interface as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val into_vec [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 350 4 350 122] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model result) -> (exists l : (usize) . Map.get (Model1.model self) (UInt64.to_int (Seq.get (Model0.model result) i)) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l)) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 351 4 351 144] forall l : (usize) . forall k : (usize) . Map.get (Model1.model self) (UInt64.to_int k) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l) -> (exists ix : (int) . 0 <= ix /\ ix < Seq.length (Model0.model result) /\ Seq.get (Model0.model result) ix = k) }
    
end
module Cdsat_Concrete_Impl3_IntoVec
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UIntSize
  use mach.int.UInt64
  use map.Map
  use CreusotContracts_Logic_Int_Int_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Concrete_ConflictHeap_Type
  use Core_Option_Option_Type
  clone Cdsat_Concrete_Impl2_Model as Model1
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val into_vec [@cfg:stackify] (self : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 350 4 350 122] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model result) -> (exists l : (usize) . Map.get (Model1.model self) (UInt64.to_int (Seq.get (Model0.model result) i)) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l)) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 351 4 351 144] forall l : (usize) . forall k : (usize) . Map.get (Model1.model self) (UInt64.to_int k) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l) -> (exists ix : (int) . 0 <= ix /\ ix < Seq.length (Model0.model result) /\ Seq.get (Model0.model result) ix = k) }
    
end
module Cdsat_Trail_Impl8_Term_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Assignment_Type
  val term [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Term_Type.cdsat_trail_term_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 463 14 463 34] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self }
    
end
module Cdsat_Trail_Impl8_Value_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  val value [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 458 14 458 33] result = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self }
    
end
module Cdsat_Trail_Impl5_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val negate [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : Cdsat_Trail_Value_Type.cdsat_trail_value_type
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 147 15 147 32] IsBool0.is_bool (Model0.model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 148 14 148 41] Model1.model result = Negate0.negate (Model0.model self) }
    
end
module Cdsat_Trail_Impl6_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  function abstract_assign (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type
    
end
module Cdsat_Trail_Impl6_AbstractAssign
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_AbstractJustification_Interface as AbstractJustification0 with function Model0.model = Model3.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  use Cdsat_Trail_Reason_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 244 4 244 62] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (a : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Theory_Assign_Type.cdsat_theory_assign_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 245 8 253 9] match (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason a) with
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Input_Type -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Input_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Decision_Type -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      | Cdsat_Trail_Reason_Type.Cdsat_Trail_Reason_Justified_Type just -> Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type (AbstractJustification0.abstract_justification self (Model2.model just)) (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term a)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val a))
      end
end
module Cdsat_Theory_Impl5_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate deduce (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl5_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_CountBounds_Interface as CountBounds0 with predicate Invariant0.invariant' = Invariant0.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 573 4 573 84] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 567 4 567 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Justified_Type (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 568 15 568 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 569 15 569 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 572 4 572 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 571 4 571 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 570 4 570 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Alloc_Vec_Impl10
  type t
  type a
end
module Cdsat_Trail_Impl6_AddJustified_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Theory_Trail_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model4 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Trail_Impl6_AbstractJustification_Interface as AbstractJustification0 with function Model0.model = Model4.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model3 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl3_Model_Interface as Model1
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val add_justified [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (into_vec : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (val' : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 339 4 339 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 340 15 340 31] IsBool0.is_bool (Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 341 4 341 51] Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Model1.model term) (Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 342 4 342 145] forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (Model3.model into_vec)) -> Satisfies0.satisfies m (Model1.model term, Model0.model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 110] forall i : (int) . 0 <= i /\ i < Seq.length (Model3.model into_vec) -> UInt64.to_int (Seq.get (Model3.model into_vec) i) < Seq.length (Model4.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * self)))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 339 4 339 40] Invariant0.invariant' ( ^ self) }
    
end
module Cdsat_Trail_Impl8_FirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Trail_Impl4_Model_Interface as Model0
  val first_order [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 449 14 449 45] result <> IsBool0.is_bool (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) }
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_slice_iter_iter_type 't =
    | Core_Slice_Iter_Iter_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) opaque_ptr (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module CreusotContracts_Std1_Slice_Impl4_Model_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  function model (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_Model
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  function model (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : Seq.seq t
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  val iter [@cfg:stackify] (self : seq t) : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
    ensures { Model0.model result = Model1.model self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Slice_Iter_Impl173_Item_Type
  type t
  use prelude.Borrow
  type item  =
    t
end
module Core_Slice_Iter_Impl173_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  clone Core_Slice_Iter_Impl173_Item_Type as Item0 with type t = t
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t,
  type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)) : Core_Option_Option_Type.core_option_option_type t
    ensures { match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module Cdsat_Trail_Impl6_AddDecision_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val add_decision [@cfg:stackify] (self : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (term : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (val' : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 288 15 288 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 290 4 290 51] Acceptable0.acceptable (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Model0.model term) (Model1.model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 14 289 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 291 4 291 48] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * self)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ self)) }
    
end
module Alloc_Vec_Impl19
  type t
  type a
end
module Alloc_Vec_IntoIter_Impl5
  type t
  type a
end
module Core_Iter_Traits_Collect_Impl0
  type i
end
module Core_Slice_Iter_Impl173
  type t
end
module CreusotContracts_Std1_Vec_Impl1_Completed_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a)
end
module CreusotContracts_Std1_Vec_Impl1_Completed
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  predicate completed (self : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type t a) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Int_Impl20
  
end
module CreusotContracts_Std1_Slice_Impl4
  type t
end
module CreusotContracts_Std1_Slice_Impl5_Completed_Interface
  type t
  use Core_Slice_Iter_Iter_Type
  predicate completed (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
end
module CreusotContracts_Std1_Slice_Impl5_Completed
  type t
  use Core_Slice_Iter_Iter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate completed (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) =
    Model0.model self = Seq.empty 
end
module CreusotContracts_Std1_Slice_Impl5
  type t
end
module CreusotContracts_Std1_Slice_Impl5_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
    
end
module CreusotContracts_Std1_Slice_Impl5_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  use mach.int.Int32
  clone CreusotContracts_Std1_Slice_Impl4_Model_Interface as Model0 with type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (visited : Seq.seq t) (rhs : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
end
module CreusotContracts_Std1_Slice_Impl5_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : () =
    ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl5_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl5_Produces_Interface as Produces0 with type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t) : ()
    
   =
    ()
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbstractJustification_Interface as AbstractJustification0 with function Model0.model = Model1.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val resolve_conflict [@cfg:stackify] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (conflict : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 107 4 107 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 109 4 109 111] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model conflict) -> UInt64.to_int (Seq.get (Model0.model conflict) i) < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail)))}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 110 15 110 36] Seq.length (Model0.model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 115 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (Model0.model conflict) in SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) conflict > 0 /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 107 4 107 41] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 108 4 108 50] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ trail)) }
    
end
module Cdsat_Concrete_Impl0_ResolveConflict
  use prelude.Borrow
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.UIntSize
  use map.Map
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level as Level1 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with function Level0.level = Level1.level,
  function Len0.len = Len0.len
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant4 with function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with predicate Invariant0.invariant' = Invariant4.invariant'
  use Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Sort0.sort = Sort1.sort, function Sort1.sort = Sort0.sort, axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with function Interp0.interp = Interp0.interp,
  predicate Invariant0.invariant' = Invariant3.invariant', function Sort0.sort = Sort1.sort,
  function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with predicate Contains0.contains = Contains0.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with predicate Invariant0.invariant' = Invariant3.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound1 with predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with predicate Sound0.sound = Sound1.sound,
  predicate Contains0.contains = Contains1.contains, function Find0.find = Find0.find,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, function Len0.len = Len0.len, function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with function Level0.level = Level1.level,
  function SetLevel0.set_level = SetLevel0.set_level, function Len0.len = Len0.len,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant2 with predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
  predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
  predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Invariant0.invariant' = Invariant3.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  function FindJustified0.find_justified = FindJustified0.find_justified, function Find0.find = Find0.find,
  predicate Contains0.contains = Contains1.contains,
  predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel as IsSetLevel0 with predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  function Len0.len = Len0.len
  clone Cdsat_Theory_Impl0_IsBool as IsBool1 with function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with function Sort0.sort = Sort1.sort, function Sort2.sort = Sort0.sort,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate Satisfies0.satisfies = Satisfies0.satisfies,
  function Negate0.negate = Negate0.negate, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Interp0.interp = Interp0.interp, axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate, axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with predicate Contains0.contains = Contains1.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function CountBounds0.count_bounds = CountBounds0.count_bounds, axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible as TrailPlausible0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains1.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function ToPair0.to_pair = ToPair0.to_pair, axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig as RestrictTooBig0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Restrict0.restrict = Restrict0.restrict,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by, function ToPair0.to_pair = ToPair0.to_pair, axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with predicate Sound0.sound = Sound1.sound,
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound2 with predicate Sound0.sound = Sound1.sound
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model8
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model as Model7
  use Cdsat_Concrete_ConflictHeap_Type
  use Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_Model as Model6 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Std1_Vec_Impl1_Produces as Produces0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model
  clone CreusotContracts_Std1_Vec_Impl1_ProducesTrans as ProducesTrans0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_ProducesRefl as ProducesRefl0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Produces0.produces = Produces0.produces, axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with predicate Invariant0.invariant' = Invariant3.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Trail_Impl3_Model as Model4 with function Model0.model = Model8.model,
  function Model1.model = Model7.model
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl8_TermValue as TermValue0 with function Model0.model = Model4.model,
  function Model1.model = Model7.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbsJustInner as AbsJustInner0 with function Model0.model = Model1.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value,
  function Model1.model = Model4.model, function Model2.model = Model7.model, function Insert0.insert = Insert0.insert,
  axiom .
  clone Cdsat_Trail_Impl6_AbstractRelation as AbstractRelation0 with function Model0.model = Model1.model,
  function TermValue0.term_value = TermValue0.term_value, predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level1.level, function Len0.len = Len0.len
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with function SetLevel0.set_level = SetLevel0.set_level,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Impls as Impls0 with predicate Unsat0.unsat = Unsat0.unsat,
  predicate Invariant0.invariant' = Invariant3.invariant', function Restrict0.restrict = Restrict0.restrict,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains1.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Theory_Impl6_Sound as Sound0 with predicate Sound0.sound = Sound1.sound,
  predicate Invariant0.invariant' = Invariant3.invariant', predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant1 with function SetLevel0.set_level = SetLevel0.set_level,
  predicate Invariant0.invariant' = Invariant2.invariant', predicate Contains0.contains = Contains0.contains,
  predicate Contains1.contains = Contains1.contains,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level1.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_UndoDecide as UndoDecide0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Sound1.sound = Sound2.sound, predicate Impls0.impls = Impls0.impls, predicate Unsat0.unsat = Unsat0.unsat,
  function Level0.level = Level0.level, function RestrictSound0.restrict_sound = RestrictSound0.restrict_sound,
  function RestrictTooBig0.restrict_too_big = RestrictTooBig0.restrict_too_big,
  function TrailPlausible0.trail_plausible = TrailPlausible0.trail_plausible,
  function NegateInvolutive0.negate_involutive = NegateInvolutive0.negate_involutive,
  function Justification0.justification = Justification0.justification, function Remove0.remove = Remove0.remove,
  function Restrict0.restrict = Restrict0.restrict, predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate IsBool0.is_bool = IsBool0.is_bool, predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Negate0.negate = Negate0.negate,
  function Level1.level = Level1.level, predicate Sound2.sound = Sound1.sound,
  predicate Contains1.contains = Contains1.contains, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Invariant2.invariant' = Invariant3.invariant', predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, axiom .
  clone Cdsat_Theory_Impl6_UndoClear as UndoClear0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Sound1.sound = Sound2.sound, predicate Impls0.impls = Impls0.impls, predicate Unsat0.unsat = Unsat0.unsat,
  function Level0.level = Level0.level, function RestrictSound0.restrict_sound = RestrictSound0.restrict_sound,
  function RestrictIdempotent0.restrict_idempotent = RestrictIdempotent0.restrict_idempotent,
  function Remove0.remove = Remove0.remove, predicate Contains0.contains = Contains0.contains,
  predicate IsBool0.is_bool = IsBool0.is_bool, predicate IsSetLevel0.is_set_level = IsSetLevel0.is_set_level,
  function Restrict0.restrict = Restrict0.restrict, predicate Sound2.sound = Sound1.sound,
  predicate Contains1.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level1.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, axiom .
  clone Cdsat_Theory_Impl6_Backjump as Backjump0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound0.sound, predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Sound1.sound = Sound2.sound, predicate Impls0.impls = Impls0.impls, predicate Unsat0.unsat = Unsat0.unsat,
  function Remove0.remove = Remove0.remove, function SetLevel0.set_level = SetLevel0.set_level,
  function RestrictSound0.restrict_sound = RestrictSound0.restrict_sound,
  function RestrictTooBig0.restrict_too_big = RestrictTooBig0.restrict_too_big,
  function TrailPlausible0.trail_plausible = TrailPlausible0.trail_plausible,
  function RestrictIdempotent0.restrict_idempotent = RestrictIdempotent0.restrict_idempotent,
  function NegateInvolutive0.negate_involutive = NegateInvolutive0.negate_involutive,
  function Lemma0.lemma' = Lemma0.lemma', function Restrict0.restrict = Restrict0.restrict,
  predicate Contains0.contains = Contains0.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  predicate IsBool1.is_bool = IsBool1.is_bool, function LevelOf0.level_of = LevelOf0.level_of,
  function Negate0.negate = Negate0.negate,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level1.level,
  function Len0.len = Len0.len, predicate Sound2.sound = Sound1.sound,
  predicate Contains1.contains = Contains1.contains, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate Invariant2.invariant' = Invariant3.invariant',
  predicate Satisfies0.satisfies = Satisfies0.satisfies, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Cdsat_Concrete_Impl2_Model as Model3
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl6_AbstractJustification as AbstractJustification0 with function Model0.model = Model1.model,
  predicate Contains0.contains = Contains0.contains, function TermValue0.term_value = TermValue0.term_value,
  function AbsJustInner0.abs_just_inner = AbsJustInner0.abs_just_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_Invariant as Invariant0 with predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
  predicate Sound0.sound = Sound1.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  function Level0.level = Level1.level, function Len0.len = Len0.len
  use prelude.IntSize
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl4_Model as Model14 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_Produces as Produces1 with type t = usize,
  function Model0.model = Model14.model
  clone CreusotContracts_Std1_Slice_Impl5_ProducesTrans as ProducesTrans1 with type t = usize,
  predicate Produces0.produces = Produces1.produces, axiom .
  clone CreusotContracts_Std1_Slice_Impl5_ProducesRefl as ProducesRefl1 with type t = usize,
  predicate Produces0.produces = Produces1.produces, axiom .
  clone CreusotContracts_Logic_Int_Impl20_Model as Model16
  clone Core_Slice_Iter_Impl173_Item_Type as Item1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_Completed as Completed1 with type t = usize,
  function Model0.model = Model14.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy4 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model13 with type t = usize, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model15 with type t = seq usize,
  type ModelTy0.modelTy = ModelTy4.modelTy, function Model0.model = Model13.model
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with predicate Contains0.contains = Contains1.contains,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy3
  clone CreusotContracts_Logic_Model_Impl0_Model as Model12 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy3.modelTy, function Model0.model = Model7.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve7 with type t = usize
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy2
  clone CreusotContracts_Logic_Model_Impl0_Model as Model11 with type t = usize,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model16.model
  clone Cdsat_Concrete_Impl2_ModelTy_Type as ModelTy1
  clone CreusotContracts_Logic_Model_Impl0_Model as Model10 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model9 with type t = Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Vec_Impl1_Completed as Completed0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter3 with type i = Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Cdsat_Trail_Impl6_AddDecision_Interface as AddDecision0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model4.model, function Model1.model = Model7.model,
  predicate Acceptable0.acceptable = Acceptable0.acceptable, predicate Impls0.impls = Impls0.impls,
  predicate Unsat0.unsat = Unsat0.unsat
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize
  clone Core_Slice_Iter_Impl173_Next_Interface as Next1 with type t = usize,
  predicate Completed0.completed = Completed1.completed, predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter2 with type i = Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize
  clone Core_Slice_Impl0_Iter_Interface as Iter0 with type t = usize, function Model0.model = Model14.model,
  function Model1.model = Model15.model
  clone Alloc_Vec_Impl10_Deref_Interface as Deref0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model13.model,
  function Model1.model = Model0.model
  clone Cdsat_Trail_Impl6_Justification_Interface as Justification1
  clone Cdsat_Trail_Impl8_Decision_Interface as Decision0
  clone Cdsat_Trail_Impl8_FirstOrder_Interface as FirstOrder0 with function Model0.model = Model7.model,
  predicate IsBool0.is_bool = IsBool0.is_bool
  clone Cdsat_Trail_Impl6_AddJustified_Interface as AddJustified0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model7.model, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Model1.model = Model4.model, predicate Acceptable0.acceptable = Acceptable0.acceptable,
  predicate Invariant1.invariant' = Invariant3.invariant', function Model3.model = Model0.model,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  function Model4.model = Model1.model, predicate Contains0.contains = Contains0.contains,
  function TermValue0.term_value = TermValue0.term_value
  clone Cdsat_Trail_Impl5_Negate_Interface as Negate1 with function Model0.model = Model12.model,
  predicate IsBool0.is_bool = IsBool0.is_bool, function Model1.model = Model7.model,
  function Negate0.negate = Negate0.negate
  clone Cdsat_Trail_Impl8_Value_Interface as Value2
  clone Cdsat_Trail_Impl21_Clone_Interface as Clone1
  clone Cdsat_Trail_Impl8_Term_Interface as Term2
  clone Cdsat_Concrete_Impl3_IntoVec_Interface as IntoVec0 with function Model0.model = Model0.model,
  function Model1.model = Model3.model
  clone Cdsat_Trail_Impl6_Restrict_Interface as Restrict1 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate Invariant1.invariant' = Invariant2.invariant',
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level1.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Trail_Impl8_IsBool_Interface as IsBool2 with function Model0.model = Model7.model,
  predicate IsBool0.is_bool = IsBool0.is_bool
  clone Cdsat_Trail_Impl9_Clone_Interface as Clone0
  clone Cdsat_Concrete_Impl3_Pop_Interface as Pop0 with function Model0.model = Model9.model,
  function Model1.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve3 with type t1 = usize, type t2 = usize,
  predicate Resolve0.resolve = Resolve7.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = (usize, usize)
  clone Cdsat_Concrete_Impl3_Peek_Interface as Peek0 with function Model0.model = Model10.model,
  function Model1.model = Model11.model
  clone Cdsat_Concrete_Impl3_Push_Interface as Push0 with function Model0.model = Model3.model,
  function Model1.model = Model9.model
  clone Cdsat_Trail_Impl8_Level_Interface as Level2
  clone Cdsat_Trail_Impl7_Index_Interface as Index0 with function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Produces0.produces = Produces0.produces
  clone Alloc_Vec_Impl19_IntoIter_Interface as IntoIter1 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model,
  function Model1.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = usize, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve5.resolve
  clone Cdsat_Concrete_Impl3_New_Interface as New0 with function Model0.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type
  let rec cfg resolve_conflict [@cfg:stackify] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 4 116 79] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) (conflict : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 107 4 107 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 109 4 109 111] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model conflict) -> UInt64.to_int (Seq.get (Model0.model conflict) i) < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail)))}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 110 15 110 36] Seq.length (Model0.model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 115 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (Model0.model conflict) in SetLevel0.set_level (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) conflict > 0 /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 107 4 107 41] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 108 4 108 50] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ trail)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type);
  var trail_2 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var conflict_3 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var old_trail_4 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _5 : ();
  var heap_6 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  ghost var abstract_conflict_7 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _8 : ();
  var _9 : ();
  var iter_10 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var iter_old_12 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _13 : ();
  ghost var produced_14 : Seq.seq usize;
  var _15 : ();
  var _16 : ();
  var _17 : Core_Option_Option_Type.core_option_option_type usize;
  var _18 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _19 : isize;
  var i_20 : usize;
  ghost var _21 : Seq.seq usize;
  var _22 : ();
  var a_23 : usize;
  var l_24 : usize;
  var _25 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _26 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _27 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _28 : usize;
  var _29 : Core_Option_Option_Type.core_option_option_type usize;
  var _30 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _31 : usize;
  var _32 : usize;
  var _33 : ();
  var a_34 : usize;
  var l_35 : usize;
  var _36 : (usize, usize);
  var _37 : Core_Option_Option_Type.core_option_option_type (usize, usize);
  var _38 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var level_39 : usize;
  var _40 : ();
  ghost var conflict_41 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _42 : Core_Option_Option_Type.core_option_option_type (usize, usize);
  var _43 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _44 : isize;
  var a_45 : usize;
  var l_46 : usize;
  ghost var _47 : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
  var _48 : ();
  var a_49 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _50 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _51 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _52 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _53 : usize;
  var _54 : ();
  var _55 : ();
  var _56 : bool;
  var _57 : bool;
  var _58 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _59 : bool;
  var _60 : usize;
  var _61 : usize;
  var _62 : (usize, usize);
  var _63 : Core_Option_Option_Type.core_option_option_type (usize, usize);
  var _64 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _65 : ();
  var _66 : ();
  var _67 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _68 : usize;
  var _69 : (usize, usize);
  var _70 : Core_Option_Option_Type.core_option_option_type (usize, usize);
  var _71 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _72 : ();
  var _73 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _74 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _75 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _76 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _77 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _78 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _79 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _80 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _81 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _82 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _83 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _84 : ();
  var _85 : ();
  var _86 : bool;
  var _87 : bool;
  var _88 : bool;
  var _89 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _90 : bool;
  var _91 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _92 : bool;
  var _93 : usize;
  var _94 : usize;
  var _95 : (usize, usize);
  var _96 : Core_Option_Option_Type.core_option_option_type (usize, usize);
  var _97 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _98 : ();
  var _99 : ();
  var _100 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _101 : usize;
  var _102 : usize;
  var _103 : ();
  var _104 : Core_Option_Option_Type.core_option_option_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _105 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _106 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _107 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _108 : isize;
  var just_109 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _110 : ();
  var _111 : ();
  var _112 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize;
  var _113 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize;
  var _114 : seq usize;
  var _115 : seq usize;
  var _116 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var iter_117 : Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize;
  var _118 : ();
  var _119 : Core_Option_Option_Type.core_option_option_type usize;
  var _120 : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize);
  var _121 : borrowed (Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize);
  var _122 : isize;
  var _123 : ();
  var j_124 : usize;
  var j_125 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _126 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _127 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _128 : usize;
  var _129 : bool;
  var _130 : bool;
  var _131 : bool;
  var _132 : usize;
  var _133 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _134 : usize;
  var _135 : bool;
  var _136 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _137 : bool;
  var _138 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _139 : bool;
  var _140 : usize;
  var _141 : (usize, usize);
  var _142 : Core_Option_Option_Type.core_option_option_type (usize, usize);
  var _143 : Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
  var _144 : usize;
  var _145 : ();
  var _146 : ();
  var _147 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _148 : usize;
  var _149 : usize;
  var _150 : ();
  var _151 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _152 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _153 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _154 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _155 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _156 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _157 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _158 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _159 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _160 : ();
  var iter_161 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _162 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _163 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var iter_old_164 : Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _165 : ();
  ghost var produced_166 : Seq.seq usize;
  var _167 : ();
  var _168 : Core_Option_Option_Type.core_option_option_type usize;
  var _169 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.alloc_vec_intoiter_intoiter_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _170 : isize;
  var i_171 : usize;
  ghost var _172 : Seq.seq usize;
  var _173 : ();
  var a_174 : usize;
  var l_175 : usize;
  var _176 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _177 : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type;
  var _178 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _179 : usize;
  var _180 : Core_Option_Option_Type.core_option_option_type usize;
  var _181 : borrowed (Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type);
  var _182 : usize;
  var _183 : usize;
  var _184 : ();
  var _185 : ();
  var _186 : ();
  var _187 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    conflict_3 <- conflict;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _5 <- ();
    old_trail_4 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 117 24 117 40] trail_2);
    goto BB4
  }
  BB4 {
    heap_6 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 119 37 119 56] New0.new ());
    goto BB5
  }
  BB5 {
    _8 <- ();
    abstract_conflict_7 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 121 62 121 158] Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model conflict_3)));
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve _11 };
    _11 <- conflict_3;
    conflict_3 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    iter_10 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] IntoIter1.into_iter _11);
    goto BB7
  }
  BB7 {
    _13 <- ();
    iter_old_12 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] iter_10);
    goto BB8
  }
  BB8 {
    _15 <- ();
    produced_14 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] Seq.empty );
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] Produces0.produces iter_old_12 produced_14 iter_10 };
    invariant xx { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] forall i : (int) . 0 <= i /\ i < Seq.length produced_14 -> Map.get (Model3.model heap_6) (UInt64.to_int (Seq.get produced_14 i)) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) (UInt64.to_int (Seq.get produced_14 i))))) };
    invariant from_set { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] forall v : (usize) . forall k : (usize) . Map.get (Model3.model heap_6) (UInt64.to_int k) = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int v) -> UInt64.to_int k < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) /\ Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 abstract_conflict_7) (TermValue0.term_value (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) (UInt64.to_int k))) /\ UInt64.to_int v = UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) (UInt64.to_int k))) };
    _18 <- borrow_mut iter_10;
    iter_10 <-  ^ _18;
    _17 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] Next0.next _18);
    goto BB14
  }
  BB14 {
    switch (_17)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB15
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB17
      end
  }
  BB15 {
    _9 <- ();
    goto BB22
  }
  BB16 {
    assume { Resolve2.resolve trail_2 };
    absurd
  }
  BB17 {
    i_20 <- Core_Option_Option_Type.core_option_option_type_Some_0 _17;
    _22 <- ();
    _21 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 8 124 149] Seq.snoc produced_14 i_20);
    goto BB18
  }
  BB18 {
    produced_14 <- _21;
    _21 <- any Seq.seq usize;
    a_23 <- i_20;
    _27 <-  * trail_2;
    _28 <- a_23;
    _26 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 20 127 28] Index0.index _27 _28);
    goto BB19
  }
  BB19 {
    _25 <- _26;
    l_24 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 20 127 36] Level2.level _25);
    goto BB20
  }
  BB20 {
    _30 <- borrow_mut heap_6;
    heap_6 <-  ^ _30;
    _31 <- a_23;
    _32 <- l_24;
    _29 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 128 12 128 27] Push0.push _30 _31 _32);
    goto BB21
  }
  BB21 {
    _16 <- ();
    goto BB13
  }
  BB22 {
    _38 <- heap_6;
    _37 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 131 21 131 32] Peek0.peek _38);
    goto BB23
  }
  BB23 {
    _36 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 131 21 131 41] Unwrap0.unwrap _37);
    goto BB24
  }
  BB24 {
    a_34 <- (let (a, _) = _36 in a);
    l_35 <- (let (_, a) = _36 in a);
    assume { Resolve3.resolve _36 };
    level_39 <- l_35;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 133 22 133 32] UInt64.to_int level_39 > 0 };
    _40 <- ();
    conflict_41 <- abstract_conflict_7;
    abstract_conflict_7 <- any Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    invariant trail_unchanged { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 140 37 140 56] trail_2 = old_trail_4 };
    invariant inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 25 141 42] Invariant0.invariant' ( * trail_2) };
    invariant conf { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 142 26 142 46] Invariant1.invariant' conflict_41 };
    invariant conf { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 143 26 143 42] Sound0.sound conflict_41 };
    invariant from_set { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 140 8 140 58] forall v : (Cdsat_Theory_Value_Type.cdsat_theory_value_type) . forall k : (Cdsat_Theory_Term_Type.cdsat_theory_term_type) . Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 conflict_41) (k, v) -> (exists l : (int) . exists ix : (int) . 0 <= ix /\ ix < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) /\ Model4.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) ix)) = k /\ Map.get (Model3.model heap_6) ix = Core_Option_Option_Type.Core_Option_Option_Some_Type l) };
    invariant to_set { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 140 8 140 58] forall l : (usize) . forall ix : (int) . Map.get (Model3.model heap_6) ix = Core_Option_Option_Type.Core_Option_Option_Some_Type (UInt64.to_int l) -> 0 <= ix /\ ix < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) /\ Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 conflict_41) (TermValue0.term_value (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) ix)) };
    _43 <- borrow_mut heap_6;
    heap_6 <-  ^ _43;
    _42 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 146 33 146 43] Pop0.pop _43);
    goto BB28
  }
  BB28 {
    switch (_42)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB29
      | _ -> goto BB119
      end
  }
  BB29 {
    a_45 <- (let (a, _) = Core_Option_Option_Type.core_option_option_type_Some_0 _42 in a);
    l_46 <- (let (_, a) = Core_Option_Option_Type.core_option_option_type_Some_0 _42 in a);
    _48 <- ();
    _47 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 147 23 147 153] Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 conflict_41) (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 conflict_41) (TermValue0.term_value (Seq.get (Model5.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) (UInt64.to_int a_45)))));
    goto BB30
  }
  BB30 {
    conflict_41 <- _47;
    _47 <- any Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type;
    _52 <-  * trail_2;
    _53 <- a_45;
    _51 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 149 20 149 28] Index0.index _52 _53);
    goto BB31
  }
  BB31 {
    _50 <- _51;
    a_49 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 149 20 149 36] Clone0.clone' _50);
    goto BB32
  }
  BB32 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 150 26 150 48] UInt64.to_int l_46 <= Level0.level conflict_41 };
    _54 <- ();
    _58 <- a_49;
    _57 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 152 15 152 26] IsBool2.is_bool _58);
    goto BB36
  }
  BB33 {
    _56 <- false;
    goto BB35
  }
  BB34 {
    _60 <- l_46;
    _64 <- heap_6;
    _63 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 152 35 152 46] Peek0.peek _64);
    goto BB37
  }
  BB35 {
    switch (_56)
      | False -> goto BB49
      | _ -> goto BB39
      end
  }
  BB36 {
    switch (_57)
      | False -> goto BB33
      | _ -> goto BB34
      end
  }
  BB37 {
    _62 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 152 35 152 55] Unwrap0.unwrap _63);
    goto BB38
  }
  BB38 {
    _61 <- (let (_, a) = _62 in a);
    assume { Resolve3.resolve _62 };
    _59 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 152 30 152 57] _60 > _61);
    _56 <- _59;
    _59 <- any bool;
    goto BB35
  }
  BB39 {
    _67 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _67) };
    _71 <- heap_6;
    _70 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 32 153 43] Peek0.peek _71);
    goto BB40
  }
  BB40 {
    _69 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 32 153 52] Unwrap0.unwrap _70);
    goto BB41
  }
  BB41 {
    _68 <- (let (_, a) = _69 in a);
    assume { Resolve3.resolve _69 };
    _66 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 16 153 55] Restrict1.restrict _67 _68);
    goto BB42
  }
  BB42 {
    _73 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _73) };
    _75 <- heap_6;
    heap_6 <- any Cdsat_Concrete_ConflictHeap_Type.cdsat_concrete_conflictheap_type;
    _74 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 36 155 51] IntoVec0.into_vec _75);
    goto BB43
  }
  BB43 {
    _79 <- a_49;
    _78 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 53 155 61] Term2.term _79);
    goto BB44
  }
  BB44 {
    _77 <- _78;
    _76 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 53 155 69] Clone1.clone' _77);
    goto BB45
  }
  BB45 {
    _83 <- a_49;
    _82 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 71 155 80] Value2.value _83);
    goto BB46
  }
  BB46 {
    _81 <- _82;
    _80 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 71 155 89] Negate1.negate _81);
    goto BB47
  }
  BB47 {
    _72 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 16 155 90] AddJustified0.add_justified _73 _74 _76 _80);
    goto BB48
  }
  BB48 {
    assume { Resolve2.resolve trail_2 };
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 156 30 156 100] Backjump0.backjump conflict_41 (TermValue0.term_value a_49) (Cdsat_Theory_Normal_Type.Cdsat_Theory_Normal_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2))) };
    _84 <- ();
    _0 <- ();
    goto BB124
  }
  BB49 {
    _55 <- ();
    _89 <- a_49;
    _88 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 15 160 30] FirstOrder0.first_order _89);
    goto BB56
  }
  BB50 {
    _86 <- false;
    goto BB52
  }
  BB51 {
    _93 <- l_46;
    _97 <- heap_6;
    _96 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 55 160 66] Peek0.peek _97);
    goto BB58
  }
  BB52 {
    switch (_86)
      | False -> goto BB62
      | _ -> goto BB60
      end
  }
  BB53 {
    _87 <- false;
    goto BB55
  }
  BB54 {
    _91 <- a_49;
    _90 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 34 160 46] Decision0.decision _91);
    goto BB57
  }
  BB55 {
    switch (_87)
      | False -> goto BB50
      | _ -> goto BB51
      end
  }
  BB56 {
    switch (_88)
      | False -> goto BB53
      | _ -> goto BB54
      end
  }
  BB57 {
    _87 <- _90;
    _90 <- any bool;
    goto BB55
  }
  BB58 {
    _95 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 55 160 75] Unwrap0.unwrap _96);
    goto BB59
  }
  BB59 {
    _94 <- (let (_, a) = _95 in a);
    assume { Resolve3.resolve _95 };
    _92 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 50 160 77] _93 > _94);
    _86 <- _92;
    _92 <- any bool;
    goto BB52
  }
  BB60 {
    _100 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _100) };
    _102 <- level_39;
    _101 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 161 31 161 40] _102 - (1 : usize));
    _99 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 161 16 161 41] Restrict1.restrict _100 _101);
    goto BB61
  }
  BB61 {
    assume { Resolve2.resolve trail_2 };
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 162 30 162 102] UndoClear0.undo_clear conflict_41 (TermValue0.term_value a_49) (Cdsat_Theory_Normal_Type.Cdsat_Theory_Normal_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2))) };
    _103 <- ();
    _0 <- ();
    goto BB124
  }
  BB62 {
    _85 <- ();
    _105 <-  * trail_2;
    _107 <- a_49;
    _106 <- _107;
    _104 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 166 32 166 55] Justification1.justification _105 _106);
    goto BB63
  }
  BB63 {
    switch (_104)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB64
      | _ -> goto BB114
      end
  }
  BB64 {
    assume { Resolve1.resolve just_109 };
    just_109 <- Core_Option_Option_Type.core_option_option_type_Some_0 _104;
    _104 <- (let Core_Option_Option_Type.Core_Option_Option_Some_Type a = _104 in Core_Option_Option_Type.Core_Option_Option_Some_Type (any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)));
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 167 16 167 117] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model just_109) -> UInt64.to_int (Seq.get (Model0.model just_109) i) < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) };
    goto BB65
  }
  BB65 {
    _110 <- ();
    _116 <- just_109;
    _115 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 168 25 168 36] Deref0.deref _116);
    goto BB66
  }
  BB66 {
    _114 <- _115;
    _113 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 168 25 168 36] Iter0.iter _114);
    goto BB67
  }
  BB67 {
    _112 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 168 25 168 36] IntoIter2.into_iter _113);
    goto BB68
  }
  BB68 {
    iter_117 <- _112;
    _112 <- any Core_Slice_Iter_Iter_Type.core_slice_iter_iter_type usize;
    goto BB69
  }
  BB69 {
    _121 <- borrow_mut iter_117;
    iter_117 <-  ^ _121;
    _120 <- borrow_mut ( * _121);
    _121 <- { _121 with current = ( ^ _120) };
    _119 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 168 25 168 36] Next1.next _120);
    goto BB70
  }
  BB70 {
    assume { Resolve4.resolve _121 };
    switch (_119)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB73
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB71
      end
  }
  BB71 {
    j_124 <- Core_Option_Option_Type.core_option_option_type_Some_0 _119;
    _127 <-  * trail_2;
    _128 <- j_124;
    _126 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 169 29 169 38] Index0.index _127 _128);
    goto BB74
  }
  BB72 {
    assume { Resolve2.resolve trail_2 };
    assume { Resolve1.resolve just_109 };
    absurd
  }
  BB73 {
    _111 <- ();
    assume { Resolve1.resolve _163 };
    _163 <- just_109;
    just_109 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _162 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 25 184 41] IntoIter1.into_iter _163);
    goto BB97
  }
  BB74 {
    j_125 <- _126;
    _133 <- j_125;
    _132 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 23 170 32] Level2.level _133);
    goto BB81
  }
  BB75 {
    _129 <- false;
    goto BB77
  }
  BB76 {
    _138 <- j_125;
    _137 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 64 170 76] Decision0.decision _138);
    goto BB83
  }
  BB77 {
    switch (_129)
      | False -> goto BB95
      | _ -> goto BB84
      end
  }
  BB78 {
    _130 <- false;
    goto BB80
  }
  BB79 {
    _136 <- j_125;
    _135 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 45 170 60] FirstOrder0.first_order _136);
    goto BB82
  }
  BB80 {
    switch (_130)
      | False -> goto BB75
      | _ -> goto BB76
      end
  }
  BB81 {
    _134 <- level_39;
    _131 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 170 23 170 41] _132 = _134);
    switch (_131)
      | False -> goto BB78
      | _ -> goto BB79
      end
  }
  BB82 {
    _130 <- _135;
    _135 <- any bool;
    goto BB80
  }
  BB83 {
    _129 <- _137;
    _137 <- any bool;
    goto BB77
  }
  BB84 {
    _143 <- heap_6;
    _142 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 28 172 39] Peek0.peek _143);
    goto BB85
  }
  BB85 {
    _141 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 28 172 48] Unwrap0.unwrap _142);
    goto BB86
  }
  BB86 {
    _140 <- (let (_, a) = _141 in a);
    assume { Resolve3.resolve _141 };
    _144 <- l_46;
    _139 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 27 172 55] _140 = _144);
    switch (_139)
      | False -> goto BB94
      | _ -> goto BB87
      end
  }
  BB87 {
    _147 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _147) };
    _149 <- level_39;
    _148 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 173 43 173 52] _149 - (1 : usize));
    _146 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 173 28 173 53] Restrict1.restrict _147 _148);
    goto BB88
  }
  BB88 {
    _151 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _151) };
    _155 <- a_49;
    _154 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 47 174 55] Term2.term _155);
    goto BB89
  }
  BB89 {
    _153 <- _154;
    _152 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 47 174 63] Clone1.clone' _153);
    goto BB90
  }
  BB90 {
    _159 <- a_49;
    _158 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 65 174 74] Value2.value _159);
    goto BB91
  }
  BB91 {
    _157 <- _158;
    _156 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 65 174 83] Negate1.negate _157);
    goto BB92
  }
  BB92 {
    _150 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 28 174 84] AddDecision0.add_decision _151 _152 _156);
    goto BB93
  }
  BB93 {
    assume { Resolve2.resolve trail_2 };
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 175 42 175 115] UndoDecide0.undo_decide conflict_41 (TermValue0.term_value j_125) (Cdsat_Theory_Normal_Type.Cdsat_Theory_Normal_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2))) };
    _160 <- ();
    _0 <- ();
    goto BB121
  }
  BB94 {
    _118 <- ();
    goto BB96
  }
  BB95 {
    _118 <- ();
    goto BB96
  }
  BB96 {
    _16 <- ();
    goto BB69
  }
  BB97 {
    iter_161 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] IntoIter3.into_iter _162);
    goto BB98
  }
  BB98 {
    _165 <- ();
    iter_old_164 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] iter_161);
    goto BB99
  }
  BB99 {
    _167 <- ();
    produced_166 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] Seq.empty );
    goto BB100
  }
  BB100 {
    goto BB101
  }
  BB101 {
    goto BB102
  }
  BB102 {
    goto BB103
  }
  BB103 {
    goto BB104
  }
  BB104 {
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] Produces0.produces iter_old_164 produced_166 iter_161 };
    invariant from_set { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] forall v : (Cdsat_Theory_Value_Type.cdsat_theory_value_type) . forall k : (Cdsat_Theory_Term_Type.cdsat_theory_term_type) . Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 conflict_41) (k, v) -> (exists l : (int) . exists ix : (int) . Model4.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) ix)) = k /\ Map.get (Model3.model heap_6) ix = Core_Option_Option_Type.Core_Option_Option_Some_Type l) };
    invariant to_set { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] forall l : (int) . forall ix : (int) . Map.get (Model3.model heap_6) ix = Core_Option_Option_Type.Core_Option_Option_Some_Type l -> ix < Seq.length (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) /\ (exists v : (Cdsat_Theory_Value_Type.cdsat_theory_value_type) . Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 conflict_41) (Model4.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term (Seq.get (Model1.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments ( * trail_2))) ix)), v)) };
    _169 <- borrow_mut iter_161;
    iter_161 <-  ^ _169;
    _168 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] Next0.next _169);
    goto BB105
  }
  BB105 {
    switch (_168)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB106
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB108
      end
  }
  BB106 {
    _16 <- ();
    goto BB113
  }
  BB107 {
    assume { Resolve2.resolve trail_2 };
    absurd
  }
  BB108 {
    i_171 <- Core_Option_Option_Type.core_option_option_type_Some_0 _168;
    _173 <- ();
    _172 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 16 182 181] Seq.snoc produced_166 i_171);
    goto BB109
  }
  BB109 {
    produced_166 <- _172;
    _172 <- any Seq.seq usize;
    a_174 <- i_171;
    _178 <-  * trail_2;
    _179 <- a_174;
    _177 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 185 28 185 36] Index0.index _178 _179);
    goto BB110
  }
  BB110 {
    _176 <- _177;
    l_175 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 185 28 185 44] Level2.level _176);
    goto BB111
  }
  BB111 {
    _181 <- borrow_mut heap_6;
    heap_6 <-  ^ _181;
    _182 <- a_174;
    _183 <- l_175;
    _180 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 186 20 186 35] Push0.push _181 _182 _183);
    goto BB112
  }
  BB112 {
    _16 <- ();
    goto BB104
  }
  BB113 {
    goto BB115
  }
  BB114 {
    _16 <- ();
    goto BB116
  }
  BB115 {
    goto BB116
  }
  BB116 {
    goto BB117
  }
  BB117 {
    goto BB118
  }
  BB118 {
    goto BB27
  }
  BB119 {
    assume { Resolve2.resolve trail_2 };
    _0 <- ();
    goto BB120
  }
  BB120 {
    goto BB128
  }
  BB121 {
    assume { Resolve1.resolve just_109 };
    goto BB122
  }
  BB122 {
    goto BB123
  }
  BB123 {
    goto BB126
  }
  BB124 {
    goto BB125
  }
  BB125 {
    goto BB126
  }
  BB126 {
    goto BB127
  }
  BB127 {
    goto BB128
  }
  BB128 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat1
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl6_Unsat_Interface as Unsat0
  use Cdsat_Concrete_Answer_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat1.unsat, axiom .
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val solver [@cfg:stackify] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_Answer_Type.cdsat_concrete_answer_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 27 15 27 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 28 14 28 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 29 4 29 50] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ trail)) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 30 14 34 5] match (result) with
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unsat_Type -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Sat_Type -> true
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unknown_Type -> true
      end }
    
end
module Cdsat_Concrete_Impl0_Solver
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Sort0.sort = Sort1.sort, function Sort1.sort = Sort0.sort, axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl4_Model as Model4
  clone Cdsat_Trail_Impl3_Model as Model3 with function Model0.model = Model5.model,
  function Model1.model = Model4.model
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use CreusotContracts_Logic_Int_Int_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with function Level0.level = Level0.level,
  function Len0.len = Len0.len
  use Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with function Interp0.interp = Interp0.interp,
  predicate Invariant0.invariant' = Invariant2.invariant', function Sort0.sort = Sort1.sort,
  function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, function Find0.find = Find0.find,
  function ToPair0.to_pair = ToPair0.to_pair,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Level0.level = Level0.level,
  function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with function ToPair0.to_pair = ToPair0.to_pair,
  predicate Contains0.contains = Contains0.contains, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with predicate Contains0.contains = Contains1.contains,
  predicate Contains1.contains = Contains0.contains,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with function Level0.level = Level0.level,
  function SetLevel0.set_level = SetLevel0.set_level, function Len0.len = Len0.len,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
  predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
  predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with predicate Contains0.contains = Contains1.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with predicate Sound0.sound = Sound0.sound
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl8_TermValue as TermValue0 with function Model0.model = Model3.model,
  function Model1.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Cdsat_Trail_Impl6_AbsJustInner as AbsJustInner0 with function Model0.model = Model2.model,
  predicate Contains0.contains = Contains1.contains, function TermValue0.term_value = TermValue0.term_value,
  function Model1.model = Model3.model, function Model2.model = Model4.model, function Insert0.insert = Insert0.insert,
  axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with predicate Contains0.contains = Contains0.contains,
  predicate Satisfies0.satisfies = Satisfies0.satisfies,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  function Len0.len = Len0.len, predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function CountBounds0.count_bounds = CountBounds0.count_bounds, axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat1 with predicate Invariant0.invariant' = Invariant2.invariant',
  function Restrict0.restrict = Restrict0.restrict, predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Trail_Impl6_AbstractRelation as AbstractRelation0 with function Model0.model = Model2.model,
  function TermValue0.term_value = TermValue0.term_value, predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len
  clone Cdsat_Theory_Impl5_Fail2 as Fail20 with predicate Invariant0.invariant' = Invariant1.invariant',
  predicate Sound0.sound = Sound1.sound, predicate Unsat0.unsat = Unsat1.unsat,
  predicate Contains0.contains = Contains1.contains, predicate Contains1.contains = Contains0.contains,
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, function SetLevel0.set_level = SetLevel0.set_level,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  axiom .
  clone Cdsat_Trail_Impl6_AbstractJustification as AbstractJustification0 with function Model0.model = Model2.model,
  predicate Contains0.contains = Contains1.contains, function TermValue0.term_value = TermValue0.term_value,
  function AbsJustInner0.abs_just_inner = AbsJustInner0.abs_just_inner, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Concrete_Solver_Type
  clone Cdsat_Trail_Impl6_Unsat as Unsat0 with predicate Unsat0.unsat = Unsat1.unsat
  use Cdsat_Concrete_Answer_Type
  clone Cdsat_Theory_Impl4_Impls as Impls0 with predicate Unsat0.unsat = Unsat1.unsat,
  predicate Invariant0.invariant' = Invariant2.invariant', function Restrict0.restrict = Restrict0.restrict,
  predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
  predicate Invariant1.invariant' = Invariant1.invariant', predicate Contains0.contains = Contains0.contains,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign, function Sort0.sort = Sort0.sort,
  function Sort1.sort = Sort1.sort, predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  axiom .
  clone Cdsat_Trail_Impl6_Invariant as Invariant0 with predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
  predicate Sound0.sound = Sound0.sound, predicate Invariant0.invariant' = Invariant1.invariant',
  function Level0.level = Level0.level, function Len0.len = Len0.len
  use prelude.IntSize
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model6 with type t = usize, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = seq usize,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model6.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = usize
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with predicate Contains0.contains = Contains0.contains,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, predicate IsBool0.is_bool = IsBool0.is_bool,
  function Negate0.negate = Negate0.negate,
  predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  use Cdsat_Concrete_BoolTheory_Type
  use Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl6_AddDecision_Interface as AddDecision0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate Acceptable0.acceptable = Acceptable0.acceptable, predicate Impls0.impls = Impls0.impls,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Cdsat_Concrete_Impl0_ResolveConflict_Interface as ResolveConflict0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model0.model, function Model1.model = Model2.model,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  function SetLevel0.set_level = SetLevel0.set_level, predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Impls0.impls = Impls0.impls, predicate Contains0.contains = Contains1.contains,
  function TermValue0.term_value = TermValue0.term_value,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len,
  predicate Unsat0.unsat = Unsat1.unsat
  clone Cdsat_Trail_Impl6_MaxLevel_Interface as MaxLevel0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model7.model, function Model1.model = Model2.model,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  function SetLevel0.set_level = SetLevel0.set_level, predicate Contains0.contains = Contains1.contains,
  function TermValue0.term_value = TermValue0.term_value,
  predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function LevelOf0.level_of = LevelOf0.level_of, function Level0.level = Level0.level, function Len0.len = Len0.len
  clone Alloc_Vec_Impl10_Deref_Interface as Deref0 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model6.model,
  function Model1.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve2 with type t = usize, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type
  use Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl1_Extend_Interface as Extend0 with predicate Invariant0.invariant' = Invariant0.invariant',
  function Model0.model = Model3.model, function Model1.model = Model4.model,
  predicate Acceptable0.acceptable = Acceptable0.acceptable, function Model2.model = Model0.model,
  function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
  function Model3.model = Model2.model, predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Impls0.impls = Impls0.impls, predicate Contains0.contains = Contains1.contains,
  function TermValue0.term_value = TermValue0.term_value, predicate Unsat0.unsat = Unsat1.unsat
  clone Cdsat_Trail_Impl6_Len_Interface as Len1 with function Model0.model = Model2.model
  let rec cfg solver [@cfg:stackify] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 4 35 57] (self : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type)) (trail : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)) : Cdsat_Concrete_Answer_Type.cdsat_concrete_answer_type
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 27 15 27 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 28 14 28 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 29 4 29 50] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( ^ trail)) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 30 14 34 5] match (result) with
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unsat_Type -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Sat_Type -> true
      | Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unknown_Type -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Concrete_Answer_Type.cdsat_concrete_answer_type;
  var self_1 : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type);
  var trail_2 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  ghost var old_trail_3 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _4 : ();
  var _5 : ();
  var _6 : ();
  var states_7 : Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type;
  var _8 : ();
  var trail_len_9 : usize;
  var _10 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var th_res_11 : Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type;
  var _12 : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type);
  var _13 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _19 : Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type;
  var _20 : ();
  var _21 : isize;
  var c_22 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _23 : ();
  var _24 : bool;
  var _25 : usize;
  var _26 : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type;
  var _27 : seq usize;
  var _28 : seq usize;
  var _29 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _30 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _31 : ();
  var _32 : ();
  var _33 : Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type;
  var _34 : borrowed (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type);
  var _35 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _36 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var t_37 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var v_38 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _39 : Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type;
  var _40 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _41 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _42 : Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type;
  var _43 : bool;
  var _44 : isize;
  var _45 : ();
  var _46 : ();
  var _47 : isize;
  var _48 : ();
  var t_49 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var v_50 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _51 : borrowed (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type);
  var _52 : Cdsat_Trail_Term_Type.cdsat_trail_term_type;
  var _53 : Cdsat_Trail_Value_Type.cdsat_trail_value_type;
  var _54 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    goto BB0
  }
  BB0 {
    _4 <- ();
    old_trail_3 <- ghost ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 36 24 36 40] trail_2);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant tl_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 40 28 40 45] Invariant0.invariant' ( * trail_2) };
    invariant proph { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 41 27 41 48]  ^ trail_2 =  ^ old_trail_3 };
    invariant sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 40 8 40 47] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * old_trail_3)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) };
    goto BB3
  }
  BB3 {
    invariant tl_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 52 32 52 49] Invariant0.invariant' ( * trail_2) };
    invariant proph { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 53 31 53 52]  ^ trail_2 =  ^ old_trail_3 };
    invariant sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 52 12 52 51] Impls0.impls (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * old_trail_3)) (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2)) };
    _10 <-  * trail_2;
    trail_len_9 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 32 57 43] Len1.len _10);
    goto BB4
  }
  BB4 {
    _12 <- borrow_mut (Cdsat_Concrete_Solver_Type.cdsat_concrete_solver_type_Solver_bool_th ( * self_1));
    self_1 <- { self_1 with current = (let Cdsat_Concrete_Solver_Type.Cdsat_Concrete_Solver_Type a =  * self_1 in Cdsat_Concrete_Solver_Type.Cdsat_Concrete_Solver_Type ( ^ _12)) };
    _13 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _13) };
    th_res_11 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 29 58 55] Extend0.extend _12 _13);
    goto BB5
  }
  BB5 {
    _16 <- trail_len_9;
    _18 <-  * trail_2;
    _17 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 59 32 59 43] Len1.len _18);
    goto BB6
  }
  BB6 {
    _15 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 59 19 59 43] _16 <> _17);
    switch (_15)
      | False -> goto BB10
      | _ -> goto BB7
      end
  }
  BB7 {
    _19 <- Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Unknown_Type;
    states_7 <- _19;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _14 <- ();
    goto BB11
  }
  BB10 {
    _14 <- ();
    goto BB11
  }
  BB11 {
    switch (th_res_11)
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type _ -> goto BB14
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type _ _ -> goto BB24
      | Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Satisfied_Type -> goto BB12
      end
  }
  BB12 {
    _42 <- Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Sat_Type;
    states_7 <- _42;
    goto BB29
  }
  BB13 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    absurd
  }
  BB14 {
    assume { Resolve2.resolve c_22 };
    c_22 <- Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type_Conflict_0 th_res_11;
    th_res_11 <- (let Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type a = th_res_11 in Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Conflict_Type (any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)));
    _26 <-  * trail_2;
    _30 <- c_22;
    _29 <- _30;
    _28 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 65 43 65 45] Deref0.deref _29);
    goto BB15
  }
  BB15 {
    _27 <- _28;
    _25 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 65 27 65 46] MaxLevel0.max_level _26 _27);
    goto BB16
  }
  BB16 {
    _24 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 65 27 65 51] _25 = (0 : usize));
    switch (_24)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB17 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 66 42 66 110] Fail20.fail2 (Cdsat_Theory_Normal_Type.Cdsat_Theory_Normal_Type (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost ( * trail_2))) (AbstractJustification0.abstract_justification ( * trail_2) (Model0.model c_22)) };
    goto BB18
  }
  BB18 {
    _32 <- ();
    _0 <- Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Unsat_Type;
    goto BB45
  }
  BB19 {
    _23 <- ();
    _33 <- Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Unknown_Type;
    states_7 <- _33;
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    _34 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _34) };
    _35 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _35) };
    assume { Resolve2.resolve _36 };
    _36 <- c_22;
    c_22 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _20 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 72 24 72 55] ResolveConflict0.resolve_conflict _34 _35 _36);
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB31
  }
  BB24 {
    t_37 <- Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type_Decision_0 th_res_11;
    th_res_11 <- (let Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type a b = th_res_11 in Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type (any Cdsat_Trail_Term_Type.cdsat_trail_term_type) b);
    v_38 <- Cdsat_Concrete_ExtendResult_Type.cdsat_concrete_extendresult_type_Decision_1 th_res_11;
    th_res_11 <- (let Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type a b = th_res_11 in Cdsat_Concrete_ExtendResult_Type.Cdsat_Concrete_ExtendResult_Decision_Type a (any Cdsat_Trail_Value_Type.cdsat_trail_value_type));
    _40 <- t_37;
    t_37 <- any Cdsat_Trail_Term_Type.cdsat_trail_term_type;
    _41 <- v_38;
    v_38 <- any Cdsat_Trail_Value_Type.cdsat_trail_value_type;
    _39 <- Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type _40 _41;
    goto BB25
  }
  BB25 {
    states_7 <- _39;
    goto BB26
  }
  BB26 {
    _20 <- ();
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB31
  }
  BB29 {
    _20 <- ();
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    switch (states_7)
      | Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Sat_Type -> goto BB33
      | Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type _ _ -> goto BB33
      | _ -> goto BB32
      end
  }
  BB32 {
    _43 <- false;
    goto BB34
  }
  BB33 {
    _43 <- true;
    goto BB34
  }
  BB34 {
    switch (_43)
      | False -> goto BB36
      | _ -> goto BB35
      end
  }
  BB35 {
    _8 <- ();
    goto BB38
  }
  BB36 {
    _6 <- ();
    goto BB37
  }
  BB37 {
    goto BB3
  }
  BB38 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 83 28 83 45] Invariant0.invariant' ( * trail_2) };
    _46 <- ();
    switch (states_7)
      | Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Sat_Type -> goto BB40
      | Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type _ _ -> goto BB41
      | _ -> goto BB39
      end
  }
  BB39 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    absurd
  }
  BB40 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    _0 <- Cdsat_Concrete_Answer_Type.Cdsat_Concrete_Answer_Sat_Type;
    goto BB47
  }
  BB41 {
    t_49 <- Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type_Decision_0 states_7;
    states_7 <- (let Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type a b = states_7 in Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type (any Cdsat_Trail_Term_Type.cdsat_trail_term_type) b);
    v_50 <- Cdsat_Concrete_TheoryState_Type.cdsat_concrete_theorystate_type_Decision_1 states_7;
    states_7 <- (let Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type a b = states_7 in Cdsat_Concrete_TheoryState_Type.Cdsat_Concrete_TheoryState_Decision_Type a (any Cdsat_Trail_Value_Type.cdsat_trail_value_type));
    _51 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _51) };
    _52 <- t_49;
    t_49 <- any Cdsat_Trail_Term_Type.cdsat_trail_term_type;
    _53 <- v_50;
    v_50 <- any Cdsat_Trail_Value_Type.cdsat_trail_value_type;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 90 47 90 71] AddDecision0.add_decision _51 _52 _53);
    goto BB42
  }
  BB42 {
    goto BB43
  }
  BB43 {
    goto BB44
  }
  BB44 {
    goto BB2
  }
  BB45 {
    assume { Resolve2.resolve c_22 };
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB48
  }
  BB48 {
    return _0
  }
  
end
module Core_Result_Result_Type
  type core_result_result_type 't 'e =
    | Core_Result_Result_Ok_Type 't
    | Core_Result_Result_Err_Type 'e
    
end
module Cdsat_Concrete_Impl1_Eval_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Value_Type
  use Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  val eval [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (tm : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Result_Result_Type.core_result_result_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type), Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
end
module Cdsat_Concrete_Impl1_Eval
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type
  use Cdsat_Trail_Value_Type
  use Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type
  val eval [@cfg:stackify] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.cdsat_concrete_booltheory_type)) (tl : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (tm : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : Core_Result_Result_Type.core_result_result_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type), Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Term_Type.cdsat_trail_term_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
end
module Cdsat_Trail_AssignmentModel_Type
  use mach.int.Int
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  type cdsat_trail_assignmentmodel_type  =
    | Cdsat_Trail_AssignmentModel_Type (Cdsat_Theory_Term_Type.cdsat_theory_term_type) (Cdsat_Theory_Value_Type.cdsat_theory_value_type) (Cdsat_Trail_ReasonModel_Type.cdsat_trail_reasonmodel_type) int
    
end
module Cdsat_Trail_Impl0_ModelTy_Type
  use Cdsat_Trail_AssignmentModel_Type
  type modelTy  =
    Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
end
module Cdsat_Trail_Impl0_Model_Interface
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  function model (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
    
end
module Cdsat_Trail_Impl0_Model
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  use mach.int.UInt64
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model_Interface as Model2
  clone Cdsat_Trail_Impl4_Model_Interface as Model1
  clone Cdsat_Trail_Impl3_Model_Interface as Model0
  function model [#"/Users/xavier/Code/cdsat/src/trail.rs" 25 4 25 35] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : Cdsat_Trail_AssignmentModel_Type.cdsat_trail_assignmentmodel_type
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 26 20 26 113] Cdsat_Trail_AssignmentModel_Type.Cdsat_Trail_AssignmentModel_Type (Model0.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_term self)) (Model1.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_val self)) (Model2.model (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_reason self)) (UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level self))
end
module Cdsat_Trail_Impl0
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl3_Model as Model2 with function Model0.model = Model5.model,
  function Model1.model = Model3.model
  use Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_AssignmentModel_Type
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  clone Cdsat_Trail_Impl0_Model as Model0 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type modelTy = ModelTy0.modelTy
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module CreusotContracts_Logic_Model_Impl2_ModelTy_Type
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Impl2_ModelTy_Type as ModelTy1 with type t = t, type a = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : t) (other : t) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module CreusotContracts_Logic_Int_Impl16_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module Core_Cmp_Impls_Impl25_Eq_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl16_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = uint64,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : uint64) (other : uint64) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module CreusotContracts_Logic_Model_Impl5_ModelTy_Type
  type modelTy  =
    bool
end
module Core_Cmp_Impls_Impl19_Eq_Interface
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Impl5_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = bool,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : bool) (other : bool) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module Core_Cmp_Impls_Impl25
  
end
module Core_Cmp_Impls_Impl19
  
end
module CreusotContracts_Logic_Int_Impl16
  
end
module CreusotContracts_Logic_Model_Impl5
  
end
module CreusotContracts_Logic_Int_Impl16_Model_Interface
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl16_Model
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int =
    UInt64.to_int self
end
module CreusotContracts_Logic_Model_Impl5_Model_Interface
  function model (self : bool) : bool
end
module CreusotContracts_Logic_Model_Impl5_Model
  function model (self : bool) : bool =
    self
end
module Cdsat_Trail_Impl26_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) (rhs : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 16 111 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl18_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Sort_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) (rhs : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 67 16 67 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl20_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = usize,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : usize) (other : usize) : bool
    ensures { result = (Model0.model self = Model0.model other) }
    
end
module Alloc_Boxed_Impl14
  type t
  type a
end
module Cdsat_Trail_Impl26
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl4_Model as Model1
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type rhs = Cdsat_Trail_Value_Type.cdsat_trail_value_type
  clone Cdsat_Trail_Impl26_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type rhs = Cdsat_Trail_Value_Type.cdsat_trail_value_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl18
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model1
  clone Cdsat_Trail_Impl2_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type rhs = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type
  clone Cdsat_Trail_Impl18_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  type rhs = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl21
  
end
module CreusotContracts_Logic_Model_Impl2
  type t
  type a
end
module CreusotContracts_Logic_Model_Impl2_Model_Interface
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl2_Model
  type t
  type a
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Cdsat_Trail_Impl22_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Term_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) (rhs : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 84 16 84 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl22
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl2_Model as Model2
  use Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl3_Model as Model1 with function Model0.model = Model2.model,
  function Model1.model = Model3.model
  clone Cdsat_Trail_Impl3_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type rhs = Cdsat_Trail_Term_Type.cdsat_trail_term_type
  clone Cdsat_Trail_Impl22_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  type rhs = Cdsat_Trail_Term_Type.cdsat_trail_term_type, val eq = Eq0.eq, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl10_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentModel_Type
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) (rhs : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 9 16 9 25] result = (Model0.model self = Model0.model rhs) }
    
end
module Cdsat_Trail_Impl12_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type) : ()
end
module Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Reason_Type.cdsat_trail_reason_type) : ()
end
module Cdsat_Trail_Impl20_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Sort_Type.cdsat_trail_sort_type) : ()
end
module Cdsat_Trail_Impl24_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Term_Type.cdsat_trail_term_type) : ()
end
module Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type
  val assert_receiver_is_total_eq [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : ()
end
module Cdsat_Trail_Impl5_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl4_ModelTy_Type as ModelTy0
  use Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val bool [@cfg:stackify] (self : Cdsat_Trail_Value_Type.cdsat_trail_value_type) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 131 15 131 32] IsBool0.is_bool (Model0.model self)}
    
end
module Cdsat_Trail_Impl6_New_Interface
  use Cdsat_Theory_Trail_Type
  use Cdsat_Trail_Trail_Type
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound0
  clone Cdsat_Trail_Impl6_Invariant_Interface as Invariant0
  val new [@cfg:stackify] (inputs : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Cdsat_Trail_Term_Type.cdsat_trail_term_type, Cdsat_Trail_Value_Type.cdsat_trail_value_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 169 14 169 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 170 4 170 36] Sound0.sound (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost result) }
    
end
module Cdsat_Theory_Impl4_Sat_Interface
  use Cdsat_Theory_Trail_Type
  predicate sat (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
end
module Cdsat_Theory_Impl4_Sat
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Interface as SatisfiedBy0
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 454 4 454 28] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 455 8 455 56] exists m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfiedBy0.satisfied_by self m
end
module Cdsat_Trail_Impl6_Sat_Interface
  use Cdsat_Trail_Trail_Type
  predicate sat (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
end
module Cdsat_Trail_Impl6_Sat
  use Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sat_Interface as Sat0
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 200 4 200 28] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 199 4 199 16] Sat0.sat (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self)
end
module Cdsat_Trail_Impl6_RelateBetween_Interface
  use mach.int.Int
  use Cdsat_Trail_Trail_Type
  predicate relate_between (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (low : int) (up : int)
end
module Cdsat_Trail_Impl6_RelateBetween
  use mach.int.Int
  use Cdsat_Trail_Trail_Type
  use seq.Seq
  use mach.int.UInt64
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  use Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Trail_Impl8_TermValue_Interface as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate relate_between [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 54] (self : Cdsat_Trail_Trail_Type.cdsat_trail_trail_type) (low : int) (up : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 12 238 142] (forall i : (int) . low <= i /\ i < up -> Contains0.contains (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i))) /\ (forall i : (int) . low <= i /\ i < up -> LevelOf0.level_of (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_ghost self) (TermValue0.term_value (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i)) = UInt64.to_int (Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type_Assignment_level (Seq.get (Model0.model (Cdsat_Trail_Trail_Type.cdsat_trail_trail_type_Trail_assignments self)) i)))
end
module Cdsat_Theory_Impl3_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  function resolve_sound (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl3_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 154 4 159 5] (self : Cdsat_Theory_Model_Type.cdsat_theory_model_type) (cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 149 4 149 12] ()
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.cdsat_theory_model_type, cflct : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), just : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 151 15 151 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 152 15 152 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 153 14 153 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl4_SetLevelMax_Interface
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level_max (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMax
  use mach.int.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 77] (self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type) (set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 222 4 222 12] ()
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.cdsat_theory_trail_type, set : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), elem : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 223 15 223 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 224 4 224 90] forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 225 14 225 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl5_Decide_Interface
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate decide (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
end
module Cdsat_Theory_Impl5_Decide
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Acceptable_Interface as Acceptable0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 556 4 556 63] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (t : Cdsat_Theory_Term_Type.cdsat_theory_term_type) (val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type) (tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 4 550 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt = Cdsat_Theory_Trail_Type.Cdsat_Theory_Trail_Assign_Type (Cdsat_Theory_Assign_Type.Cdsat_Theory_Assign_Decision_Type t val') (Level0.level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) + 1) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, t : Cdsat_Theory_Term_Type.cdsat_theory_term_type, val' : Cdsat_Theory_Value_Type.cdsat_theory_value_type, tgt : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 551 15 551 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 552 15 552 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 555 4 555 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 554 4 554 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 553 4 553 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 tgt))
end
module Cdsat_Theory_Impl5_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate fail (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
end
module Cdsat_Theory_Impl5_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 592 4 592 71] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 593 8 600 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (a, _, _) = just in a) = 0
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 590 15 590 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 591 4 591 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self))
end
module Cdsat_Theory_Impl5_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate conflict_solve (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl5_ConflictSolve
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains1 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains1.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains0 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Interface as Insert0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl1_Negate_Interface as Negate0 with predicate IsBool0.is_bool = IsBool0.is_bool, axiom .
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 96] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 627 8 637 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) not_l /\ (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, just : (Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 621 15 621 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 625 4 625 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 623 4 623 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  predicate conflict_solve2 (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl5_ConflictSolve2
  use set.Fset
  use Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Interface as Unsat0
  use Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl4_Impls_Interface as Impls0 with predicate Unsat0.unsat = Unsat0.unsat, axiom .
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound1
  clone Cdsat_Theory_Impl5_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant0
  use mach.int.Int
  use mach.int.Int32
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Interface as Sort1
  clone Cdsat_Theory_Impl0_Sort_Interface as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Interface as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Interface as Contains1 with predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
  function Sort0.sort = Sort0.sort, function Sort1.sort = Sort1.sort, axiom .
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 648 4 648 86] (self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type) (conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 650 10 653 43] (forall j : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) j) /\ (forall m : (Cdsat_Theory_Model_Type.cdsat_theory_model_type) . SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) conflict
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.cdsat_theory_normal_type, conflict : Fset.fset (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 643 15 643 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 644 15 644 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.cdsat_theory_normal_type_Normal_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 646 4 646 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 645 4 645 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Theory_Impl6_ConflictSize_Interface
  use Cdsat_Theory_Conflict_Type
  function conflict_size (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : ()
end
module Cdsat_Theory_Impl6_ConflictSize
  use Cdsat_Theory_Conflict_Type
  function conflict_size [#"/Users/xavier/Code/cdsat/src/theory.rs" 685 4 685 36] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 681 4 681 12] ()
end
module Cdsat_Theory_Impl6_Resolve_Interface
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  predicate resolve (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
end
module Cdsat_Theory_Impl6_Resolve
  use Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl4_Invariant_Interface as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Interface as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Interface as Invariant0
  use map.Const
  use mach.int.Int
  use set.Fset
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with axiom .
  clone Cdsat_Theory_Impl4_Level_Interface as Level0 with function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Interface as InvariantNonneg0
  use Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Interface as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Interface as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Interface as Invariant2
  clone Cdsat_Theory_Impl4_Sound_Interface as Sound1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Interface as Remove0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_LevelOf_Interface as LevelOf0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Interface as Contains0 with type t = (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
  predicate Contains0.contains = Contains0.contains, function LevelOf0.level_of = LevelOf0.level_of,
  function Level0.level = Level0.level, function Len0.len = Len0.len, axiom .
  clone Cdsat_Theory_Impl1_IsBool_Interface as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Interface as IsJustified0
  clone Cdsat_Theory_Impl3_ResolveSound_Interface as ResolveSound0 with predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
  predicate Satisfies0.satisfies = Satisfies0.satisfies, predicate Contains0.contains = Contains0.contains,
  function Remove0.remove = Remove0.remove, axiom .
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with predicate IsJustified0.is_justified = IsJustified0.is_justified,
  predicate Sound0.sound = Sound1.sound, predicate Invariant0.invariant' = Invariant2.invariant',
  predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set, predicate Satisfies0.satisfies = Satisfies0.satisfies,
  axiom .
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 693 4 693 61] (self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type) (a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) (tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 694 8 701 11] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.Cdsat_Theory_Model_Type (Const.const (Cdsat_Theory_Value_Type.Cdsat_Theory_Value_Bool_Type false))) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) just a in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a /\ (forall a : ((Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type)) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self)) /\ Contains0.contains (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a /\ tgt = Cdsat_Theory_Conflict_Type.Cdsat_Theory_Conflict_Type (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_1 self) a) just)
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type, a : (Cdsat_Theory_Term_Type.cdsat_theory_term_type, Cdsat_Theory_Value_Type.cdsat_theory_value_type), tgt : Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 689 15 689 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 690 15 690 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 44] resolve self a tgt -> Invariant1.invariant' (Cdsat_Theory_Conflict_Type.cdsat_theory_conflict_type_Conflict_0 tgt))
end
module Cdsat_Trail_Impl10
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model6 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl2_Model as Model5
  use Cdsat_Theory_Var_Type
  use Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl1_Model as Model4 with function Model0.model = Model6.model
  clone Cdsat_Trail_Impl4_Model as Model3
  clone Cdsat_Trail_Impl3_Model as Model2 with function Model0.model = Model5.model,
  function Model1.model = Model3.model
  use Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl0_Model as Model1 with function Model0.model = Model2.model,
  function Model1.model = Model3.model, function Model2.model = Model4.model
  clone Cdsat_Trail_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Ne_Interface as Ne0 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type rhs = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type
  clone Cdsat_Trail_Impl10_Eq_Interface as Eq0 with function Model0.model = Model0.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  type rhs = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type, val eq = Eq0.eq,
  function Model0.model = Model0.model, function Model1.model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
end
module Cdsat_Trail_Impl11
  
end
module Cdsat_Trail_Impl15
  
end
module Cdsat_Trail_Impl19
  
end
module Cdsat_Trail_Impl23
  
end
module Cdsat_Trail_Impl27
  
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self
  use prelude.Borrow
  val assert_receiver_is_total_eq [@cfg:stackify] (self : self) : ()
    requires {false}
    
end
module Cdsat_Trail_Impl12
  use Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl12_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Assignment_Type.cdsat_trail_assignment_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl16
  use Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Reason_Type.cdsat_trail_reason_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl20
  use Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl20_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Sort_Type.cdsat_trail_sort_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl24
  use Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl24_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Term_Type.cdsat_trail_term_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
module Cdsat_Trail_Impl28
  use Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl28_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq0
  clone Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface as AssertReceiverIsTotalEq1 with type self = Cdsat_Trail_Value_Type.cdsat_trail_value_type,
  val assert_receiver_is_total_eq = AssertReceiverIsTotalEq0.assert_receiver_is_total_eq
end
