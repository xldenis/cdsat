
module Cdsat_Concrete_BoolTheory_Type
  type t_booltheory  =
    | C_BoolTheory
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  type t_solver  =
    | C_Solver (Cdsat_Concrete_BoolTheory_Type.t_booltheory)
    
  let function solver_bool_th (self : t_solver) : Cdsat_Concrete_BoolTheory_Type.t_booltheory
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver a -> a
      end
end
module Cdsat_Concrete_Impl0_New_Interface
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 26 4 26 24] (_1' : ()) : Cdsat_Concrete_Solver_Type.t_solver
end
module Cdsat_Concrete_Impl0_New
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  let rec cfg new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 26 4 26 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : Cdsat_Concrete_Solver_Type.t_solver
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Concrete_Solver_Type.t_solver;
  var _1 : Cdsat_Concrete_BoolTheory_Type.t_booltheory;
  {
    goto BB0
  }
  BB0 {
    _1 <- Cdsat_Concrete_BoolTheory_Type.C_BoolTheory;
    _0 <- Cdsat_Concrete_Solver_Type.C_Solver _1;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Cdsat_Trail_Sort_Type
  type t_sort  =
    | C_Boolean
    | C_Rational
    
end
module Cdsat_Trail_Value_Type
  use prelude.Int
  use prelude.UInt64
  type t_value  =
    | C_Bool bool
    | C_Rat uint64
    
  let function rat_0 (self : t_value) : uint64 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool _ -> any uint64
      | C_Rat a -> a
      end
  let function bool_0 (self : t_value) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool a -> a
      | C_Rat _ -> any bool
      end
end
module Cdsat_Trail_Term_Type
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  type t_term  =
    | C_Variable usize (Cdsat_Trail_Sort_Type.t_sort)
    | C_Value (Cdsat_Trail_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    | C_Neg (t_term)
    | C_Disj (t_term) (t_term)
    | C_Impl (t_term) (t_term)
    
  let function impl_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl a _ -> a
      end
  let function impl_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ a -> a
      end
  let function disj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj a _ -> a
      | C_Impl _ _ -> any t_term
      end
  let function disj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ a -> a
      | C_Impl _ _ -> any t_term
      end
  let function neg_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg a -> a
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj a _ -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Conj _ a -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq a _ -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Eq _ a -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function plus_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus a _ -> a
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function plus_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ a -> a
      | C_Eq _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function value_0 (self : t_term) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Value a -> a
      | C_Plus _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Eq _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Conj _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Neg _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Disj _ _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Impl _ _ -> any Cdsat_Trail_Value_Type.t_value
      end
  let function variable_0 (self : t_term) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable a _ -> a
      | C_Value _ -> any usize
      | C_Plus _ _ -> any usize
      | C_Eq _ _ -> any usize
      | C_Conj _ _ -> any usize
      | C_Neg _ -> any usize
      | C_Disj _ _ -> any usize
      | C_Impl _ _ -> any usize
      end
  let function variable_1 (self : t_term) : Cdsat_Trail_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ a -> a
      | C_Value _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Plus _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Eq _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Conj _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Neg _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Disj _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      | C_Impl _ _ -> any Cdsat_Trail_Sort_Type.t_sort
      end
end
module Cdsat_Trail_TrailIndex_Type
  use prelude.Int
  use prelude.UIntSize
  type t_trailindex  =
    | C_TrailIndex usize usize
    
  let function trailindex_0 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex a _ -> a
      end
  let function trailindex_1 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex _ a -> a
      end
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_reason  =
    | C_Justified (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision
    | C_Input
    
  let function justified_0 (self : t_reason) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Justified a -> a
      | C_Decision -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Input -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module Cdsat_Trail_Assignment_Type
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  type t_assignment  =
    | C_Assignment (Cdsat_Trail_Term_Type.t_term) (Cdsat_Trail_Value_Type.t_value) (Cdsat_Trail_Reason_Type.t_reason) usize
    
  let function assignment_term (self : t_assignment) : Cdsat_Trail_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment a _ _ _ -> a
      end
  let function assignment_val (self : t_assignment) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ a _ _ -> a
      end
  let function assignment_reason (self : t_assignment) : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ a _ -> a
      end
  let function assignment_level (self : t_assignment) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type t_sort  =
    | C_Rational
    | C_Boolean
    
end
module Cdsat_Theory_Var_Type
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  type t_var  =
    | C_Var int (Cdsat_Theory_Sort_Type.t_sort)
    
  let function var_1 (self : t_var) : Cdsat_Theory_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Var _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use prelude.Int
  type t_value  =
    | C_Bool bool
    | C_Rat int
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_term  =
    | C_Variable (Cdsat_Theory_Var_Type.t_var)
    | C_Value (Cdsat_Theory_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assign  =
    | C_Decision (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Justified (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Input (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Trail_Type
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  type t_trail  =
    | C_Empty
    | C_Assign (Cdsat_Theory_Assign_Type.t_assign) int (t_trail)
    
end
module Cdsat_Trail_Trail_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_trail  =
    | C_Trail (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) usize (Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail))
    
  let function trail_assignments (self : t_trail) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail a _ _ -> a
      end
  let function trail_ghost (self : t_trail) : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ _ a -> a
      end
  let function trail_level (self : t_trail) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ a _ -> a
      end
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module Cdsat_Trail_Impl15_Contains_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 440 4 440 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl15_Contains_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 440 4 440 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl15_Contains
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 440 4 440 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 442 12 442 92] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix) < Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) /\ UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) < Seq.length (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix))))
  val contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 440 4 440 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { result = contains self ix }
    
end
module Cdsat_Trail_Impl4_ShallowModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl4_ShallowModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl4_ShallowModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 109 8 112 9] match (self) with
      | Cdsat_Trail_Sort_Type.C_Boolean -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Trail_Sort_Type.C_Rational -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 50] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl8_ShallowModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 212 4 212 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl8_ShallowModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 212 4 212 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl8_ShallowModel
  use prelude.UInt64
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 212 4 212 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 213 8 216 9] match (self) with
      | Cdsat_Trail_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool b
      | Cdsat_Trail_Value_Type.C_Rat r -> Cdsat_Theory_Value_Type.C_Rat (UInt64.to_int r)
      end
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 212 4 212 50] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl6_ShallowModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 148 4 148 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl6_ShallowModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 148 4 148 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl6_ShallowModel
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 148 4 148 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 149 8 167 9] match (self) with
      | Cdsat_Trail_Term_Type.C_Variable v s -> Cdsat_Theory_Term_Type.C_Variable (Cdsat_Theory_Var_Type.C_Var (UIntSize.to_int v) (ShallowModel0.shallow_model s))
      | Cdsat_Trail_Term_Type.C_Value v -> Cdsat_Theory_Term_Type.C_Value (ShallowModel1.shallow_model v)
      | Cdsat_Trail_Term_Type.C_Plus l r -> Cdsat_Theory_Term_Type.C_Plus (shallow_model l) (shallow_model r)
      | Cdsat_Trail_Term_Type.C_Eq l r -> Cdsat_Theory_Term_Type.C_Eq (shallow_model l) (shallow_model r)
      | Cdsat_Trail_Term_Type.C_Conj l r -> Cdsat_Theory_Term_Type.C_Conj (shallow_model l) (shallow_model r)
      | _ -> Cdsat_Theory_Term_Type.C_Value (Cdsat_Theory_Value_Type.C_Bool true)
      end
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 148 4 148 50] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl18_TermValue_Stub
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 757 4 757 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl18_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 757 4 757 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl18_TermValue
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 757 4 757 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 758 8 758 61] (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term self), ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self))
  val term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 757 4 757 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = term_value self }
    
end
module Cdsat_Trail_Impl15_IndexLogic_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 4 692 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl15_IndexLogic_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 4 692 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl15_IndexLogic
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl18_TermValue_Stub as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 4 692 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 694 12 694 61] TermValue0.term_value (Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)))
  val index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 4 692 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = index_logic self ix }
    
end
module Cdsat_Theory_Impl1_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 52 8 55 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Value_Type.C_Rat _ -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 51 4 51 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl0_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 8 21 9] match (self) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Cdsat_Theory_Var_Type.var_1 v
      | Cdsat_Theory_Term_Type.C_Value v -> Sort1.sort v
      | Cdsat_Theory_Term_Type.C_Plus _ _ -> Cdsat_Theory_Sort_Type.C_Rational
      | Cdsat_Theory_Term_Type.C_Eq _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Conj _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 14 4 14 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl2_Invariant_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign)
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign)
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 83 8 87 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.C_Justified _ t v -> Sort0.sort t = Sort1.sort v /\ Sort0.sort t = Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Assign_Type.C_Input t v -> Sort0.sort t = Sort1.sort v
      end
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 4 82 34] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_InvariantAssign_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantAssign
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Stub as Invariant0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 264 8 267 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
  val invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_assign self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Cdsat_Theory_Impl2_ToPair_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 92 8 96 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Input t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Justified _ t val' -> (t, val')
      end
  val to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 91 4 91 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = to_pair self }
    
end
module Cdsat_Theory_Impl4_Len_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 4 479 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl4_Len_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 4 479 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 478 14 478 25] len self >= 0
end
module Cdsat_Theory_Impl4_Len
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 4 479 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 480 8 483 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> len tl + 1
      end
  val len [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 4 479 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { result = len self }
    
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 478 14 478 25] len self >= 0
end
module Cdsat_Theory_Impl4_Len_Impl
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  let rec ghost function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 479 4 479 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 478 14 478 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 480 8 483 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> len tl + 1
      end
end
module Cdsat_Theory_Impl4_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl4_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 466 14 466 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 465 14 465 25] level self >= 0)
end
module Cdsat_Theory_Impl4_Level
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 469 8 473 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> level tl
      end
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { result = level self }
    
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 466 14 466 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 465 14 465 25] level self >= 0)
end
module Cdsat_Theory_Impl4_Level_Impl
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  let rec ghost function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 465 14 465 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 466 14 466 34] result <= Len0.len self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 469 8 473 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> level tl
      end
end
module Cdsat_Theory_Impl4_InvariantNonneg_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantNonneg
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 256 8 259 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
  val invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 255 4 255 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_nonneg self }
    
end
module Cdsat_Theory_Impl4_Find_Stub
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
end
module Cdsat_Theory_Impl4_Find_Interface
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 366 4 366 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 365 4 365 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 361 14 364 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Find
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 368 8 377 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Core_Option_Option_Type.C_None
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.C_Some (a, l)
      else
        find tl d
      
      end
  val find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { result = find self d }
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 366 4 366 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 365 4 365 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 361 14 364 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Find_Impl
  use prelude.Int
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec ghost function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 367 4 367 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 14 364 5] match (result) with
      | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 365 4 365 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 366 4 366 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 368 8 377 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Core_Option_Option_Type.C_None
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        Core_Option_Option_Type.C_Some (a, l)
      else
        find tl d
      
      end
end
module Cdsat_Theory_Impl4_Contains_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_Contains_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 333 4 333 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_Contains
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 8 338 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some ix -> true
      | Core_Option_Option_Type.C_None -> false
      end
  val contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = contains self d }
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 333 4 333 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_Contains_Impl
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 334 4 334 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 333 4 333 87] InvariantAssign0.invariant_assign self -> result = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 8 338 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some ix -> true
      | Core_Option_Option_Type.C_None -> false
      end
end
module Cdsat_Theory_Impl4_LevelOf_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl4_LevelOf_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 324 14 324 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Theory_Impl4_LevelOf
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 326 8 329 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (_, l) -> l
      | Core_Option_Option_Type.C_None -> 0
      end
  val level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self}
    ensures { result = level_of self d }
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 324 14 324 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Theory_Impl4_LevelOf_Impl
  use prelude.Int
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 325 4 325 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 323 15 323 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 324 14 324 51] result >= 0 /\ result <= Level0.level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 326 8 329 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (_, l) -> l
      | Core_Option_Option_Type.C_None -> 0
      end
end
module Cdsat_Trail_Impl14_LevelLog_Stub
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
end
module Cdsat_Trail_Impl14_LevelLog_Interface
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
end
module Cdsat_Trail_Impl14_LevelLog
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 342 4 342 12] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 self)
  val level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    ensures { result = level_log self }
    
end
module Cdsat_Trail_Impl15_AbstractRelation_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 431 4 431 38] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl15_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 431 4 431 38] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl15_AbstractRelation
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl14_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 431 4 431 38] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 12 435 160] (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ LevelLog0.level_log ix = LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a /\ IndexLogic0.index_logic self ix = a))
  val abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 431 4 431 38] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = abstract_relation self }
    
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_model  =
    | C_Model (Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value))
    
  let function model_0 (self : t_model) : Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Model a -> a
      end
end
module Cdsat_Theory_Impl3_Invariant_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model)
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model)
end
module Cdsat_Theory_Impl3_Invariant
  use map.Map
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 116 8 118 9] forall v : Cdsat_Theory_Value_Type.t_value . forall k : Cdsat_Theory_Var_Type.t_var . Map.get (Cdsat_Theory_Model_Type.model_0 self) k = v -> Cdsat_Theory_Var_Type.var_1 k = Sort0.sort v
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 115 4 115 34] (self : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Stub
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 226 59 227 4] Fset.mem e self
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Cdsat_Theory_Impl3_Interp_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl3_Interp_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Interp
  use map.Map
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 124 8 136 9] match (t) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Map.get (Cdsat_Theory_Model_Type.model_0 self) v
      | Cdsat_Theory_Term_Type.C_Value v -> v
      | Cdsat_Theory_Term_Type.C_Plus l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Rat r1, Cdsat_Theory_Value_Type.C_Rat r2) -> Cdsat_Theory_Value_Type.C_Rat (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.C_Rat (- 1)
        end
      | Cdsat_Theory_Term_Type.C_Conj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Eq l r -> Cdsat_Theory_Value_Type.C_Bool (interp self l = interp self r)
      end
  val interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    ensures { result = interp self t }
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Interp_Impl
  use map.Map
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort
  let rec ghost function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 123 4 123 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 4 122 62] Invariant0.invariant' self -> Sort0.sort result = Sort1.sort t }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 124 8 136 9] match (t) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Map.get (Cdsat_Theory_Model_Type.model_0 self) v
      | Cdsat_Theory_Term_Type.C_Value v -> v
      | Cdsat_Theory_Term_Type.C_Plus l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Rat r1, Cdsat_Theory_Value_Type.C_Rat r2) -> Cdsat_Theory_Value_Type.C_Rat (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.C_Rat (- 1)
        end
      | Cdsat_Theory_Term_Type.C_Conj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 && b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Eq l r -> Cdsat_Theory_Value_Type.C_Bool (let b = interp self r in let a = interp self l in pure {a = b})
      end
end
module Cdsat_Theory_Impl3_Satisfies_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Satisfies_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Satisfies
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Stub as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 8 141 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
  val satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 140 4 140 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfies self v }
    
end
module Cdsat_Theory_Impl3_SatisfySet_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 146 8 146 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains v a -> Satisfies0.satisfies self a
  val satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 145 4 145 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfy_set self v }
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 101 8 106 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Justified just t val' -> forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
  val justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 4 100 40] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = justified_sound self }
    
end
module Cdsat_Theory_Impl4_Sound_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Sound_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Sound
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 189 8 192 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sound self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Stub
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 255 13 255 31] Fset.remove a self
  val remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
    ensures { result = remove self a }
    
end
module Cdsat_Theory_Impl4_SetLevel_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl4_SetLevel_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 210 14 210 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 209 14 209 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 208 4 208 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 207 4 207 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_SetLevel
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self}
    ensures { result = set_level self s }
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 204 4 204 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 210 14 210 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 209 14 209 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 208 4 208 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 207 4 207 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_SetLevel_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  let rec ghost function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 206 15 206 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 207 4 207 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 208 4 208 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 209 14 209 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 210 14 210 36] result <= Level0.level self }
    variant {[#"/Users/xavier/Code/cdsat/src/theory.rs" 205 14 205 21] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 204 4 204 12] if pure {Fset.cardinal s = 0} then
      0
    else
      if pure {Fset.cardinal s = 1} then
        LevelOf0.level_of self (Fset.pick s)
      else
        let a = Fset.pick s in let rec' = let b' = Remove0.remove s a in set_level self b' in if let a = LevelOf0.level_of self a in pure {a >= rec'} then
          LevelOf0.level_of self a
        else
          rec'
        
      
    
end
module Cdsat_Theory_Impl4_InvariantLevel_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantLevel
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 241 8 251 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Input _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.C_Decision _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> SetLevel0.set_level tl j = l
        end
      end
  val invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 240 4 240 36] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_level self }
    
end
module Cdsat_Theory_Impl4_InvariantContains_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantContains
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 272 8 285 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
  val invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 271 4 271 39] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_contains self }
    
end
module Cdsat_Theory_Impl1_IsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value)
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value)
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 47 8 47 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 46 4 46 32] (self : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_Negate_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 62 8 65 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
      | _ -> self
      end
  val negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self}
    ensures { result = negate self }
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl1_Negate_Impl
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  let rec ghost function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 61 4 61 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 59 15 59 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 60 14 60 30] IsBool0.is_bool result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 62 8 65 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
      | _ -> self
      end
end
module Cdsat_Theory_Impl4_TrailUnique_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_TrailUnique
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 290 8 302 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
  val trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 4 289 33] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = trail_unique self }
    
end
module Cdsat_Theory_Impl4_Invariant_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Invariant_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Invariant
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  clone Cdsat_Theory_Impl4_InvariantContains_Stub as InvariantContains0
  clone Cdsat_Theory_Impl4_InvariantLevel_Stub as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 307 8 311 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 34] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_IsJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsJustified
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 397 8 400 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified _ _ _, _) -> true
      | _ -> false
      end
  val is_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_justified self d }
    
end
module Cdsat_Theory_Impl3_Entails_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Entails_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Entails
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 151 8 151 84] Invariant0.invariant' self -> SatisfySet0.satisfy_set self j -> Satisfies0.satisfies self c
  val entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 150 4 150 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = entails self j c }
    
end
module Cdsat_Theory_Impl4_IsInput_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsInput_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsInput
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 413 8 416 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Input _ _, _) -> true
      | _ -> false
      end
  val is_input [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 4 412 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_input self d }
    
end
module Cdsat_Theory_Impl4_IsDecision_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsDecision_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsDecision
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 405 8 408 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Decision _ _, _) -> true
      | _ -> false
      end
  val is_decision [#"/Users/xavier/Code/cdsat/src/theory.rs" 404 4 404 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_decision self d }
    
end
module Cdsat_Theory_Impl4_FindJustified_Stub
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_FindJustified_Interface
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 488 15 488 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_FindJustified
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 8 500 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else find_justified tl kv
      end
  val find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 488 15 488 32] Contains0.contains self kv}
    ensures { result = find_justified self kv }
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 488 15 488 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_FindJustified_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  let rec ghost function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 488 15 488 32] Contains0.contains self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 8 500 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = kv} then
        ()
      else
        find_justified tl kv
      
      end
end
module Cdsat_Theory_Impl4_Justification_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 385 4 385 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl4_Justification
  use set.Fset
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_FindJustified_Stub as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 388 8 388 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified j _ _, _) -> j
      | _ -> Fset.empty 
      end
  val justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self}
    ensures { result = justification self d }
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 385 4 385 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl4_Justification_Impl
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 4 387 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 381 15 381 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 382 15 382 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 383 15 383 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 384 4 384 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m result d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 385 4 385 58] IsInput0.is_input self d -> result = Fset.empty  }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 61] IsDecision0.is_decision self d -> result = Fset.empty  }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 388 8 388 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified j _ _, _) -> j
      | _ -> Fset.empty 
      end
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Stub
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains
  type t
  use seq.Seq
  use prelude.Int
  predicate contains (self : Seq.seq t) (e : t) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 298 29 301 8] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 242 10 245 10] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module Cdsat_Trail_Impl15_AbstractJustification_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 468 4 471 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl15_AbstractJustification_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 468 4 471 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 464 4 464 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 467 4 467 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 465 4 465 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 463 14 463 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl15_AbstractJustification
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use seq_ext.SeqExt
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 468 4 471 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 468 4 471 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 464 4 464 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { result = abstract_justification self just }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 461 4 461 12] if Seq.length just > 0 then
    let set = abstract_justification self (SeqExt.subsequence just 1 (Seq.length just)) in let ix = Seq.get just 0 in let a = IndexLogic0.index_logic self ix in Insert0.insert set a
  else
    Fset.empty 
  )
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 464 4 464 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 467 4 467 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 465 4 465 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 463 14 463 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl15_AbstractJustification_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use seq_ext.SeqExt
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel4
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel3
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec ghost function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 468 4 471 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 464 4 464 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 463 14 463 40] Fset.cardinal result <= Seq.length just }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 465 4 465 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 467 4 467 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains result (IndexLogic0.index_logic self (Seq.get just i)) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 462 14 462 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 461 4 461 12] if pure {Seq.length just > 0} then
      let set = abstract_justification self (SeqExt.subsequence just 1 (Seq.length just)) in let ix = Seq.get just 0 in let a = IndexLogic0.index_logic self ix in Insert0.insert set a
    else
      Fset.empty 
    
end
module Cdsat_Trail_Impl15_JustifiedIsJustified_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 417 4 417 43] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl15_JustifiedIsJustified_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 417 4 417 43] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl15_JustifiedIsJustified
  use prelude.Ghost
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 417 4 417 43] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 418 8 427 9] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> match (Cdsat_Trail_Assignment_Type.assignment_reason (Seq.get (ShallowModel2.shallow_model (Seq.get (ShallowModel1.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)))) with
      | Cdsat_Trail_Reason_Type.C_Justified j -> IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) /\ Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model j) /\ (forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model j) i -> Contains0.contains self i)
      | Cdsat_Trail_Reason_Type.C_Decision -> IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)
      | Cdsat_Trail_Reason_Type.C_Input -> IsInput0.is_input (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)
      end
  val justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 417 4 417 43] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = justified_is_justified self }
    
end
module Cdsat_Trail_Impl15_Invariant_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 405 4 405 34] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl15_Invariant_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 405 4 405 34] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl15_Invariant
  use prelude.Ghost
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_JustifiedIsJustified_Stub as JustifiedIsJustified0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Trail_Impl15_AbstractRelation_Stub as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 405 4 405 34] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 406 8 413 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Invariant0.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) /\ UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) - 1 /\ (forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self i -> Contains0.contains self j -> i <> j -> IndexLogic0.index_logic self i <> IndexLogic0.index_logic self j) /\ JustifiedIsJustified0.justified_is_justified self
  val invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 405 4 405 34] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_SatisfiedBy_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 4 521 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 4 521 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 4 521 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 8 522 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Satisfies0.satisfies m a
  val satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 4 521 43] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = satisfied_by self m }
    
end
module Cdsat_Theory_Impl4_CountBounds_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
end
module Cdsat_Theory_Impl4_CountBounds_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 580 4 580 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_CountBounds
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 582 8 587 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Input _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified _ _ _) _ tl -> count_bounds tl
      end
  val count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 31] Invariant0.invariant' self}
    ensures { result = count_bounds self }
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 580 4 580 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_CountBounds_Impl
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 31] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 580 4 580 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 582 8 587 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Input _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified _ _ _) _ tl -> count_bounds tl
      end
end
module Cdsat_Theory_Impl4_Restrict_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
end
module Cdsat_Theory_Impl4_Restrict_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 422 15 422 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 430 14 430 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 4 427 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 4 426 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 425 4 425 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 424 4 424 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 421 14 421 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Restrict
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 8 443 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Cdsat_Theory_Trail_Type.C_Empty
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.C_Assign a l tl
      else
        tl
      
      end
  val restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 422 15 422 25] level >= 0}
    ensures { result = restrict self level }
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 422 15 422 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 430 14 430 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 4 427 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 4 426 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 425 4 425 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 424 4 424 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 421 14 421 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Restrict_Impl
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 420 15 420 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 422 15 422 25] level >= 0}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 421 14 421 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 423 4 423 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains result a /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 424 4 424 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains result a -> Contains0.contains self a /\ LevelOf0.level_of result a <= level /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 425 4 425 56] level >= Level0.level self -> result = self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 426 4 426 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 427 4 427 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by result m }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 65] Level0.level self >= level -> Level0.level result = level }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 71] Level0.level self < level -> Level0.level result = Level0.level self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 14 430 40] Len0.len result <= Len0.len self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 8 443 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Cdsat_Theory_Trail_Type.C_Empty
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if pure {l <= level} then
        Cdsat_Theory_Trail_Type.C_Assign a l tl
      else
        tl
      
      end
end
module Cdsat_Theory_Impl4_Unsat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 527 4 527 30] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Unsat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 527 4 527 30] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Unsat
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 527 4 527 30] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 528 8 528 100] forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
  val unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 527 4 527 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl4_Impls_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 4 538 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Impls_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 4 538 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 57] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Theory_Impl4_Impls
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 4 538 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 539 8 539 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  val impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 4 538 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = impls self rhs }
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 57] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Theory_Impl4_Impls_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  let rec ghost predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 4 538 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 4 537 57] result -> Unsat0.unsat rhs -> Unsat0.unsat self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 539 8 539 126] pure {forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m}
end
module Cdsat_Concrete_Answer_Type
  type t_answer  =
    | C_Sat
    | C_Unsat
    | C_Unknown
    
end
module Cdsat_Trail_Impl15_Unsat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 395 4 395 30] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl15_Unsat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 395 4 395 30] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl15_Unsat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 395 4 395 30] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 394 4 394 16] Unsat0.unsat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 395 4 395 30] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  type t_theorystate  =
    | C_Sat
    | C_Decision (Cdsat_Trail_Term_Type.t_term) (Cdsat_Trail_Value_Type.t_value)
    | C_Unknown
    
  let function decision_0 (self : t_theorystate) : Cdsat_Trail_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Trail_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Unknown -> any Cdsat_Trail_Term_Type.t_term
      end
  let function decision_1 (self : t_theorystate) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Trail_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Unknown -> any Cdsat_Trail_Value_Type.t_value
      end
end
module Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_extendresult  =
    | C_Conflict (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision (Cdsat_Trail_Term_Type.t_term) (Cdsat_Trail_Value_Type.t_value)
    | C_Satisfied
    
  let function decision_0 (self : t_extendresult) : Cdsat_Trail_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Trail_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Satisfied -> any Cdsat_Trail_Term_Type.t_term
      end
  let function decision_1 (self : t_extendresult) : Cdsat_Trail_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Trail_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Satisfied -> any Cdsat_Trail_Value_Type.t_value
      end
  let function conflict_0 (self : t_extendresult) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a -> a
      | C_Decision _ _ -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Satisfied -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_normal  =
    | C_Normal (Cdsat_Theory_Trail_Type.t_trail)
    
  let function normal_0 (self : t_normal) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Normal a -> a
      end
end
module Cdsat_Theory_Impl5_Sound_Stub
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 645 4 645 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 645 4 645 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 645 4 645 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 643 4 643 16] Sound0.sound (Cdsat_Theory_Normal_Type.normal_0 self)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 645 4 645 30] (self : Cdsat_Theory_Normal_Type.t_normal) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl5_Fail2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 708 4 708 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 708 4 708 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 705 15 705 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 706 15 706 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 707 4 707 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 708 4 708 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 12 714 39] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just = 0
  val fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 708 4 708 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 705 15 705 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 706 15 706 27] Sound0.sound self}
    ensures { result = fail2 self just }
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 705 15 705 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 706 15 706 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 707 4 707 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail2_Impl
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 708 4 708 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 705 15 705 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 706 15 706 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 707 4 707 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 712 12 714 39] pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && pure {forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m just -> false} && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just in pure {a = 0})
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Trail_Impl15_Len_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val len [#"/Users/xavier/Code/cdsat/src/trail.rs" 390 4 390 30] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 389 14 389 50] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) }
    
end
module Cdsat_Trail_Impl15_Len
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  let rec cfg len [#"/Users/xavier/Code/cdsat/src/trail.rs" 390 4 390 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 389 14 389 50] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Cdsat_Trail_Trail_Type.t_trail;
  var _3 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Trail_Type.trail_assignments self_1;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 391 8 391 30] Len0.len _3);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Theory_Impl4_Acceptable_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Acceptable_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Acceptable
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 8 318 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
  val acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = acceptable self t val' }
    
end
module Cdsat_Concrete_Impl1_Extend_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel0
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val extend [#"/Users/xavier/Code/cdsat/src/concrete.rs" 287 4 287 56] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory)) (tl : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_ExtendResult_Type.t_extendresult
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 273 4 273 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 273 4 273 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 274 14 285 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> true
      | Cdsat_Concrete_ExtendResult_Type.C_Decision t v -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) (ShallowModel0.shallow_model t) (ShallowModel1.shallow_model v)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (ShallowModel2.shallow_model c) in true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 286 4 286 44] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * tl))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) }
    
end
module Alloc_Vec_Impl9_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : seq t
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    
end
module Cdsat_Trail_Impl15_MaxLevel_Interface
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val max_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 671 4 671 71] (self : Cdsat_Trail_Trail_Type.t_trail) (assignments : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 668 15 668 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 669 4 669 102] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model assignments) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model assignments) i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 670 14 670 88] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model assignments)) = UIntSize.to_int result }
    
end
module Cdsat_Concrete_ConflictHeap_Type
  type t_conflictheap
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_conflict  =
    | C_Conflict (Cdsat_Theory_Trail_Type.t_trail) (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  let function conflict_1 (self : t_conflict) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ a -> a
      end
  let function conflict_0 (self : t_conflict) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a _ -> a
      end
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Cdsat_Concrete_Impl2_ShallowModel_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 367 4 367 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Concrete_Impl2_ShallowModel_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 367 4 367 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Concrete_Impl2_ShallowModel
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 367 4 367 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 367 4 367 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Theory_Impl6_Sound_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 768 4 768 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 768 4 768 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 768 4 768 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 8 769 109] Sound0.sound (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.conflict_1 self) -> false)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 768 4 768 30] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl6_Invariant_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 762 4 762 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Invariant_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 762 4 762 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Invariant
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 762 4 762 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 763 8 763 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 762 4 762 34] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : seq t) : Seq.seq t
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function to_ref_seq (self : seq t) : Seq.seq t
  val to_ref_seq (self : seq t) : Seq.seq t
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = Seq.get (ShallowModel0.shallow_model self) i) && Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self)
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel1 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module Cdsat_Theory_Impl3_ResolveSound_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl3_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 158 14 158 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl3_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 154 4 154 12] ()
  val resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a}
    ensures { result = resolve_sound self cflct just a }
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 158 14 158 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl3_ResolveSound_Impl
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  let rec ghost function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 4 164 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 155 4 155 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 156 15 156 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 157 15 157 32] Contains0.contains cflct a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 158 14 158 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 154 4 154 12] ()
end
module Cdsat_Theory_Impl6_Resolvef_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 796 4 796 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
end
module Cdsat_Theory_Impl6_Resolvef_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 796 4 796 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 789 15 789 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 791 4 791 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 134] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j /\ not IsBool0.is_bool (let (_, a) = j in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 795 14 795 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 794 14 794 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl6_Resolvef
  use prelude.Int
  use map.Const
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 796 4 796 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.C_Model (Const.const (Cdsat_Theory_Value_Type.C_Bool false))) (Cdsat_Theory_Conflict_Type.conflict_1 self) just a in Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 796 4 796 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 789 15 789 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 791 4 791 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 134] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j /\ not IsBool0.is_bool (let (_, a) = j in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { result = resolvef self a }
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 789 15 789 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 791 4 791 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 134] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j /\ not IsBool0.is_bool (let (_, a) = j in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 795 14 795 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 794 14 794 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl6_Resolvef_Impl
  use prelude.Int
  use map.Const
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl3_ResolveSound as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 796 4 796 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 789 15 789 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 791 4 791 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 134] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j /\ not IsBool0.is_bool (let (_, a) = j in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 14 794 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 14 795 28] Sound0.sound result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.C_Model (Const.const (Cdsat_Theory_Value_Type.C_Bool false))) (Cdsat_Theory_Conflict_Type.conflict_1 self) just a in Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (let a' = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Fset.union a' just)
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Cdsat_Theory_Impl6_Resolve_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 809 4 809 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Resolve_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 809 4 809 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl6_Resolve
  use map.Const
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl3_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 809 4 809 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.C_Model (Const.const (Cdsat_Theory_Value_Type.C_Bool false))) (Cdsat_Theory_Conflict_Type.conflict_1 self) just a in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) /\ Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 809 4 809 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 27] Sound0.sound self}
    ensures { result = resolve self a tgt }
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl6_Resolve_Impl
  use map.Const
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_ResolveSound as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 809 4 809 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 42] result -> Invariant0.invariant' tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 38] result -> Sound0.sound tgt }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 804 4 804 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = ResolveSound0.resolve_sound (Cdsat_Theory_Model_Type.C_Model (Const.const (Cdsat_Theory_Value_Type.C_Bool false))) (Cdsat_Theory_Conflict_Type.conflict_1 self) just a in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a && pure {forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)} && Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a && (let b = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (let a' = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Fset.union a' just) in pure {tgt = b})
end
module Cdsat_Concrete_Impl3_New_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel0
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 378 4 378 20] (_1' : ()) : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 377 14 377 36] ShallowModel0.shallow_model result = Fset.empty  }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost
  type t
  type a
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 679 33 774 2] IntoIterPre0.into_iter_pre self}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 679 33 774 2] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl8_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  val next (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 682 28 684 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Cdsat_Concrete_Impl3_Insert_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel0
  val insert [#"/Users/xavier/Code/cdsat/src/concrete.rs" 384 4 384 47] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) (e : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 383 14 383 41] ShallowModel0.shallow_model ( ^ self) = Insert0.insert (ShallowModel1.shallow_model self) e }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 394 31 396 1] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module Cdsat_Concrete_Impl3_Last_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  use Core_Option_Option_Type as Core_Option_Option_Type
  val last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 394 4 394 41] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 389 4 392 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) other -> LeLog0.le_log other a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 393 14 393 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {self <> Core_Option_Option_Type.C_None}
    ensures { Core_Option_Option_Type.C_Some result = self }
    
end
module Cdsat_Trail_Impl14_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 338 4 338 32] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 337 14 337 30] result = Cdsat_Trail_TrailIndex_Type.trailindex_0 self }
    
end
module Cdsat_Trail_Impl14_Level
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg level [#"/Users/xavier/Code/cdsat/src/trail.rs" 338 4 338 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 337 14 337 30] result = Cdsat_Trail_TrailIndex_Type.trailindex_0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self_1;
    return _0
  }
  
end
module Cdsat_Concrete_Impl3_PopLast_Interface
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  val pop_last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 404 4 404 48] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 399 14 399 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 400 4 403 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> ShallowModel1.shallow_model ( ^ self) = Remove0.remove (ShallowModel0.shallow_model self) a /\ Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model ( ^ self)) other -> LeLog0.le_log other a) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl13_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Cdsat_Trail_Impl17_Index_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  val index [#"/Users/xavier/Code/cdsat/src/trail.rs" 750 4 750 55] (self : Cdsat_Trail_Trail_Type.t_trail) (index : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Assignment_Type.t_assignment
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 748 15 748 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 749 14 749 67] result = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 index)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 index)) }
    
end
module Cdsat_Trail_Impl17_Index
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl13_Index_Interface as Index1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    type Output0.output = Cdsat_Trail_Assignment_Type.t_assignment
  clone Alloc_Vec_Impl13_Index_Interface as Index0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg index [#"/Users/xavier/Code/cdsat/src/trail.rs" 750 4 750 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) (index : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Assignment_Type.t_assignment
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 748 15 748 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 749 14 749 67] result = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 index)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 index)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Assignment_Type.t_assignment;
  var self_1 : Cdsat_Trail_Trail_Type.t_trail;
  var index_2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _5 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _6 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _7 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var _8 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var _9 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _10 : usize;
  var _11 : usize;
  {
    self_1 <- self;
    index_2 <- index;
    goto BB0
  }
  BB0 {
    _9 <- Cdsat_Trail_Trail_Type.trail_assignments self_1;
    _10 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 index_2;
    _8 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 751 9 751 34] Index0.index _9 _10);
    goto BB1
  }
  BB1 {
    _7 <- _8;
    _11 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 index_2;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 751 9 751 43] Index1.index _7 _11);
    goto BB2
  }
  BB2 {
    _5 <- _6;
    _0 <- _5;
    return _0
  }
  
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  val clone' (self : t) : t
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 115 425 58] result = self }
    
end
module Core_Clone_Impls_Impl9_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  val clone' (self : uint64) : uint64
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 115 425 58] result = self }
    
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' (self : bool) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 115 425 58] result = self }
    
end
module Cdsat_Trail_Impl35_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Trail_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] result = self }
    
end
module Cdsat_Trail_Impl35_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.UInt64
  clone Core_Clone_Impls_Impl19_Clone_Interface as Clone1
  clone Core_Clone_Impls_Impl9_Clone_Interface as Clone0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Trail_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Value_Type.t_value;
  var self_1 : Cdsat_Trail_Value_Type.t_value;
  var _3 : isize;
  var v0_1_4 : bool;
  var _5 : bool;
  var _6 : bool;
  var v0_1_7 : uint64;
  var _8 : uint64;
  var _9 : uint64;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Value_Type.C_Bool _ -> goto BB3
      | Cdsat_Trail_Value_Type.C_Rat _ -> goto BB1
      end
  }
  BB1 {
    v0_1_7 <- Cdsat_Trail_Value_Type.rat_0 self_1;
    _9 <- v0_1_7;
    _8 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] Clone0.clone' _9);
    goto BB5
  }
  BB2 {
    absurd
  }
  BB3 {
    v0_1_4 <- Cdsat_Trail_Value_Type.bool_0 self_1;
    _6 <- v0_1_4;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] Clone1.clone' _6);
    goto BB4
  }
  BB4 {
    _0 <- Cdsat_Trail_Value_Type.C_Bool _5;
    goto BB6
  }
  BB5 {
    _0 <- Cdsat_Trail_Value_Type.C_Rat _8;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  val clone' (self : usize) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 115 425 58] result = self }
    
end
module Cdsat_Trail_Impl27_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 9 97 14] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Trail_Sort_Type.t_sort
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 9 97 14] result = self }
    
end
module Cdsat_Trail_Impl27_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 9 97 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Trail_Sort_Type.t_sort
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 9 97 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Sort_Type.t_sort;
  var self_1 : Cdsat_Trail_Sort_Type.t_sort;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Sort_Type.C_Boolean -> goto BB3
      | Cdsat_Trail_Sort_Type.C_Rational -> goto BB1
      end
  }
  BB1 {
    _0 <- Cdsat_Trail_Sort_Type.C_Rational;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- Cdsat_Trail_Sort_Type.C_Boolean;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Cdsat_Trail_Impl31_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Trail_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] result = self }
    
end
module Cdsat_Trail_Impl31_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl27_Clone_Interface as Clone3
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone2
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl35_Clone_Interface as Clone1
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type a = Alloc_Alloc_Global_Type.t_global
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Trail_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Term_Type.t_term;
  var self_1 : Cdsat_Trail_Term_Type.t_term;
  var _3 : isize;
  var v0_1_4 : usize;
  var v1_1_5 : Cdsat_Trail_Sort_Type.t_sort;
  var _6 : usize;
  var _7 : usize;
  var _8 : Cdsat_Trail_Sort_Type.t_sort;
  var _9 : Cdsat_Trail_Sort_Type.t_sort;
  var v0_1_10 : Cdsat_Trail_Value_Type.t_value;
  var _11 : Cdsat_Trail_Value_Type.t_value;
  var _12 : Cdsat_Trail_Value_Type.t_value;
  var v0_1_13 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_14 : Cdsat_Trail_Term_Type.t_term;
  var _15 : Cdsat_Trail_Term_Type.t_term;
  var _16 : Cdsat_Trail_Term_Type.t_term;
  var _17 : Cdsat_Trail_Term_Type.t_term;
  var _18 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_19 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_20 : Cdsat_Trail_Term_Type.t_term;
  var _21 : Cdsat_Trail_Term_Type.t_term;
  var _22 : Cdsat_Trail_Term_Type.t_term;
  var _23 : Cdsat_Trail_Term_Type.t_term;
  var _24 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_25 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_26 : Cdsat_Trail_Term_Type.t_term;
  var _27 : Cdsat_Trail_Term_Type.t_term;
  var _28 : Cdsat_Trail_Term_Type.t_term;
  var _29 : Cdsat_Trail_Term_Type.t_term;
  var _30 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_31 : Cdsat_Trail_Term_Type.t_term;
  var _32 : Cdsat_Trail_Term_Type.t_term;
  var _33 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_34 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_35 : Cdsat_Trail_Term_Type.t_term;
  var _36 : Cdsat_Trail_Term_Type.t_term;
  var _37 : Cdsat_Trail_Term_Type.t_term;
  var _38 : Cdsat_Trail_Term_Type.t_term;
  var _39 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_40 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_41 : Cdsat_Trail_Term_Type.t_term;
  var _42 : Cdsat_Trail_Term_Type.t_term;
  var _43 : Cdsat_Trail_Term_Type.t_term;
  var _44 : Cdsat_Trail_Term_Type.t_term;
  var _45 : Cdsat_Trail_Term_Type.t_term;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Term_Type.C_Variable _ _ -> goto BB3
      | Cdsat_Trail_Term_Type.C_Value _ -> goto BB6
      | Cdsat_Trail_Term_Type.C_Plus _ _ -> goto BB8
      | Cdsat_Trail_Term_Type.C_Eq _ _ -> goto BB13
      | Cdsat_Trail_Term_Type.C_Conj _ _ -> goto BB18
      | Cdsat_Trail_Term_Type.C_Neg _ -> goto BB23
      | Cdsat_Trail_Term_Type.C_Disj _ _ -> goto BB26
      | Cdsat_Trail_Term_Type.C_Impl _ _ -> goto BB1
      end
  }
  BB1 {
    v0_1_40 <- Cdsat_Trail_Term_Type.impl_0 self_1;
    v1_1_41 <- Cdsat_Trail_Term_Type.impl_1 self_1;
    _43 <- v0_1_40;
    _42 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _43);
    goto BB31
  }
  BB2 {
    absurd
  }
  BB3 {
    v0_1_4 <- Cdsat_Trail_Term_Type.variable_0 self_1;
    v1_1_5 <- Cdsat_Trail_Term_Type.variable_1 self_1;
    _7 <- v0_1_4;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone2.clone' _7);
    goto BB4
  }
  BB4 {
    _9 <- v1_1_5;
    _8 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone3.clone' _9);
    goto BB5
  }
  BB5 {
    _0 <- Cdsat_Trail_Term_Type.C_Variable _6 _8;
    goto BB35
  }
  BB6 {
    v0_1_10 <- Cdsat_Trail_Term_Type.value_0 self_1;
    _12 <- v0_1_10;
    _11 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone1.clone' _12);
    goto BB7
  }
  BB7 {
    _0 <- Cdsat_Trail_Term_Type.C_Value _11;
    goto BB35
  }
  BB8 {
    v0_1_13 <- Cdsat_Trail_Term_Type.plus_0 self_1;
    v1_1_14 <- Cdsat_Trail_Term_Type.plus_1 self_1;
    _16 <- v0_1_13;
    _15 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _16);
    goto BB9
  }
  BB9 {
    _18 <- v1_1_14;
    _17 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _18);
    goto BB10
  }
  BB10 {
    _0 <- Cdsat_Trail_Term_Type.C_Plus _15 _17;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB35
  }
  BB13 {
    v0_1_19 <- Cdsat_Trail_Term_Type.eq_0 self_1;
    v1_1_20 <- Cdsat_Trail_Term_Type.eq_1 self_1;
    _22 <- v0_1_19;
    _21 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _22);
    goto BB14
  }
  BB14 {
    _24 <- v1_1_20;
    _23 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _24);
    goto BB15
  }
  BB15 {
    _0 <- Cdsat_Trail_Term_Type.C_Eq _21 _23;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB35
  }
  BB18 {
    v0_1_25 <- Cdsat_Trail_Term_Type.conj_0 self_1;
    v1_1_26 <- Cdsat_Trail_Term_Type.conj_1 self_1;
    _28 <- v0_1_25;
    _27 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _28);
    goto BB19
  }
  BB19 {
    _30 <- v1_1_26;
    _29 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _30);
    goto BB20
  }
  BB20 {
    _0 <- Cdsat_Trail_Term_Type.C_Conj _27 _29;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB35
  }
  BB23 {
    v0_1_31 <- Cdsat_Trail_Term_Type.neg_0 self_1;
    _33 <- v0_1_31;
    _32 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _33);
    goto BB24
  }
  BB24 {
    _0 <- Cdsat_Trail_Term_Type.C_Neg _32;
    goto BB25
  }
  BB25 {
    goto BB35
  }
  BB26 {
    v0_1_34 <- Cdsat_Trail_Term_Type.disj_0 self_1;
    v1_1_35 <- Cdsat_Trail_Term_Type.disj_1 self_1;
    _37 <- v0_1_34;
    _36 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _37);
    goto BB27
  }
  BB27 {
    _39 <- v1_1_35;
    _38 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _39);
    goto BB28
  }
  BB28 {
    _0 <- Cdsat_Trail_Term_Type.C_Disj _36 _38;
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB35
  }
  BB31 {
    _45 <- v1_1_41;
    _44 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] Clone0.clone' _45);
    goto BB32
  }
  BB32 {
    _0 <- Cdsat_Trail_Term_Type.C_Impl _42 _44;
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    return _0
  }
  
end
module Alloc_Vec_Impl11_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val clone' (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 115 425 58] result = self }
    
end
module Cdsat_Trail_Impl23_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 9 54 14] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_Reason_Type.t_reason
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 9 54 14] result = self }
    
end
module Cdsat_Trail_Impl23_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Alloc_Vec_Impl11_Clone_Interface as Clone0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 9 54 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_Reason_Type.t_reason
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 9 54 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Reason_Type.t_reason;
  var self_1 : Cdsat_Trail_Reason_Type.t_reason;
  var _3 : isize;
  var v0_1_4 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _5 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _6 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB3
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB6
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB1
      end
  }
  BB1 {
    _0 <- Cdsat_Trail_Reason_Type.C_Input;
    goto BB7
  }
  BB2 {
    absurd
  }
  BB3 {
    v0_1_4 <- Cdsat_Trail_Reason_Type.justified_0 self_1;
    _6 <- v0_1_4;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 9 54 14] Clone0.clone' _6);
    goto BB4
  }
  BB4 {
    _0 <- Cdsat_Trail_Reason_Type.C_Justified _5;
    goto BB5
  }
  BB5 {
    goto BB7
  }
  BB6 {
    _0 <- Cdsat_Trail_Reason_Type.C_Decision;
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Cdsat_Trail_Impl19_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Assignment_Type.t_assignment
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] result = self }
    
end
module Cdsat_Trail_Impl19_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone3
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl23_Clone_Interface as Clone2
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl35_Clone_Interface as Clone1
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl31_Clone_Interface as Clone0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Assignment_Type.t_assignment
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Assignment_Type.t_assignment;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : Cdsat_Trail_Term_Type.t_term;
  var _4 : Cdsat_Trail_Term_Type.t_term;
  var _5 : Cdsat_Trail_Value_Type.t_value;
  var _6 : Cdsat_Trail_Value_Type.t_value;
  var _7 : Cdsat_Trail_Reason_Type.t_reason;
  var _8 : Cdsat_Trail_Reason_Type.t_reason;
  var _9 : usize;
  var _10 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- Cdsat_Trail_Assignment_Type.assignment_term self_1;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 16 4 16 18] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _6 <- Cdsat_Trail_Assignment_Type.assignment_val self_1;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 18 18] Clone1.clone' _6);
    goto BB2
  }
  BB2 {
    _8 <- Cdsat_Trail_Assignment_Type.assignment_reason self_1;
    _7 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 19 4 19 18] Clone2.clone' _8);
    goto BB3
  }
  BB3 {
    _10 <- Cdsat_Trail_Assignment_Type.assignment_level self_1;
    _9 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 21 4 21 20] Clone3.clone' _10);
    goto BB4
  }
  BB4 {
    _0 <- Cdsat_Trail_Assignment_Type.C_Assignment _3 _5 _7 _9;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Cdsat_Trail_Impl10_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 243 4 243 33] (self : Cdsat_Trail_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 242 14 242 41] result = IsBool0.is_bool (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Trail_Impl10_IsBool
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 243 4 243 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 242 14 242 41] result = IsBool0.is_bool (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Value_Type.t_value;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Value_Type.C_Bool _ -> goto BB3
      | Cdsat_Trail_Value_Type.C_Rat _ -> goto BB1
      end
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 246 29 246 34] false);
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 245 30 245 34] true);
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Cdsat_Trail_Impl18_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 767 4 767 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 766 14 766 45] result = IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_Impl18_IsBool
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Trail_Impl10_IsBool_Interface as IsBool1 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate IsBool0.is_bool = IsBool0.is_bool
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 767 4 767 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 766 14 766 45] result = IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : Cdsat_Trail_Value_Type.t_value;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_val self_1;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 768 8 768 26] IsBool1.is_bool _3);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Theory_Impl4_RestrictFind_Stub
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 61] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictFind_Interface
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 61] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 447 15 447 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 450 14 450 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl4_RestrictFind
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 61] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 452 8 461 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then () else restrict_find tl level d
      end
  val restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 61] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 447 15 447 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { result = restrict_find self level d }
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 447 15 447 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 450 14 450 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl4_RestrictFind_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  let rec ghost function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 61] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 447 15 447 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 450 14 450 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 452 8 461 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        restrict_find tl level d
      
      end
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Stub
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 564 4 564 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Interface
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 564 4 564 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 557 15 557 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 558 15 558 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 563 4 563 69] IsInput0.is_input self d -> IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 75] IsDecision0.is_decision self d -> IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 561 14 561 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 78] IsJustified0.is_justified self d -> IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictFind_Stub as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 564 4 564 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 565 8 565 36] let _ = RestrictFind0.restrict_find self level d in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_kind_unchanged tl level d in ()
      
      end
  val restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 564 4 564 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 557 15 557 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 558 15 558 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { result = restrict_kind_unchanged self level d }
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 557 15 557 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 558 15 558 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 563 4 563 69] IsInput0.is_input self d -> IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 75] IsDecision0.is_decision self d -> IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 561 14 561 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 78] IsJustified0.is_justified self d -> IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictFind as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains0.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 564 4 564 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 557 15 557 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 558 15 558 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 78] IsJustified0.is_justified self d -> IsJustified0.is_justified (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 561 14 561 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 75] IsDecision0.is_decision self d -> IsDecision0.is_decision (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 563 4 563 69] IsInput0.is_input self d -> IsInput0.is_input (Restrict0.restrict self level) d }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 565 8 565 36] let _ = RestrictFind0.restrict_find self level d in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = restrict_kind_unchanged tl level d in ()
      
      end
end
module Cdsat_Theory_Impl4_JustificationContains_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 507 4 507 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_JustificationContains_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 507 4 507 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 504 15 504 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 505 15 505 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 506 4 506 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl4_JustificationContains
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 507 4 507 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 508 8 517 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else justification_contains tl kv
      end
  val justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 507 4 507 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 504 15 504 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 505 15 505 36] IsJustified0.is_justified self kv}
    ensures { result = justification_contains self kv }
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 504 15 504 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 505 15 505 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 506 4 506 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl4_JustificationContains_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 507 4 507 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 504 15 504 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 505 15 505 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 506 4 506 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 508 8 517 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = kv} then
        ()
      else
        justification_contains tl kv
      
      end
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 614 4 614 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 614 4 614 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 610 15 610 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 611 15 611 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 612 15 612 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 613 14 613 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictIdempotent
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 614 4 614 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 615 8 618 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> restrict_idempotent tl l1 l2
      end
  val restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 614 4 614 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 610 15 610 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 611 15 611 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 612 15 612 23] l1 <= l2}
    ensures { result = restrict_idempotent self l1 l2 }
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 610 15 610 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 611 15 611 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 612 15 612 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 613 14 613 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  let rec ghost function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 614 4 614 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 610 15 610 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 611 15 611 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 612 15 612 23] l1 <= l2}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 613 14 613 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 615 8 618 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> restrict_idempotent tl l1 l2
      end
end
module Cdsat_Theory_Impl4_RestrictSound_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
end
module Cdsat_Theory_Impl4_RestrictSound_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 545 15 545 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 546 14 546 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_RestrictSound
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 548 8 553 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let _ = restrict_sound tl level in ()
      end
  val restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 545 15 545 27] Sound0.sound self}
    ensures { result = restrict_sound self level }
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 545 15 545 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 546 14 546 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_RestrictSound_Impl
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  let rec ghost function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 547 4 547 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 545 15 545 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 546 14 546 42] Sound0.sound (Restrict0.restrict self level) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 548 8 553 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let _ = restrict_sound tl level in ()
      end
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  val pop (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : Core_Option_Option_Type.t_option t
    ensures { match (result) with
      | Core_Option_Option_Type.C_Some t -> ShallowModel0.shallow_model ( ^ self) = SeqExt.subsequence (ShallowModel1.shallow_model self) 0 (Seq.length (ShallowModel1.shallow_model self) - 1) /\ ShallowModel1.shallow_model self = Seq.snoc (ShallowModel0.shallow_model ( ^ self)) t
      | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (ShallowModel1.shallow_model self) = 0
      end }
    
end
module Cdsat_Trail_Impl15_Restrict_Interface
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl14_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val restrict [#"/Users/xavier/Code/cdsat/src/trail.rs" 638 4 638 51] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 632 4 632 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 633 15 633 36] UIntSize.to_int level <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 632 4 632 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 634 14 634 59] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 636 4 636 111] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . LevelLog0.level_log ix <= UIntSize.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 637 4 637 112] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
end
module Cdsat_Trail_Impl15_Restrict
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel6
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel5
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel4 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Core_Num_Impl11_Max as Max0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictFind as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Trail_Impl15_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains3.contains,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel1.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl14_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl15_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound0.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictKindUnchanged as RestrictKindUnchanged0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function RestrictFind0.restrict_find = RestrictFind0.restrict_find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    function Find0.find = Find0.find,
    axiom .
  clone Alloc_Vec_Impl1_Pop_Interface as Pop0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    val Max0.mAX' = Max0.mAX'
  let rec cfg restrict [#"/Users/xavier/Code/cdsat/src/trail.rs" 638 4 638 51] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 632 4 632 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 633 15 633 36] UIntSize.to_int level <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 632 4 632 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 634 14 634 59] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 636 4 636 111] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . LevelLog0.level_log ix <= UIntSize.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 637 4 637 112] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var level_2 : usize;
  var old'_9 : Ghost.ghost_ty (borrowed (Cdsat_Trail_Trail_Type.t_trail));
  var _11 : ();
  var _12 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : usize;
  var _22 : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _23 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _24 : ();
  var _26 : ();
  var _28 : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
  var _31 : ();
  var _32 : ();
  var _34 : ();
  var _36 : ();
  var _38 : ();
  var _40 : ();
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _45 : ();
  var _47 : ();
  {
    self_1 <- self;
    level_2 <- level;
    goto BB0
  }
  BB0 {
    _11 <- ();
    old'_9 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 639 37 639 52] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant x { [#"/Users/xavier/Code/cdsat/src/trail.rs" 641 8 641 117] forall i : int . 0 <= i /\ i <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self_1)) -> Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * self_1))) i = Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * Ghost.inner old'_9))) i };
    invariant abs_rel2 { [#"/Users/xavier/Code/cdsat/src/trail.rs" 642 30 642 46] Invariant0.invariant' ( * self_1) };
    invariant proph_const { [#"/Users/xavier/Code/cdsat/src/trail.rs" 643 33 643 47]  ^ self_1 =  ^ Ghost.inner old'_9 };
    invariant restrict { [#"/Users/xavier/Code/cdsat/src/trail.rs" 644 30 644 76] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'_9))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self_1))) };
    invariant l { [#"/Users/xavier/Code/cdsat/src/trail.rs" 645 23 645 42] Cdsat_Trail_Trail_Type.trail_level ( * self_1) >= level_2 };
    _20 <- level_2;
    _21 <- Cdsat_Trail_Trail_Type.trail_level ( * self_1);
    _19 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 646 14 646 32] _20 < _21);
    switch (_19)
      | False -> goto BB7
      | True -> goto BB3
      end
  }
  BB3 {
    _23 <- borrow_mut (Cdsat_Trail_Trail_Type.trail_assignments ( * self_1));
    self_1 <- { self_1 with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self_1 in Cdsat_Trail_Trail_Type.C_Trail ( ^ _23) b c) };
    _22 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 647 12 647 34] Pop0.pop _23);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    self_1 <- { self_1 with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self_1 in Cdsat_Trail_Trail_Type.C_Trail a ([#"/Users/xavier/Code/cdsat/src/trail.rs" 648 12 648 27] Cdsat_Trail_Trail_Type.trail_level ( * self_1) - ([#"/Users/xavier/Code/cdsat/src/trail.rs" 648 26 648 27] (1 : usize))) c) };
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 649 12 649 123] exists t : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . RestrictKindUnchanged0.restrict_kind_unchanged (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self_1))) t = () \/ true };
    _24 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 650 12 650 93] exists t : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . JustificationContains0.justification_contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1))) t = () \/ true };
    _26 <- ();
    _31 <- ();
    _28 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 651 25 651 83] Ghost.new (Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self_1)))));
    goto BB6
  }
  BB6 {
    self_1 <- { self_1 with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self_1 in Cdsat_Trail_Trail_Type.C_Trail a b _28) };
    _28 <- any Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 652 12 654 13] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self_1) ix -> Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * self_1))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)) = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * Ghost.inner old'_9))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)) };
    _32 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 655 12 655 105] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self_1) ix -> Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1))) (IndexLogic0.index_logic ( * self_1) ix) };
    _34 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 656 12 656 93] let _ = RestrictIdempotent0.restrict_idempotent (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self_1))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self_1)) + 1) in true };
    _36 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 657 12 657 107] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self_1) ix -> IndexLogic0.index_logic ( * self_1) ix = IndexLogic0.index_logic ( * Ghost.inner old'_9) ix };
    _38 <- ();
    _18 <- ();
    goto BB2
  }
  BB7 {
    assume { Resolve0.resolve self_1 };
    _12 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 660 22 660 41] level_2 = Cdsat_Trail_Trail_Type.trail_level ( * self_1) };
    _43 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 662 12 662 91] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'_9))) (UIntSize.to_int level_2) };
    _45 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 8 664 61] let _ = RestrictSound0.restrict_sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'_9))) (UIntSize.to_int level_2) in true };
    _47 <- ();
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Concrete_Impl3_IntoVec_Interface
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl2_ShallowModel_Stub as ShallowModel0
  val into_vec [#"/Users/xavier/Code/cdsat/src/concrete.rs" 411 4 411 40] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 409 4 409 75] forall e : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) e -> Contains1.contains (ShallowModel1.shallow_model result) e }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 410 4 410 94] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result) -> Contains0.contains (ShallowModel0.shallow_model self) (Seq.get (ShallowModel1.shallow_model result) i) }
    
end
module Cdsat_Trail_Impl10_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val negate [#"/Users/xavier/Code/cdsat/src/trail.rs" 252 4 252 39] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Trail_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 250 15 250 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 251 14 251 41] ShallowModel1.shallow_model result = Negate0.negate (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Trail_Impl10_Negate
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg negate [#"/Users/xavier/Code/cdsat/src/trail.rs" 252 4 252 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Trail_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 250 15 250 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 251 14 251 41] ShallowModel1.shallow_model result = Negate0.negate (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Value_Type.t_value;
  var self_1 : Cdsat_Trail_Value_Type.t_value;
  var _4 : isize;
  var b_5 : bool;
  var _6 : bool;
  var _7 : bool;
  var _8 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Value_Type.C_Bool _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    absurd
  }
  BB2 {
    b_5 <- Cdsat_Trail_Value_Type.bool_0 self_1;
    _7 <- b_5;
    _6 <- not _7;
    _0 <- Cdsat_Trail_Value_Type.C_Bool _6;
    return _0
  }
  
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl14_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module Cdsat_Trail_Impl15_AddJustified_Interface
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel2
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel0
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 613 4 613 93] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Trail_Term_Type.t_term) (val' : Cdsat_Trail_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 608 4 608 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 609 15 609 31] IsBool0.is_bool (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 610 4 610 96] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model into_vec) -> Contains0.contains ( * self) (Seq.get (ShallowModel1.shallow_model into_vec) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 611 4 611 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel2.shallow_model term) (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 612 4 612 145] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel1.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel2.shallow_model term, ShallowModel0.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 608 4 608 40] Invariant0.invariant' ( ^ self) }
    
end
module Cdsat_Trail_Impl15_AddJustified
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Seq
  use prelude.Ghost
  use set.Fset
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort3 with
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort3.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort3.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max as Max0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel10 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant3 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel0
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel5
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Trail_Impl14_LevelLog as LevelLog0
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl15_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains3.contains,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel4.shallow_model,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl15_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Resolve0.resolve = Resolve3.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_MaxLevel_Interface as MaxLevel0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Alloc_Vec_Impl9_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains1.contains,
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort0.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec cfg add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 613 4 613 93] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Trail_Term_Type.t_term) (val' : Cdsat_Trail_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 608 4 608 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 609 15 609 31] IsBool0.is_bool (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 610 4 610 96] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model into_vec) -> Contains0.contains ( * self) (Seq.get (ShallowModel1.shallow_model into_vec) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 611 4 611 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel2.shallow_model term) (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 612 4 612 145] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel1.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel2.shallow_model term, ShallowModel0.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 608 4 608 40] Invariant0.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var into_vec_2 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var term_3 : Cdsat_Trail_Term_Type.t_term;
  var val'_4 : Cdsat_Trail_Value_Type.t_value;
  var level_11 : usize;
  var _12 : Cdsat_Trail_Trail_Type.t_trail;
  var _13 : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _14 : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _15 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _16 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var just_17 : Ghost.ghost_ty (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value));
  var _19 : ();
  var a_20 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _21 : Cdsat_Trail_Term_Type.t_term;
  var _22 : Cdsat_Trail_Value_Type.t_value;
  var _23 : Cdsat_Trail_Reason_Type.t_reason;
  var _24 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _25 : usize;
  var g_26 : Ghost.ghost_ty (Cdsat_Theory_Assign_Type.t_assign);
  var _28 : ();
  var _29 : ();
  var _31 : ();
  var _33 : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
  var _36 : ();
  var _37 : ();
  var _38 : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _39 : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _40 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _41 : usize;
  var _42 : Cdsat_Trail_Assignment_Type.t_assignment;
  {
    self_1 <- self;
    into_vec_2 <- into_vec;
    term_3 <- term;
    val'_4 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _12 <-  * self_1;
    _16 <- into_vec_2;
    _15 <- _16;
    _14 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 614 35 614 44] Deref0.deref _15);
    goto BB4
  }
  BB4 {
    _13 <- _14;
    level_11 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 614 20 614 45] MaxLevel0.max_level _12 _13);
    goto BB5
  }
  BB5 {
    _19 <- ();
    just_17 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 616 12 616 76] Ghost.new (AbstractJustification0.abstract_justification ( * self_1) (ShallowModel1.shallow_model into_vec_2)));
    goto BB6
  }
  BB6 {
    _21 <- term_3;
    term_3 <- any Cdsat_Trail_Term_Type.t_term;
    _22 <- val'_4;
    val'_4 <- any Cdsat_Trail_Value_Type.t_value;
    assume { Resolve0.resolve _24 };
    _24 <- into_vec_2;
    into_vec_2 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    _23 <- Cdsat_Trail_Reason_Type.C_Justified _24;
    goto BB7
  }
  BB7 {
    _25 <- level_11;
    a_20 <- Cdsat_Trail_Assignment_Type.C_Assignment _21 _22 _23 _25;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _28 <- ();
    g_26 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 624 40 624 118] Ghost.new (Cdsat_Theory_Assign_Type.C_Justified (Ghost.inner just_17) (ShallowModel2.shallow_model term_3) (ShallowModel0.shallow_model val'_4)));
    goto BB10
  }
  BB10 {
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 625 22 625 35] Invariant2.invariant' (Ghost.inner g_26) };
    _29 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 626 22 626 41] JustifiedSound0.justified_sound (Ghost.inner g_26) };
    _31 <- ();
    _36 <- ();
    _33 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 627 21 627 103] Ghost.new (Cdsat_Theory_Trail_Type.C_Assign (Ghost.inner g_26) (UIntSize.to_int level_11) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self_1)))));
    goto BB11
  }
  BB11 {
    self_1 <- { self_1 with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self_1 in Cdsat_Trail_Trail_Type.C_Trail a b _33) };
    _33 <- any Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
    _40 <- borrow_mut (Cdsat_Trail_Trail_Type.trail_assignments ( * self_1));
    self_1 <- { self_1 with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self_1 in Cdsat_Trail_Trail_Type.C_Trail ( ^ _40) b c) };
    assume { Resolve1.resolve self_1 };
    _41 <- level_11;
    _39 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 628 8 628 31] IndexMut0.index_mut _40 _41);
    goto BB12
  }
  BB12 {
    _38 <- borrow_mut ( * _39);
    _39 <- { _39 with current = ( ^ _38) };
    assume { Resolve2.resolve _39 };
    _42 <- a_20;
    a_20 <- any Cdsat_Trail_Assignment_Type.t_assignment;
    _37 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 628 8 628 39] Push0.push _38 _42);
    goto BB13
  }
  BB13 {
    _0 <- ();
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module Cdsat_Trail_Impl18_IsFirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_first_order [#"/Users/xavier/Code/cdsat/src/trail.rs" 772 4 772 47] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 771 14 771 45] result <> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_Impl18_IsFirstOrder
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_IsBool_Interface as IsBool1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsBool0.is_bool = IsBool0.is_bool
  let rec cfg is_first_order [#"/Users/xavier/Code/cdsat/src/trail.rs" 772 4 772 47] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 771 14 771 45] result <> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : bool;
  var _4 : Cdsat_Trail_Assignment_Type.t_assignment;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- self_1;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 773 9 773 23] IsBool1.is_bool _4);
    goto BB1
  }
  BB1 {
    _0 <- not _3;
    return _0
  }
  
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_ReasonModel_Type
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  type t_reasonmodel  =
    | C_Justified (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex))
    | C_Decision
    | C_Input
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = Alloc_Vec_Vec_Type.t_vec t a1
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec u a2,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a1,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : Alloc_Vec_Vec_Type.t_vec t a1) (other : Alloc_Vec_Vec_Type.t_vec u a2) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 92 434 45] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module Cdsat_Trail_Impl3_DeepModel_Stub
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 87 4 87 44] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    
end
module Cdsat_Trail_Impl3_DeepModel_Interface
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 87 4 87 44] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    
end
module Cdsat_Trail_Impl3_DeepModel
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 87 4 87 44] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 88 8 92 9] match (self) with
      | Cdsat_Trail_Reason_Type.C_Justified a1 -> Cdsat_Trail_ReasonModel_Type.C_Justified (ShallowModel0.shallow_model a1)
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Trail_ReasonModel_Type.C_Decision
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Trail_ReasonModel_Type.C_Input
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 87 4 87 44] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module Cdsat_Trail_Impl13_DeepModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 331 4 331 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl13_DeepModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 331 4 331 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl13_DeepModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 331 4 331 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 332 8 332 12] self
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 331 4 331 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl24_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonModel_Type.t_reasonmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] (self : Cdsat_Trail_Reason_Type.t_reason) (rhs : Cdsat_Trail_Reason_Type.t_reason) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl24_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl13_DeepModel as DeepModel4
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel as DeepModel3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function DeepModel0.deep_model = DeepModel3.deep_model
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  clone Cdsat_Trail_Impl3_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_PartialEq_Impl0_Eq_Interface as Eq0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type u = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a1 = Alloc_Alloc_Global_Type.t_global,
    type a2 = Alloc_Alloc_Global_Type.t_global,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Trail_Reason_Type.t_reason,
    type t2 = Cdsat_Trail_Reason_Type.t_reason,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonModel_Type.t_reasonmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Reason_Type.t_reason) (rhs : Cdsat_Trail_Reason_Type.t_reason) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Reason_Type.t_reason;
  var rhs_2 : Cdsat_Trail_Reason_Type.t_reason;
  var _4 : (Cdsat_Trail_Reason_Type.t_reason, Cdsat_Trail_Reason_Type.t_reason);
  var _5 : Cdsat_Trail_Reason_Type.t_reason;
  var _6 : Cdsat_Trail_Reason_Type.t_reason;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var _10 : isize;
  var v0_1_11 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var v0_2_12 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _13 : bool;
  var _14 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _15 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _6 <- rhs_2;
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB1
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB3
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB4
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB5
      | _ -> goto BB15
      end
  }
  BB2 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] false);
    goto BB12
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB10
      | _ -> goto BB2
      end
  }
  BB4 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB11
      | _ -> goto BB2
      end
  }
  BB5 {
    v0_1_11 <- Cdsat_Trail_Reason_Type.justified_0 (let (a, _) = _4 in a);
    v0_2_12 <- Cdsat_Trail_Reason_Type.justified_0 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _14 <- v0_1_11;
    _15 <- v0_2_12;
    _13 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] Eq0.eq _14 _15);
    goto BB9
  }
  BB6 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] false);
    goto BB8
  }
  BB7 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] true);
    goto BB8
  }
  BB8 {
    goto BB12
  }
  BB9 {
    switch (_13)
      | False -> goto BB6
      | True -> goto BB7
      end
  }
  BB10 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] true);
    goto BB12
  }
  BB11 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] true);
    goto BB12
  }
  BB12 {
    return _0
  }
  BB14 {
    assume { Resolve0.resolve _4 };
    goto BB2
  }
  BB15 {
    assume { Resolve0.resolve _4 };
    goto BB2
  }
  
end
module Cdsat_Trail_Impl18_IsDecision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 782 4 782 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 781 14 781 57] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Decision) }
    
end
module Cdsat_Trail_Impl18_IsDecision
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl3_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonModel_Type.t_reasonmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl24_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/trail.rs" 782 4 782 44]  : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Trail_Reason_Type.C_Decision in let _0 = _1 in _0
  let rec cfg is_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 782 4 782 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 781 14 781 57] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Decision) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : Cdsat_Trail_Reason_Type.t_reason;
  var _4 : Cdsat_Trail_Reason_Type.t_reason;
  var _5 : Cdsat_Trail_Reason_Type.t_reason;
  var _6 : Cdsat_Trail_Reason_Type.t_reason;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_reason self_1;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 783 23 783 39] promoted0);
    _4 <- _6;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 783 8 783 39] Eq0.eq _3 _4);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Cdsat_Trail_Impl15_Justification_Interface
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl14_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 596 4 596 72] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 591 15 591 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 592 15 592 31] Contains0.contains self a}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 593 4 593 91] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 594 14 594 99] AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model result) = Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 595 4 595 105] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> LevelLog0.level_log (Seq.get (ShallowModel0.shallow_model result) i) <= LevelLog0.level_log a }
    
end
module Cdsat_Trail_Impl15_Justification
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use seq.Seq
  use prelude.Ghost
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel5
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel4
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel3 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains3.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains3.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl15_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains2.contains,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains1.contains
  clone Cdsat_Trail_Impl14_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl15_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Alloc_Vec_Impl11_Clone_Interface as Clone0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Cdsat_Theory_Impl4_JustificationContains as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl17_Index_Interface as Index0 with
    predicate Contains0.contains = Contains0.contains,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    val Max0.mAX' = Max0.mAX'
  let rec cfg justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 596 4 596 72] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 591 15 591 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 592 15 592 31] Contains0.contains self a}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 593 4 593 91] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 594 14 594 99] AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model result) = Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 595 4 595 105] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> LevelLog0.level_log (Seq.get (ShallowModel0.shallow_model result) i) <= LevelLog0.level_log a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var self_1 : Cdsat_Trail_Trail_Type.t_trail;
  var a_2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _8 : Cdsat_Trail_Reason_Type.t_reason;
  var _9 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _10 : Cdsat_Trail_Trail_Type.t_trail;
  var _11 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _12 : isize;
  var v_13 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _14 : ();
  var _16 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _10 <- self_1;
    _11 <- a_2;
    _9 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 597 15 597 22] Index0.index _10 _11);
    goto BB1
  }
  BB1 {
    _8 <- Cdsat_Trail_Assignment_Type.assignment_reason _9;
    switch (_8)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB4
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB6
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB2
      end
  }
  BB2 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 604 29 604 39] New0.new ());
    goto BB7
  }
  BB3 {
    absurd
  }
  BB4 {
    v_13 <- Cdsat_Trail_Reason_Type.justified_0 _8;
    assert { [#"/Users/xavier/Code/cdsat/src/trail.rs" 600 16 600 91] let _ = JustificationContains0.justification_contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self_1)) (IndexLogic0.index_logic self_1 a_2) in true };
    _14 <- ();
    _16 <- v_13;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 601 16 601 25] Clone0.clone' _16);
    goto BB5
  }
  BB5 {
    goto BB7
  }
  BB6 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 603 32 603 42] New0.new ());
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  val iter (self : seq t) : Core_Slice_Iter_Iter_Type.t_iter t
    ensures { ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 674 19 674 23] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 679 33 774 2] IntoIterPre0.into_iter_pre self}
    requires {Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 679 33 774 2] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use prelude.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl15_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 682 28 684 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Cdsat_Trail_Impl15_AddDecision_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val add_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 561 4 561 65] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (term : Cdsat_Trail_Term_Type.t_term) (val' : Cdsat_Trail_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 556 15 556 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 558 4 558 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 557 14 557 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 559 4 559 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate into_iter_pre (self : i) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 676 73 677 10] Invariant0.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 677 92 677 103] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/concrete.rs" 399 14 400 3] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/concrete.rs" 399 14 400 3] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 402 8 402 41] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/concrete.rs" 402 76 404 39] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/concrete.rs" 402 76 404 39] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 409 57 410 14] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/concrete.rs" 410 49 411 1] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/concrete.rs" 410 49 411 1] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate gt_log (self : self) (o : self) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 1 0 2 1] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/trail.rs" 3 13 4 20] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/trail.rs" 3 13 4 20] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . [#"/Users/xavier/Code/cdsat/src/trail.rs" 7 6 8 16] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . [#"/Users/xavier/Code/cdsat/src/trail.rs" 7 6 8 16] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 10 48 10 65] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 11 11 11 28] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 12 2 12 19] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 10 48 10 65] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 11 11 11 28] CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 10 48 10 65] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 11 11 11 28] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 12 2 12 19] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 15 6 16 10] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 17 7 18 14] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 15 6 16 10] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 15 6 16 10] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 17 7 18 14] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 21 13 25 5] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 25 22 25 52] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 21 13 25 5] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 21 13 25 5] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 25 22 25 52] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 5 29 50] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 5 29 50] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_Impl8_CmpLog_Stub
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl8_CmpLog_Interface
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl8_CmpLog
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 34 2 40 114] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Cdsat_Trail_Impl11_CmpLog_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl11_CmpLog_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl11_CmpLog
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog_Stub as CmpLog0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 8 273 9] match (CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_0 self) (Cdsat_Trail_TrailIndex_Type.trailindex_0 rhs)) with
      | Core_Cmp_Ordering_Type.C_Less -> Core_Cmp_Ordering_Type.C_Less
      | Core_Cmp_Ordering_Type.C_Greater -> Core_Cmp_Ordering_Type.C_Greater
      | Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_1 self) (Cdsat_Trail_TrailIndex_Type.trailindex_1 rhs)
      end
  val cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self rhs }
    
end
module Cdsat_Trail_Impl11_CmpLeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_CmpLeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 277 14 277 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl11_CmpLeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 276 4 276 10] ()
  val cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 277 14 277 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl11_CmpLeLog_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 277 14 277 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 276 4 276 10] ()
end
module Cdsat_Trail_Impl11_CmpLtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 282 4 282 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_CmpLtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 282 4 282 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 281 14 281 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11_CmpLtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 282 4 282 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 280 4 280 10] ()
  val cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 282 4 282 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 281 14 281 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11_CmpLtLog_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 282 4 282 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 281 14 281 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 280 4 280 10] ()
end
module Cdsat_Trail_Impl11_CmpGeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_CmpGeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 284 14 284 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11_CmpGeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 10] ()
  val cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 284 14 284 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11_CmpGeLog_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 284 14 284 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 10] ()
end
module Cdsat_Trail_Impl11_CmpGtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 4 289 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_CmpGtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 4 289 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 288 14 288 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl11_CmpGtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 4 289 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 287 4 287 10] ()
  val cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 4 289 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 288 14 288 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl11_CmpGtLog_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 4 289 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 288 14 288 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 287 4 287 10] ()
end
module Cdsat_Trail_Impl11_Refl_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 4 293 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_Refl_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 4 293 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 14 292 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl11_Refl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 4 293 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 291 4 291 10] ()
  val refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 4 293 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 14 292 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl11_Refl_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 4 293 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 14 292 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 291 4 291 10] ()
end
module Cdsat_Trail_Impl11_Trans_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
end
module Cdsat_Trail_Impl11_Trans_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 296 15 296 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 297 15 297 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 298 14 298 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl11_Trans
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 295 4 295 10] ()
  val trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 296 15 296 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 297 15 297 32] CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 296 15 296 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 297 15 297 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 298 14 298 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl11_Trans_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 296 15 296 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 297 15 297 32] CmpLog0.cmp_log y z = o}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 298 14 298 31] CmpLog0.cmp_log x z = o }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 295 4 295 10] ()
end
module Cdsat_Trail_Impl11_Antisym1_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_Antisym1_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 302 15 302 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 303 14 303 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl11_Antisym1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 301 4 301 10] ()
  val antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 302 15 302 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 302 15 302 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 303 14 303 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl11_Antisym1_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 302 15 302 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 303 14 303 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 301 4 301 10] ()
end
module Cdsat_Trail_Impl11_Antisym2_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_Antisym2_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 307 15 307 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11_Antisym2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 306 4 306 10] ()
  val antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 307 15 307 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 307 15 307 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11_Antisym2_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 307 15 307 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 306 4 306 10] ()
end
module Cdsat_Trail_Impl11_EqCmp_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl11_EqCmp_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 14 312 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl11_EqCmp
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl11_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 10] ()
  val eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 14 312 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl11_EqCmp_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 14 312 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 10] ()
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val resolve_conflict [#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 111 80] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 15 104 36] Seq.length (ShallowModel0.shallow_model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 105 4 105 99] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model conflict) -> Contains0.contains ( * trail) (Seq.get (ShallowModel0.shallow_model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 106 4 110 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (ShallowModel0.shallow_model conflict) in SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) conflict > 0 /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 41] Invariant0.invariant' ( ^ trail) }
    
end
module Cdsat_Concrete_Impl0_ResolveConflict
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  use prelude.Slice
  use prelude.Seq
  use set.Fset
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl11_EqCmp as EqCmp1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl11_Antisym2 as Antisym21 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl11_Antisym1 as Antisym11 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl11_Trans as Trans1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl11_Refl as Refl1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl11_CmpGtLog as CmpGtLog1 with
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl11_CmpGeLog as CmpGeLog1 with
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl11_CmpLtLog as CmpLtLog1 with
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl11_CmpLeLog as CmpLeLog1 with
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel as ShallowModel13 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel17 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel13.shallow_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel16 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel15
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant6 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant6.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains4 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate1 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains4.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate1.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Contains1.contains = Contains4.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant4 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel as ShallowModel5 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel14 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant5 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant5.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Contains0.contains = Contains4.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_ResolveSound as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains3.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains4.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict1 with
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant4.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant5.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant4.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Resolve0.resolve = Resolve5.resolve,
    function ShallowModel0.shallow_model = ShallowModel17.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel16.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel11 with
    type t = seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel16.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel13.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel11.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant3 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited1 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Invariant0.invariant' = Invariant3.invariant'
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel12 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant5.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains4.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate1.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel8
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel10 with
    function ShallowModel0.shallow_model = ShallowModel15.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel8.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel9 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl2_ShallowModel as ShallowModel1
  use set.Fset
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel7 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl8_Completed as Completed0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve2.resolve,
    function ShallowModel0.shallow_model = ShallowModel14.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_Produces as Produces0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_ProducesTrans as ProducesTrans0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl8_ProducesRefl as ProducesRefl0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant1 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost as IntoIterPost0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre as IntoIterPre0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve7 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision1 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel8.shallow_model
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    function Insert0.insert = Insert1.insert,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification1 with
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains4.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl15_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification1.justification,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains1.contains,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel4.shallow_model,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains3.contains
  clone Cdsat_Trail_Impl14_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl15_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant5.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant2 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Contains0.contains = Contains3.contains,
    predicate Contains1.contains = Contains4.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_Resolve as Resolve6 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Sound0.sound = Sound0.sound,
    function Justification0.justification = Justification1.justification,
    function ResolveSound0.resolve_sound = ResolveSound0.resolve_sound,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Remove0.remove = Remove0.remove,
    predicate Invariant1.invariant' = Invariant4.invariant',
    predicate Sound1.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel2 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Cdsat_Theory_Impl6_Resolvef as Resolvef0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Contains0.contains = Contains3.contains,
    function Justification0.justification = Justification1.justification,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    function ResolveSound0.resolve_sound = ResolveSound0.resolve_sound,
    function Remove0.remove = Remove0.remove,
    predicate Invariant1.invariant' = Invariant4.invariant',
    predicate Sound1.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Trail_Impl15_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant4.invariant',
    function Level0.level = Level1.level,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AddDecision_Interface as AddDecision0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel8.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Impls0.impls = Impls0.impls,
    predicate Unsat0.unsat = Unsat0.unsat
  clone Core_Slice_Iter_Impl181_Next_Interface as Next1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type Item0.item = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter2 with
    type i = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post
  clone Core_Slice_Impl0_Iter_Interface as Iter1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel13.shallow_model
  clone Alloc_Vec_Impl9_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel12.shallow_model
  clone Cdsat_Trail_Impl15_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Justification0.justification = Justification1.justification,
    function LevelLog0.level_log = LevelLog0.level_log,
    val Max0.mAX' = Max0.mAX',
    predicate Contains1.contains = Contains3.contains,
    predicate Contains2.contains = Contains1.contains,
    predicate Invariant1.invariant' = Invariant4.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision
  clone Cdsat_Trail_Impl18_IsDecision_Interface as IsDecision0
  clone Cdsat_Trail_Impl18_IsFirstOrder_Interface as IsFirstOrder0 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl15_AddJustified_Interface as AddJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function ShallowModel2.shallow_model = ShallowModel10.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Invariant1.invariant' = Invariant5.invariant',
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    val Max0.mAX' = Max0.mAX',
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains
  clone Cdsat_Trail_Impl10_Negate_Interface as Negate0 with
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function ShallowModel1.shallow_model = ShallowModel8.shallow_model,
    function Negate0.negate = Negate1.negate
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl3_IntoVec_Interface as IntoVec0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains2.contains,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    predicate Contains1.contains = Contains1.contains,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Invariant1.invariant' = Invariant4.invariant',
    predicate Contains1.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Trail_Impl18_IsBool_Interface as IsBool0 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl19_Clone_Interface as Clone0
  clone Cdsat_Trail_Impl17_Index_Interface as Index0 with
    predicate Contains0.contains = Contains0.contains,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Concrete_Impl3_PopLast_Interface as PopLast0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function Remove0.remove = Remove1.remove,
    predicate Contains0.contains = Contains2.contains,
    predicate LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Trail_Impl14_Level_Interface as Level0
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl3_Last_Interface as Last0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Contains0.contains = Contains2.contains,
    predicate LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Concrete_Impl3_Insert_Interface as Insert0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    function Insert0.insert = Insert2.insert
  clone CreusotContracts_Std1_Vec_Impl11_Resolve as Resolve4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate Resolve0.resolve = Resolve7.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Item0.item = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Alloc_Vec_Impl16_IntoIter_Interface as IntoIter1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve7.resolve,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Concrete_Impl3_New_Interface as New0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Concrete_Solver_Type.t_solver
  let rec cfg resolve_conflict [#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 111 80] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 15 104 36] Seq.length (ShallowModel0.shallow_model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 105 4 105 99] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model conflict) -> Contains0.contains ( * trail) (Seq.get (ShallowModel0.shallow_model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 106 4 110 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (ShallowModel0.shallow_model conflict) in SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) conflict > 0 /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 41] Invariant0.invariant' ( ^ trail) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Cdsat_Concrete_Solver_Type.t_solver);
  var trail_2 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var conflict_3 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var heap_9 : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
  var abs_cflct_10 : Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
  var _12 : ();
  var _13 : ();
  var iter_14 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _15 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_16 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _18 : ();
  var produced_19 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _22 : ();
  var _28 : ();
  var _29 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _30 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _31 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _32 : isize;
  var __creusot_proc_iter_elem_33 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _34 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _36 : ();
  var a_37 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _38 : bool;
  var _39 : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var _40 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _41 : ();
  var _42 : ();
  var _44 : ();
  var max_ix_46 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _47 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _48 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _49 : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
  var conflict_level_50 : usize;
  var _51 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _52 : ();
  var _54 : ();
  var _62 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _63 : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var _64 : isize;
  var ix_65 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _66 : ();
  var _68 : ();
  var rem_level_70 : usize;
  var _71 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _72 : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
  var _73 : isize;
  var ix2_74 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _75 : ();
  var _77 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var a_78 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _79 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _80 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _81 : Cdsat_Trail_Trail_Type.t_trail;
  var _82 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _83 : ();
  var _85 : ();
  var _86 : bool;
  var _87 : bool;
  var _88 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _89 : bool;
  var _90 : usize;
  var _91 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _92 : usize;
  var _93 : ();
  var _94 : ();
  var _95 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _96 : usize;
  var just_97 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _98 : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
  var _99 : ();
  var _100 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _101 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _102 : Cdsat_Trail_Term_Type.t_term;
  var _103 : Cdsat_Trail_Value_Type.t_value;
  var _104 : Cdsat_Trail_Value_Type.t_value;
  var _105 : ();
  var _106 : bool;
  var _107 : bool;
  var _108 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _109 : bool;
  var _110 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _111 : ();
  var _112 : ();
  var _113 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _114 : usize;
  var _115 : usize;
  var _116 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _117 : ();
  var _119 : ();
  var just_121 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _122 : Cdsat_Trail_Trail_Type.t_trail;
  var _123 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _124 : ();
  var _126 : ();
  var _128 : ();
  var iter_129 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _130 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _131 : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _132 : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _133 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_134 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _136 : ();
  var produced_137 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _140 : ();
  var _144 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _145 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _146 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _147 : isize;
  var __creusot_proc_iter_elem_148 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _149 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _151 : ();
  var jix_152 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var j_153 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _154 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _155 : Cdsat_Trail_Trail_Type.t_trail;
  var _156 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _157 : bool;
  var _158 : bool;
  var _159 : bool;
  var _160 : usize;
  var _161 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _162 : usize;
  var _163 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _164 : bool;
  var _165 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _166 : bool;
  var _167 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _168 : ();
  var _169 : ();
  var _170 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _171 : usize;
  var _172 : usize;
  var _173 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _174 : ();
  var _175 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _176 : Cdsat_Trail_Term_Type.t_term;
  var _177 : Cdsat_Trail_Value_Type.t_value;
  var _178 : Cdsat_Trail_Value_Type.t_value;
  var _179 : ();
  var _180 : ();
  var old_c_182 : Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
  var _184 : ();
  var _185 : Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
  var _188 : ();
  var old_heap_189 : Ghost.ghost_ty (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var _191 : ();
  var _192 : ();
  var iter_193 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _194 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_195 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _197 : ();
  var produced_198 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _201 : ();
  var _208 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _209 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _210 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _211 : isize;
  var __creusot_proc_iter_elem_212 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _213 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _215 : ();
  var a_216 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _217 : bool;
  var _218 : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var _219 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _220 : ();
  var _221 : ();
  var _223 : ();
  var _225 : ();
  var _227 : ();
  var _229 : ();
  var _230 : ();
  var _231 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    conflict_3 <- conflict;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    heap_9 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 37 113 56] New0.new ());
    goto BB4
  }
  BB4 {
    _12 <- ();
    abs_cflct_10 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 53 114 156] Ghost.new (Cdsat_Theory_Conflict_Type.C_Conflict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2))) (AbstractJustification0.abstract_justification ( * trail_2) (ShallowModel0.shallow_model conflict_3))));
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _15 };
    _15 <- conflict_3;
    conflict_3 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    iter_14 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] IntoIter1.into_iter _15);
    goto BB6
  }
  BB6 {
    _18 <- ();
    iter_old_16 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] Ghost.new iter_14);
    goto BB7
  }
  BB7 {
    _22 <- ();
    produced_19 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] Ghost.new (Seq.empty ));
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    invariant type_invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] Invariant1.invariant' iter_14 };
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] Produces0.produces (Ghost.inner iter_old_16) (Ghost.inner produced_19) iter_14 };
    invariant mem { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (Ghost.inner produced_19) a -> Contains2.contains (ShallowModel1.shallow_model heap_9) a };
    invariant mem { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced_19) -> Contains2.contains (ShallowModel1.shallow_model heap_9) (Seq.get (Ghost.inner produced_19) i) };
    invariant mem2 { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) a -> Contains1.contains (Ghost.inner produced_19) a };
    _31 <- borrow_mut iter_14;
    iter_14 <-  ^ _31;
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    assume { Resolve2.resolve _31 };
    _29 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] Next0.next _30);
    goto BB15
  }
  BB15 {
    switch (_29)
      | Core_Option_Option_Type.C_None -> goto BB16
      | Core_Option_Option_Type.C_Some _ -> goto BB18
      end
  }
  BB16 {
    assume { Resolve4.resolve iter_14 };
    _13 <- ();
    goto BB21
  }
  BB17 {
    assume { Resolve3.resolve trail_2 };
    assume { Resolve4.resolve iter_14 };
    absurd
  }
  BB18 {
    __creusot_proc_iter_elem_33 <- Core_Option_Option_Type.some_0 _29;
    _36 <- ();
    _34 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 116 8 116 85] Ghost.new (Seq.(++) (Ghost.inner produced_19) (Seq.singleton __creusot_proc_iter_elem_33)));
    goto BB19
  }
  BB19 {
    produced_19 <- _34;
    _34 <- any Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    a_37 <- __creusot_proc_iter_elem_33;
    _39 <- borrow_mut heap_9;
    heap_9 <-  ^ _39;
    _40 <- a_37;
    _38 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 120 12 120 26] Insert0.insert _39 _40);
    goto BB20
  }
  BB20 {
    _28 <- ();
    goto BB14
  }
  BB21 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 122 8 122 103] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) a -> Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct_10)) (IndexLogic0.index_logic ( * trail_2) a) };
    goto BB22
  }
  BB22 {
    _42 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 124 22 124 44] ShallowModel1.shallow_model heap_9 <> Fset.empty  };
    goto BB23
  }
  BB23 {
    _44 <- ();
    _49 <- heap_9;
    _48 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 125 22 125 33] Last0.last _49);
    goto BB24
  }
  BB24 {
    _47 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 125 22 125 42] Unwrap0.unwrap _48);
    goto BB25
  }
  BB25 {
    max_ix_46 <- _47;
    _51 <- max_ix_46;
    conflict_level_50 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 126 29 126 43] Level0.level _51);
    goto BB26
  }
  BB26 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 8 127 80] exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) ix /\ LevelLog0.level_log ix > 0 };
    goto BB27
  }
  BB27 {
    _52 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 128 22 128 41] 0 < UIntSize.to_int conflict_level_50 };
    _54 <- ();
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    invariant cflict { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 129 28 129 55] Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct_10) = Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2)) };
    invariant cflct_sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 130 33 130 50] Sound0.sound (Ghost.inner abs_cflct_10) };
    invariant cflict_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 131 32 131 53] Invariant2.invariant' (Ghost.inner abs_cflct_10) };
    invariant level { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 129 8 129 57] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) ix -> LevelLog0.level_log ix <= UIntSize.to_int conflict_level_50 };
    invariant to_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 129 8 129 57] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) a -> Contains0.contains ( * trail_2) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct_10)) (IndexLogic0.index_logic ( * trail_2) a) };
    invariant from_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 129 8 129 57] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct_10)) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * trail_2) ix /\ Contains2.contains (ShallowModel1.shallow_model heap_9) ix /\ IndexLogic0.index_logic ( * trail_2) ix = a) };
    _63 <- borrow_mut heap_9;
    heap_9 <-  ^ _63;
    _62 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 135 29 135 44] PopLast0.pop_last _63);
    goto BB32
  }
  BB32 {
    switch (_62)
      | Core_Option_Option_Type.C_Some _ -> goto BB33
      | _ -> goto BB115
      end
  }
  BB33 {
    ix_65 <- Core_Option_Option_Type.some_0 _62;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 136 26 136 47] not Contains2.contains (ShallowModel1.shallow_model heap_9) ix_65 };
    goto BB34
  }
  BB34 {
    _66 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 138 26 138 62] LevelLog0.level_log ix_65 <= LevelLog0.level_log max_ix_46 };
    _68 <- ();
    _72 <- heap_9;
    _71 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 139 34 139 45] Last0.last _72);
    goto BB35
  }
  BB35 {
    switch (_71)
      | Core_Option_Option_Type.C_None -> goto BB36
      | Core_Option_Option_Type.C_Some _ -> goto BB38
      end
  }
  BB36 {
    rem_level_70 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 144 24 144 25] (0 : usize));
    goto BB40
  }
  BB37 {
    assume { Resolve3.resolve trail_2 };
    absurd
  }
  BB38 {
    ix2_74 <- Core_Option_Option_Type.some_0 _71;
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 34 141 67] LevelLog0.level_log ix2_74 <= LevelLog0.level_log ix_65 };
    _75 <- ();
    _77 <- ix2_74;
    rem_level_70 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 142 20 142 31] Level0.level _77);
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    _81 <-  * trail_2;
    _82 <- ix_65;
    _80 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 147 20 147 29] Index0.index _81 _82);
    goto BB41
  }
  BB41 {
    _79 <- _80;
    a_78 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 147 20 147 37] Clone0.clone' _79);
    goto BB42
  }
  BB42 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 148 26 148 54] UIntSize.to_int rem_level_70 <= LevelLog0.level_log ix_65 };
    _83 <- ();
    _88 <- a_78;
    _87 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 150 15 150 26] IsBool0.is_bool _88);
    goto BB46
  }
  BB43 {
    _86 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 150 15 150 52] false);
    goto BB45
  }
  BB44 {
    _91 <- ix_65;
    _90 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 150 30 150 40] Level0.level _91);
    goto BB47
  }
  BB45 {
    switch (_86)
      | False -> goto BB53
      | True -> goto BB48
      end
  }
  BB46 {
    switch (_87)
      | False -> goto BB43
      | True -> goto BB44
      end
  }
  BB47 {
    _92 <- rem_level_70;
    _89 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 150 30 150 52] _90 > _92);
    _86 <- _89;
    _89 <- any bool;
    goto BB45
  }
  BB48 {
    _95 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _95) };
    _96 <- rem_level_70;
    _94 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 151 16 151 41] Restrict0.restrict _95 _96);
    goto BB49
  }
  BB49 {
    _98 <- heap_9;
    heap_9 <- any Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
    just_97 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 152 27 152 42] IntoVec0.into_vec _98);
    goto BB50
  }
  BB50 {
    _100 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _100) };
    assume { Resolve3.resolve trail_2 };
    assume { Resolve1.resolve _101 };
    _101 <- just_97;
    just_97 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    _102 <- Cdsat_Trail_Assignment_Type.assignment_term a_78;
    a_78 <- (let Cdsat_Trail_Assignment_Type.C_Assignment a b c d = a_78 in Cdsat_Trail_Assignment_Type.C_Assignment (any Cdsat_Trail_Term_Type.t_term) b c d);
    _104 <- Cdsat_Trail_Assignment_Type.assignment_val a_78;
    _103 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 50 153 64] Negate0.negate _104);
    goto BB51
  }
  BB51 {
    _99 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 153 16 153 65] AddJustified0.add_justified _100 _101 _102 _103);
    goto BB52
  }
  BB52 {
    _0 <- ();
    goto BB118
  }
  BB53 {
    _85 <- ();
    _108 <- a_78;
    _107 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 15 164 33] IsFirstOrder0.is_first_order _108);
    goto BB57
  }
  BB54 {
    _106 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 15 164 52] false);
    goto BB56
  }
  BB55 {
    _110 <- a_78;
    _109 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 37 164 52] IsDecision0.is_decision _110);
    goto BB58
  }
  BB56 {
    switch (_106)
      | False -> goto BB62
      | True -> goto BB59
      end
  }
  BB57 {
    switch (_107)
      | False -> goto BB54
      | True -> goto BB55
      end
  }
  BB58 {
    _106 <- _109;
    _109 <- any bool;
    goto BB56
  }
  BB59 {
    _113 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _113) };
    assume { Resolve3.resolve trail_2 };
    _116 <- ix_65;
    _115 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 165 31 165 41] Level0.level _116);
    goto BB60
  }
  BB60 {
    _114 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 165 31 165 45] _115 - ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 165 44 165 45] (1 : usize)));
    _112 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 165 16 165 46] Restrict0.restrict _113 _114);
    goto BB61
  }
  BB61 {
    _0 <- ();
    goto BB119
  }
  BB62 {
    _105 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 26 172 54] UIntSize.to_int rem_level_70 = LevelLog0.level_log ix_65 };
    _117 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 12 174 67] not IsDecision1.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2))) (TermValue0.term_value a_78) };
    _119 <- ();
    _122 <-  * trail_2;
    _123 <- ix_65;
    just_121 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 176 23 176 46] Justification0.justification _122 _123);
    goto BB63
  }
  BB63 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 179 12 179 64] not IsInput0.is_input (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2))) (TermValue0.term_value a_78) };
    _124 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 181 12 181 97] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2))) (TermValue0.term_value a_78) /\ IsBool1.is_bool (let (_, a) = TermValue0.term_value a_78 in a) };
    _126 <- ();
    _133 <- just_121;
    _132 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 23 184 34] Deref0.deref _133);
    goto BB64
  }
  BB64 {
    _131 <- _132;
    _130 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 23 184 34] Iter1.iter _131);
    goto BB65
  }
  BB65 {
    iter_129 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] IntoIter2.into_iter _130);
    goto BB66
  }
  BB66 {
    _136 <- ();
    iter_old_134 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] Ghost.new iter_129);
    goto BB67
  }
  BB67 {
    _140 <- ();
    produced_137 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] Ghost.new (Seq.empty ));
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    invariant type_invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] Invariant3.invariant' iter_129 };
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] Produces1.produces (Ghost.inner iter_old_134) (Ghost.inner produced_137) iter_129 };
    invariant dummy { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 31 183 35] true };
    _146 <- borrow_mut iter_129;
    iter_129 <-  ^ _146;
    _145 <- borrow_mut ( * _146);
    _146 <- { _146 with current = ( ^ _145) };
    assume { Resolve5.resolve _146 };
    _144 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] Next1.next _145);
    goto BB70
  }
  BB70 {
    switch (_144)
      | Core_Option_Option_Type.C_None -> goto BB71
      | Core_Option_Option_Type.C_Some _ -> goto BB73
      end
  }
  BB71 {
    _128 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 195 12 200 13] let j = AbstractJustification0.abstract_justification ( * trail_2) (ShallowModel0.shallow_model just_121) in forall t : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains3.contains j t -> not IsBool1.is_bool (let (_, a) = t in a) -> IsDecision1.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct_10)) t -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct_10)) t < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct_10)) (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct_10)) };
    goto BB92
  }
  BB72 {
    assume { Resolve3.resolve trail_2 };
    assume { Resolve1.resolve just_121 };
    absurd
  }
  BB73 {
    __creusot_proc_iter_elem_148 <- Core_Option_Option_Type.some_0 _144;
    _151 <- ();
    _149 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 12 183 37] Ghost.new (Seq.(++) (Ghost.inner produced_137) (Seq.singleton __creusot_proc_iter_elem_148)));
    goto BB74
  }
  BB74 {
    produced_137 <- _149;
    _149 <- any Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    jix_152 <- __creusot_proc_iter_elem_148;
    _155 <-  * trail_2;
    _156 <- jix_152;
    _154 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 185 25 185 36] Index0.index _155 _156);
    goto BB75
  }
  BB75 {
    j_153 <- _154;
    _161 <- jix_152;
    _160 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 19 187 30] Level0.level _161);
    goto BB82
  }
  BB76 {
    _157 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 19 187 85] false);
    goto BB78
  }
  BB77 {
    _167 <- j_153;
    _166 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 70 187 85] IsDecision0.is_decision _167);
    goto BB85
  }
  BB78 {
    switch (_157)
      | False -> goto BB91
      | True -> goto BB86
      end
  }
  BB79 {
    _158 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 19 187 66] false);
    goto BB81
  }
  BB80 {
    _165 <- j_153;
    _164 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 48 187 66] IsFirstOrder0.is_first_order _165);
    goto BB84
  }
  BB81 {
    switch (_158)
      | False -> goto BB76
      | True -> goto BB77
      end
  }
  BB82 {
    _163 <- ix_65;
    _162 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 34 187 44] Level0.level _163);
    goto BB83
  }
  BB83 {
    _159 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 19 187 44] _160 = _162);
    switch (_159)
      | False -> goto BB79
      | True -> goto BB80
      end
  }
  BB84 {
    _158 <- _164;
    _164 <- any bool;
    goto BB81
  }
  BB85 {
    _157 <- _166;
    _166 <- any bool;
    goto BB78
  }
  BB86 {
    assume { Resolve1.resolve just_121 };
    _170 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _170) };
    _173 <- ix_65;
    _172 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 189 35 189 45] Level0.level _173);
    goto BB87
  }
  BB87 {
    _171 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 189 35 189 49] _172 - ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 189 48 189 49] (1 : usize)));
    _169 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 189 20 189 50] Restrict0.restrict _170 _171);
    goto BB88
  }
  BB88 {
    _175 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _175) };
    assume { Resolve3.resolve trail_2 };
    _176 <- Cdsat_Trail_Assignment_Type.assignment_term a_78;
    a_78 <- (let Cdsat_Trail_Assignment_Type.C_Assignment a b c d = a_78 in Cdsat_Trail_Assignment_Type.C_Assignment (any Cdsat_Trail_Term_Type.t_term) b c d);
    _178 <- Cdsat_Trail_Assignment_Type.assignment_val a_78;
    _177 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 190 47 190 61] Negate0.negate _178);
    goto BB89
  }
  BB89 {
    _174 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 190 20 190 62] AddDecision0.add_decision _175 _176 _177);
    goto BB90
  }
  BB90 {
    _0 <- ();
    goto BB117
  }
  BB91 {
    _28 <- ();
    goto BB69
  }
  BB92 {
    _180 <- ();
    _184 <- ();
    old_c_182 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 204 49 204 77] Ghost.new (Ghost.inner abs_cflct_10));
    goto BB93
  }
  BB93 {
    _188 <- ();
    _185 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 205 24 205 69] Ghost.new (Resolvef0.resolvef (Ghost.inner abs_cflct_10) (TermValue0.term_value a_78)));
    goto BB94
  }
  BB94 {
    abs_cflct_10 <- _185;
    _185 <- any Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
    _191 <- ();
    old_heap_189 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 207 48 207 63] Ghost.new heap_9);
    goto BB95
  }
  BB95 {
    assume { Resolve1.resolve _194 };
    _194 <- just_121;
    just_121 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    iter_193 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] IntoIter1.into_iter _194);
    goto BB96
  }
  BB96 {
    _197 <- ();
    iter_old_195 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] Ghost.new iter_193);
    goto BB97
  }
  BB97 {
    _201 <- ();
    produced_198 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] Ghost.new (Seq.empty ));
    goto BB98
  }
  BB98 {
    goto BB99
  }
  BB99 {
    goto BB100
  }
  BB100 {
    goto BB101
  }
  BB101 {
    goto BB102
  }
  BB102 {
    goto BB103
  }
  BB103 {
    goto BB104
  }
  BB104 {
    goto BB105
  }
  BB105 {
    invariant type_invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] Invariant1.invariant' iter_193 };
    invariant structural { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] Produces0.produces (Ghost.inner iter_old_195) (Ghost.inner produced_198) iter_193 };
    invariant level { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) ix -> LevelLog0.level_log ix <= UIntSize.to_int conflict_level_50 };
    invariant to_cflct { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel1.shallow_model heap_9) a -> Contains0.contains ( * trail_2) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct_10)) (IndexLogic0.index_logic ( * trail_2) a) };
    invariant adding { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains (ShallowModel2.shallow_model old_heap_189) ix -> Contains2.contains (ShallowModel1.shallow_model heap_9) ix };
    invariant seen { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced_198) -> Contains2.contains (ShallowModel1.shallow_model heap_9) (Seq.get (Ghost.inner produced_198) i) };
    _210 <- borrow_mut iter_193;
    iter_193 <-  ^ _210;
    _209 <- borrow_mut ( * _210);
    _210 <- { _210 with current = ( ^ _209) };
    assume { Resolve2.resolve _210 };
    _208 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] Next0.next _209);
    goto BB106
  }
  BB106 {
    switch (_208)
      | Core_Option_Option_Type.C_None -> goto BB107
      | Core_Option_Option_Type.C_Some _ -> goto BB109
      end
  }
  BB107 {
    assume { Resolve4.resolve iter_193 };
    _192 <- ();
    goto BB112
  }
  BB108 {
    assume { Resolve3.resolve trail_2 };
    assume { Resolve4.resolve iter_193 };
    absurd
  }
  BB109 {
    __creusot_proc_iter_elem_212 <- Core_Option_Option_Type.some_0 _208;
    _215 <- ();
    _213 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 209 12 209 106] Ghost.new (Seq.(++) (Ghost.inner produced_198) (Seq.singleton __creusot_proc_iter_elem_212)));
    goto BB110
  }
  BB110 {
    produced_198 <- _213;
    _213 <- any Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    a_216 <- __creusot_proc_iter_elem_212;
    _218 <- borrow_mut heap_9;
    heap_9 <-  ^ _218;
    _219 <- a_216;
    _217 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 215 16 215 30] Insert0.insert _218 _219);
    goto BB111
  }
  BB111 {
    _28 <- ();
    goto BB105
  }
  BB112 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 218 12 218 63] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner old_c_182)) (TermValue0.term_value a_78) };
    _221 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 219 12 219 59] Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner old_c_182)) (TermValue0.term_value a_78) };
    _223 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 224 12 224 206] let just = Justification1.justification (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner old_c_182)) (TermValue0.term_value a_78) in forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains3.contains just a /\ not IsBool1.is_bool (let (_, a) = a in a) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner old_c_182)) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner old_c_182)) (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner old_c_182)) };
    _225 <- ();
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 226 26 226 70] Resolve6.resolve (Ghost.inner old_c_182) (TermValue0.term_value a_78) (Ghost.inner abs_cflct_10) };
    _227 <- ();
    _28 <- ();
    goto BB113
  }
  BB113 {
    goto BB114
  }
  BB114 {
    goto BB31
  }
  BB115 {
    assume { Resolve3.resolve trail_2 };
    _0 <- ();
    goto BB116
  }
  BB116 {
    goto BB122
  }
  BB117 {
    goto BB119
  }
  BB118 {
    goto BB119
  }
  BB119 {
    goto BB120
  }
  BB120 {
    goto BB121
  }
  BB121 {
    goto BB122
  }
  BB122 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat1
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_Unsat_Stub as Unsat0
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat1.unsat,
    axiom .
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val solver [#"/Users/xavier/Code/cdsat/src/concrete.rs" 40 4 40 57] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_Answer_Type.t_answer
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 32 15 32 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 33 14 33 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 34 4 34 50] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 14 39 5] match (result) with
      | Cdsat_Concrete_Answer_Type.C_Unsat -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.C_Sat -> true
      | Cdsat_Concrete_Answer_Type.C_Unknown -> true
      end }
    
end
module Cdsat_Concrete_Impl0_Solver
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len1 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max as Max0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel8 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel7
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len1.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len1.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel3
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel6 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl14_LevelLog as LevelLog0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound0.sound
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains1.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len1.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat1 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl15_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains1.contains = Contains3.contains,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel6.shallow_model,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl15_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat1.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl15_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len1.len,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AddDecision_Interface as AddDecision0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Impls0.impls = Impls0.impls,
    predicate Unsat0.unsat = Unsat1.unsat
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Concrete_Impl0_ResolveConflict_Interface as ResolveConflict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    val Max0.mAX' = Max0.mAX',
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl5_Fail2 as Fail20 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound1.sound,
    predicate Unsat0.unsat = Unsat1.unsat,
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Trail_Impl15_MaxLevel_Interface as MaxLevel0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Alloc_Vec_Impl9_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Resolve0.resolve = Resolve3.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Concrete_Solver_Type.t_solver
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Concrete_Impl1_Extend_Interface as Extend0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    function ShallowModel2.shallow_model = ShallowModel0.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Impls0.impls = Impls0.impls,
    val Max0.mAX' = Max0.mAX',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    predicate Unsat0.unsat = Unsat1.unsat
  clone Cdsat_Trail_Impl15_Len_Interface as Len0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Unsat as Unsat0 with
    predicate Unsat0.unsat = Unsat1.unsat
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  let rec cfg solver [#"/Users/xavier/Code/cdsat/src/concrete.rs" 40 4 40 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_Answer_Type.t_answer
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 32 15 32 32] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 33 14 33 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 34 4 34 50] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 14 39 5] match (result) with
      | Cdsat_Concrete_Answer_Type.C_Unsat -> Unsat0.unsat ( * trail)
      | Cdsat_Concrete_Answer_Type.C_Sat -> true
      | Cdsat_Concrete_Answer_Type.C_Unknown -> true
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Concrete_Answer_Type.t_answer;
  var self_1 : borrowed (Cdsat_Concrete_Solver_Type.t_solver);
  var trail_2 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var old_trail_7 : Ghost.ghost_ty (borrowed (Cdsat_Trail_Trail_Type.t_trail));
  var _9 : ();
  var _13 : ();
  var _14 : ();
  var states_15 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _16 : ();
  var trail_len_20 : usize;
  var _21 : Cdsat_Trail_Trail_Type.t_trail;
  var th_res_22 : Cdsat_Concrete_ExtendResult_Type.t_extendresult;
  var _23 : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory);
  var _24 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _25 : ();
  var _26 : bool;
  var _27 : usize;
  var _28 : usize;
  var _29 : Cdsat_Trail_Trail_Type.t_trail;
  var _30 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _31 : ();
  var _32 : isize;
  var c_33 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _34 : ();
  var _35 : bool;
  var _36 : usize;
  var _37 : Cdsat_Trail_Trail_Type.t_trail;
  var _38 : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _39 : seq (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _40 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _41 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _42 : ();
  var _43 : ();
  var _45 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _46 : borrowed (Cdsat_Concrete_Solver_Type.t_solver);
  var _47 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _48 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var t_49 : Cdsat_Trail_Term_Type.t_term;
  var v_50 : Cdsat_Trail_Value_Type.t_value;
  var _51 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _52 : Cdsat_Trail_Term_Type.t_term;
  var _53 : Cdsat_Trail_Value_Type.t_value;
  var _54 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _55 : bool;
  var _56 : isize;
  var _57 : ();
  var _58 : ();
  var _60 : isize;
  var _61 : ();
  var t_62 : Cdsat_Trail_Term_Type.t_term;
  var v_63 : Cdsat_Trail_Value_Type.t_value;
  var _64 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _65 : Cdsat_Trail_Term_Type.t_term;
  var _66 : Cdsat_Trail_Value_Type.t_value;
  var _67 : ();
  {
    self_1 <- self;
    trail_2 <- trail;
    goto BB0
  }
  BB0 {
    _9 <- ();
    old_trail_7 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 41 43 41 59] Ghost.new trail_2);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant tl_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 45 28 45 45] Invariant0.invariant' ( * trail_2) };
    invariant proph { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 46 27 46 48]  ^ trail_2 =  ^ Ghost.inner old_trail_7 };
    invariant sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 45 8 45 47] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old_trail_7))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2))) };
    goto BB3
  }
  BB3 {
    invariant tl_inv { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 32 57 49] Invariant0.invariant' ( * trail_2) };
    invariant proph { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 31 58 52]  ^ trail_2 =  ^ Ghost.inner old_trail_7 };
    invariant sound { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 12 57 51] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old_trail_7))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2))) };
    _21 <-  * trail_2;
    trail_len_20 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 62 32 62 43] Len0.len _21);
    goto BB4
  }
  BB4 {
    _23 <- borrow_mut (Cdsat_Concrete_Solver_Type.solver_bool_th ( * self_1));
    self_1 <- { self_1 with current = (let Cdsat_Concrete_Solver_Type.C_Solver a =  * self_1 in Cdsat_Concrete_Solver_Type.C_Solver ( ^ _23)) };
    _24 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _24) };
    th_res_22 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 63 29 63 55] Extend0.extend _23 _24);
    goto BB5
  }
  BB5 {
    _27 <- trail_len_20;
    _29 <-  * trail_2;
    _28 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 64 32 64 43] Len0.len _29);
    goto BB6
  }
  BB6 {
    _26 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 64 19 64 43] _27 <> _28);
    switch (_26)
      | False -> goto BB11
      | True -> goto BB7
      end
  }
  BB7 {
    _30 <- Cdsat_Concrete_TheoryState_Type.C_Unknown;
    goto BB8
  }
  BB8 {
    states_15 <- _30;
    _30 <- any Cdsat_Concrete_TheoryState_Type.t_theorystate;
    goto BB10
  }
  BB10 {
    _25 <- ();
    goto BB12
  }
  BB11 {
    _25 <- ();
    goto BB12
  }
  BB12 {
    switch (th_res_22)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict _ -> goto BB15
      | Cdsat_Concrete_ExtendResult_Type.C_Decision _ _ -> goto BB26
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> goto BB13
      end
  }
  BB13 {
    _54 <- Cdsat_Concrete_TheoryState_Type.C_Sat;
    goto BB32
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    absurd
  }
  BB15 {
    assume { Resolve2.resolve c_33 };
    c_33 <- Cdsat_Concrete_ExtendResult_Type.conflict_0 th_res_22;
    th_res_22 <- (let Cdsat_Concrete_ExtendResult_Type.C_Conflict a = th_res_22 in Cdsat_Concrete_ExtendResult_Type.C_Conflict (any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)));
    _37 <-  * trail_2;
    _41 <- c_33;
    _40 <- _41;
    _39 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 71 43 71 45] Deref0.deref _40);
    goto BB16
  }
  BB16 {
    _38 <- _39;
    _36 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 71 27 71 46] MaxLevel0.max_level _37 _38);
    goto BB17
  }
  BB17 {
    _35 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 71 27 71 51] _36 = ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 71 50 71 51] (0 : usize)));
    switch (_35)
      | False -> goto BB20
      | True -> goto BB18
      end
  }
  BB18 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    assume { Resolve2.resolve c_33 };
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 73 42 73 110] Fail20.fail2 (Cdsat_Theory_Normal_Type.C_Normal (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail_2)))) (AbstractJustification0.abstract_justification ( * trail_2) (ShallowModel0.shallow_model c_33)) };
    goto BB19
  }
  BB19 {
    _43 <- ();
    _0 <- Cdsat_Concrete_Answer_Type.C_Unsat;
    goto BB49
  }
  BB20 {
    _34 <- ();
    _45 <- Cdsat_Concrete_TheoryState_Type.C_Unknown;
    goto BB21
  }
  BB21 {
    states_15 <- _45;
    _45 <- any Cdsat_Concrete_TheoryState_Type.t_theorystate;
    goto BB23
  }
  BB23 {
    _46 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _46) };
    _47 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _47) };
    assume { Resolve2.resolve _48 };
    _48 <- c_33;
    c_33 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    _31 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 79 24 79 55] ResolveConflict0.resolve_conflict _46 _47 _48);
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB35
  }
  BB26 {
    t_49 <- Cdsat_Concrete_ExtendResult_Type.decision_0 th_res_22;
    th_res_22 <- (let Cdsat_Concrete_ExtendResult_Type.C_Decision a b = th_res_22 in Cdsat_Concrete_ExtendResult_Type.C_Decision (any Cdsat_Trail_Term_Type.t_term) b);
    v_50 <- Cdsat_Concrete_ExtendResult_Type.decision_1 th_res_22;
    th_res_22 <- (let Cdsat_Concrete_ExtendResult_Type.C_Decision a b = th_res_22 in Cdsat_Concrete_ExtendResult_Type.C_Decision a (any Cdsat_Trail_Value_Type.t_value));
    _52 <- t_49;
    t_49 <- any Cdsat_Trail_Term_Type.t_term;
    _53 <- v_50;
    v_50 <- any Cdsat_Trail_Value_Type.t_value;
    _51 <- Cdsat_Concrete_TheoryState_Type.C_Decision _52 _53;
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    states_15 <- _51;
    _51 <- any Cdsat_Concrete_TheoryState_Type.t_theorystate;
    _31 <- ();
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB35
  }
  BB32 {
    states_15 <- _54;
    _54 <- any Cdsat_Concrete_TheoryState_Type.t_theorystate;
    _31 <- ();
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    switch (states_15)
      | Cdsat_Concrete_TheoryState_Type.C_Sat -> goto BB37
      | Cdsat_Concrete_TheoryState_Type.C_Decision _ _ -> goto BB37
      | _ -> goto BB36
      end
  }
  BB36 {
    _55 <- false;
    goto BB38
  }
  BB37 {
    _55 <- true;
    goto BB38
  }
  BB38 {
    switch (_55)
      | False -> goto BB40
      | True -> goto BB39
      end
  }
  BB39 {
    _16 <- ();
    goto BB42
  }
  BB40 {
    _14 <- ();
    goto BB41
  }
  BB41 {
    goto BB3
  }
  BB42 {
    assert { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 90 28 90 45] Invariant0.invariant' ( * trail_2) };
    _58 <- ();
    switch (states_15)
      | Cdsat_Concrete_TheoryState_Type.C_Sat -> goto BB44
      | Cdsat_Concrete_TheoryState_Type.C_Decision _ _ -> goto BB45
      | _ -> goto BB43
      end
  }
  BB43 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    absurd
  }
  BB44 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve trail_2 };
    _0 <- Cdsat_Concrete_Answer_Type.C_Sat;
    goto BB51
  }
  BB45 {
    t_62 <- Cdsat_Concrete_TheoryState_Type.decision_0 states_15;
    states_15 <- (let Cdsat_Concrete_TheoryState_Type.C_Decision a b = states_15 in Cdsat_Concrete_TheoryState_Type.C_Decision (any Cdsat_Trail_Term_Type.t_term) b);
    v_63 <- Cdsat_Concrete_TheoryState_Type.decision_1 states_15;
    states_15 <- (let Cdsat_Concrete_TheoryState_Type.C_Decision a b = states_15 in Cdsat_Concrete_TheoryState_Type.C_Decision a (any Cdsat_Trail_Value_Type.t_value));
    _64 <- borrow_mut ( * trail_2);
    trail_2 <- { trail_2 with current = ( ^ _64) };
    _65 <- t_62;
    t_62 <- any Cdsat_Trail_Term_Type.t_term;
    _66 <- v_63;
    v_63 <- any Cdsat_Trail_Value_Type.t_value;
    _14 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 97 47 97 71] AddDecision0.add_decision _64 _65 _66);
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB48
  }
  BB48 {
    goto BB2
  }
  BB49 {
    goto BB50
  }
  BB50 {
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    return _0
  }
  
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Cdsat_Concrete_Impl1_Eval_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  val eval [#"/Users/xavier/Code/cdsat/src/concrete.rs" 321 4 321 87] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Trail_Term_Type.t_term) : Core_Result_Result_Type.t_result (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Cdsat_Trail_Value_Type.t_value) (Cdsat_Trail_Term_Type.t_term)
    
end
module Cdsat_Concrete_Impl1_EvalMemo_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_BoolTheory_Type as Cdsat_Concrete_BoolTheory_Type
  val eval_memo [#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 4 353 92] (self : borrowed (Cdsat_Concrete_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Trail_Term_Type.t_term) : Core_Result_Result_Type.t_result (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Cdsat_Trail_Value_Type.t_value) (Cdsat_Trail_Term_Type.t_term)
    
end
module Cdsat_Trail_AssignmentModel_Type
  use prelude.Int
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assignmentmodel  =
    | C_AssignmentModel (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value) (Cdsat_Trail_ReasonModel_Type.t_reasonmodel) int
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : t) (other : t) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 92 434 45] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Core_Cmp_Impls_Impl25_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt64
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = uint64,
    type DeepModelTy0.deepModelTy = int
  val eq (self : uint64) (other : uint64) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 92 434 45] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Core_Cmp_Impls_Impl19_Eq_Interface
  use prelude.Borrow
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = bool,
    type DeepModelTy0.deepModelTy = bool
  val eq (self : bool) (other : bool) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 92 434 45] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl9_DeepModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 44] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl9_DeepModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 44] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Trail_Impl9_DeepModel
  use prelude.UInt64
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 44] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 226 8 229 9] match (self) with
      | Cdsat_Trail_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool b
      | Cdsat_Trail_Value_Type.C_Rat r -> Cdsat_Theory_Value_Type.C_Rat (UInt64.to_int r)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 44] (self : Cdsat_Trail_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl14_DeepModel_Stub
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl14_DeepModel_Interface
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl14_DeepModel
  use prelude.Int
  use prelude.UInt64
  function deep_model (self : uint64) : int =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 317 28 317 47] UInt64.to_int self
  val deep_model (self : uint64) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl9_DeepModel_Stub
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl9_DeepModel_Interface
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl9_DeepModel
  function deep_model (self : bool) : bool =
    self
  val deep_model (self : bool) : bool
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl36_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] (self : Cdsat_Trail_Value_Type.t_value) (rhs : Cdsat_Trail_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl36_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.UInt64
  clone CreusotContracts_Model_Impl9_DeepModel as DeepModel5
  clone CreusotContracts_Logic_Int_Impl14_DeepModel as DeepModel4
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel3 with
    type t = bool,
    type DeepModelTy0.deepModelTy = bool,
    function DeepModel0.deep_model = DeepModel5.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = uint64,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel4.deep_model
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Trail_Value_Type.t_value
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel1
  clone Core_Cmp_Impls_Impl19_Eq_Interface as Eq1 with
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Cmp_Impls_Impl25_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Trail_Value_Type.t_value,
    type t2 = Cdsat_Trail_Value_Type.t_value,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Value_Type.t_value) (rhs : Cdsat_Trail_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Value_Type.t_value;
  var rhs_2 : Cdsat_Trail_Value_Type.t_value;
  var _4 : (Cdsat_Trail_Value_Type.t_value, Cdsat_Trail_Value_Type.t_value);
  var _5 : Cdsat_Trail_Value_Type.t_value;
  var _6 : Cdsat_Trail_Value_Type.t_value;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var v0_1_10 : bool;
  var v0_2_11 : bool;
  var _12 : bool;
  var _13 : bool;
  var _14 : bool;
  var v0_1_15 : uint64;
  var v0_2_16 : uint64;
  var _17 : bool;
  var _18 : uint64;
  var _19 : uint64;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _6 <- rhs_2;
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Cdsat_Trail_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Trail_Value_Type.C_Rat _ -> goto BB3
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Value_Type.C_Bool _ -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve _4 };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] false);
    goto BB14
  }
  BB3 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Value_Type.C_Rat _ -> goto BB9
      | _ -> goto BB2
      end
  }
  BB4 {
    v0_1_10 <- Cdsat_Trail_Value_Type.bool_0 (let (a, _) = _4 in a);
    v0_2_11 <- Cdsat_Trail_Value_Type.bool_0 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _13 <- v0_1_10;
    _14 <- v0_2_11;
    _12 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] Eq1.eq _13 _14);
    goto BB8
  }
  BB5 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] false);
    goto BB7
  }
  BB6 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] true);
    goto BB7
  }
  BB7 {
    goto BB14
  }
  BB8 {
    switch (_12)
      | False -> goto BB5
      | True -> goto BB6
      end
  }
  BB9 {
    v0_1_15 <- Cdsat_Trail_Value_Type.rat_0 (let (a, _) = _4 in a);
    v0_2_16 <- Cdsat_Trail_Value_Type.rat_0 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _18 <- v0_1_15;
    _19 <- v0_2_16;
    _17 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] Eq0.eq _18 _19);
    goto BB13
  }
  BB10 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] false);
    goto BB12
  }
  BB11 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] true);
    goto BB12
  }
  BB12 {
    goto BB14
  }
  BB13 {
    switch (_17)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB14 {
    return _0
  }
  
end
module Cdsat_Trail_Impl5_DeepModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 4 121 44] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl5_DeepModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 4 121 44] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Trail_Impl5_DeepModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 4 121 44] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 8 125 9] match (self) with
      | Cdsat_Trail_Sort_Type.C_Boolean -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Trail_Sort_Type.C_Rational -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 4 121 44] (self : Cdsat_Trail_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl28_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] (self : Cdsat_Trail_Sort_Type.t_sort) (rhs : Cdsat_Trail_Sort_Type.t_sort) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl28_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Trail_Sort_Type.t_sort
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Trail_Impl5_DeepModel as DeepModel1
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Trail_Sort_Type.t_sort,
    type t2 = Cdsat_Trail_Sort_Type.t_sort,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Sort_Type.t_sort) (rhs : Cdsat_Trail_Sort_Type.t_sort) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Sort_Type.t_sort;
  var rhs_2 : Cdsat_Trail_Sort_Type.t_sort;
  var _4 : (Cdsat_Trail_Sort_Type.t_sort, Cdsat_Trail_Sort_Type.t_sort);
  var _5 : Cdsat_Trail_Sort_Type.t_sort;
  var _6 : Cdsat_Trail_Sort_Type.t_sort;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _6 <- rhs_2;
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Cdsat_Trail_Sort_Type.C_Boolean -> goto BB1
      | Cdsat_Trail_Sort_Type.C_Rational -> goto BB3
      end
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Sort_Type.C_Boolean -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] false);
    goto BB6
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Sort_Type.C_Rational -> goto BB5
      | _ -> goto BB2
      end
  }
  BB4 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] true);
    goto BB6
  }
  BB5 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] true);
    goto BB6
  }
  BB6 {
    return _0
  }
  BB7 {
    assume { Resolve0.resolve _4 };
    goto BB2
  }
  
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int
  val eq (self : usize) (other : usize) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 92 434 45] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl7_DeepModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 176 4 176 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl7_DeepModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 176 4 176 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Trail_Impl7_DeepModel
  use prelude.UIntSize
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel2
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel_Stub as ShallowModel0
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 176 4 176 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 177 8 195 9] match (self) with
      | Cdsat_Trail_Term_Type.C_Variable v s -> Cdsat_Theory_Term_Type.C_Variable (Cdsat_Theory_Var_Type.C_Var (UIntSize.to_int v) (ShallowModel0.shallow_model s))
      | Cdsat_Trail_Term_Type.C_Value v -> Cdsat_Theory_Term_Type.C_Value (ShallowModel1.shallow_model v)
      | Cdsat_Trail_Term_Type.C_Plus l r -> Cdsat_Theory_Term_Type.C_Plus (ShallowModel2.shallow_model l) (ShallowModel2.shallow_model r)
      | Cdsat_Trail_Term_Type.C_Eq l r -> Cdsat_Theory_Term_Type.C_Eq (ShallowModel2.shallow_model l) (ShallowModel2.shallow_model r)
      | Cdsat_Trail_Term_Type.C_Conj l r -> Cdsat_Theory_Term_Type.C_Conj (ShallowModel2.shallow_model l) (ShallowModel2.shallow_model r)
      | _ -> Cdsat_Theory_Term_Type.C_Value (Cdsat_Theory_Value_Type.C_Bool true)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 176 4 176 44] (self : Cdsat_Trail_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 317 28 317 47] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl32_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] (self : Cdsat_Trail_Term_Type.t_term) (rhs : Cdsat_Trail_Term_Type.t_term) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl32_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel9
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl5_DeepModel as DeepModel8
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel7
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel6 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel5 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel9.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel4 with
    type t = Cdsat_Trail_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort,
    function DeepModel0.deep_model = DeepModel8.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel3 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel7.deep_model
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel6.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Trail_Term_Type.t_term
  clone Core_Cmp_Impls_Impl21_Eq_Interface as Eq3 with
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone Cdsat_Trail_Impl28_Eq_Interface as Eq2 with
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone Cdsat_Trail_Impl36_Eq_Interface as Eq1 with
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Alloc_Boxed_Impl14_Eq_Interface as Eq0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type a = Alloc_Alloc_Global_Type.t_global,
    function DeepModel0.deep_model = DeepModel2.deep_model,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Trail_Term_Type.t_term,
    type t2 = Cdsat_Trail_Term_Type.t_term,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Term_Type.t_term) (rhs : Cdsat_Trail_Term_Type.t_term) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Term_Type.t_term;
  var rhs_2 : Cdsat_Trail_Term_Type.t_term;
  var _4 : (Cdsat_Trail_Term_Type.t_term, Cdsat_Trail_Term_Type.t_term);
  var _5 : Cdsat_Trail_Term_Type.t_term;
  var _6 : Cdsat_Trail_Term_Type.t_term;
  var _7 : isize;
  var _8 : isize;
  var _9 : isize;
  var _10 : isize;
  var _11 : isize;
  var _12 : isize;
  var _13 : isize;
  var _14 : isize;
  var _15 : isize;
  var v0_1_16 : usize;
  var v1_1_17 : Cdsat_Trail_Sort_Type.t_sort;
  var v0_2_18 : usize;
  var v1_2_19 : Cdsat_Trail_Sort_Type.t_sort;
  var _20 : bool;
  var _21 : bool;
  var _22 : Cdsat_Trail_Sort_Type.t_sort;
  var _23 : Cdsat_Trail_Sort_Type.t_sort;
  var _24 : bool;
  var _25 : usize;
  var _26 : usize;
  var v0_1_27 : Cdsat_Trail_Value_Type.t_value;
  var v0_2_28 : Cdsat_Trail_Value_Type.t_value;
  var _29 : bool;
  var _30 : Cdsat_Trail_Value_Type.t_value;
  var _31 : Cdsat_Trail_Value_Type.t_value;
  var v0_1_32 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_33 : Cdsat_Trail_Term_Type.t_term;
  var v0_2_34 : Cdsat_Trail_Term_Type.t_term;
  var v1_2_35 : Cdsat_Trail_Term_Type.t_term;
  var _36 : bool;
  var _37 : bool;
  var _38 : Cdsat_Trail_Term_Type.t_term;
  var _39 : Cdsat_Trail_Term_Type.t_term;
  var _40 : bool;
  var _41 : Cdsat_Trail_Term_Type.t_term;
  var _42 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_43 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_44 : Cdsat_Trail_Term_Type.t_term;
  var v0_2_45 : Cdsat_Trail_Term_Type.t_term;
  var v1_2_46 : Cdsat_Trail_Term_Type.t_term;
  var _47 : bool;
  var _48 : bool;
  var _49 : Cdsat_Trail_Term_Type.t_term;
  var _50 : Cdsat_Trail_Term_Type.t_term;
  var _51 : bool;
  var _52 : Cdsat_Trail_Term_Type.t_term;
  var _53 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_54 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_55 : Cdsat_Trail_Term_Type.t_term;
  var v0_2_56 : Cdsat_Trail_Term_Type.t_term;
  var v1_2_57 : Cdsat_Trail_Term_Type.t_term;
  var _58 : bool;
  var _59 : bool;
  var _60 : Cdsat_Trail_Term_Type.t_term;
  var _61 : Cdsat_Trail_Term_Type.t_term;
  var _62 : bool;
  var _63 : Cdsat_Trail_Term_Type.t_term;
  var _64 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_65 : Cdsat_Trail_Term_Type.t_term;
  var v0_2_66 : Cdsat_Trail_Term_Type.t_term;
  var _67 : bool;
  var _68 : Cdsat_Trail_Term_Type.t_term;
  var _69 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_70 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_71 : Cdsat_Trail_Term_Type.t_term;
  var v0_2_72 : Cdsat_Trail_Term_Type.t_term;
  var v1_2_73 : Cdsat_Trail_Term_Type.t_term;
  var _74 : bool;
  var _75 : bool;
  var _76 : Cdsat_Trail_Term_Type.t_term;
  var _77 : Cdsat_Trail_Term_Type.t_term;
  var _78 : bool;
  var _79 : Cdsat_Trail_Term_Type.t_term;
  var _80 : Cdsat_Trail_Term_Type.t_term;
  var v0_1_81 : Cdsat_Trail_Term_Type.t_term;
  var v1_1_82 : Cdsat_Trail_Term_Type.t_term;
  var v0_2_83 : Cdsat_Trail_Term_Type.t_term;
  var v1_2_84 : Cdsat_Trail_Term_Type.t_term;
  var _85 : bool;
  var _86 : bool;
  var _87 : Cdsat_Trail_Term_Type.t_term;
  var _88 : Cdsat_Trail_Term_Type.t_term;
  var _89 : bool;
  var _90 : Cdsat_Trail_Term_Type.t_term;
  var _91 : Cdsat_Trail_Term_Type.t_term;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _6 <- rhs_2;
    _4 <- (_5, _6);
    switch (let (a, _) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Variable _ _ -> goto BB1
      | Cdsat_Trail_Term_Type.C_Value _ -> goto BB3
      | Cdsat_Trail_Term_Type.C_Plus _ _ -> goto BB4
      | Cdsat_Trail_Term_Type.C_Eq _ _ -> goto BB5
      | Cdsat_Trail_Term_Type.C_Conj _ _ -> goto BB6
      | Cdsat_Trail_Term_Type.C_Neg _ -> goto BB7
      | Cdsat_Trail_Term_Type.C_Disj _ _ -> goto BB8
      | Cdsat_Trail_Term_Type.C_Impl _ _ -> goto BB9
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Variable _ _ -> goto BB10
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve _4 };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB74
  }
  BB3 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Value _ -> goto BB19
      | _ -> goto BB2
      end
  }
  BB4 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Plus _ _ -> goto BB24
      | _ -> goto BB2
      end
  }
  BB5 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Eq _ _ -> goto BB33
      | _ -> goto BB2
      end
  }
  BB6 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Conj _ _ -> goto BB42
      | _ -> goto BB2
      end
  }
  BB7 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Neg _ -> goto BB51
      | _ -> goto BB2
      end
  }
  BB8 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Disj _ _ -> goto BB56
      | _ -> goto BB2
      end
  }
  BB9 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Term_Type.C_Impl _ _ -> goto BB65
      | _ -> goto BB2
      end
  }
  BB10 {
    v0_1_16 <- Cdsat_Trail_Term_Type.variable_0 (let (a, _) = _4 in a);
    v1_1_17 <- Cdsat_Trail_Term_Type.variable_1 (let (a, _) = _4 in a);
    v0_2_18 <- Cdsat_Trail_Term_Type.variable_0 (let (_, a) = _4 in a);
    v1_2_19 <- Cdsat_Trail_Term_Type.variable_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _22 <- v1_1_17;
    _23 <- v1_2_19;
    _21 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq2.eq _22 _23);
    goto BB17
  }
  BB11 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB13
  }
  BB12 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB13
  }
  BB13 {
    goto BB74
  }
  BB14 {
    _20 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB16
  }
  BB15 {
    _25 <- v0_1_16;
    _26 <- v0_2_18;
    _24 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq3.eq _25 _26);
    goto BB18
  }
  BB16 {
    switch (_20)
      | False -> goto BB11
      | True -> goto BB12
      end
  }
  BB17 {
    switch (_21)
      | False -> goto BB14
      | True -> goto BB15
      end
  }
  BB18 {
    _20 <- _24;
    _24 <- any bool;
    goto BB16
  }
  BB19 {
    v0_1_27 <- Cdsat_Trail_Term_Type.value_0 (let (a, _) = _4 in a);
    v0_2_28 <- Cdsat_Trail_Term_Type.value_0 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _30 <- v0_1_27;
    _31 <- v0_2_28;
    _29 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq1.eq _30 _31);
    goto BB23
  }
  BB20 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB22
  }
  BB21 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB22
  }
  BB22 {
    goto BB74
  }
  BB23 {
    switch (_29)
      | False -> goto BB20
      | True -> goto BB21
      end
  }
  BB24 {
    v0_1_32 <- Cdsat_Trail_Term_Type.plus_0 (let (a, _) = _4 in a);
    v1_1_33 <- Cdsat_Trail_Term_Type.plus_1 (let (a, _) = _4 in a);
    v0_2_34 <- Cdsat_Trail_Term_Type.plus_0 (let (_, a) = _4 in a);
    v1_2_35 <- Cdsat_Trail_Term_Type.plus_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _38 <- v1_1_33;
    _39 <- v1_2_35;
    _37 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _38 _39);
    goto BB31
  }
  BB25 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB27
  }
  BB26 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB27
  }
  BB27 {
    goto BB74
  }
  BB28 {
    _36 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB30
  }
  BB29 {
    _41 <- v0_1_32;
    _42 <- v0_2_34;
    _40 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _41 _42);
    goto BB32
  }
  BB30 {
    switch (_36)
      | False -> goto BB25
      | True -> goto BB26
      end
  }
  BB31 {
    switch (_37)
      | False -> goto BB28
      | True -> goto BB29
      end
  }
  BB32 {
    _36 <- _40;
    _40 <- any bool;
    goto BB30
  }
  BB33 {
    v0_1_43 <- Cdsat_Trail_Term_Type.eq_0 (let (a, _) = _4 in a);
    v1_1_44 <- Cdsat_Trail_Term_Type.eq_1 (let (a, _) = _4 in a);
    v0_2_45 <- Cdsat_Trail_Term_Type.eq_0 (let (_, a) = _4 in a);
    v1_2_46 <- Cdsat_Trail_Term_Type.eq_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _49 <- v1_1_44;
    _50 <- v1_2_46;
    _48 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _49 _50);
    goto BB40
  }
  BB34 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB36
  }
  BB35 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB36
  }
  BB36 {
    goto BB74
  }
  BB37 {
    _47 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB39
  }
  BB38 {
    _52 <- v0_1_43;
    _53 <- v0_2_45;
    _51 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _52 _53);
    goto BB41
  }
  BB39 {
    switch (_47)
      | False -> goto BB34
      | True -> goto BB35
      end
  }
  BB40 {
    switch (_48)
      | False -> goto BB37
      | True -> goto BB38
      end
  }
  BB41 {
    _47 <- _51;
    _51 <- any bool;
    goto BB39
  }
  BB42 {
    v0_1_54 <- Cdsat_Trail_Term_Type.conj_0 (let (a, _) = _4 in a);
    v1_1_55 <- Cdsat_Trail_Term_Type.conj_1 (let (a, _) = _4 in a);
    v0_2_56 <- Cdsat_Trail_Term_Type.conj_0 (let (_, a) = _4 in a);
    v1_2_57 <- Cdsat_Trail_Term_Type.conj_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _60 <- v1_1_55;
    _61 <- v1_2_57;
    _59 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _60 _61);
    goto BB49
  }
  BB43 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB45
  }
  BB44 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB45
  }
  BB45 {
    goto BB74
  }
  BB46 {
    _58 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB48
  }
  BB47 {
    _63 <- v0_1_54;
    _64 <- v0_2_56;
    _62 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _63 _64);
    goto BB50
  }
  BB48 {
    switch (_58)
      | False -> goto BB43
      | True -> goto BB44
      end
  }
  BB49 {
    switch (_59)
      | False -> goto BB46
      | True -> goto BB47
      end
  }
  BB50 {
    _58 <- _62;
    _62 <- any bool;
    goto BB48
  }
  BB51 {
    v0_1_65 <- Cdsat_Trail_Term_Type.neg_0 (let (a, _) = _4 in a);
    v0_2_66 <- Cdsat_Trail_Term_Type.neg_0 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _68 <- v0_1_65;
    _69 <- v0_2_66;
    _67 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _68 _69);
    goto BB55
  }
  BB52 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB54
  }
  BB53 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB54
  }
  BB54 {
    goto BB74
  }
  BB55 {
    switch (_67)
      | False -> goto BB52
      | True -> goto BB53
      end
  }
  BB56 {
    v0_1_70 <- Cdsat_Trail_Term_Type.disj_0 (let (a, _) = _4 in a);
    v1_1_71 <- Cdsat_Trail_Term_Type.disj_1 (let (a, _) = _4 in a);
    v0_2_72 <- Cdsat_Trail_Term_Type.disj_0 (let (_, a) = _4 in a);
    v1_2_73 <- Cdsat_Trail_Term_Type.disj_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _76 <- v1_1_71;
    _77 <- v1_2_73;
    _75 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _76 _77);
    goto BB63
  }
  BB57 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB59
  }
  BB58 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB59
  }
  BB59 {
    goto BB74
  }
  BB60 {
    _74 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB62
  }
  BB61 {
    _79 <- v0_1_70;
    _80 <- v0_2_72;
    _78 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _79 _80);
    goto BB64
  }
  BB62 {
    switch (_74)
      | False -> goto BB57
      | True -> goto BB58
      end
  }
  BB63 {
    switch (_75)
      | False -> goto BB60
      | True -> goto BB61
      end
  }
  BB64 {
    _74 <- _78;
    _78 <- any bool;
    goto BB62
  }
  BB65 {
    v0_1_81 <- Cdsat_Trail_Term_Type.impl_0 (let (a, _) = _4 in a);
    v1_1_82 <- Cdsat_Trail_Term_Type.impl_1 (let (a, _) = _4 in a);
    v0_2_83 <- Cdsat_Trail_Term_Type.impl_0 (let (_, a) = _4 in a);
    v1_2_84 <- Cdsat_Trail_Term_Type.impl_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _87 <- v1_1_82;
    _88 <- v1_2_84;
    _86 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _87 _88);
    goto BB72
  }
  BB66 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB68
  }
  BB67 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] true);
    goto BB68
  }
  BB68 {
    goto BB74
  }
  BB69 {
    _85 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] false);
    goto BB71
  }
  BB70 {
    _90 <- v0_1_81;
    _91 <- v0_2_83;
    _89 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] Eq0.eq _90 _91);
    goto BB73
  }
  BB71 {
    switch (_85)
      | False -> goto BB66
      | True -> goto BB67
      end
  }
  BB72 {
    switch (_86)
      | False -> goto BB69
      | True -> goto BB70
      end
  }
  BB73 {
    _85 <- _89;
    _89 <- any bool;
    goto BB71
  }
  BB74 {
    return _0
  }
  
end
module Cdsat_Trail_Impl2_ShallowModel_Stub
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 4 73 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    
end
module Cdsat_Trail_Impl2_ShallowModel_Interface
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 4 73 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    
end
module Cdsat_Trail_Impl2_ShallowModel
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 4 73 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 74 8 78 9] match (self) with
      | Cdsat_Trail_Reason_Type.C_Justified a1 -> Cdsat_Trail_ReasonModel_Type.C_Justified (ShallowModel0.shallow_model a1)
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Trail_ReasonModel_Type.C_Decision
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Trail_ReasonModel_Type.C_Input
      end
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 73 4 73 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonModel_Type.t_reasonmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl1_DeepModel_Stub
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 39 4 39 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    
end
module Cdsat_Trail_Impl1_DeepModel_Interface
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 39 4 39 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    
end
module Cdsat_Trail_Impl1_DeepModel
  use prelude.UIntSize
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl2_ShallowModel_Stub as ShallowModel2
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 39 4 39 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 40 20 40 113] Cdsat_Trail_AssignmentModel_Type.C_AssignmentModel (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term self)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) (ShallowModel2.shallow_model (Cdsat_Trail_Assignment_Type.assignment_reason self)) (UIntSize.to_int (Cdsat_Trail_Assignment_Type.assignment_level self))
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 39 4 39 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl20_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] (self : Cdsat_Trail_Assignment_Type.t_assignment) (rhs : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl20_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel3
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel9
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl3_DeepModel as DeepModel8 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel7
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel6 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Trail_Impl2_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel5 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel9.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel4 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonModel_Type.t_reasonmodel,
    function DeepModel0.deep_model = DeepModel8.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel3 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel7.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel6.deep_model
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl1_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone Core_Cmp_Impls_Impl21_Eq_Interface as Eq3 with
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone Cdsat_Trail_Impl24_Eq_Interface as Eq2 with
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone Cdsat_Trail_Impl36_Eq_Interface as Eq1 with
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Cdsat_Trail_Impl32_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) (rhs : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var rhs_2 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _4 : bool;
  var _5 : bool;
  var _6 : bool;
  var _7 : Cdsat_Trail_Term_Type.t_term;
  var _8 : Cdsat_Trail_Term_Type.t_term;
  var _9 : Cdsat_Trail_Term_Type.t_term;
  var _10 : bool;
  var _11 : Cdsat_Trail_Value_Type.t_value;
  var _12 : Cdsat_Trail_Value_Type.t_value;
  var _13 : Cdsat_Trail_Value_Type.t_value;
  var _14 : bool;
  var _15 : Cdsat_Trail_Reason_Type.t_reason;
  var _16 : Cdsat_Trail_Reason_Type.t_reason;
  var _17 : Cdsat_Trail_Reason_Type.t_reason;
  var _18 : bool;
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _7 <- Cdsat_Trail_Assignment_Type.assignment_term self_1;
    _9 <- Cdsat_Trail_Assignment_Type.assignment_term rhs_2;
    _8 <- _9;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 16 4 16 18] Eq0.eq _7 _8);
    goto BB10
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 16 4 21 20] false);
    goto BB3
  }
  BB2 {
    _19 <- Cdsat_Trail_Assignment_Type.assignment_level self_1;
    _21 <- Cdsat_Trail_Assignment_Type.assignment_level rhs_2;
    _20 <- _21;
    _18 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 21 4 21 20] Eq3.eq _19 _20);
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 16 4 19 18] false);
    goto BB6
  }
  BB5 {
    _15 <- Cdsat_Trail_Assignment_Type.assignment_reason self_1;
    _17 <- Cdsat_Trail_Assignment_Type.assignment_reason rhs_2;
    _16 <- _17;
    _14 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 19 4 19 18] Eq2.eq _15 _16);
    goto BB12
  }
  BB6 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB7 {
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 16 4 18 18] false);
    goto BB9
  }
  BB8 {
    _11 <- Cdsat_Trail_Assignment_Type.assignment_val self_1;
    _13 <- Cdsat_Trail_Assignment_Type.assignment_val rhs_2;
    _12 <- _13;
    _10 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 18 18] Eq1.eq _11 _12);
    goto BB11
  }
  BB9 {
    switch (_5)
      | False -> goto BB4
      | True -> goto BB5
      end
  }
  BB10 {
    switch (_6)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB11 {
    _5 <- _10;
    _10 <- any bool;
    goto BB9
  }
  BB12 {
    _4 <- _14;
    _14 <- any bool;
    goto BB6
  }
  BB13 {
    _0 <- _18;
    _18 <- any bool;
    goto BB3
  }
  
end
module Cdsat_Trail_Impl22_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 27 13 29] (self : Cdsat_Trail_Assignment_Type.t_assignment) : ()
    
end
module Cdsat_Trail_Impl22_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 27 13 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl0_ShallowModel_Stub
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    
end
module Cdsat_Trail_Impl0_ShallowModel_Interface
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    
end
module Cdsat_Trail_Impl0_ShallowModel
  use prelude.UIntSize
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl2_ShallowModel_Stub as ShallowModel2
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 20 30 113] Cdsat_Trail_AssignmentModel_Type.C_AssignmentModel (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term self)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) (ShallowModel2.shallow_model (Cdsat_Trail_Assignment_Type.assignment_reason self)) (UIntSize.to_int (Cdsat_Trail_Assignment_Type.assignment_level self))
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl26_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 27 54 29] (self : Cdsat_Trail_Reason_Type.t_reason) : ()
    
end
module Cdsat_Trail_Impl26_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 27 54 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Reason_Type.t_reason) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Cdsat_Trail_Reason_Type.t_reason;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl30_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 27 97 29] (self : Cdsat_Trail_Sort_Type.t_sort) : ()
    
end
module Cdsat_Trail_Impl30_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 27 97 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Sort_Type.t_sort) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Cdsat_Trail_Sort_Type.t_sort;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl34_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 27 130 29] (self : Cdsat_Trail_Term_Type.t_term) : ()
    
end
module Cdsat_Trail_Impl34_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 27 130 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Term_Type.t_term) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Cdsat_Trail_Term_Type.t_term;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl38_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 27 201 29] (self : Cdsat_Trail_Value_Type.t_value) : ()
    
end
module Cdsat_Trail_Impl38_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 27 201 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Value_Type.t_value) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Cdsat_Trail_Value_Type.t_value;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl10_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 30] (self : Cdsat_Trail_Value_Type.t_value) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 234 15 234 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    
end
module Cdsat_Trail_Impl10_Bool
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Value_Type.t_value) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 234 15 234 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Value_Type.t_value;
  var _3 : isize;
  var b_4 : bool;
  var _5 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Cdsat_Trail_Value_Type.C_Bool _ -> goto BB3
      | Cdsat_Trail_Value_Type.C_Rat _ -> goto BB1
      end
  }
  BB1 {
    absurd
  }
  BB2 {
    absurd
  }
  BB3 {
    b_4 <- Cdsat_Trail_Value_Type.bool_0 self_1;
    _0 <- b_4;
    return _0
  }
  
end
module Cdsat_Trail_Impl39_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 9 261 18] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 9 261 18] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl39_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel3
  use prelude.Int
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel2 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel3.deep_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl13_DeepModel as DeepModel1
  clone Core_Cmp_Impls_Impl21_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 9 261 18] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 9 261 18] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var rhs_2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _4 : bool;
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : usize;
  {
    self_1 <- self;
    rhs_2 <- rhs;
    goto BB0
  }
  BB0 {
    _5 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self_1;
    _7 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 rhs_2;
    _6 <- _7;
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 262 22 262 27] Eq0.eq _5 _6);
    goto BB4
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 262 22 262 34] false);
    goto BB3
  }
  BB2 {
    _9 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 self_1;
    _11 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 rhs_2;
    _10 <- _11;
    _8 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 262 29 262 34] Eq0.eq _9 _10);
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _0 <- _8;
    _8 <- any bool;
    goto BB3
  }
  
end
module Cdsat_Trail_Impl41_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 20 261 22] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl41_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 20 261 22] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl42_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 24 261 29] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 24 261 29] result = self }
    
end
module Cdsat_Trail_Impl42_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 24 261 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 24 261 29] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var self_1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _3 : usize;
  var _4 : usize;
  var _5 : usize;
  var _6 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self_1;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 262 22 262 27] Clone0.clone' _4);
    goto BB1
  }
  BB1 {
    _6 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 self_1;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 262 29 262 34] Clone0.clone' _6);
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Trail_TrailIndex_Type.C_TrailIndex _3 _5;
    return _0
  }
  
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl2_CmpLog
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 34 2 40 114] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Core_Cmp_Impls_Impl54_PartialCmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Int_Impl18_DeepModel_Stub as DeepModel0
  val partial_cmp (self : usize) (other : usize) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 447 37 449 12] result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other)) }
    
end
module Cdsat_Trail_Impl44_PartialCmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val partial_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 37 261 47] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    
end
module Cdsat_Trail_Impl44_PartialCmp
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int8
  use prelude.IntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog0
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Cmp_Impls_Impl54_PartialCmp_Interface as PartialCmp0 with
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg partial_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 37 261 47] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering);
  var self_1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var other_2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _3 : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering);
  var _4 : usize;
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : int8;
  var _9 : isize;
  var _10 : usize;
  var _11 : usize;
  var _12 : usize;
  var _13 : usize;
  var cmp_14 : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering);
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    _5 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self_1;
    _4 <- _5;
    _7 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 other_2;
    _6 <- _7;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 261 37 261 47] PartialCmp0.partial_cmp _4 _6);
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    cmp_14 <- _3;
    _0 <- cmp_14;
    goto BB6
  }
  BB3 {
    switch (Core_Option_Option_Type.some_0 _3)
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB4
      | _ -> goto BB2
      end
  }
  BB4 {
    _11 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 self_1;
    _10 <- _11;
    _13 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 other_2;
    _12 <- _13;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 261 37 261 47] PartialCmp0.partial_cmp _10 _12);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Core_Cmp_Impls_Impl55_Cmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Int_Impl18_DeepModel_Stub as DeepModel0
  val cmp (self : usize) (other : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 466 16 466 75] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl45_Cmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 49 261 52] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl45_Cmp
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int8
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl2_CmpLog as CmpLog0
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel0
  clone Core_Cmp_Impls_Impl55_Cmp_Interface as Cmp0 with
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 49 261 52] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Cmp_Ordering_Type.t_ordering;
  var self_1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var other_2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _3 : Core_Cmp_Ordering_Type.t_ordering;
  var _4 : usize;
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : int8;
  var _9 : usize;
  var _10 : usize;
  var _11 : usize;
  var _12 : usize;
  var cmp_13 : Core_Cmp_Ordering_Type.t_ordering;
  {
    self_1 <- self;
    other_2 <- other;
    goto BB0
  }
  BB0 {
    _5 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self_1;
    _4 <- _5;
    _7 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 other_2;
    _6 <- _7;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 261 49 261 52] Cmp0.cmp _4 _6);
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    cmp_13 <- _3;
    _0 <- cmp_13;
    goto BB5
  }
  BB3 {
    _10 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 self_1;
    _9 <- _10;
    _12 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 other_2;
    _11 <- _12;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 261 49 261 52] Cmp0.cmp _9 _11);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Cdsat_Trail_Impl12_ShallowModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 321 4 321 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl12_ShallowModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 321 4 321 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl12_ShallowModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 321 4 321 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 322 8 322 12] self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 321 4 321 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl15_New_Interface
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_Invariant_Stub as Invariant0
  val new [#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 50] (inputs : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Term_Type.t_term, Cdsat_Trail_Value_Type.t_value) (Alloc_Alloc_Global_Type.t_global)) : Cdsat_Trail_Trail_Type.t_trail
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 366 14 366 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 367 4 367 36] Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost result)) }
    
end
module Cdsat_Theory_Impl4_Sat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 532 4 532 28] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Sat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 532 4 532 28] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Sat
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 532 4 532 28] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 533 8 533 56] exists m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m
  val sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 532 4 532 28] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl15_Sat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 400 4 400 28] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl15_Sat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 400 4 400 28] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl15_Sat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sat_Stub as Sat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 400 4 400 28] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 399 4 399 16] Sat0.sat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 400 4 400 28] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl15_AbstractAssign_Stub
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 447 4 447 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
end
module Cdsat_Trail_Impl15_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 447 4 447 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
end
module Cdsat_Trail_Impl15_AbstractAssign
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl8_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Trail_Impl6_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 447 4 447 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 448 8 458 9] match (Cdsat_Trail_Assignment_Type.assignment_reason a) with
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Theory_Assign_Type.C_Input (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Theory_Assign_Type.C_Decision (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Justified just -> Cdsat_Theory_Assign_Type.C_Justified (AbstractJustification0.abstract_justification self (ShallowModel2.shallow_model just)) (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      end
  val abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 447 4 447 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    ensures { result = abstract_assign self a }
    
end
module Cdsat_Trail_Impl15_AbsJustCons_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 533 4 533 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl15_AbsJustCons_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 533 4 533 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 530 15 530 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 531 4 531 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 532 14 532 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl15_AbsJustCons
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 533 4 533 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 533 4 533 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 530 15 530 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 531 4 531 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { result = abs_just_cons self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_cons self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 534 8 534 10] ())
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 530 15 530 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 531 4 531 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 532 14 532 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl15_AbsJustCons_Impl
  use prelude.Int
  use seq.Seq
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel4
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel3
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  let rec ghost function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 533 4 533 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 530 15 530 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 531 4 531 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 532 14 532 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 529 14 529 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 534 8 534 10] ()
end
module Cdsat_Trail_Impl15_AbsJustSnoc_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl15_AbsJustSnoc_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 539 15 539 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl15_AbsJustSnoc
  use prelude.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl15_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl15_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl15_AbsJustCons_Stub as AbsJustCons0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 539 15 539 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { result = abs_just_snoc self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_snoc self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 537 4 537 12] if just = Seq.empty  then
    ()
  else
    let j = Seq.snoc just elem in let _ = AbsJustCons0.abs_just_cons self (SeqExt.subsequence j 1 (Seq.length j)) (Seq.get j 0) in abs_just_snoc self (SeqExt.subsequence just 1 (Seq.length just)) elem
  )
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 539 15 539 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl15_AbsJustSnoc_Impl
  use prelude.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel4
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel3
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl18_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl15_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl15_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl15_AbsJustCons as AbsJustCons0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  let rec ghost function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 539 15 539 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 538 14 538 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 537 4 537 12] if pure {just = Seq.empty } then
      ()
    else
      let j = Seq.snoc just elem in let _ = AbsJustCons0.abs_just_cons self (SeqExt.subsequence j 1 (Seq.length j)) (Seq.get j 0) in abs_just_snoc self (SeqExt.subsequence just 1 (Seq.length just)) elem
    
end
module Cdsat_Trail_Impl15_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 552 4 552 39] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
end
module Cdsat_Trail_Impl15_Level
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  let rec cfg level [#"/Users/xavier/Code/cdsat/src/trail.rs" 552 4 552 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Cdsat_Trail_Trail_Type.t_trail;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Trail_Trail_Type.trail_level self_1;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel2 with
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel1 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    ShallowModel0.shallow_model self = ShallowModel2.shallow_model (ShallowModel1.shallow_model res)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl17_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 679 33 774 2] IntoIterPre0.into_iter_pre self}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 679 33 774 2] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq (self : a) (other : b) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 92 434 45] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module Cdsat_Trail_Impl15_IndexOf_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val index_of [#"/Users/xavier/Code/cdsat/src/trail.rs" 573 4 573 65] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Term_Type.t_term) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl15_IndexOf
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Slice
  use prelude.Seq
  use seq.Seq
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel13
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel12
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel14 with
    function ShallowModel0.shallow_model = ShallowModel12.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel13.shallow_model
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel2 with
    function ShallowModel0.shallow_model = ShallowModel12.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel13.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel14.shallow_model
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel11 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel1 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel2.deep_model
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel9 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel7 with
    type t = seq (Cdsat_Trail_Assignment_Type.t_assignment),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel as ShallowModel6 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel8 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment),
    type ShallowModelTy0.shallowModelTy = seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq1.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant1 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment)
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited1 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment),
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq as ToRefSeq0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment)
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost as IntoIterPost1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre as IntoIterPre1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost as IntoIterPost0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre as IntoIterPre0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Cmp_Impls_Impl9_Eq_Interface as Eq0 with
    type a = Cdsat_Trail_Term_Type.t_term,
    type b = Cdsat_Trail_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Slice_Iter_Impl181_Next_Interface as Next1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type Item0.item = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone Alloc_Vec_Impl17_IntoIter_Interface as IntoIter1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type Item0.item = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone Alloc_Vec_Impl17_IntoIter_Interface as IntoIter0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant0.invariant'
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg index_of [#"/Users/xavier/Code/cdsat/src/trail.rs" 573 4 573 65] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Term_Type.t_term) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var self_1 : Cdsat_Trail_Trail_Type.t_trail;
  var a_2 : Cdsat_Trail_Term_Type.t_term;
  var level_3 : usize;
  var _4 : ();
  var _5 : Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _6 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var iter_7 : Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _8 : ();
  var _9 : ();
  var _10 : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _11 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)));
  var _12 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)));
  var _13 : isize;
  var _14 : ();
  var assignments_15 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var offset_16 : usize;
  var _17 : ();
  var _18 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment);
  var _19 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var iter_20 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment);
  var _21 : ();
  var _22 : Core_Option_Option_Type.t_option (Cdsat_Trail_Assignment_Type.t_assignment);
  var _23 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment));
  var _24 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment));
  var _25 : isize;
  var _26 : ();
  var asgn_27 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _28 : ();
  var _29 : bool;
  var _30 : Cdsat_Trail_Term_Type.t_term;
  var _31 : Cdsat_Trail_Term_Type.t_term;
  var _32 : Cdsat_Trail_Term_Type.t_term;
  var _33 : ();
  var _34 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _35 : usize;
  var _36 : usize;
  {
    self_1 <- self;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    level_3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 574 24 574 25] (0 : usize));
    _6 <- Cdsat_Trail_Trail_Type.trail_assignments self_1;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 575 27 575 44] IntoIter0.into_iter _6);
    goto BB1
  }
  BB1 {
    iter_7 <- _5;
    _5 <- any Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut iter_7;
    iter_7 <-  ^ _12;
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    assume { Resolve0.resolve _12 };
    _10 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 575 27 575 44] Next0.next _11);
    goto BB3
  }
  BB3 {
    switch (_10)
      | Core_Option_Option_Type.C_None -> goto BB6
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      end
  }
  BB4 {
    assignments_15 <- Core_Option_Option_Type.some_0 _10;
    offset_16 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 576 29 576 30] (0 : usize));
    _19 <- assignments_15;
    _18 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 577 24 577 35] IntoIter1.into_iter _19);
    goto BB7
  }
  BB5 {
    absurd
  }
  BB6 {
    _4 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB16
  }
  BB7 {
    iter_20 <- _18;
    _18 <- any Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment);
    goto BB8
  }
  BB8 {
    _24 <- borrow_mut iter_20;
    iter_20 <-  ^ _24;
    _23 <- borrow_mut ( * _24);
    _24 <- { _24 with current = ( ^ _23) };
    assume { Resolve1.resolve _24 };
    _22 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 577 24 577 35] Next1.next _23);
    goto BB9
  }
  BB9 {
    switch (_22)
      | Core_Option_Option_Type.C_None -> goto BB12
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      end
  }
  BB10 {
    asgn_27 <- Core_Option_Option_Type.some_0 _22;
    _31 <- Cdsat_Trail_Assignment_Type.assignment_term asgn_27;
    _30 <- _31;
    _32 <- a_2;
    _29 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 578 19 578 34] Eq0.eq _30 _32);
    goto BB13
  }
  BB11 {
    absurd
  }
  BB12 {
    _17 <- ();
    level_3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 583 12 583 22] level_3 + ([#"/Users/xavier/Code/cdsat/src/trail.rs" 583 21 583 22] (1 : usize)));
    _9 <- ();
    _8 <- ();
    goto BB2
  }
  BB13 {
    switch (_29)
      | False -> goto BB15
      | True -> goto BB14
      end
  }
  BB14 {
    _35 <- level_3;
    _36 <- offset_16;
    _34 <- Cdsat_Trail_TrailIndex_Type.C_TrailIndex _35 _36;
    _0 <- Core_Option_Option_Type.C_Some _34;
    goto BB16
  }
  BB15 {
    _28 <- ();
    offset_16 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 581 16 581 27] offset_16 + ([#"/Users/xavier/Code/cdsat/src/trail.rs" 581 26 581 27] (1 : usize)));
    _21 <- ();
    _8 <- ();
    goto BB8
  }
  BB16 {
    return _0
  }
  
end
module Cdsat_Trail_IndexIterator_Type
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  type t_indexiterator  =
    | C_IndexIterator (borrowed (Cdsat_Trail_Trail_Type.t_trail)) (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  let function indexiterator_trail (self : t_indexiterator) : borrowed (Cdsat_Trail_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IndexIterator a _ -> a
      end
end
module Cdsat_Trail_Impl15_Indices_Interface
  use prelude.Borrow
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val indices [#"/Users/xavier/Code/cdsat/src/trail.rs" 698 4 698 57] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Trail_IndexIterator_Type.t_indexiterator
    
end
module Cdsat_Trail_Impl15_Indices
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  let rec cfg indices [#"/Users/xavier/Code/cdsat/src/trail.rs" 698 4 698 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Trail_IndexIterator_Type.t_indexiterator
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_IndexIterator_Type.t_indexiterator;
  var self_1 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _2 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _3 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _2) };
    assume { Resolve0.resolve self_1 };
    _3 <- Cdsat_Trail_TrailIndex_Type.C_TrailIndex ([#"/Users/xavier/Code/cdsat/src/trail.rs" 701 31 701 32] (0 : usize)) ([#"/Users/xavier/Code/cdsat/src/trail.rs" 701 34 701 35] (0 : usize));
    _0 <- Cdsat_Trail_IndexIterator_Type.C_IndexIterator _2 _3;
    return _0
  }
  
end
module Cdsat_Trail_Impl16_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 715 4 715 82] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) (just : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Trail_Term_Type.t_term) (value : Cdsat_Trail_Value_Type.t_value) : ()
    
end
module Cdsat_Trail_Impl16_Trail_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val trail [#"/Users/xavier/Code/cdsat/src/trail.rs" 719 4 719 33] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : Cdsat_Trail_Trail_Type.t_trail
    
end
module Cdsat_Trail_Impl16_Trail
  use prelude.Borrow
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  let rec cfg trail [#"/Users/xavier/Code/cdsat/src/trail.rs" 719 4 719 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : Cdsat_Trail_Trail_Type.t_trail
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Trail_Type.t_trail;
  var self_1 : Cdsat_Trail_IndexIterator_Type.t_indexiterator;
  var _2 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Cdsat_Trail_IndexIterator_Type.indexiterator_trail self_1;
    _0 <-  * _2;
    return _0
  }
  
end
module Cdsat_Trail_Impl16_Next_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val next [#"/Users/xavier/Code/cdsat/src/trail.rs" 725 4 725 48] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl18_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 762 4 762 39] (self : Cdsat_Trail_Assignment_Type.t_assignment) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 761 14 761 34] result = Cdsat_Trail_Assignment_Type.assignment_level self }
    
end
module Cdsat_Trail_Impl18_Level
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg level [#"/Users/xavier/Code/cdsat/src/trail.rs" 762 4 762 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 761 14 761 34] result = Cdsat_Trail_Assignment_Type.assignment_level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Trail_Assignment_Type.assignment_level self_1;
    return _0
  }
  
end
module Cdsat_Trail_Impl18_IsJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 777 4 777 45] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 14 776 75] result = (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Justified j) }
    
end
module Cdsat_Trail_Impl18_IsJustified
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 777 4 777 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 14 776 75] result = (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Justified j) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Cdsat_Trail_Assignment_Type.assignment_reason self_1)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _0 <- false;
    goto BB3
  }
  BB2 {
    _0 <- true;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Cdsat_Trail_Impl18_IsInput_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_input [#"/Users/xavier/Code/cdsat/src/trail.rs" 787 4 787 41] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 786 14 786 54] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Input) }
    
end
module Cdsat_Trail_Impl18_IsInput
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl3_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonModel_Type.t_reasonmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl24_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/trail.rs" 787 4 787 41]  : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Trail_Reason_Type.C_Input in let _0 = _1 in _0
  let rec cfg is_input [#"/Users/xavier/Code/cdsat/src/trail.rs" 787 4 787 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 786 14 786 54] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Input) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : Cdsat_Trail_Reason_Type.t_reason;
  var _4 : Cdsat_Trail_Reason_Type.t_reason;
  var _5 : Cdsat_Trail_Reason_Type.t_reason;
  var _6 : Cdsat_Trail_Reason_Type.t_reason;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_reason self_1;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 788 23 788 36] promoted0);
    _4 <- _6;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 788 8 788 36] Eq0.eq _3 _4);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Trail_Impl18_Value_Interface
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val value [#"/Users/xavier/Code/cdsat/src/trail.rs" 792 4 792 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 791 14 791 33] result = Cdsat_Trail_Assignment_Type.assignment_val self }
    
end
module Cdsat_Trail_Impl18_Value
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  let rec cfg value [#"/Users/xavier/Code/cdsat/src/trail.rs" 792 4 792 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 791 14 791 33] result = Cdsat_Trail_Assignment_Type.assignment_val self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Value_Type.t_value;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : Cdsat_Trail_Value_Type.t_value;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_val self_1;
    _0 <- _3;
    return _0
  }
  
end
module Cdsat_Trail_Impl18_Term_Interface
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val term [#"/Users/xavier/Code/cdsat/src/trail.rs" 797 4 797 38] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 796 14 796 34] result = Cdsat_Trail_Assignment_Type.assignment_term self }
    
end
module Cdsat_Trail_Impl18_Term
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  let rec cfg term [#"/Users/xavier/Code/cdsat/src/trail.rs" 797 4 797 38] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 796 14 796 34] result = Cdsat_Trail_Assignment_Type.assignment_term self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Term_Type.t_term;
  var self_1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _3 : Cdsat_Trail_Term_Type.t_term;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_term self_1;
    _0 <- _3;
    return _0
  }
  
end
module Cdsat_Theory_Impl0_IsBool_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term)
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term)
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 26 8 26 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 25 4 25 32] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_NegateInvolutive_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 68 4 68 12] ()
  val negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self}
    ensures { result = negate_involutive self }
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Impl
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  let rec ghost function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 71 4 71 30] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 69 15 69 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 70 14 70 44] Negate0.negate (Negate0.negate self) = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 68 4 68 12] ()
end
module Cdsat_Theory_Impl3_Lemma_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl3_Lemma_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 14 171 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl3_Lemma
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Stub as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort2.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 8 176 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> ()
      | _ -> ()
      end
  val lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self}
    ensures { result = lemma' self t v }
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 14 171 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl3_Lemma_Impl
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort as Sort2 with
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort2.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort2.sort
  let rec ghost function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 172 4 172 37] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 168 15 168 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 169 15 169 40] Sort2.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 170 15 170 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 171 14 171 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 8 176 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> ()
      | _ -> ()
      end
end
module Cdsat_Theory_Impl4_IsSetLevel_Stub
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel_Interface
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 198 12 200 67] s = Fset.empty  /\ m = 0 \/ (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
  val is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 196 4 196 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int) : bool
    ensures { result = is_set_level self s m }
    
end
module Cdsat_Theory_Impl4_SetLevelMax_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMax_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMax
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 12] ()
  val set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { result = set_level_max self set elem }
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMax_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  let rec ghost function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 228 15 228 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 12] ()
end
module Cdsat_Theory_Impl4_SetLevelMin_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMin_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 236 14 236 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_SetLevelMin
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 233 4 233 12] ()
  val set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { result = set_level_min self set elem }
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 236 14 236 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_SetLevelMin_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 237 4 237 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 234 15 234 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 235 15 235 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 236 14 236 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 233 4 233 12] ()
end
module Cdsat_Theory_Impl4_ContainsInverse_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_ContainsInverse_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 345 14 345 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_ContainsInverse
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 341 4 341 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then () else contains_inverse tl d
      end
  val contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { result = contains_inverse self d }
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 345 14 345 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_ContainsInverse_Impl
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 346 4 346 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 342 15 342 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 343 15 343 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 345 14 345 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 341 4 341 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        contains_inverse tl d
      
      end
end
module Cdsat_Theory_Impl4_RestrictTooBig_Stub
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 4 596 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictTooBig_Interface
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 4 596 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 593 15 593 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 594 15 594 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 595 14 595 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictTooBig
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 4 596 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 597 8 606 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  val restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 4 596 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 593 15 593 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 594 15 594 39] level < LevelOf0.level_of self d}
    ensures { result = restrict_too_big self level d }
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 593 15 593 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 594 15 594 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 595 14 595 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictTooBig_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  let rec ghost function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 4 596 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 593 15 593 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 594 15 594 39] level < LevelOf0.level_of self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 595 14 595 47] not Contains0.contains (Restrict0.restrict self level) d }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 597 8 606 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
end
module Cdsat_Theory_Impl4_TrailPlausible_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 623 15 623 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 625 14 625 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_TrailPlausible
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 627 8 636 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  val trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 623 15 623 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { result = trail_plausible self d }
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 623 15 623 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 625 14 625 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_TrailPlausible_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 626 4 626 46] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 622 15 622 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 623 15 623 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 625 14 625 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 627 8 636 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
end
module Cdsat_Theory_Impl5_Decide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 656 4 656 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Decide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 656 4 656 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 652 15 652 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 655 4 655 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 654 4 654 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Decide
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 656 4 656 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 650 4 650 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision t val') (Level0.level (Cdsat_Theory_Normal_Type.normal_0 self) + 1) (Cdsat_Theory_Normal_Type.normal_0 self)
  val decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 656 4 656 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 652 15 652 27] Sound0.sound self}
    ensures { result = decide self t val' tgt }
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 652 15 652 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 655 4 655 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 654 4 654 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Decide_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains0.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 656 4 656 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 652 15 652 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 654 4 654 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 655 4 655 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 650 4 650 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t val' && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision t val') (Level0.level (Cdsat_Theory_Normal_Type.normal_0 self) + 1) (Cdsat_Theory_Normal_Type.normal_0 self) in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl5_Deduce_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 668 15 668 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 671 4 671 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 670 4 670 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 667 4 667 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.normal_0 self)
  val deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 668 15 668 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 27] Sound0.sound self}
    ensures { result = deduce self just tgt }
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 668 15 668 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 671 4 671 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 670 4 670 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce_Impl
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains1.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 673 4 673 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 668 15 668 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 669 15 669 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 670 4 670 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 671 4 671 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 672 4 672 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 667 4 667 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) && Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) && pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && pure {forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)} && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.normal_0 self) in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl5_Fail_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 689 15 689 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 690 15 690 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 693 8 700 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a) = 0
  val fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 689 15 689 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 690 15 690 27] Sound0.sound self}
    ensures { result = fail self just }
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 689 15 689 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 690 15 690 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail_Impl
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 692 4 692 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 689 15 689 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 690 15 690 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 691 4 691 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 693 8 700 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && not Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) && pure {forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)} && Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l && (let a = LevelOf0.level_of (Cdsat_Theory_Normal_Type.normal_0 self) not_l in pure {a = 0}) && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a) in pure {a = 0})
end
module Cdsat_Theory_Impl5_ConflictSolve_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 726 4 726 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl5_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 726 4 726 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 721 15 721 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 722 15 722 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 725 4 725 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 723 4 723 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 726 4 726 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 727 8 737 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 726 4 726 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 721 15 721 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 722 15 722 27] Sound0.sound self}
    ensures { result = conflict_solve self just tgt }
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 721 15 721 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 722 15 722 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 725 4 725 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 723 4 723 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve_Impl
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 726 4 726 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 721 15 721 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 722 15 722 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 723 4 723 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 725 4 725 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 727 8 737 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l && pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && not Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) && pure {forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)} && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict in pure {a > 0}) && pure {tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict}
end
module Cdsat_Theory_Impl5_ConflictSolve2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl5_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 743 15 743 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 744 15 744 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 4 746 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 745 4 745 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 750 10 753 43] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 743 15 743 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 744 15 744 27] Sound0.sound self}
    ensures { result = conflict_solve2 self conflict tgt }
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 743 15 743 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 744 15 744 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 4 746 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 745 4 745 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2_Impl
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 743 15 743 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 744 15 744 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 745 4 745 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 746 4 746 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 747 4 747 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 750 10 753 43] pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && pure {forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false} && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict in pure {a > 0}) && pure {tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict}
end
module Cdsat_Theory_Impl6_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 773 4 773 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
end
module Cdsat_Theory_Impl6_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 773 4 773 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
end
module Cdsat_Theory_Impl6_Level
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 773 4 773 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 772 4 772 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 773 4 773 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    ensures { result = level self }
    
end
module Cdsat_Theory_Impl6_LearnJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl6_LearnJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 778 15 778 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 779 15 779 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 782 4 782 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl6_LearnJustified
  use map.Const
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl3_Lemma_Stub as Lemma0 with
    function Sort0.sort = Sort0.sort,
    function Sort2.sort = Sort2.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 784 8 784 67] let _ = Lemma0.lemma' (Cdsat_Theory_Model_Type.C_Model (Const.const (Cdsat_Theory_Value_Type.C_Bool false))) (let (a, _) = ass in a) (let (_, a) = ass in a) in ()
  val learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 778 15 778 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 779 15 779 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { result = learn_justified self ass }
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 778 15 778 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 779 15 779 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 782 4 782 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl6_LearnJustified_Impl
  use map.Const
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Invariant as Invariant2 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with
    function Sort0.sort = Sort1.sort,
    function Sort2.sort = Sort0.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    function Interp0.interp = Interp0.interp,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 783 4 783 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 778 15 778 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 779 15 779 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 782 4 782 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 784 8 784 67] let _ = Lemma0.lemma' (Cdsat_Theory_Model_Type.C_Model (Const.const (Cdsat_Theory_Value_Type.C_Bool false))) (let (a, _) = ass in a) (let (_, a) = ass in a) in ()
end
module Cdsat_Theory_Impl6_Backjump_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 826 4 826 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_Backjump_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 826 4 826 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 821 15 821 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 822 15 822 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 825 4 825 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 824 4 824 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 823 4 823 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant2
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl6_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Stub as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 826 4 826 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 820 4 820 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let _ = LearnJustified0.learn_justified self l in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  val backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 826 4 826 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 821 15 821 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 822 15 822 27] Sound0.sound self}
    ensures { result = backjump self l tgt }
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 821 15 821 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 822 15 822 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 825 4 825 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 824 4 824 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 823 4 823 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with
    function Sort0.sort = Sort1.sort,
    function Sort2.sort = Sort0.sort,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    function Interp0.interp = Interp0.interp,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl0_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_LearnJustified as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Lemma0.lemma' = Lemma0.lemma',
    function Sort0.sort = Sort1.sort,
    function Sort2.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 826 4 826 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 821 15 821 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 822 15 822 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 823 4 823 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 824 4 824 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 825 4 825 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 820 4 820 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = let b' = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in let _ = let b' = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.conflict_0 self) b' l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let _ = let c' = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 c' in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let _ = LearnJustified0.learn_justified self l in let restricted = let b' = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l && IsBool0.is_bool (let (_, a) = l in a) && IsBool1.is_bool (let (a, _) = l in a) && (let b = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in let a = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l in pure {a > b}) && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl6_UndoClear_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_UndoClear_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 873 4 873 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel_Stub as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 8 883 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : int . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1)
  val undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self}
    ensures { result = undo_clear self a tgt }
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 873 4 873 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsSetLevel as IsSetLevel0 with
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 873 4 873 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 8 883 11] let _ = let b' = Level0.level self - 1 in RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in let _ = let c' = Level0.level self - 1 in RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 c' in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a && not IsBool0.is_bool (let (_, a) = a in a) && pure {exists l : int . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e l} && (let b = let b' = Level0.level self - 1 in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl6_UndoDecide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 893 4 893 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 893 4 893 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 888 15 888 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 889 15 889 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 891 4 891 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 890 4 890 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound2.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Stub as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 893 4 893 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 894 8 906 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in let _ = RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  val undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 893 4 893 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 888 15 888 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 889 15 889 27] Sound0.sound self}
    ensures { result = undo_decide self l tgt }
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 888 15 888 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 889 15 889 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 891 4 891 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 890 4 890 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound2.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 893 4 893 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 888 15 888 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 889 15 889 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 890 4 890 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 891 4 891 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 894 8 906 11] let _ = let b' = Level0.level self - 1 in RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in let _ = let b' = Level0.level self - 1 in RestrictTooBig0.restrict_too_big (Cdsat_Theory_Conflict_Type.conflict_0 self) b' l in let _ = TrailPlausible0.trail_plausible (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let _ = NegateInvolutive0.negate_involutive (let (_, a) = l in a) in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let restr = let b' = Level0.level self - 1 in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l && IsBool0.is_bool (let (_, a) = l in a) && pure {exists a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a = Level0.level self} && (let b = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let a = Level0.level self in pure {a = b}) && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Main_Interface
  val main [#"/Users/xavier/Code/cdsat/src/main.rs" 28 0 28 9] (_1' : ()) : ()
end
module Cdsat_Concrete_Impl2
  
end
module Cdsat_Trail_Impl0
  
end
module Cdsat_Trail_Impl2
  
end
module Cdsat_Trail_Impl4
  
end
module Cdsat_Trail_Impl6
  
end
module Cdsat_Trail_Impl8
  
end
module Cdsat_Trail_Impl12
  
end
module Cdsat_Trail_Impl19
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 9 13 14] forall self : Cdsat_Trail_Assignment_Type.t_assignment . forall result : Cdsat_Trail_Assignment_Type.t_assignment . result = self -> result = self
end
module Cdsat_Trail_Impl23
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 9 54 14] forall self : Cdsat_Trail_Reason_Type.t_reason . forall result : Cdsat_Trail_Reason_Type.t_reason . result = self -> result = self
end
module Cdsat_Trail_Impl27
  use prelude.Borrow
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 9 97 14] forall self : Cdsat_Trail_Sort_Type.t_sort . forall result : Cdsat_Trail_Sort_Type.t_sort . result = self -> result = self
end
module Cdsat_Trail_Impl31
  use prelude.Borrow
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 9 130 14] forall self : Cdsat_Trail_Term_Type.t_term . forall result : Cdsat_Trail_Term_Type.t_term . result = self -> result = self
end
module Cdsat_Trail_Impl35
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 9 201 14] forall self : Cdsat_Trail_Value_Type.t_value . forall result : Cdsat_Trail_Value_Type.t_value . result = self -> result = self
end
module Cdsat_Trail_Impl42
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 24 261 29] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = self -> result = self
end
module Cdsat_Trail_Impl20
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel3
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl2_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  use Cdsat_Trail_AssignmentModel_Type as Cdsat_Trail_AssignmentModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl1_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentModel_Type.t_assignmentmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 13 16 13 25] forall self : Cdsat_Trail_Assignment_Type.t_assignment . forall other : Cdsat_Trail_Assignment_Type.t_assignment . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl24
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonModel_Type as Cdsat_Trail_ReasonModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl3_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonModel_Type.t_reasonmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 54 16 54 25] forall self : Cdsat_Trail_Reason_Type.t_reason . forall other : Cdsat_Trail_Reason_Type.t_reason . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl28
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  clone Cdsat_Trail_Impl5_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 97 16 97 25] forall self : Cdsat_Trail_Sort_Type.t_sort . forall other : Cdsat_Trail_Sort_Type.t_sort . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl32
  use prelude.Borrow
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Trail_Sort_Type as Cdsat_Trail_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Trail_Impl8_ShallowModel as ShallowModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Trail_Impl4_ShallowModel as ShallowModel0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Term_Type as Cdsat_Trail_Term_Type
  clone Cdsat_Trail_Impl6_ShallowModel as ShallowModel2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 16 130 25] forall self : Cdsat_Trail_Term_Type.t_term . forall other : Cdsat_Trail_Term_Type.t_term . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl36
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Trail_Value_Type as Cdsat_Trail_Value_Type
  clone Cdsat_Trail_Impl9_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 201 16 201 25] forall self : Cdsat_Trail_Value_Type.t_value . forall other : Cdsat_Trail_Value_Type.t_value . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl39
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl13_DeepModel as DeepModel1
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 9 261 18] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl21
  
end
module Cdsat_Trail_Impl25
  
end
module Cdsat_Trail_Impl29
  
end
module Cdsat_Trail_Impl33
  
end
module Cdsat_Trail_Impl37
  
end
module Cdsat_Trail_Impl40
  
end
module Cdsat_Trail_Impl22
  
end
module Cdsat_Trail_Impl26
  
end
module Cdsat_Trail_Impl30
  
end
module Cdsat_Trail_Impl34
  
end
module Cdsat_Trail_Impl38
  
end
module Cdsat_Trail_Impl41
  
end
module Cdsat_Trail_Impl1
  
end
module Cdsat_Trail_Impl3
  
end
module Cdsat_Trail_Impl5
  
end
module Cdsat_Trail_Impl7
  
end
module Cdsat_Trail_Impl9
  
end
module Cdsat_Trail_Impl13
  
end
module Cdsat_Trail_Impl43
  
end
module Cdsat_Trail_Impl44
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl13_DeepModel as DeepModel0
  use Core_Option_Option_Type as Core_Option_Option_Type
  goal partial_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 37 261 47] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering) . result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl45
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl13_DeepModel as DeepModel0
  goal cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 261 49 261 52] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : Core_Cmp_Ordering_Type.t_ordering . result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other)
end
module Cdsat_Trail_Impl11
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl8_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl11_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  goal cmp_le_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 278 4 278 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) -> LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
  goal cmp_gt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 289 4 289 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
  goal refl_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 4 293 20] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
  goal antisym2_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
  goal cmp_lt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 282 4 282 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
  goal trans_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 299 4 299 52] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall z : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall o : Core_Cmp_Ordering_Type.t_ordering . CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o /\ (forall result : () . CmpLog0.cmp_log x z = o -> CmpLog0.cmp_log x z = o)
  goal cmp_ge_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) -> GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
  goal antisym1_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
  goal eq_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 31] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall result : () . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) -> (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl17
  
end
