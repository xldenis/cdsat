
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Cdsat_Term_Sort_Type
  type t_sort  =
    | C_Boolean
    | C_Rational
    
end
module NumRational_Ratio_Type
  type t_ratio 't =
    | C_Ratio 't 't
    
end
module NumBigint_Bigint_Sign_Type
  type t_sign  =
    | C_Minus
    | C_NoSign
    | C_Plus
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module NumBigint_Biguint_BigUint_Type
  use prelude.Int
  use prelude.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_biguint  =
    | C_BigUint (Alloc_Vec_Vec_Type.t_vec uint64 (Alloc_Alloc_Global_Type.t_global))
    
end
module NumBigint_Bigint_BigInt_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  use NumBigint_Bigint_Sign_Type as NumBigint_Bigint_Sign_Type
  type t_bigint  =
    | C_BigInt (NumBigint_Bigint_Sign_Type.t_sign) (NumBigint_Biguint_BigUint_Type.t_biguint)
    
end
module Cdsat_Term_Value_Type
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  type t_value  =
    | C_Bool bool
    | C_Rat (NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint))
    
  let function bool_0 (self : t_value) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool a -> a
      | C_Rat _ -> any bool
      end
  let function rat_0 (self : t_value) : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Rat a -> a
      end
end
module Cdsat_Term_Term_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  type t_term  =
    | C_Variable usize (Cdsat_Term_Sort_Type.t_sort)
    | C_Value (Cdsat_Term_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Times isize (t_term)
    | C_Eq (t_term) (t_term)
    | C_Lt (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    | C_Neg (t_term)
    | C_Disj (t_term) (t_term)
    | C_Impl (t_term) (t_term)
    
  let function variable_0 (self : t_term) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable a _ -> a
      | C_Value _ -> any usize
      | C_Plus _ _ -> any usize
      | C_Times _ _ -> any usize
      | C_Eq _ _ -> any usize
      | C_Lt _ _ -> any usize
      | C_Conj _ _ -> any usize
      | C_Neg _ -> any usize
      | C_Disj _ _ -> any usize
      | C_Impl _ _ -> any usize
      end
  let function variable_1 (self : t_term) : Cdsat_Term_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ a -> a
      | C_Value _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Plus _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Times _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Eq _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Lt _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Conj _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Neg _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Disj _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Impl _ _ -> any Cdsat_Term_Sort_Type.t_sort
      end
  let function value_0 (self : t_term) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Value a -> a
      | C_Plus _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Times _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Eq _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Lt _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Conj _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Neg _ -> any Cdsat_Term_Value_Type.t_value
      | C_Disj _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Impl _ _ -> any Cdsat_Term_Value_Type.t_value
      end
  let function plus_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus a _ -> a
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function plus_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ a -> a
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function times_0 (self : t_term) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any isize
      | C_Value _ -> any isize
      | C_Plus _ _ -> any isize
      | C_Times a _ -> a
      | C_Eq _ _ -> any isize
      | C_Lt _ _ -> any isize
      | C_Conj _ _ -> any isize
      | C_Neg _ -> any isize
      | C_Disj _ _ -> any isize
      | C_Impl _ _ -> any isize
      end
  let function times_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ a -> a
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq a _ -> a
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ a -> a
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function lt_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt a _ -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function lt_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ a -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj a _ -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ a -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function neg_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg a -> a
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function disj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj a _ -> a
      | C_Impl _ _ -> any t_term
      end
  let function disj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ a -> a
      | C_Impl _ _ -> any t_term
      end
  let function impl_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl a _ -> a
      end
  let function impl_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ a -> a
      end
end
module Cdsat_Trail_TrailIndex_Type
  use prelude.Int
  use prelude.UIntSize
  type t_trailindex  =
    | C_TrailIndex usize usize
    
  let function trailindex_0 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex a _ -> a
      end
  let function trailindex_1 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex _ a -> a
      end
end
module Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_reason  =
    | C_Justified (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision
    | C_Input
    
  let function justified_0 (self : t_reason) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Justified a -> a
      | C_Decision -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Input -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module Cdsat_Trail_Assignment_Type
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  type t_assignment  =
    | C_Assignment (Cdsat_Term_Term_Type.t_term) (Cdsat_Term_Value_Type.t_value) (Cdsat_Trail_Reason_Type.t_reason) usize
    
  let function assignment_term (self : t_assignment) : Cdsat_Term_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment a _ _ _ -> a
      end
  let function assignment_val (self : t_assignment) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ a _ _ -> a
      end
  let function assignment_reason (self : t_assignment) : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ a _ -> a
      end
  let function assignment_level (self : t_assignment) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type t_sort  =
    | C_Rational
    | C_Boolean
    
end
module Cdsat_Theory_Var_Type
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  type t_var  =
    | C_Var int (Cdsat_Theory_Sort_Type.t_sort)
    
  let function var_1 (self : t_var) : Cdsat_Theory_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Var _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use prelude.Int
  type t_value  =
    | C_Bool bool
    | C_Rat int
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_term  =
    | C_Variable (Cdsat_Theory_Var_Type.t_var)
    | C_Value (Cdsat_Theory_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assign  =
    | C_Decision (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Justified (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Input (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Trail_Type
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  type t_trail  =
    | C_Empty
    | C_Assign (Cdsat_Theory_Assign_Type.t_assign) int (t_trail)
    
end
module Cdsat_Trail_Trail_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_trail  =
    | C_Trail (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) usize (Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail))
    
  let function trail_assignments (self : t_trail) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail a _ _ -> a
      end
  let function trail_ghost (self : t_trail) : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ _ a -> a
      end
  let function trail_level (self : t_trail) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ a _ -> a
      end
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27] (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module Cdsat_Trail_Impl9_Contains_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl9_Contains_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { result = contains self ix }
    
end
module Cdsat_Trail_Impl9_Contains
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 287 12 287 92] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix) < Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) /\ UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) < Seq.length (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix))))
  val contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 4 285 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { result = contains self ix }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl17_DeepModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 11 38 11 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl17_DeepModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 11 38 11 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 11 38 11 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl17_DeepModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 11 38 11 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 11 38 11 47] match (self) with
      | Cdsat_Term_Sort_Type.C_Boolean -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Term_Sort_Type.C_Rational -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 11 38 11 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl6_DeepModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 199 4 199 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Term_Impl6_DeepModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 199 4 199 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 199 4 199 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl6_DeepModel
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 199 4 199 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 199 4 199 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl5_DeepModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 166 4 166 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Term_Impl5_DeepModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 166 4 166 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 166 4 166 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl5_DeepModel
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel2
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 166 4 166 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 167 8 182 9] match (self) with
      | Cdsat_Term_Term_Type.C_Variable v s -> Cdsat_Theory_Term_Type.C_Variable (Cdsat_Theory_Var_Type.C_Var (DeepModel0.deep_model v) (DeepModel1.deep_model s))
      | Cdsat_Term_Term_Type.C_Value v -> Cdsat_Theory_Term_Type.C_Value (DeepModel2.deep_model v)
      | Cdsat_Term_Term_Type.C_Plus l r -> Cdsat_Theory_Term_Type.C_Plus (deep_model l) (deep_model r)
      | Cdsat_Term_Term_Type.C_Eq l r -> Cdsat_Theory_Term_Type.C_Eq (deep_model l) (deep_model r)
      | Cdsat_Term_Term_Type.C_Conj l r -> Cdsat_Theory_Term_Type.C_Conj (deep_model l) (deep_model r)
      | _ -> Cdsat_Theory_Term_Type.C_Value (Cdsat_Theory_Value_Type.C_Bool true)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 166 4 166 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl4_ShallowModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 155 4 155 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Term_Impl4_ShallowModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 155 4 155 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 155 4 155 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl4_ShallowModel
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 155 4 155 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 156 8 156 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 155 4 155 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl7_ShallowModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 210 4 210 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Term_Impl7_ShallowModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 210 4 210 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 210 4 210 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl7_ShallowModel
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 210 4 210 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 211 8 211 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 210 4 210 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl12_TermValue_Stub
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 607 4 607 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl12_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 607 4 607 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 607 4 607 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = term_value self }
    
end
module Cdsat_Trail_Impl12_TermValue
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 607 4 607 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 608 8 608 61] (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term self), ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self))
  val term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 607 4 607 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = term_value self }
    
end
module Cdsat_Trail_Impl9_IndexLogic_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl9_IndexLogic_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = index_logic self ix }
    
end
module Cdsat_Trail_Impl9_IndexLogic
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl12_TermValue_Stub as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 543 8 545 9] TermValue0.term_value (Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)))
  val index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = index_logic self ix }
    
end
module Cdsat_Theory_Impl1_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 55 4 55 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 55 4 55 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 55 4 55 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 55 4 55 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 56 8 59 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Value_Type.C_Rat _ -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 55 4 55 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl0_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 4 15 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 4 15 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 4 15 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 4 15 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 16 8 22 9] match (self) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Cdsat_Theory_Var_Type.var_1 v
      | Cdsat_Theory_Term_Type.C_Value v -> Sort0.sort v
      | Cdsat_Theory_Term_Type.C_Plus _ _ -> Cdsat_Theory_Sort_Type.C_Rational
      | Cdsat_Theory_Term_Type.C_Eq _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Conj _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 15 4 15 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl2_Invariant_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 89 4 89 34] (self : Cdsat_Theory_Assign_Type.t_assign)
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 89 4 89 34] (self : Cdsat_Theory_Assign_Type.t_assign)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 89 4 89 34] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 89 4 89 34] (self : Cdsat_Theory_Assign_Type.t_assign)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 90 8 94 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.C_Justified _ t v -> Sort0.sort t = Sort1.sort v /\ Sort0.sort t = Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Assign_Type.C_Input t v -> Sort0.sort t = Sort1.sort v
      end
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 89 4 89 34] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_InvariantAssign_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 288 4 288 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 288 4 288 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 288 4 288 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_assign self }
    
end
module Cdsat_Theory_Impl4_InvariantAssign
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Stub as Invariant0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 288 4 288 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 289 8 292 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
  val invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 288 4 288 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_assign self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Cdsat_Theory_Impl2_ToPair_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 99 4 99 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 99 4 99 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 99 4 99 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = to_pair self }
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 99 4 99 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 100 8 104 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Input t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Justified _ t val' -> (t, val')
      end
  val to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 99 4 99 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = to_pair self }
    
end
module Cdsat_Theory_Impl4_Len_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 4 551 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl4_Len_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 4 551 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  val len [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 4 551 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 25] result >= 0 }
    ensures { result = len self }
    
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 25] len self >= 0
end
module Cdsat_Theory_Impl4_Len
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 4 551 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 552 8 555 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> len tl + 1
      end
  val len [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 4 551 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 25] result >= 0 }
    ensures { result = len self }
    
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 25] len self >= 0
end
module Cdsat_Theory_Impl4_Len_Impl
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  let rec ghost function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 551 4 551 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 552 8 555 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> len tl + 1
      end
end
module Cdsat_Theory_Impl4_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 540 4 540 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl4_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 540 4 540 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 540 4 540 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 14 537 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 14 538 34] result <= Len0.len self }
    ensures { result = level self }
    
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 538 14 538 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 537 14 537 25] level self >= 0)
end
module Cdsat_Theory_Impl4_Level
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 540 4 540 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 541 8 545 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> level tl
      end
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 540 4 540 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 14 537 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 14 538 34] result <= Len0.len self }
    ensures { result = level self }
    
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 538 14 538 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 537 14 537 25] level self >= 0)
end
module Cdsat_Theory_Impl4_Level_Impl
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  let rec ghost function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 540 4 540 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 537 14 537 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 538 14 538 34] result <= Len0.len self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 541 8 545 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> level tl
      end
end
module Cdsat_Theory_Impl4_InvariantNonneg_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 279 4 279 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 279 4 279 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 279 4 279 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_nonneg self }
    
end
module Cdsat_Theory_Impl4_InvariantNonneg
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 279 4 279 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 280 8 283 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
  val invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 279 4 279 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_nonneg self }
    
end
module Cdsat_Theory_Impl4_Find_Stub
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 411 4 411 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
end
module Cdsat_Theory_Impl4_Find_Interface
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 411 4 411 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
  val find [#"/Users/xavier/Code/cdsat/src/theory.rs" 411 4 411 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 405 14 408 5] match (result) with
      | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 409 4 409 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 410 4 410 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)) }
    ensures { result = find self d }
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 410 4 410 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 409 4 409 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 14 408 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Find
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 411 4 411 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 8 421 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Core_Option_Option_Type.C_None
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.C_Some (a, l)
      else
        find tl d
      
      end
  val find [#"/Users/xavier/Code/cdsat/src/theory.rs" 411 4 411 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 405 14 408 5] match (result) with
      | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 409 4 409 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 410 4 410 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)) }
    ensures { result = find self d }
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 410 4 410 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 409 4 409 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 14 408 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl4_Find_Impl
  use prelude.Int
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec ghost function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 411 4 411 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 405 14 408 5] match (result) with
      | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 409 4 409 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 410 4 410 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 412 8 421 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Core_Option_Option_Type.C_None
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        Core_Option_Option_Type.C_Some (a, l)
      else
        find tl d
      
      end
end
module Cdsat_Theory_Impl4_Contains_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_Contains_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 87] InvariantAssign0.invariant_assign self -> result = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a) }
    ensures { result = contains self d }
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_Contains
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 362 8 365 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some ix -> true
      | Core_Option_Option_Type.C_None -> false
      end
  val contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 87] InvariantAssign0.invariant_assign self -> result = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a) }
    ensures { result = contains self d }
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl4_Contains_Impl
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 361 4 361 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 360 4 360 87] InvariantAssign0.invariant_assign self -> result = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 362 8 365 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some ix -> true
      | Core_Option_Option_Type.C_None -> false
      end
end
module Cdsat_Theory_Impl4_LevelOf_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 351 4 351 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl4_LevelOf_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 351 4 351 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 351 4 351 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 349 15 349 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 350 14 350 51] result >= 0 /\ result <= Level0.level self }
    ensures { result = level_of self d }
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 349 15 349 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 350 14 350 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Theory_Impl4_LevelOf
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 351 4 351 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 352 8 355 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (_, l) -> l
      | Core_Option_Option_Type.C_None -> 0
      end
  val level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 351 4 351 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 349 15 349 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 350 14 350 51] result >= 0 /\ result <= Level0.level self }
    ensures { result = level_of self d }
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 349 15 349 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 350 14 350 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Theory_Impl4_LevelOf_Impl
  use prelude.Int
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 351 4 351 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 349 15 349 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 350 14 350 51] result >= 0 /\ result <= Level0.level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 352 8 355 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (_, l) -> l
      | Core_Option_Option_Type.C_None -> 0
      end
end
module Cdsat_Trail_Impl8_LevelLog_Stub
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 4 179 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
end
module Cdsat_Trail_Impl8_LevelLog_Interface
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 4 179 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
  val level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 4 179 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    ensures { result = level_log self }
    
end
module Cdsat_Trail_Impl8_LevelLog
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 4 179 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 178 4 178 12] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 self)
  val level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 4 179 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    ensures { result = level_log self }
    
end
module Cdsat_Trail_Impl9_AbstractRelation_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 275 4 275 42] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl9_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 275 4 275 42] (self : Cdsat_Trail_Trail_Type.t_trail)
    
  val abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 275 4 275 42] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = abstract_relation self }
    
end
module Cdsat_Trail_Impl9_AbstractRelation
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 275 4 275 42] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 277 12 279 160] (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ LevelLog0.level_log ix = LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a /\ IndexLogic0.index_logic self ix = a))
  val abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 275 4 275 42] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = abstract_relation self }
    
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_model  =
    | C_Model (Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value))
    
  let function model_0 (self : t_model) : Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Model a -> a
      end
end
module Cdsat_Theory_Impl3_Invariant_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 125 4 125 34] (self : Cdsat_Theory_Model_Type.t_model)
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 125 4 125 34] (self : Cdsat_Theory_Model_Type.t_model)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 125 4 125 34] (self : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl3_Invariant
  use map.Map
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 125 4 125 34] (self : Cdsat_Theory_Model_Type.t_model)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 126 8 128 9] forall v : Cdsat_Theory_Value_Type.t_value . forall k : Cdsat_Theory_Var_Type.t_var . Map.get (Cdsat_Theory_Model_Type.model_0 self) k = v -> Cdsat_Theory_Var_Type.var_1 k = Sort0.sort v
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 125 4 125 34] (self : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Stub
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 16 8 16 26] Fset.mem e self
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Cdsat_Theory_Impl3_Interp_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 134 4 134 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl3_Interp_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 134 4 134 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
  val interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 134 4 134 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 133 4 133 62] Invariant0.invariant' self -> Sort0.sort result = Sort1.sort t }
    ensures { result = interp self t }
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . [#"/Users/xavier/Code/cdsat/src/theory.rs" 133 4 133 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Interp
  use map.Map
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 134 4 134 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 135 8 147 9] match (t) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Map.get (Cdsat_Theory_Model_Type.model_0 self) v
      | Cdsat_Theory_Term_Type.C_Value v -> v
      | Cdsat_Theory_Term_Type.C_Plus l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Rat r1, Cdsat_Theory_Value_Type.C_Rat r2) -> Cdsat_Theory_Value_Type.C_Rat (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.C_Rat (- 1)
        end
      | Cdsat_Theory_Term_Type.C_Conj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Eq l r -> Cdsat_Theory_Value_Type.C_Bool (interp self l = interp self r)
      end
  val interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 134 4 134 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 133 4 133 62] Invariant0.invariant' self -> Sort0.sort result = Sort1.sort t }
    ensures { result = interp self t }
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . [#"/Users/xavier/Code/cdsat/src/theory.rs" 133 4 133 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t
end
module Cdsat_Theory_Impl3_Interp_Impl
  use map.Map
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort
  let rec ghost function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 134 4 134 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 133 4 133 62] Invariant0.invariant' self -> Sort0.sort result = Sort1.sort t }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 135 8 147 9] match (t) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Map.get (Cdsat_Theory_Model_Type.model_0 self) v
      | Cdsat_Theory_Term_Type.C_Value v -> v
      | Cdsat_Theory_Term_Type.C_Plus l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Rat r1, Cdsat_Theory_Value_Type.C_Rat r2) -> Cdsat_Theory_Value_Type.C_Rat (r1 + r2)
        | _ -> Cdsat_Theory_Value_Type.C_Rat (- 1)
        end
      | Cdsat_Theory_Term_Type.C_Conj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 && b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Eq l r -> Cdsat_Theory_Value_Type.C_Bool (let b = interp self r in let a = interp self l in pure {a = b})
      end
end
module Cdsat_Theory_Impl3_Satisfies_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 152 4 152 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Satisfies_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 152 4 152 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 152 4 152 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfies self v }
    
end
module Cdsat_Theory_Impl3_Satisfies
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Stub as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 152 4 152 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 153 8 153 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
  val satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 152 4 152 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfies self v }
    
end
module Cdsat_Theory_Impl3_SatisfySet_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 158 4 158 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 158 4 158 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 158 4 158 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfy_set self v }
    
end
module Cdsat_Theory_Impl3_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 158 4 158 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 159 8 159 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains v a -> Satisfies0.satisfies self a
  val satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 158 4 158 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfy_set self v }
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
  val justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 40] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = justified_sound self }
    
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 110 8 115 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Justified just t val' -> forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
  val justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 40] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = justified_sound self }
    
end
module Cdsat_Theory_Impl4_Sound_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Sound_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl4_Sound
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 206 8 209 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sound self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Stub
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
  val remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
    ensures { result = remove self a }
    
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 53 8 53 26] Fset.remove a self
  val remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
    ensures { result = remove self a }
    
end
module Cdsat_Theory_Impl4_SetLevel_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl4_SetLevel_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 48] s = Fset.empty  -> result = 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 14 229 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 36] result <= Level0.level self }
    ensures { result = set_level self s }
    
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 14 229 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 48] s = Fset.empty  -> set_level self s = 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_SetLevel
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 48] s = Fset.empty  -> result = 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 14 229 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 36] result <= Level0.level self }
    ensures { result = set_level self s }
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 222 4 222 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 14 229 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 48] s = Fset.empty  -> set_level self s = 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl4_SetLevel_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  let rec ghost function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 231 4 231 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 226 4 226 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 227 4 227 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 4 228 48] s = Fset.empty  -> result = 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 14 229 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 230 14 230 36] result <= Level0.level self }
    variant {[#"/Users/xavier/Code/cdsat/src/theory.rs" 224 14 224 21] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 222 4 222 12] if pure {Fset.cardinal s = 0} then
      0
    else
      if pure {Fset.cardinal s = 1} then
        LevelOf0.level_of self (Fset.pick s)
      else
        let a = Fset.pick s in let rec' = let b' = Remove0.remove s a in set_level self b' in if let a = LevelOf0.level_of self a in pure {a >= rec'} then
          LevelOf0.level_of self a
        else
          rec'
        
      
    
end
module Cdsat_Theory_Impl4_InvariantLevel_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 40] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 40] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 40] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_level self }
    
end
module Cdsat_Theory_Impl4_InvariantLevel
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 40] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 264 8 274 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Input _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.C_Decision _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> SetLevel0.set_level tl j = l
        end
      end
  val invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 263 4 263 40] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_level self }
    
end
module Cdsat_Theory_Impl4_InvariantContains_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 297 4 297 43] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 297 4 297 43] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 297 4 297 43] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_contains self }
    
end
module Cdsat_Theory_Impl4_InvariantContains
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 297 4 297 43] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 298 8 311 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
  val invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 297 4 297 43] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_contains self }
    
end
module Cdsat_Theory_Impl1_IsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 49 4 49 32] (self : Cdsat_Theory_Value_Type.t_value)
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 49 4 49 32] (self : Cdsat_Theory_Value_Type.t_value)
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 49 4 49 32] (self : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 49 4 49 32] (self : Cdsat_Theory_Value_Type.t_value) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 50 8 50 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 49 4 49 32] (self : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_Negate_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 66 4 66 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 66 4 66 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 66 4 66 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 64 15 64 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 65 14 65 30] IsBool0.is_bool result }
    ensures { result = negate self }
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 64 15 64 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 65 14 65 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 66 4 66 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 67 8 70 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
      | _ -> self
      end
  val negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 66 4 66 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 64 15 64 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 65 14 65 30] IsBool0.is_bool result }
    ensures { result = negate self }
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 64 15 64 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 65 14 65 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl1_Negate_Impl
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  let rec ghost function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 66 4 66 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 64 15 64 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 65 14 65 30] IsBool0.is_bool result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 67 8 70 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
      | _ -> self
      end
end
module Cdsat_Theory_Impl4_TrailUnique_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 4 316 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 4 316 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 4 316 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = trail_unique self }
    
end
module Cdsat_Theory_Impl4_TrailUnique
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 4 316 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 317 8 325 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
  val trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 316 4 316 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = trail_unique self }
    
end
module Cdsat_Theory_Impl4_Invariant_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 4 330 34] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Invariant_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 4 330 34] (self : Cdsat_Theory_Trail_Type.t_trail)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 4 330 34] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl4_Invariant
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  clone Cdsat_Theory_Impl4_InvariantContains_Stub as InvariantContains0
  clone Cdsat_Theory_Impl4_InvariantLevel_Stub as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 4 330 34] (self : Cdsat_Theory_Trail_Type.t_trail)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 331 8 335 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 330 4 330 34] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 19 8 19 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Cdsat_Theory_Impl4_IsDecision_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 4 453 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsDecision_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 4 453 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 4 453 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_decision self d }
    
end
module Cdsat_Theory_Impl4_IsDecision
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 4 453 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 454 8 457 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Decision _ _, _) -> true
      | _ -> false
      end
  val is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 4 453 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_decision self d }
    
end
module Cdsat_Theory_Impl4_IsInput_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 463 4 463 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsInput_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 463 4 463 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 463 4 463 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_input self d }
    
end
module Cdsat_Theory_Impl4_IsInput
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 463 4 463 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 464 8 467 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Input _ _, _) -> true
      | _ -> false
      end
  val is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 463 4 463 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_input self d }
    
end
module Cdsat_Theory_Impl4_IsJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 4 443 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_IsJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 4 443 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 4 443 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_justified self d }
    
end
module Cdsat_Theory_Impl4_IsJustified
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 4 443 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 444 8 447 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified _ _ _, _) -> true
      | _ -> false
      end
  val is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 443 4 443 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_justified self d }
    
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Stub
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Logic_Seq_Impl0_Contains
  type t
  use seq.Seq
  use prelude.Int
  predicate contains (self : Seq.seq t) (e : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/seq.rs" 123 8 123 78] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Cdsat_Theory_Impl3_Entails_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 164 4 164 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl3_Entails_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 164 4 164 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 164 4 164 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = entails self j c }
    
end
module Cdsat_Theory_Impl3_Entails
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 164 4 164 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 165 8 165 84] Invariant0.invariant' self -> SatisfySet0.satisfy_set self j -> Satisfies0.satisfies self c
  val entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 164 4 164 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = entails self j c }
    
end
module Cdsat_Theory_Impl4_FindJustified_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_FindJustified_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 560 15 560 32] Contains0.contains self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 561 4 561 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a }
    ensures { result = find_justified self kv }
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 560 15 560 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 561 4 561 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_FindJustified
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 563 8 572 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else find_justified tl kv
      end
  val find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 560 15 560 32] Contains0.contains self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 561 4 561 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a }
    ensures { result = find_justified self kv }
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 560 15 560 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 561 4 561 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl4_FindJustified_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  let rec ghost function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 562 4 562 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 559 15 559 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 560 15 560 32] Contains0.contains self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 561 4 561 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 563 8 572 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = kv} then
        ()
      else
        find_justified tl kv
      
      end
end
module Cdsat_Theory_Impl4_Justification_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 428 15 428 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m result d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 58] IsInput0.is_input self d -> result = Fset.empty  }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 61] IsDecision0.is_decision self d -> result = Fset.empty  }
    ensures { result = justification self d }
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 15 428 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl4_Justification
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_FindJustified_Stub as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 433 8 433 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified j _ _, _) -> j
      | _ -> Fset.empty 
      end
  val justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 428 15 428 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m result d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 58] IsInput0.is_input self d -> result = Fset.empty  }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 61] IsDecision0.is_decision self d -> result = Fset.empty  }
    ensures { result = justification self d }
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 15 428 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl4_Justification_Impl
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 432 4 432 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 428 15 428 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 4 429 54] forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m result d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 58] IsInput0.is_input self d -> result = Fset.empty  }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 431 4 431 61] IsDecision0.is_decision self d -> result = Fset.empty  }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 433 8 433 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified j _ _, _) -> j
      | _ -> Fset.empty 
      end
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Cdsat_Trail_Remove_Stub
  type t
  use seq.Seq
  use prelude.Int
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 696 0 696 39] (s : Seq.seq t) (e : t) : Seq.seq t
end
module Cdsat_Trail_Remove_Interface
  type t
  use seq.Seq
  use prelude.Int
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 696 0 696 39] (s : Seq.seq t) (e : t) : Seq.seq t
  val remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 696 0 696 39] (s : Seq.seq t) (e : t) : Seq.seq t
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 696 24 696 25] Inv0.inv e}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 691 0 691 73] forall t : t . Inv0.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains result t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 0 692 63] forall t : t . Inv0.inv t -> Contains0.contains result t -> Contains0.contains s t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 693 0 693 55] forall t : t . Inv0.inv t -> Contains0.contains result t -> t <> e }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 694 0 694 52] Contains0.contains s e -> Seq.length result < Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 695 10 695 33] Seq.length result <= Seq.length s }
    ensures { result = remove s e }
    
  axiom remove_spec : forall s : Seq.seq t, e : t . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 696 24 696 25] Inv0.inv e) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 695 10 695 33] Seq.length (remove s e) <= Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 694 0 694 52] Contains0.contains s e -> Seq.length (remove s e) < Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 693 0 693 55] forall t : t . Inv0.inv t -> Contains0.contains (remove s e) t -> t <> e) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 692 0 692 63] forall t : t . Inv0.inv t -> Contains0.contains (remove s e) t -> Contains0.contains s t) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 691 0 691 73] forall t : t . Inv0.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains (remove s e) t)
end
module Cdsat_Trail_Remove
  type t
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 696 0 696 39] (s : Seq.seq t) (e : t) : Seq.seq t
  val remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 696 0 696 39] (s : Seq.seq t) (e : t) : Seq.seq t
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 696 24 696 25] Inv0.inv e}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 691 0 691 73] forall t : t . Inv0.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains result t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 0 692 63] forall t : t . Inv0.inv t -> Contains0.contains result t -> Contains0.contains s t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 693 0 693 55] forall t : t . Inv0.inv t -> Contains0.contains result t -> t <> e }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 694 0 694 52] Contains0.contains s e -> Seq.length result < Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 695 10 695 33] Seq.length result <= Seq.length s }
    ensures { result = remove s e }
    
  axiom def : forall s : Seq.seq t, e : t . remove s e = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 689 0 689 8] if s = Seq.empty  then
    Seq.empty 
  else
    if Seq.get s (Seq.length s - 1) = e then
      remove (SeqExt.subsequence s 0 (Seq.length s - 1)) e
    else
      Seq.snoc (remove (SeqExt.subsequence s 0 (Seq.length s - 1)) e) (Seq.get s (Seq.length s - 1))
    
  )
  axiom remove_spec : forall s : Seq.seq t, e : t . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 696 24 696 25] Inv0.inv e) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 695 10 695 33] Seq.length (remove s e) <= Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 694 0 694 52] Contains0.contains s e -> Seq.length (remove s e) < Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 693 0 693 55] forall t : t . Inv0.inv t -> Contains0.contains (remove s e) t -> t <> e) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 692 0 692 63] forall t : t . Inv0.inv t -> Contains0.contains (remove s e) t -> Contains0.contains s t) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 691 0 691 73] forall t : t . Inv0.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains (remove s e) t)
end
module Cdsat_Trail_Remove_Impl
  type t
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains0 with
    type t = t
  let rec ghost function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 696 0 696 39] (s : Seq.seq t) (e : t) : Seq.seq t
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 696 24 696 25] Inv0.inv e}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 691 0 691 73] forall t : t . Inv0.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains result t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 0 692 63] forall t : t . Inv0.inv t -> Contains0.contains result t -> Contains0.contains s t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 693 0 693 55] forall t : t . Inv0.inv t -> Contains0.contains result t -> t <> e }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 694 0 694 52] Contains0.contains s e -> Seq.length result < Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 695 10 695 33] Seq.length result <= Seq.length s }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 690 10 690 17] Seq.length s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 689 0 689 8] if pure {s = Seq.empty } then
      Seq.empty 
    else
      if pure {Seq.get s (Seq.length s - 1) = e} then
        remove (SeqExt.subsequence s 0 (Seq.length s - 1)) e
      else
        let a' = remove (SeqExt.subsequence s 0 (Seq.length s - 1)) e in Seq.snoc a' (Seq.get s (Seq.length s - 1))
      
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 31 8 31 26] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module Cdsat_Trail_Impl9_AbstractJustification_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 314 4 317 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl9_AbstractJustification_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 314 4 317 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 314 4 317 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 14 310 40] Fset.cardinal result <= Seq.length just }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 312 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains result (IndexLogic0.index_logic self (Seq.get just i)) }
    ensures { result = abstract_justification self just }
    
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 312 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 310 14 310 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl9_AbstractJustification
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 314 4 317 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 314 4 317 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 14 310 40] Fset.cardinal result <= Seq.length just }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 312 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains result (IndexLogic0.index_logic self (Seq.get just i)) }
    ensures { result = abstract_justification self just }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 306 4 306 12] if Seq.length just > 0 then
    let set = abstract_justification self (Remove0.remove just (Seq.get just 0)) in let a = IndexLogic0.index_logic self (Seq.get just 0) in Insert0.insert set a
  else
    Fset.empty 
  )
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 312 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 310 14 310 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl9_AbstractJustification_Impl
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec ghost function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 314 4 317 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 14 310 40] Fset.cardinal result <= Seq.length just }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 312 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 313 4 313 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains result (IndexLogic0.index_logic self (Seq.get just i)) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 306 4 306 12] if pure {Seq.length just > 0} then
      let set = let b' = Remove0.remove just (Seq.get just 0) in abstract_justification self b' in let a = IndexLogic0.index_logic self (Seq.get just 0) in Insert0.insert set a
    else
      Fset.empty 
    
end
module Cdsat_Trail_Impl9_JustifiedIsJustified_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 250 4 250 47] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl9_JustifiedIsJustified_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 250 4 250 47] (self : Cdsat_Trail_Trail_Type.t_trail)
    
  val justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 250 4 250 47] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = justified_is_justified self }
    
end
module Cdsat_Trail_Impl9_JustifiedIsJustified
  use prelude.UIntSize
  use prelude.Ghost
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic2
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 250 4 250 47] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 251 8 262 9] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> (let reason = Cdsat_Trail_Assignment_Type.assignment_reason (IndexLogic1.index_logic (IndexLogic0.index_logic (Cdsat_Trail_Trail_Type.trail_assignments self) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix))) in (reason = Cdsat_Trail_Reason_Type.C_Decision) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic2.index_logic self ix) /\ (reason = Cdsat_Trail_Reason_Type.C_Input) = IsInput0.is_input (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic2.index_logic self ix) /\ (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . reason = Cdsat_Trail_Reason_Type.C_Justified j) = IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic2.index_logic self ix) /\ (forall j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . reason = Cdsat_Trail_Reason_Type.C_Justified j -> (forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model j) i -> Contains0.contains self i) /\ Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic2.index_logic self ix) = AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model j)))
  val justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 250 4 250 47] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = justified_is_justified self }
    
end
module Cdsat_Trail_Impl9_Invariant_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 34] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl9_Invariant_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 34] (self : Cdsat_Trail_Trail_Type.t_trail)
  val invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 34] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Trail_Impl9_Invariant
  use prelude.Ghost
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_JustifiedIsJustified_Stub as JustifiedIsJustified0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic1
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Trail_Impl9_AbstractRelation_Stub as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 34] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 236 8 245 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Invariant0.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) /\ UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) - 1 /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) -> Seq.length (ShallowModel1.shallow_model (IndexLogic0.index_logic (Cdsat_Trail_Trail_Type.trail_assignments self) i)) > 0) /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) = 0) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic1.index_logic self ix)) /\ (forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self i -> Contains0.contains self j -> i <> j -> IndexLogic1.index_logic self i <> IndexLogic1.index_logic self j) /\ JustifiedIsJustified0.justified_is_justified self
  val invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 235 4 235 34] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_extendresult  =
    | C_Conflict (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision (Cdsat_Term_Term_Type.t_term) (Cdsat_Term_Value_Type.t_value)
    | C_Satisfied
    
  let function decision_0 (self : t_extendresult) : Cdsat_Term_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Term_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Satisfied -> any Cdsat_Term_Term_Type.t_term
      end
  let function decision_1 (self : t_extendresult) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Term_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Satisfied -> any Cdsat_Term_Value_Type.t_value
      end
  let function conflict_0 (self : t_extendresult) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a -> a
      | C_Decision _ _ -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Satisfied -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module Cdsat_Theory_Impl4_Acceptable_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 340 4 340 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl4_Acceptable_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 340 4 340 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
  val acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 340 4 340 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = acceptable self t val' }
    
end
module Cdsat_Theory_Impl4_Acceptable
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 340 4 340 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 341 8 343 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
  val acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 340 4 340 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = acceptable self t val' }
    
end
module Cdsat_Theory_Impl4_SatisfiedBy_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 617 4 617 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
end
module Cdsat_Theory_Impl4_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 617 4 617 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
  val satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 617 4 617 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = satisfied_by self m }
    
end
module Cdsat_Theory_Impl4_SatisfiedBy
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 617 4 617 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 618 8 618 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Satisfies0.satisfies m a
  val satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 617 4 617 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = satisfied_by self m }
    
end
module Cdsat_Theory_Impl4_CountBounds_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
end
module Cdsat_Theory_Impl4_CountBounds_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
  val count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 681 15 681 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 682 4 682 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self }
    ensures { result = count_bounds self }
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 681 15 681 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 682 4 682 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_CountBounds
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 684 8 689 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Input _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified _ _ _) _ tl -> count_bounds tl
      end
  val count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 681 15 681 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 682 4 682 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self }
    ensures { result = count_bounds self }
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 681 15 681 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 682 4 682 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl4_CountBounds_Impl
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 681 15 681 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 682 4 682 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 684 8 689 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Input _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified _ _ _) _ tl -> count_bounds tl
      end
end
module Cdsat_Theory_Impl4_Restrict_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 4 501 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
end
module Cdsat_Theory_Impl4_Restrict_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 4 501 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
  val restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 4 501 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 490 15 490 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 492 15 492 25] level >= 0}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 14 491 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 493 4 493 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains result a /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 494 4 494 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains result a -> Contains0.contains self a /\ LevelOf0.level_of result a <= level /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 495 4 495 56] level >= Level0.level self -> result = self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 496 4 496 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 497 4 497 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by result m }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 65] Level0.level self >= level -> Level0.level result = level }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 71] Level0.level self < level -> Level0.level result = Level0.level self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 500 14 500 40] Len0.len result <= Len0.len self }
    ensures { result = restrict self level }
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 490 15 490 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 492 15 492 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 500 14 500 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 497 4 497 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 496 4 496 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 495 4 495 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 494 4 494 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 493 4 493 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 491 14 491 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Restrict
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 4 501 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 8 513 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Cdsat_Theory_Trail_Type.C_Empty
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.C_Assign a l tl
      else
        tl
      
      end
  val restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 4 501 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 490 15 490 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 492 15 492 25] level >= 0}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 14 491 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 493 4 493 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains result a /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 494 4 494 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains result a -> Contains0.contains self a /\ LevelOf0.level_of result a <= level /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 495 4 495 56] level >= Level0.level self -> result = self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 496 4 496 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 497 4 497 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by result m }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 65] Level0.level self >= level -> Level0.level result = level }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 71] Level0.level self < level -> Level0.level result = Level0.level self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 500 14 500 40] Len0.len result <= Len0.len self }
    ensures { result = restrict self level }
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 490 15 490 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 492 15 492 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 500 14 500 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 497 4 497 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 496 4 496 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 495 4 495 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 494 4 494 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 493 4 493 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 491 14 491 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl4_Restrict_Impl
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 501 4 501 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 490 15 490 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 492 15 492 25] level >= 0}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 14 491 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 493 4 493 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains result a /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 494 4 494 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains result a -> Contains0.contains self a /\ LevelOf0.level_of result a <= level /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 495 4 495 56] level >= Level0.level self -> result = self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 496 4 496 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 497 4 497 77] forall m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by result m }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 498 4 498 65] Level0.level self >= level -> Level0.level result = level }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 499 4 499 71] Level0.level self < level -> Level0.level result = Level0.level self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 500 14 500 40] Len0.len result <= Len0.len self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 8 513 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Cdsat_Theory_Trail_Type.C_Empty
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if pure {l <= level} then
        Cdsat_Theory_Trail_Type.C_Assign a l tl
      else
        tl
      
      end
end
module Cdsat_Theory_Impl4_Unsat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Unsat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] (self : Cdsat_Theory_Trail_Type.t_trail)
  val unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl4_Unsat
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 625 8 625 100] forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
  val unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 624 4 624 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl4_Impls_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 4 637 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Impls_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 4 637 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
  val impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 4 637 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 55] result -> Unsat0.unsat rhs -> Unsat0.unsat self }
    ensures { result = impls self rhs }
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 55] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Theory_Impl4_Impls
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 4 637 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 638 8 638 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  val impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 4 637 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 55] result -> Unsat0.unsat rhs -> Unsat0.unsat self }
    ensures { result = impls self rhs }
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 55] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Theory_Impl4_Impls_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  let rec ghost predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 4 637 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 55] result -> Unsat0.unsat rhs -> Unsat0.unsat self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 638 8 638 126] pure {forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m}
end
module Cdsat_Bool_BoolTheory_Type
  type t_booltheory  =
    | C_BoolTheory
    
end
module Cdsat_Bool_Impl0_Extend_Interface
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val extend [#"/Users/xavier/Code/cdsat/src/bool.rs" 33 4 33 60] (self : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory)) (tl : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_ExtendResult_Type.t_extendresult
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 19 4 19 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 19 4 19 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 20 14 31 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> true
      | Cdsat_Concrete_ExtendResult_Type.C_Decision t v -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) (ShallowModel0.shallow_model t) (ShallowModel1.shallow_model v)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (ShallowModel2.shallow_model c) in Seq.length (ShallowModel2.shallow_model c) > 0 /\ (forall t : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel2.shallow_model c) t -> Contains1.contains ( ^ tl) t) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false)
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 32 4 32 44] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * tl))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) }
    
end
module Cdsat_Bool_Impl0_IsRelevant_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  val is_relevant [#"/Users/xavier/Code/cdsat/src/bool.rs" 70 4 70 49] (self : Cdsat_Bool_BoolTheory_Type.t_booltheory) (a : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Cdsat_Bool_Impl0_Eval_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  val eval [#"/Users/xavier/Code/cdsat/src/bool.rs" 91 4 91 87] (self : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Term_Term_Type.t_term) : Core_Result_Result_Type.t_result (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Cdsat_Term_Value_Type.t_value) (Cdsat_Term_Term_Type.t_term)
    
end
module Cdsat_Bool_Impl0_EvalMemo_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  val eval_memo [#"/Users/xavier/Code/cdsat/src/bool.rs" 124 4 124 92] (self : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Term_Term_Type.t_term) : Core_Result_Result_Type.t_result (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Cdsat_Term_Value_Type.t_value) (Cdsat_Term_Term_Type.t_term)
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 74 8 74 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  type t_theorystate  =
    | C_Sat
    | C_Decision (Cdsat_Term_Term_Type.t_term) (Cdsat_Term_Value_Type.t_value)
    | C_Unknown
    
  let function decision_0 (self : t_theorystate) : Cdsat_Term_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Term_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Unknown -> any Cdsat_Term_Term_Type.t_term
      end
  let function decision_1 (self : t_theorystate) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Term_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Unknown -> any Cdsat_Term_Value_Type.t_value
      end
end
module Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_theorystatedeepmodel  =
    | C_Sat
    | C_Decision (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Unknown
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module Core_Marker_DiscriminantKind_Discriminant_Type
  type self
  type discriminant
end
module Core_Intrinsics_Extern0_DiscriminantValue_Interface
  type t
  use prelude.Borrow
  clone Core_Marker_DiscriminantKind_Discriminant_Type as Discriminant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Discriminant0.discriminant
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val discriminant_value (v : t) : Discriminant0.discriminant
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/intrinsics.rs" 2297 33 2297 34] Inv0.inv v}
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/intrinsics.rs" 2297 4 2297 80] Inv1.inv result }
    
end
module NumRational_Impl7_Eq_Interface
  type t
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = NumRational_Ratio_Type.t_ratio t
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = NumRational_Ratio_Type.t_ratio t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val eq (self : NumRational_Ratio_Type.t_ratio t) (other : NumRational_Ratio_Type.t_ratio t) : bool
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 381 11 381 15] Inv0.inv self}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 381 17 381 22] Inv0.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_NumRational_Impl0_DeepModel_Stub
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  function deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
end
module CreusotContracts_NumRational_Impl0_DeepModel_Interface
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  function deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
  val deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
    ensures { result = deep_model self }
    
end
module CreusotContracts_NumRational_Impl0_DeepModel
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  function deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
  val deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl30_Eq_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val eq [#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] (self : Cdsat_Term_Value_Type.t_value) (other : Cdsat_Term_Value_Type.t_value) : bool
    
end
module Cdsat_Term_Impl30_Eq
  use prelude.Int
  use prelude.IntSize
  use prelude.Bool
  use prelude.Borrow
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Interface as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = isize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use prelude.Real
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    type DeepModelTy0.deepModelTy = Real.real,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Term_Value_Type.t_value
  clone NumRational_Impl7_Eq_Interface as Eq0 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv2.inv,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = Real.real
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Term_Value_Type.t_value,
    type t2 = Cdsat_Term_Value_Type.t_value,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone Core_Intrinsics_Extern0_DiscriminantValue_Interface as DiscriminantValue0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    type Discriminant0.discriminant = isize
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) (other : Cdsat_Term_Value_Type.t_value) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Term_Value_Type.t_value = self;
  var other : Cdsat_Term_Value_Type.t_value = other;
  var __self_tag : isize;
  var __arg1_tag : isize;
  var _10 : bool;
  var _11 : (Cdsat_Term_Value_Type.t_value, Cdsat_Term_Value_Type.t_value);
  var __self_0 : bool;
  var __arg1_0 : bool;
  var __self_01 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var __arg1_01 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  {
    goto BB0
  }
  BB0 {
    __self_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] DiscriminantValue0.discriminant_value self);
    goto BB1
  }
  BB1 {
    __arg1_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] DiscriminantValue0.discriminant_value other);
    goto BB2
  }
  BB2 {
    switch ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] __self_tag = __arg1_tag)
      | False -> goto BB3
      | True -> goto BB4
      end
  }
  BB3 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] false);
    goto BB5
  }
  BB4 {
    _11 <- (self, other);
    switch (let (a, _) = _11 in a)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB6
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB9
      end
  }
  BB5 {
    return _0
  }
  BB6 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB7
      | _ -> goto BB8
      end
  }
  BB7 {
    goto BB11
  }
  BB8 {
    assume { Resolve0.resolve _11 };
    absurd
  }
  BB9 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB10
      | _ -> goto BB8
      end
  }
  BB10 {
    goto BB12
  }
  BB11 {
    __self_0 <- Cdsat_Term_Value_Type.bool_0 (let (a, _) = _11 in a);
    __arg1_0 <- Cdsat_Term_Value_Type.bool_0 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 189 9 189 13] Bool.eqb __self_0 __arg1_0);
    goto BB14
  }
  BB12 {
    __self_01 <- Cdsat_Term_Value_Type.rat_0 (let (a, _) = _11 in a);
    __arg1_01 <- Cdsat_Term_Value_Type.rat_0 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] Eq0.eq __self_01 __arg1_01);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    _0 <- _10;
    _10 <- any bool;
    goto BB5
  }
  
end
module Cdsat_Term_Impl14_Eq_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val eq [#"/Users/xavier/Code/cdsat/src/term.rs" 11 23 11 32] (self : Cdsat_Term_Sort_Type.t_sort) (other : Cdsat_Term_Sort_Type.t_sort) : bool
    
end
module Cdsat_Term_Impl14_Eq
  use prelude.Int
  use prelude.IntSize
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = isize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Intrinsics_Extern0_DiscriminantValue_Interface as DiscriminantValue0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    type Discriminant0.discriminant = isize
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/term.rs" 11 23 11 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Sort_Type.t_sort) (other : Cdsat_Term_Sort_Type.t_sort) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Term_Sort_Type.t_sort = self;
  var other : Cdsat_Term_Sort_Type.t_sort = other;
  var __self_tag : isize;
  var __arg1_tag : isize;
  {
    goto BB0
  }
  BB0 {
    __self_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 23 11 32] DiscriminantValue0.discriminant_value self);
    goto BB1
  }
  BB1 {
    __arg1_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 23 11 32] DiscriminantValue0.discriminant_value other);
    goto BB2
  }
  BB2 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 23 11 32] __self_tag = __arg1_tag);
    return _0
  }
  
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a1
  type a2
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val eq (self : t) (other : t) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1329 11 1329 15] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1329 17 1329 22] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel_Stub
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel_Interface
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/boxed.rs" 10 8 10 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl23_Eq_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val eq [#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] (self : Cdsat_Term_Term_Type.t_term) (other : Cdsat_Term_Term_Type.t_term) : bool
    
end
module Cdsat_Term_Impl23_Eq
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel5
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel as DeepModel4
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel3
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel3.deep_model,
    function DeepModel1.deep_model = DeepModel4.deep_model,
    function DeepModel2.deep_model = DeepModel5.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Boxed_Impl0_DeepModel as DeepModel1 with
    type t = Cdsat_Term_Term_Type.t_term,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = isize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Term_Term_Type.t_term
  clone Alloc_Boxed_Impl14_Eq_Interface as Eq2 with
    type t = Cdsat_Term_Term_Type.t_term,
    type a1 = Alloc_Alloc_Global_Type.t_global,
    type a2 = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv2.inv,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  clone Cdsat_Term_Impl30_Eq_Interface as Eq1
  clone Cdsat_Term_Impl14_Eq_Interface as Eq0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Term_Term_Type.t_term,
    type t2 = Cdsat_Term_Term_Type.t_term,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  clone Core_Intrinsics_Extern0_DiscriminantValue_Interface as DiscriminantValue0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    type Discriminant0.discriminant = isize
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) (other : Cdsat_Term_Term_Type.t_term) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Term_Term_Type.t_term = self;
  var other : Cdsat_Term_Term_Type.t_term = other;
  var __self_tag : isize;
  var __arg1_tag : isize;
  var _10 : bool;
  var _11 : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Term_Type.t_term);
  var __self_0 : usize;
  var __self_1 : Cdsat_Term_Sort_Type.t_sort;
  var __arg1_0 : usize;
  var __arg1_1 : Cdsat_Term_Sort_Type.t_sort;
  var _32 : bool;
  var __self_01 : Cdsat_Term_Value_Type.t_value;
  var __arg1_01 : Cdsat_Term_Value_Type.t_value;
  var __self_02 : Cdsat_Term_Term_Type.t_term;
  var __self_11 : Cdsat_Term_Term_Type.t_term;
  var __arg1_02 : Cdsat_Term_Term_Type.t_term;
  var __arg1_11 : Cdsat_Term_Term_Type.t_term;
  var _43 : bool;
  var _46 : bool;
  var __self_03 : isize;
  var __self_12 : Cdsat_Term_Term_Type.t_term;
  var __arg1_03 : isize;
  var __arg1_12 : Cdsat_Term_Term_Type.t_term;
  var _56 : bool;
  var __self_04 : Cdsat_Term_Term_Type.t_term;
  var __self_13 : Cdsat_Term_Term_Type.t_term;
  var __arg1_04 : Cdsat_Term_Term_Type.t_term;
  var __arg1_13 : Cdsat_Term_Term_Type.t_term;
  var _63 : bool;
  var _66 : bool;
  var __self_05 : Cdsat_Term_Term_Type.t_term;
  var __self_14 : Cdsat_Term_Term_Type.t_term;
  var __arg1_05 : Cdsat_Term_Term_Type.t_term;
  var __arg1_14 : Cdsat_Term_Term_Type.t_term;
  var _73 : bool;
  var _76 : bool;
  var __self_06 : Cdsat_Term_Term_Type.t_term;
  var __self_15 : Cdsat_Term_Term_Type.t_term;
  var __arg1_06 : Cdsat_Term_Term_Type.t_term;
  var __arg1_15 : Cdsat_Term_Term_Type.t_term;
  var _83 : bool;
  var _86 : bool;
  var __self_07 : Cdsat_Term_Term_Type.t_term;
  var __arg1_07 : Cdsat_Term_Term_Type.t_term;
  var __self_08 : Cdsat_Term_Term_Type.t_term;
  var __self_16 : Cdsat_Term_Term_Type.t_term;
  var __arg1_08 : Cdsat_Term_Term_Type.t_term;
  var __arg1_16 : Cdsat_Term_Term_Type.t_term;
  var _97 : bool;
  var _100 : bool;
  var __self_09 : Cdsat_Term_Term_Type.t_term;
  var __self_17 : Cdsat_Term_Term_Type.t_term;
  var __arg1_09 : Cdsat_Term_Term_Type.t_term;
  var __arg1_17 : Cdsat_Term_Term_Type.t_term;
  var _107 : bool;
  var _110 : bool;
  {
    goto BB0
  }
  BB0 {
    __self_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] DiscriminantValue0.discriminant_value self);
    goto BB1
  }
  BB1 {
    __arg1_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] DiscriminantValue0.discriminant_value other);
    goto BB2
  }
  BB2 {
    switch ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] __self_tag = __arg1_tag)
      | False -> goto BB3
      | True -> goto BB4
      end
  }
  BB3 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] false);
    goto BB5
  }
  BB4 {
    _11 <- (self, other);
    switch (let (a, _) = _11 in a)
      | Cdsat_Term_Term_Type.C_Variable _ _ -> goto BB6
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB9
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB11
      | Cdsat_Term_Term_Type.C_Times _ _ -> goto BB13
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB15
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB17
      | Cdsat_Term_Term_Type.C_Conj _ _ -> goto BB19
      | Cdsat_Term_Term_Type.C_Neg _ -> goto BB21
      | Cdsat_Term_Term_Type.C_Disj _ _ -> goto BB23
      | Cdsat_Term_Term_Type.C_Impl _ _ -> goto BB25
      end
  }
  BB5 {
    return _0
  }
  BB6 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Variable _ _ -> goto BB7
      | _ -> goto BB8
      end
  }
  BB7 {
    goto BB27
  }
  BB8 {
    assume { Resolve0.resolve _11 };
    absurd
  }
  BB9 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB10
      | _ -> goto BB8
      end
  }
  BB10 {
    goto BB32
  }
  BB11 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB12
      | _ -> goto BB8
      end
  }
  BB12 {
    goto BB34
  }
  BB13 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Times _ _ -> goto BB14
      | _ -> goto BB8
      end
  }
  BB14 {
    goto BB40
  }
  BB15 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB16
      | _ -> goto BB8
      end
  }
  BB16 {
    goto BB45
  }
  BB17 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB18
      | _ -> goto BB8
      end
  }
  BB18 {
    goto BB51
  }
  BB19 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Conj _ _ -> goto BB20
      | _ -> goto BB8
      end
  }
  BB20 {
    goto BB57
  }
  BB21 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Neg _ -> goto BB22
      | _ -> goto BB8
      end
  }
  BB22 {
    goto BB63
  }
  BB23 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Disj _ _ -> goto BB24
      | _ -> goto BB8
      end
  }
  BB24 {
    goto BB65
  }
  BB25 {
    switch (let (_, a) = _11 in a)
      | Cdsat_Term_Term_Type.C_Impl _ _ -> goto BB26
      | _ -> goto BB8
      end
  }
  BB26 {
    goto BB71
  }
  BB27 {
    __self_0 <- Cdsat_Term_Term_Type.variable_0 (let (a, _) = _11 in a);
    __self_1 <- Cdsat_Term_Term_Type.variable_1 (let (a, _) = _11 in a);
    __arg1_0 <- Cdsat_Term_Term_Type.variable_0 (let (_, a) = _11 in a);
    __arg1_1 <- Cdsat_Term_Term_Type.variable_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    switch ([#"/Users/xavier/Code/cdsat/src/term.rs" 32 13 32 18] __self_0 = __arg1_0)
      | False -> goto BB28
      | True -> goto BB29
      end
  }
  BB28 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 32 20 32 24] false);
    goto BB30
  }
  BB29 {
    _32 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq0.eq __self_1 __arg1_1);
    goto BB31
  }
  BB30 {
    goto BB77
  }
  BB31 {
    _10 <- _32;
    _32 <- any bool;
    goto BB30
  }
  BB32 {
    __self_01 <- Cdsat_Term_Term_Type.value_0 (let (a, _) = _11 in a);
    __arg1_01 <- Cdsat_Term_Term_Type.value_0 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq1.eq __self_01 __arg1_01);
    goto BB33
  }
  BB33 {
    goto BB77
  }
  BB34 {
    __self_02 <- Cdsat_Term_Term_Type.plus_0 (let (a, _) = _11 in a);
    __self_11 <- Cdsat_Term_Term_Type.plus_1 (let (a, _) = _11 in a);
    __arg1_02 <- Cdsat_Term_Term_Type.plus_0 (let (_, a) = _11 in a);
    __arg1_11 <- Cdsat_Term_Term_Type.plus_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _43 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_02 __arg1_02);
    goto BB38
  }
  BB35 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 34 20 34 29] false);
    goto BB37
  }
  BB36 {
    _46 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_11 __arg1_11);
    goto BB39
  }
  BB37 {
    goto BB77
  }
  BB38 {
    switch (_43)
      | False -> goto BB35
      | True -> goto BB36
      end
  }
  BB39 {
    _10 <- _46;
    _46 <- any bool;
    goto BB37
  }
  BB40 {
    __self_03 <- Cdsat_Term_Term_Type.times_0 (let (a, _) = _11 in a);
    __self_12 <- Cdsat_Term_Term_Type.times_1 (let (a, _) = _11 in a);
    __arg1_03 <- Cdsat_Term_Term_Type.times_0 (let (_, a) = _11 in a);
    __arg1_12 <- Cdsat_Term_Term_Type.times_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    switch ([#"/Users/xavier/Code/cdsat/src/term.rs" 35 10 35 15] __self_03 = __arg1_03)
      | False -> goto BB41
      | True -> goto BB42
      end
  }
  BB41 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 35 17 35 26] false);
    goto BB43
  }
  BB42 {
    _56 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_12 __arg1_12);
    goto BB44
  }
  BB43 {
    goto BB77
  }
  BB44 {
    _10 <- _56;
    _56 <- any bool;
    goto BB43
  }
  BB45 {
    __self_04 <- Cdsat_Term_Term_Type.eq_0 (let (a, _) = _11 in a);
    __self_13 <- Cdsat_Term_Term_Type.eq_1 (let (a, _) = _11 in a);
    __arg1_04 <- Cdsat_Term_Term_Type.eq_0 (let (_, a) = _11 in a);
    __arg1_13 <- Cdsat_Term_Term_Type.eq_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _63 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_04 __arg1_04);
    goto BB49
  }
  BB46 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 36 18 36 27] false);
    goto BB48
  }
  BB47 {
    _66 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_13 __arg1_13);
    goto BB50
  }
  BB48 {
    goto BB77
  }
  BB49 {
    switch (_63)
      | False -> goto BB46
      | True -> goto BB47
      end
  }
  BB50 {
    _10 <- _66;
    _66 <- any bool;
    goto BB48
  }
  BB51 {
    __self_05 <- Cdsat_Term_Term_Type.lt_0 (let (a, _) = _11 in a);
    __self_14 <- Cdsat_Term_Term_Type.lt_1 (let (a, _) = _11 in a);
    __arg1_05 <- Cdsat_Term_Term_Type.lt_0 (let (_, a) = _11 in a);
    __arg1_14 <- Cdsat_Term_Term_Type.lt_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _73 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_05 __arg1_05);
    goto BB55
  }
  BB52 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 37 18 37 27] false);
    goto BB54
  }
  BB53 {
    _76 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_14 __arg1_14);
    goto BB56
  }
  BB54 {
    goto BB77
  }
  BB55 {
    switch (_73)
      | False -> goto BB52
      | True -> goto BB53
      end
  }
  BB56 {
    _10 <- _76;
    _76 <- any bool;
    goto BB54
  }
  BB57 {
    __self_06 <- Cdsat_Term_Term_Type.conj_0 (let (a, _) = _11 in a);
    __self_15 <- Cdsat_Term_Term_Type.conj_1 (let (a, _) = _11 in a);
    __arg1_06 <- Cdsat_Term_Term_Type.conj_0 (let (_, a) = _11 in a);
    __arg1_15 <- Cdsat_Term_Term_Type.conj_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _83 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_06 __arg1_06);
    goto BB61
  }
  BB58 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 38 20 38 29] false);
    goto BB60
  }
  BB59 {
    _86 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_15 __arg1_15);
    goto BB62
  }
  BB60 {
    goto BB77
  }
  BB61 {
    switch (_83)
      | False -> goto BB58
      | True -> goto BB59
      end
  }
  BB62 {
    _10 <- _86;
    _86 <- any bool;
    goto BB60
  }
  BB63 {
    __self_07 <- Cdsat_Term_Term_Type.neg_0 (let (a, _) = _11 in a);
    __arg1_07 <- Cdsat_Term_Term_Type.neg_0 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_07 __arg1_07);
    goto BB64
  }
  BB64 {
    goto BB77
  }
  BB65 {
    __self_08 <- Cdsat_Term_Term_Type.disj_0 (let (a, _) = _11 in a);
    __self_16 <- Cdsat_Term_Term_Type.disj_1 (let (a, _) = _11 in a);
    __arg1_08 <- Cdsat_Term_Term_Type.disj_0 (let (_, a) = _11 in a);
    __arg1_16 <- Cdsat_Term_Term_Type.disj_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _97 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_08 __arg1_08);
    goto BB69
  }
  BB66 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 40 20 40 29] false);
    goto BB68
  }
  BB67 {
    _100 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_16 __arg1_16);
    goto BB70
  }
  BB68 {
    goto BB77
  }
  BB69 {
    switch (_97)
      | False -> goto BB66
      | True -> goto BB67
      end
  }
  BB70 {
    _10 <- _100;
    _100 <- any bool;
    goto BB68
  }
  BB71 {
    __self_09 <- Cdsat_Term_Term_Type.impl_0 (let (a, _) = _11 in a);
    __self_17 <- Cdsat_Term_Term_Type.impl_1 (let (a, _) = _11 in a);
    __arg1_09 <- Cdsat_Term_Term_Type.impl_0 (let (_, a) = _11 in a);
    __arg1_17 <- Cdsat_Term_Term_Type.impl_1 (let (_, a) = _11 in a);
    assume { Resolve0.resolve _11 };
    _107 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_09 __arg1_09);
    goto BB75
  }
  BB72 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 41 20 41 29] false);
    goto BB74
  }
  BB73 {
    _110 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] Eq2.eq __self_17 __arg1_17);
    goto BB76
  }
  BB74 {
    goto BB77
  }
  BB75 {
    switch (_107)
      | False -> goto BB72
      | True -> goto BB73
      end
  }
  BB76 {
    _10 <- _110;
    _110 <- any bool;
    goto BB74
  }
  BB77 {
    _0 <- _10;
    _10 <- any bool;
    goto BB5
  }
  
end
module Cdsat_Concrete_Impl6_DeepModel_Stub
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 24 18 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    
end
module Cdsat_Concrete_Impl6_DeepModel_Interface
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 24 18 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 24 18 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl6_DeepModel
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel1
  clone Cdsat_Term_Impl5_DeepModel_Stub as DeepModel0
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 24 18 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 24 18 33] match (self) with
      | Cdsat_Concrete_TheoryState_Type.C_Sat -> Cdsat_Concrete_TheoryStateDeepModel_Type.C_Sat
      | Cdsat_Concrete_TheoryState_Type.C_Decision v0_1 v1_1 -> Cdsat_Concrete_TheoryStateDeepModel_Type.C_Decision (DeepModel0.deep_model v0_1) (DeepModel1.deep_model v1_1)
      | Cdsat_Concrete_TheoryState_Type.C_Unknown -> Cdsat_Concrete_TheoryStateDeepModel_Type.C_Unknown
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 24 18 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl3_Eq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) (rhs : Cdsat_Concrete_TheoryState_Type.t_theorystate) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Concrete_Impl3_Eq
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel5
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel3
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl23_Eq_Interface as Eq1
  clone Cdsat_Term_Impl30_Eq_Interface as Eq0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type t2 = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) (rhs : Cdsat_Concrete_TheoryState_Type.t_theorystate) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Concrete_TheoryState_Type.t_theorystate = self;
  var rhs : Cdsat_Concrete_TheoryState_Type.t_theorystate = rhs;
  var _4 : (Cdsat_Concrete_TheoryState_Type.t_theorystate, Cdsat_Concrete_TheoryState_Type.t_theorystate);
  var v0_1 : Cdsat_Term_Term_Type.t_term;
  var v1_1 : Cdsat_Term_Value_Type.t_value;
  var v0_2 : Cdsat_Term_Term_Type.t_term;
  var v1_2 : Cdsat_Term_Value_Type.t_value;
  var _15 : bool;
  var _16 : bool;
  var _19 : bool;
  {
    goto BB0
  }
  BB0 {
    _4 <- (self, rhs);
    switch (let (a, _) = _4 in a)
      | Cdsat_Concrete_TheoryState_Type.C_Sat -> goto BB1
      | Cdsat_Concrete_TheoryState_Type.C_Decision _ _ -> goto BB4
      | Cdsat_Concrete_TheoryState_Type.C_Unknown -> goto BB6
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Concrete_TheoryState_Type.C_Sat -> goto BB2
      | _ -> goto BB23
      end
  }
  BB2 {
    goto BB8
  }
  BB3 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] false);
    goto BB19
  }
  BB4 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Concrete_TheoryState_Type.C_Decision _ _ -> goto BB5
      | _ -> goto BB24
      end
  }
  BB5 {
    goto BB9
  }
  BB6 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Concrete_TheoryState_Type.C_Unknown -> goto BB7
      | _ -> goto BB3
      end
  }
  BB7 {
    goto BB18
  }
  BB8 {
    assume { Resolve0.resolve _4 };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] true);
    goto BB19
  }
  BB9 {
    v0_1 <- Cdsat_Concrete_TheoryState_Type.decision_0 (let (a, _) = _4 in a);
    v1_1 <- Cdsat_Concrete_TheoryState_Type.decision_1 (let (a, _) = _4 in a);
    v0_2 <- Cdsat_Concrete_TheoryState_Type.decision_0 (let (_, a) = _4 in a);
    v1_2 <- Cdsat_Concrete_TheoryState_Type.decision_1 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _16 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] Eq0.eq v1_1 v1_2);
    goto BB16
  }
  BB10 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] false);
    goto BB12
  }
  BB11 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] true);
    goto BB12
  }
  BB12 {
    goto BB19
  }
  BB13 {
    _15 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] false);
    goto BB15
  }
  BB14 {
    _19 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] Eq1.eq v0_1 v0_2);
    goto BB17
  }
  BB15 {
    switch (_15)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB16 {
    switch (_16)
      | False -> goto BB13
      | True -> goto BB14
      end
  }
  BB17 {
    _15 <- _19;
    _19 <- any bool;
    goto BB15
  }
  BB18 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] true);
    goto BB19
  }
  BB19 {
    return _0
  }
  BB21 {
    assume { Resolve0.resolve _4 };
    goto BB7
  }
  BB22 {
    assume { Resolve0.resolve _4 };
    goto BB3
  }
  BB23 {
    assume { Resolve0.resolve _4 };
    goto BB3
  }
  BB24 {
    assume { Resolve0.resolve _4 };
    goto BB3
  }
  
end
module Cdsat_Concrete_Impl5_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 20 18 22] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : ()
    
end
module Cdsat_Concrete_Impl5_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 20 18 22] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Lra_LraTheory_Type
  type t_lratheory  =
    | C_LRATheory
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Lra_LraTheory_Type as Cdsat_Lra_LraTheory_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  type t_solver  =
    | C_Solver (Cdsat_Bool_BoolTheory_Type.t_booltheory) (Cdsat_Concrete_TheoryState_Type.t_theorystate) (Cdsat_Lra_LraTheory_Type.t_lratheory) (Cdsat_Concrete_TheoryState_Type.t_theorystate)
    
  let function solver_bool_state (self : t_solver) : Cdsat_Concrete_TheoryState_Type.t_theorystate
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver _ a _ _ -> a
      end
  let function solver_lra_state (self : t_solver) : Cdsat_Concrete_TheoryState_Type.t_theorystate
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver _ _ _ a -> a
      end
  let function solver_lra_th (self : t_solver) : Cdsat_Lra_LraTheory_Type.t_lratheory = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver _ _ a _ -> a
      end
  let function solver_bool_th (self : t_solver) : Cdsat_Bool_BoolTheory_Type.t_booltheory
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver a _ _ _ -> a
      end
end
module Cdsat_Concrete_Impl0_New_Interface
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 26 4 26 24] (_1 : ()) : Cdsat_Concrete_Solver_Type.t_solver
end
module Cdsat_Concrete_Impl0_New
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  use Cdsat_Lra_LraTheory_Type as Cdsat_Lra_LraTheory_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  let rec cfg new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 26 4 26 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : Cdsat_Concrete_Solver_Type.t_solver
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Concrete_Solver_Type.t_solver;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Concrete_Solver_Type.C_Solver (Cdsat_Bool_BoolTheory_Type.C_BoolTheory) (Cdsat_Concrete_TheoryState_Type.C_Unknown) (Cdsat_Lra_LraTheory_Type.C_LRATheory) (Cdsat_Concrete_TheoryState_Type.C_Unknown);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Lra_Impl0_Extend_Interface
  use prelude.Borrow
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Lra_LraTheory_Type as Cdsat_Lra_LraTheory_Type
  val extend [#"/Users/xavier/Code/cdsat/src/main.rs" 22 8 22 64] (self : borrowed (Cdsat_Lra_LraTheory_Type.t_lratheory)) (_2 : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_ExtendResult_Type.t_extendresult
    
end
module Cdsat_Concrete_Impl0_ExtendNext_Interface
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val extend_next [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 4 35 75] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    
end
module Cdsat_Concrete_Impl0_ExtendNext
  use prelude.Borrow
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel5
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel4 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel3
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone Cdsat_Trail_Impl9_Contains as Contains1 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains0.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Cdsat_Concrete_ExtendResult_Type.t_extendresult
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains3.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve2 with
    type t1 = Cdsat_Concrete_ExtendResult_Type.t_extendresult,
    type t2 = borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate),
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve3.resolve
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  clone Cdsat_Bool_Impl0_Extend_Interface as Extend1 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Impls0.impls = Impls0.impls,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Contains2.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Unsat0.unsat = Unsat0.unsat
  use Cdsat_Lra_LraTheory_Type as Cdsat_Lra_LraTheory_Type
  clone Cdsat_Lra_Impl0_Extend_Interface as Extend0
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Cdsat_Concrete_Solver_Type.t_solver
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone Cdsat_Concrete_Impl3_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 4 35 75]  : Cdsat_Concrete_TheoryState_Type.t_theorystate
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Concrete_TheoryState_Type.C_Unknown in let _0 = _1 in _0
  let constant promoted1 [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 4 35 75]  : Cdsat_Concrete_TheoryState_Type.t_theorystate
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Concrete_TheoryState_Type.C_Unknown in let _0 = _1 in _0
  let rec cfg extend_next [#"/Users/xavier/Code/cdsat/src/concrete.rs" 35 4 35 75] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var self : borrowed (Cdsat_Concrete_Solver_Type.t_solver) = self;
  var trail : borrowed (Cdsat_Trail_Trail_Type.t_trail) = trail;
  var res : Cdsat_Concrete_ExtendResult_Type.t_extendresult;
  var state : borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
  var _6 : (Cdsat_Concrete_ExtendResult_Type.t_extendresult, borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate));
  var _7 : bool;
  var _11 : Cdsat_Concrete_ExtendResult_Type.t_extendresult;
  var _12 : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory);
  var _13 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _14 : borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
  var _15 : bool;
  var _19 : Cdsat_Concrete_ExtendResult_Type.t_extendresult;
  var _20 : borrowed (Cdsat_Lra_LraTheory_Type.t_lratheory);
  var _21 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _22 : borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
  var _24 : ();
  var t : Cdsat_Term_Term_Type.t_term;
  var v : Cdsat_Term_Value_Type.t_value;
  var c : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _37 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _38 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  {
    goto BB0
  }
  BB0 {
    _38 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 37 49 37 56] promoted1);
    _7 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 37 30 37 56] Eq0.eq (Cdsat_Concrete_Solver_Type.solver_bool_state ( * self)) _38);
    goto BB1
  }
  BB1 {
    switch (_7)
      | False -> goto BB5
      | True -> goto BB2
      end
  }
  BB2 {
    _12 <- Borrow.borrow_mut (Cdsat_Concrete_Solver_Type.solver_bool_th ( * self));
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver ( ^ _12) b c d) };
    _13 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _13) };
    _11 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 38 13 38 39] Extend1.extend _12 _13);
    _12 <- any borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory);
    _13 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve trail };
    _14 <- Borrow.borrow_mut (Cdsat_Concrete_Solver_Type.solver_bool_state ( * self));
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a ( ^ _14) c d) };
    _6 <- (_11, _14);
    _11 <- any Cdsat_Concrete_ExtendResult_Type.t_extendresult;
    _14 <- any borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
    goto BB4
  }
  BB4 {
    goto BB12
  }
  BB5 {
    _37 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 39 36 39 43] promoted0);
    _15 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 39 18 39 43] Eq0.eq (Cdsat_Concrete_Solver_Type.solver_lra_state ( * self)) _37);
    goto BB6
  }
  BB6 {
    switch (_15)
      | False -> goto BB10
      | True -> goto BB7
      end
  }
  BB7 {
    _20 <- Borrow.borrow_mut (Cdsat_Concrete_Solver_Type.solver_lra_th ( * self));
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a b ( ^ _20) d) };
    _21 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _21) };
    _19 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 40 13 40 38] Extend0.extend _20 _21);
    _20 <- any borrowed (Cdsat_Lra_LraTheory_Type.t_lratheory);
    _21 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve trail };
    _22 <- Borrow.borrow_mut (Cdsat_Concrete_Solver_Type.solver_lra_state ( * self));
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a b c ( ^ _22)) };
    _6 <- (_19, _22);
    _19 <- any Cdsat_Concrete_ExtendResult_Type.t_extendresult;
    _22 <- any borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
    goto BB9
  }
  BB9 {
    goto BB12
  }
  BB10 {
    assume { Resolve0.resolve trail };
    assume { Resolve1.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB40
  }
  BB11 {
    assume { Resolve3.resolve state };
    assume { Resolve1.resolve self };
    absurd
  }
  BB12 {
    res <- (let (a, _) = _6 in a);
    _6 <- (let (a, b) = _6 in (any Cdsat_Concrete_ExtendResult_Type.t_extendresult, b));
    state <- (let (_, a) = _6 in a);
    _6 <- (let (a, b) = _6 in (a, any borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate)));
    assume { Resolve2.resolve _6 };
    goto BB13
  }
  BB13 {
    switch (res)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict _ -> goto BB14
      | Cdsat_Concrete_ExtendResult_Type.C_Decision _ _ -> goto BB15
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> goto BB16
      end
  }
  BB14 {
    assume { Resolve3.resolve state };
    c <- Cdsat_Concrete_ExtendResult_Type.conflict_0 res;
    res <- (let Cdsat_Concrete_ExtendResult_Type.C_Conflict a = res in Cdsat_Concrete_ExtendResult_Type.C_Conflict (any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)));
    goto BB29
  }
  BB15 {
    goto BB17
  }
  BB16 {
    goto BB25
  }
  BB17 {
    t <- Cdsat_Concrete_ExtendResult_Type.decision_0 res;
    res <- (let Cdsat_Concrete_ExtendResult_Type.C_Decision a b = res in Cdsat_Concrete_ExtendResult_Type.C_Decision (any Cdsat_Term_Term_Type.t_term) b);
    v <- Cdsat_Concrete_ExtendResult_Type.decision_1 res;
    res <- (let Cdsat_Concrete_ExtendResult_Type.C_Decision a b = res in Cdsat_Concrete_ExtendResult_Type.C_Decision a (any Cdsat_Term_Value_Type.t_value));
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    state <- { state with current = Cdsat_Concrete_TheoryState_Type.C_Decision t v };
    t <- any Cdsat_Term_Term_Type.t_term;
    v <- any Cdsat_Term_Value_Type.t_value;
    assume { Resolve3.resolve state };
    _24 <- ();
    assume { Resolve1.resolve self };
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB36
  }
  BB25 {
    goto BB26
  }
  BB26 {
    state <- { state with current = Cdsat_Concrete_TheoryState_Type.C_Sat };
    assume { Resolve3.resolve state };
    _24 <- ();
    assume { Resolve1.resolve self };
    goto BB28
  }
  BB28 {
    goto BB36
  }
  BB29 {
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a (Cdsat_Concrete_TheoryState_Type.C_Unknown) c d) };
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a b c (Cdsat_Concrete_TheoryState_Type.C_Unknown)) };
    assume { Resolve1.resolve self };
    goto BB34
  }
  BB34 {
    _0 <- Core_Option_Option_Type.C_Some c;
    c <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB35
  }
  BB35 {
    goto BB37
  }
  BB36 {
    _0 <- Core_Option_Option_Type.C_None;
    goto BB38
  }
  BB37 {
    goto BB38
  }
  BB38 {
    goto BB39
  }
  BB39 {
    goto BB40
  }
  BB40 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl0_CanDeduce_Interface
  use prelude.Borrow
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val can_deduce [#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 4 57 36] (self : Cdsat_Concrete_Solver_Type.t_solver) : bool
    
end
module Cdsat_Concrete_Impl0_CanDeduce
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel5
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel3
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Concrete_Impl3_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 4 57 36]  : Cdsat_Concrete_TheoryState_Type.t_theorystate
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Concrete_TheoryState_Type.C_Unknown in let _0 = _1 in _0
  let constant promoted1 [#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 4 57 36]  : Cdsat_Concrete_TheoryState_Type.t_theorystate
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Concrete_TheoryState_Type.C_Unknown in let _0 = _1 in _0
  let rec cfg can_deduce [#"/Users/xavier/Code/cdsat/src/concrete.rs" 57 4 57 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_Solver_Type.t_solver) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Concrete_Solver_Type.t_solver = self;
  var _2 : bool;
  var _6 : bool;
  var _10 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _11 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  {
    goto BB0
  }
  BB0 {
    _11 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 27 58 47] promoted1);
    _2 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 8 58 47] Eq0.eq (Cdsat_Concrete_Solver_Type.solver_bool_state self) _11);
    goto BB4
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 8 58 89] true);
    goto BB3
  }
  BB2 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 69 58 89] promoted0);
    _6 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 58 51 58 89] Eq0.eq (Cdsat_Concrete_Solver_Type.solver_lra_state self) _10);
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_2)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB5 {
    _0 <- _6;
    _6 <- any bool;
    goto BB3
  }
  
end
module Cdsat_Concrete_Impl0_Sat_Interface
  use prelude.Borrow
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val sat [#"/Users/xavier/Code/cdsat/src/concrete.rs" 61 4 61 29] (self : Cdsat_Concrete_Solver_Type.t_solver) : bool
end
module Cdsat_Concrete_Impl0_Sat
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel5
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel3
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Concrete_Impl3_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/concrete.rs" 61 4 61 29]  : Cdsat_Concrete_TheoryState_Type.t_theorystate
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Concrete_TheoryState_Type.C_Sat in let _0 = _1 in _0
  let constant promoted1 [#"/Users/xavier/Code/cdsat/src/concrete.rs" 61 4 61 29]  : Cdsat_Concrete_TheoryState_Type.t_theorystate
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Concrete_TheoryState_Type.C_Sat in let _0 = _1 in _0
  let rec cfg sat [#"/Users/xavier/Code/cdsat/src/concrete.rs" 61 4 61 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_Solver_Type.t_solver) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Concrete_Solver_Type.t_solver = self;
  var _2 : bool;
  var _6 : bool;
  var _10 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  var _11 : Cdsat_Concrete_TheoryState_Type.t_theorystate;
  {
    goto BB0
  }
  BB0 {
    _11 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 62 27 62 43] promoted1);
    _2 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 62 8 62 43] Eq0.eq (Cdsat_Concrete_Solver_Type.solver_bool_state self) _11);
    goto BB4
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 62 8 62 81] false);
    goto BB3
  }
  BB2 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 62 65 62 81] promoted0);
    _6 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 62 47 62 81] Eq0.eq (Cdsat_Concrete_Solver_Type.solver_lra_state self) _10);
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_2)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _0 <- _6;
    _6 <- any bool;
    goto BB3
  }
  
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  val clone' (self : usize) : usize
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Cdsat_Term_Impl11_Clone_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 11 9 11 14] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Term_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl11_Clone
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 11 9 11 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Term_Sort_Type.t_sort
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Sort_Type.t_sort;
  var self : Cdsat_Term_Sort_Type.t_sort = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- self;
    return _0
  }
  
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' (self : bool) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module NumRational_Impl37_Clone_Interface
  type t
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = NumRational_Ratio_Type.t_ratio t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val clone' (self : NumRational_Ratio_Type.t_ratio t) : NumRational_Ratio_Type.t_ratio t
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 50 15 50 20] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 50 15 50 20] Inv1.inv result }
    
end
module Cdsat_Term_Impl27_Clone_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 187 9 187 14] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl27_Clone
  use prelude.Borrow
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone NumRational_Impl37_Clone_Interface as Clone1 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  clone Core_Clone_Impls_Impl19_Clone_Interface as Clone0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 187 9 187 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  var self : Cdsat_Term_Value_Type.t_value = self;
  var __self_0 : bool;
  var _4 : bool;
  var __self_01 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _7 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    __self_01 <- Cdsat_Term_Value_Type.rat_0 self;
    _7 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 9 187 14] Clone1.clone' __self_01);
    goto BB6
  }
  BB3 {
    absurd
  }
  BB4 {
    __self_0 <- Cdsat_Term_Value_Type.bool_0 self;
    _4 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 9 187 14] Clone0.clone' __self_0);
    goto BB5
  }
  BB5 {
    _0 <- Cdsat_Term_Value_Type.C_Bool _4;
    _4 <- any bool;
    goto BB8
  }
  BB6 {
    _0 <- Cdsat_Term_Value_Type.C_Rat _7;
    _7 <- any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val clone' (self : t) : t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1279 14 1279 18] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1279 4 1279 27] Inv1.inv result }
    
end
module Core_Clone_Impls_Impl11_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  val clone' (self : isize) : isize
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Cdsat_Term_Impl20_Clone_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl20_Clone
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Term_Type.t_term
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Clone_Impls_Impl11_Clone_Interface as Clone4
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone3 with
    type t = Cdsat_Term_Term_Type.t_term,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl27_Clone_Interface as Clone2
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl11_Clone_Interface as Clone1
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone0
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var self : Cdsat_Term_Term_Type.t_term = self;
  var __self_0 : usize;
  var __self_1 : Cdsat_Term_Sort_Type.t_sort;
  var _5 : usize;
  var _7 : Cdsat_Term_Sort_Type.t_sort;
  var __self_01 : Cdsat_Term_Value_Type.t_value;
  var _10 : Cdsat_Term_Value_Type.t_value;
  var __self_02 : Cdsat_Term_Term_Type.t_term;
  var __self_11 : Cdsat_Term_Term_Type.t_term;
  var _14 : Cdsat_Term_Term_Type.t_term;
  var _16 : Cdsat_Term_Term_Type.t_term;
  var __self_03 : isize;
  var __self_12 : Cdsat_Term_Term_Type.t_term;
  var _20 : isize;
  var _22 : Cdsat_Term_Term_Type.t_term;
  var __self_04 : Cdsat_Term_Term_Type.t_term;
  var __self_13 : Cdsat_Term_Term_Type.t_term;
  var _26 : Cdsat_Term_Term_Type.t_term;
  var _28 : Cdsat_Term_Term_Type.t_term;
  var __self_05 : Cdsat_Term_Term_Type.t_term;
  var __self_14 : Cdsat_Term_Term_Type.t_term;
  var _32 : Cdsat_Term_Term_Type.t_term;
  var _34 : Cdsat_Term_Term_Type.t_term;
  var __self_06 : Cdsat_Term_Term_Type.t_term;
  var __self_15 : Cdsat_Term_Term_Type.t_term;
  var _38 : Cdsat_Term_Term_Type.t_term;
  var _40 : Cdsat_Term_Term_Type.t_term;
  var __self_07 : Cdsat_Term_Term_Type.t_term;
  var _43 : Cdsat_Term_Term_Type.t_term;
  var __self_08 : Cdsat_Term_Term_Type.t_term;
  var __self_16 : Cdsat_Term_Term_Type.t_term;
  var _47 : Cdsat_Term_Term_Type.t_term;
  var _49 : Cdsat_Term_Term_Type.t_term;
  var __self_09 : Cdsat_Term_Term_Type.t_term;
  var __self_17 : Cdsat_Term_Term_Type.t_term;
  var _53 : Cdsat_Term_Term_Type.t_term;
  var _55 : Cdsat_Term_Term_Type.t_term;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Term_Type.C_Variable _ _ -> goto BB1
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB2
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB3
      | Cdsat_Term_Term_Type.C_Times _ _ -> goto BB4
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB5
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB6
      | Cdsat_Term_Term_Type.C_Conj _ _ -> goto BB7
      | Cdsat_Term_Term_Type.C_Neg _ -> goto BB8
      | Cdsat_Term_Term_Type.C_Disj _ _ -> goto BB9
      | Cdsat_Term_Term_Type.C_Impl _ _ -> goto BB10
      end
  }
  BB1 {
    goto BB12
  }
  BB2 {
    goto BB15
  }
  BB3 {
    goto BB18
  }
  BB4 {
    goto BB23
  }
  BB5 {
    goto BB27
  }
  BB6 {
    goto BB32
  }
  BB7 {
    goto BB37
  }
  BB8 {
    goto BB42
  }
  BB9 {
    goto BB45
  }
  BB10 {
    __self_09 <- Cdsat_Term_Term_Type.impl_0 self;
    __self_17 <- Cdsat_Term_Term_Type.impl_1 self;
    _53 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_09);
    goto BB50
  }
  BB11 {
    absurd
  }
  BB12 {
    __self_0 <- Cdsat_Term_Term_Type.variable_0 self;
    __self_1 <- Cdsat_Term_Term_Type.variable_1 self;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone0.clone' __self_0);
    goto BB13
  }
  BB13 {
    _7 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone1.clone' __self_1);
    goto BB14
  }
  BB14 {
    _0 <- Cdsat_Term_Term_Type.C_Variable _5 _7;
    _5 <- any usize;
    _7 <- any Cdsat_Term_Sort_Type.t_sort;
    goto BB54
  }
  BB15 {
    __self_01 <- Cdsat_Term_Term_Type.value_0 self;
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone2.clone' __self_01);
    goto BB16
  }
  BB16 {
    _0 <- Cdsat_Term_Term_Type.C_Value _10;
    _10 <- any Cdsat_Term_Value_Type.t_value;
    goto BB17
  }
  BB17 {
    goto BB54
  }
  BB18 {
    __self_02 <- Cdsat_Term_Term_Type.plus_0 self;
    __self_11 <- Cdsat_Term_Term_Type.plus_1 self;
    _14 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_02);
    goto BB19
  }
  BB19 {
    _16 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_11);
    goto BB20
  }
  BB20 {
    _0 <- Cdsat_Term_Term_Type.C_Plus _14 _16;
    _14 <- any Cdsat_Term_Term_Type.t_term;
    _16 <- any Cdsat_Term_Term_Type.t_term;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB54
  }
  BB23 {
    __self_03 <- Cdsat_Term_Term_Type.times_0 self;
    __self_12 <- Cdsat_Term_Term_Type.times_1 self;
    _20 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone4.clone' __self_03);
    goto BB24
  }
  BB24 {
    _22 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_12);
    goto BB25
  }
  BB25 {
    _0 <- Cdsat_Term_Term_Type.C_Times _20 _22;
    _20 <- any isize;
    _22 <- any Cdsat_Term_Term_Type.t_term;
    goto BB26
  }
  BB26 {
    goto BB54
  }
  BB27 {
    __self_04 <- Cdsat_Term_Term_Type.eq_0 self;
    __self_13 <- Cdsat_Term_Term_Type.eq_1 self;
    _26 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_04);
    goto BB28
  }
  BB28 {
    _28 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_13);
    goto BB29
  }
  BB29 {
    _0 <- Cdsat_Term_Term_Type.C_Eq _26 _28;
    _26 <- any Cdsat_Term_Term_Type.t_term;
    _28 <- any Cdsat_Term_Term_Type.t_term;
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    goto BB54
  }
  BB32 {
    __self_05 <- Cdsat_Term_Term_Type.lt_0 self;
    __self_14 <- Cdsat_Term_Term_Type.lt_1 self;
    _32 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_05);
    goto BB33
  }
  BB33 {
    _34 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_14);
    goto BB34
  }
  BB34 {
    _0 <- Cdsat_Term_Term_Type.C_Lt _32 _34;
    _32 <- any Cdsat_Term_Term_Type.t_term;
    _34 <- any Cdsat_Term_Term_Type.t_term;
    goto BB35
  }
  BB35 {
    goto BB36
  }
  BB36 {
    goto BB54
  }
  BB37 {
    __self_06 <- Cdsat_Term_Term_Type.conj_0 self;
    __self_15 <- Cdsat_Term_Term_Type.conj_1 self;
    _38 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_06);
    goto BB38
  }
  BB38 {
    _40 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_15);
    goto BB39
  }
  BB39 {
    _0 <- Cdsat_Term_Term_Type.C_Conj _38 _40;
    _38 <- any Cdsat_Term_Term_Type.t_term;
    _40 <- any Cdsat_Term_Term_Type.t_term;
    goto BB40
  }
  BB40 {
    goto BB41
  }
  BB41 {
    goto BB54
  }
  BB42 {
    __self_07 <- Cdsat_Term_Term_Type.neg_0 self;
    _43 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_07);
    goto BB43
  }
  BB43 {
    _0 <- Cdsat_Term_Term_Type.C_Neg _43;
    _43 <- any Cdsat_Term_Term_Type.t_term;
    goto BB44
  }
  BB44 {
    goto BB54
  }
  BB45 {
    __self_08 <- Cdsat_Term_Term_Type.disj_0 self;
    __self_16 <- Cdsat_Term_Term_Type.disj_1 self;
    _47 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_08);
    goto BB46
  }
  BB46 {
    _49 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_16);
    goto BB47
  }
  BB47 {
    _0 <- Cdsat_Term_Term_Type.C_Disj _47 _49;
    _47 <- any Cdsat_Term_Term_Type.t_term;
    _49 <- any Cdsat_Term_Term_Type.t_term;
    goto BB48
  }
  BB48 {
    goto BB49
  }
  BB49 {
    goto BB54
  }
  BB50 {
    _55 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] Clone3.clone' __self_17);
    goto BB51
  }
  BB51 {
    _0 <- Cdsat_Term_Term_Type.C_Impl _53 _55;
    _53 <- any Cdsat_Term_Term_Type.t_term;
    _55 <- any Cdsat_Term_Term_Type.t_term;
    goto BB52
  }
  BB52 {
    goto BB53
  }
  BB53 {
    goto BB54
  }
  BB54 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl0_Decision_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val decision [#"/Users/xavier/Code/cdsat/src/concrete.rs" 65 4 65 47] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    
end
module Cdsat_Concrete_Impl0_Decision
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Cdsat_Concrete_Solver_Type.t_solver
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve2 with
    type t1 = borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate),
    type t2 = borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate),
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve4.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Cdsat_Term_Value_Type.t_value
  clone Cdsat_Term_Impl27_Clone_Interface as Clone1
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone Cdsat_Term_Impl20_Clone_Interface as Clone0
  let rec cfg decision [#"/Users/xavier/Code/cdsat/src/concrete.rs" 65 4 65 47] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value);
  var self : borrowed (Cdsat_Concrete_Solver_Type.t_solver) = self;
  var _2 : (borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate), borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate));
  var _3 : borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
  var _4 : borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
  var t : borrowed (Cdsat_Term_Term_Type.t_term);
  var v : borrowed (Cdsat_Term_Value_Type.t_value);
  var answer : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value);
  var _11 : Cdsat_Term_Term_Type.t_term;
  var _13 : Cdsat_Term_Value_Type.t_value;
  {
    goto BB0
  }
  BB0 {
    _3 <- Borrow.borrow_mut (Cdsat_Concrete_Solver_Type.solver_bool_state ( * self));
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a ( ^ _3) c d) };
    _4 <- Borrow.borrow_mut (Cdsat_Concrete_Solver_Type.solver_lra_state ( * self));
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a b c ( ^ _4)) };
    _2 <- (_3, _4);
    _3 <- any borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
    _4 <- any borrowed (Cdsat_Concrete_TheoryState_Type.t_theorystate);
    switch ( * (let (a, _) = _2 in a))
      | Cdsat_Concrete_TheoryState_Type.C_Decision _ _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    switch ( * (let (_, a) = _2 in a))
      | Cdsat_Concrete_TheoryState_Type.C_Decision _ _ -> goto BB4
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    assume { Resolve2.resolve _2 };
    assume { Resolve3.resolve self };
    absurd
  }
  BB4 {
    goto BB7
  }
  BB5 {
    _11 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 68 30 68 39] Clone0.clone' ( * t));
    goto BB8
  }
  BB6 {
    t <- Borrow.borrow_mut (Cdsat_Concrete_TheoryState_Type.decision_0 ( * (let (a, _) = _2 in a)));
    _2 <- (let (a, b) = _2 in ({ (let (a, _) = _2 in a) with current = (let Cdsat_Concrete_TheoryState_Type.C_Decision a b =  * (let (a, _) = _2 in a) in Cdsat_Concrete_TheoryState_Type.C_Decision ( ^ t) b) }, b));
    v <- Borrow.borrow_mut (Cdsat_Concrete_TheoryState_Type.decision_1 ( * (let (a, _) = _2 in a)));
    _2 <- (let (a, b) = _2 in ({ (let (a, _) = _2 in a) with current = (let Cdsat_Concrete_TheoryState_Type.C_Decision a b =  * (let (a, _) = _2 in a) in Cdsat_Concrete_TheoryState_Type.C_Decision a ( ^ v)) }, b));
    goto BB5
  }
  BB7 {
    t <- Borrow.borrow_mut (Cdsat_Concrete_TheoryState_Type.decision_0 ( * (let (_, a) = _2 in a)));
    _2 <- (let (a, b) = _2 in (a, { (let (_, a) = _2 in a) with current = (let Cdsat_Concrete_TheoryState_Type.C_Decision a b =  * (let (_, a) = _2 in a) in Cdsat_Concrete_TheoryState_Type.C_Decision ( ^ t) b) }));
    v <- Borrow.borrow_mut (Cdsat_Concrete_TheoryState_Type.decision_1 ( * (let (_, a) = _2 in a)));
    _2 <- (let (a, b) = _2 in (a, { (let (_, a) = _2 in a) with current = (let Cdsat_Concrete_TheoryState_Type.C_Decision a b =  * (let (_, a) = _2 in a) in Cdsat_Concrete_TheoryState_Type.C_Decision a ( ^ v)) }));
    goto BB5
  }
  BB8 {
    assume { Resolve0.resolve t };
    _13 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 68 41 68 50] Clone1.clone' ( * v));
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve v };
    assume { Resolve2.resolve _2 };
    answer <- (_11, _13);
    _11 <- any Cdsat_Term_Term_Type.t_term;
    _13 <- any Cdsat_Term_Value_Type.t_value;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a (Cdsat_Concrete_TheoryState_Type.C_Unknown) c d) };
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    self <- { self with current = (let Cdsat_Concrete_Solver_Type.C_Solver a b c d =  * self in Cdsat_Concrete_Solver_Type.C_Solver a b c (Cdsat_Concrete_TheoryState_Type.C_Unknown)) };
    assume { Resolve3.resolve self };
    goto BB17
  }
  BB17 {
    _0 <- answer;
    answer <- any (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value);
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Cdsat_Concrete_Answer_Type
  type t_answer  =
    | C_Sat
    | C_Unsat
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl8_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : slice t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2608 14 2608 18] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 137 26 137 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2608 4 2608 27] Inv1.inv result }
    
end
module Cdsat_Trail_Impl9_MaxLevel_Interface
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val max_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 520 4 520 71] (self : Cdsat_Trail_Trail_Type.t_trail) (assignments : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 517 15 517 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 518 4 518 102] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model assignments) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model assignments) i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 519 14 519 88] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model assignments)) = UIntSize.to_int result }
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl6_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 229 12 229 41] ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Cdsat_Concrete_ConflictHeap_Type
  type t_conflictheap
end
module Cdsat_Concrete_Impl1_ShallowModel_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 311 4 311 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Concrete_Impl1_ShallowModel_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 311 4 311 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 311 4 311 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { result = shallow_model self }
    
end
module Cdsat_Concrete_Impl1_ShallowModel
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 311 4 311 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 311 4 311 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Interface
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 85 8 85 33] Seq.get (Ghost.inner self) ix
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 212 8 212 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_IxToAbs_Stub
  use set.Fset
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 0 664 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_IxToAbs_Interface
  use set.Fset
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 0 664 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 0 664 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 662 0 662 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains result (IndexLogic0.index_logic t ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 663 0 663 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix) }
    ensures { result = ix_to_abs t s }
    
  axiom ix_to_abs_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 663 0 663 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (ix_to_abs t s) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 662 0 662 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains (ix_to_abs t s) (IndexLogic0.index_logic t ix))
end
module Cdsat_Trail_IxToAbs
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 0 664 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 0 664 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 662 0 662 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains result (IndexLogic0.index_logic t ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 663 0 663 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix) }
    ensures { result = ix_to_abs t s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs t s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 659 0 659 8] if s = Fset.empty  then
    Fset.empty 
  else
    let a = Fset.pick s in Insert0.insert (ix_to_abs t (Remove0.remove s a)) (IndexLogic0.index_logic t a)
  )
  axiom ix_to_abs_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 663 0 663 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (ix_to_abs t s) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 662 0 662 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains (ix_to_abs t s) (IndexLogic0.index_logic t ix))
end
module Cdsat_Trail_IxToAbs_Impl
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  let rec ghost function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 0 664 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 662 0 662 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains result (IndexLogic0.index_logic t ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 663 0 663 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 661 10 661 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 659 0 659 8] if pure {s = Fset.empty } then
      Fset.empty 
    else
      let a = Fset.pick s in let a' = let b' = Remove0.remove s a in ix_to_abs t b' in let b' = IndexLogic0.index_logic t a in Insert0.insert a' b'
    
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_conflict  =
    | C_Conflict (Cdsat_Theory_Trail_Type.t_trail) (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  let function conflict_0 (self : t_conflict) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a _ -> a
      end
  let function conflict_1 (self : t_conflict) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ a -> a
      end
end
module Cdsat_Theory_Impl6_Sound_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 899 4 899 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 899 4 899 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 899 4 899 30] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 899 4 899 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 900 8 900 109] Sound0.sound (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Invariant0.invariant' m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.conflict_1 self) -> false)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 899 4 899 30] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl6_Invariant_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Invariant_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 34] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl6_Invariant
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 893 8 893 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 892 4 892 34] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl6_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 905 4 905 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
end
module Cdsat_Theory_Impl6_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 905 4 905 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 905 4 905 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    ensures { result = level self }
    
end
module Cdsat_Theory_Impl6_Level
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 905 4 905 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 903 4 903 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 905 4 905 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    ensures { result = level self }
    
end
module Cdsat_Trail_IxToAbsRemove_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 754 0 754 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_IxToAbsRemove_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 754 0 754 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 754 0 754 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 750 11 750 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 751 11 751 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 752 0 752 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 753 10 753 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_remove t x s }
    
  axiom ix_to_abs_remove_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 750 11 750 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 751 11 751 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 752 0 752 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 753 10 753 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_IxToAbsRemove
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 754 0 754 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 754 0 754 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 750 11 750 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 751 11 751 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 752 0 752 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 753 10 753 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_remove t x s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs_remove t x s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 755 4 755 6] ())
  axiom ix_to_abs_remove_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 750 11 750 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 751 11 751 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 752 0 752 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 753 10 753 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_IxToAbsRemove_Impl
  use set.Fset
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    predicate Contains0.contains = Contains4.contains,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains4.contains,
    function Remove0.remove = Remove2.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains4.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec ghost function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 754 0 754 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 750 11 750 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 751 11 751 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 752 0 752 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 753 10 753 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 749 10 749 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 755 4 755 6] ()
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub
  type t
  use set.Fset
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Interface
  type t
  use set.Fset
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
  val ext_eq (self : Fset.fset t) (other : Fset.fset t) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] result -> self = other }
    ensures { result = ext_eq self other }
    
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] ext_eq self other -> self = other
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq
  type t
  use set.Fset
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 109 8 111 9] forall e : t . Inv0.inv e -> Contains0.contains self e = Contains0.contains other e
  val ext_eq (self : Fset.fset t) (other : Fset.fset t) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] result -> self = other }
    ensures { result = ext_eq self other }
    
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] ext_eq self other -> self = other
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  function le_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  function le_log (self : self) (o : self) : bool
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function le_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  function ge_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  function ge_log (self : self) (o : self) : bool
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function ge_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 31 20 31 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  function lt_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  function lt_log (self : self) (o : self) : bool
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function lt_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  function gt_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  function gt_log (self : self) (o : self) : bool
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function gt_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 41 20 41 56] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
end
module CreusotContracts_Logic_Ord_Impl9_CmpLog_Stub
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl9_CmpLog_Interface
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpLog
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 76 12 85 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Cdsat_Trail_Impl5_CmpLog_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl5_CmpLog_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
  val cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self rhs }
    
end
module Cdsat_Trail_Impl5_CmpLog
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog_Stub as CmpLog0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 8 96 9] match (CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_0 self) (Cdsat_Trail_TrailIndex_Type.trailindex_0 rhs)) with
      | Core_Cmp_Ordering_Type.C_Less -> Core_Cmp_Ordering_Type.C_Less
      | Core_Cmp_Ordering_Type.C_Greater -> Core_Cmp_Ordering_Type.C_Greater
      | Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_1 self) (Cdsat_Trail_TrailIndex_Type.trailindex_1 rhs)
      end
  val cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 91 4 91 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self rhs }
    
end
module Cdsat_Trail_Impl5_CmpLeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpLeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 14 101 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 14 101 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpLeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 99 4 99 10] ()
  val cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 14 101 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 14 101 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpLeLog_Impl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 101 14 101 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 99 4 99 10] ()
end
module Cdsat_Trail_Impl5_CmpLtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpLtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 106 14 106 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 106 14 106 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpLtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 104 4 104 10] ()
  val cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 106 14 106 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 106 14 106 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpLtLog_Impl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 106 14 106 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 104 4 104 10] ()
end
module Cdsat_Trail_Impl5_CmpGeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpGeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 14 111 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 14 111 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpGeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 109 4 109 10] ()
  val cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 14 111 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 14 111 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpGeLog_Impl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 111 14 111 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 109 4 109 10] ()
end
module Cdsat_Trail_Impl5_CmpGtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpGtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 116 14 116 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 116 14 116 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpGtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 114 4 114 10] ()
  val cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 116 14 116 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 116 14 116 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpGtLog_Impl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  let rec ghost function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 116 14 116 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 114 4 114 10] ()
end
module Cdsat_Trail_Impl5_Refl_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_Refl_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 14 121 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 14 121 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl5_Refl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 119 4 119 10] ()
  val refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 14 121 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 14 121 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl5_Refl_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 121 14 121 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 119 4 119 10] ()
end
module Cdsat_Trail_Impl5_Trans_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
end
module Cdsat_Trail_Impl5_Trans_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 126 15 126 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log y z = o}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 128 14 128 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 126 15 126 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 128 14 128 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl5_Trans
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 124 4 124 10] ()
  val trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 126 15 126 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log y z = o}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 128 14 128 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 126 15 126 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 128 14 128 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl5_Trans_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 126 15 126 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log y z = o}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 128 14 128 31] CmpLog0.cmp_log x z = o }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 124 4 124 10] ()
end
module Cdsat_Trail_Impl5_Antisym1_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_Antisym1_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 133 15 133 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 134 14 134 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 133 15 133 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 134 14 134 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_Antisym1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 131 4 131 10] ()
  val antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 133 15 133 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 134 14 134 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 133 15 133 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 134 14 134 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_Antisym1_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 133 15 133 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 134 14 134 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 131 4 131 10] ()
end
module Cdsat_Trail_Impl5_Antisym2_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_Antisym2_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 139 15 139 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 140 14 140 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 139 15 139 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 140 14 140 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_Antisym2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 137 4 137 10] ()
  val antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 139 15 139 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 140 14 140 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 139 15 139 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 140 14 140 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_Antisym2_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 139 15 139 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 140 14 140 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 137 4 137 10] ()
end
module Cdsat_Trail_Impl5_EqCmp_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_EqCmp_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 145 14 145 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 145 14 145 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl5_EqCmp
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 143 4 143 10] ()
  val eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 145 14 145 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 145 14 145 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl5_EqCmp_Impl
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec ghost function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 145 14 145 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 143 4 143 10] ()
end
module Cdsat_Trail_SetMax_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 720 0 720 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_SetMax_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 720 0 720 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 720 0 720 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 716 11 716 24] not Fset.is_empty s}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 718 10 718 28] Contains0.contains s result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 719 0 719 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o result }
    ensures { result = set_max s }
    
  axiom set_max_spec : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 716 11 716 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 719 0 719 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o (set_max s)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 718 10 718 28] Contains0.contains s (set_max s))
end
module Cdsat_Trail_SetMax
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 720 0 720 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 720 0 720 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 716 11 716 24] not Fset.is_empty s}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 718 10 718 28] Contains0.contains s result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 719 0 719 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o result }
    ensures { result = set_max s }
    
  axiom def : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . set_max s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 714 0 714 8] let x = Fset.pick s in let s = Remove0.remove s x in if Fset.is_empty s then
    x
  else
    let rec' = set_max s in if GeLog0.ge_log x rec' then x else rec'
  )
  axiom set_max_spec : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 716 11 716 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 719 0 719 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o (set_max s)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 718 10 718 28] Contains0.contains s (set_max s))
end
module Cdsat_Trail_SetMax_Impl
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl5_EqCmp as EqCmp1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym2 as Antisym21 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym1 as Antisym11 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Trans as Trans1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Refl as Refl1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGtLog as CmpGtLog1 with
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGeLog as CmpGeLog1 with
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLtLog as CmpLtLog1 with
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLeLog as CmpLeLog1 with
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  let rec ghost function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 720 0 720 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 716 11 716 24] not Fset.is_empty s}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 718 10 718 28] Contains0.contains s result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 719 0 719 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o result }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 717 10 717 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 714 0 714 8] let x = Fset.pick s in let s = Remove0.remove s x in if Fset.is_empty s then
      x
    else
      let rec' = set_max s in if GeLog0.ge_log x rec' then x else rec'
    
end
module Cdsat_Trail_IxToAbsLevel_Stub
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 743 0 743 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_IxToAbsLevel_Interface
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 743 0 743 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 743 0 743 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 738 11 738 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 740 0 740 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 741 0 741 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 742 0 742 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0 }
    ensures { result = ix_to_abs_level t s }
    
  axiom ix_to_abs_level_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 738 11 738 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 740 0 740 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 742 0 742 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 741 0 741 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s))
end
module Cdsat_Trail_IxToAbsLevel
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 743 0 743 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 743 0 743 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 738 11 738 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 740 0 740 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 741 0 741 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 742 0 742 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0 }
    ensures { result = ix_to_abs_level t s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs_level t s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 744 4 744 6] ())
  axiom ix_to_abs_level_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 738 11 738 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 740 0 740 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 742 0 742 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 741 0 741 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s))
end
module Cdsat_Trail_IxToAbsLevel_Impl
  use set.Fset
  use prelude.Ghost
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl5_EqCmp as EqCmp1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym2 as Antisym21 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym1 as Antisym11 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Trans as Trans1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Refl as Refl1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGtLog as CmpGtLog1 with
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGeLog as CmpGeLog1 with
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLtLog as CmpLtLog1 with
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLeLog as CmpLeLog1 with
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    predicate Contains0.contains = Contains4.contains,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains2.contains = Contains4.contains,
    function Remove0.remove = Remove1.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic1.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains4.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    function Remove0.remove = Remove0.remove,
    function GeLog0.ge_log = GeLog0.ge_log,
    axiom .
  clone Cdsat_Trail_IxToAbs as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec ghost function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 743 0 743 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 738 11 738 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 740 0 740 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 741 0 741 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 742 0 742 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0 }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 739 10 739 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 744 4 744 6] ()
end
module Cdsat_Theory_Impl4_IsInputInv_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 475 4 475 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_IsInputInv_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 475 4 475 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 475 4 475 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 472 15 472 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 473 15 473 31] IsInput0.is_input self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 35] LevelOf0.level_of self d = 0 }
    ensures { result = is_input_inv self d }
    
  axiom is_input_inv_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 472 15 472 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 473 15 473 31] IsInput0.is_input self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 35] LevelOf0.level_of self d = 0)
end
module Cdsat_Theory_Impl4_IsInputInv
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 475 4 475 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 476 8 485 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then () else is_input_inv tl d
      end
  val is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 475 4 475 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 472 15 472 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 473 15 473 31] IsInput0.is_input self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 35] LevelOf0.level_of self d = 0 }
    ensures { result = is_input_inv self d }
    
  axiom is_input_inv_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 472 15 472 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 473 15 473 31] IsInput0.is_input self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 35] LevelOf0.level_of self d = 0)
end
module Cdsat_Theory_Impl4_IsInputInv_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 475 4 475 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 472 15 472 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 473 15 473 31] IsInput0.is_input self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 474 14 474 35] LevelOf0.level_of self d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 476 8 485 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        is_input_inv tl d
      
      end
end
module Cdsat_Theory_Impl4_JustifiedIsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_JustifiedIsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 746 15 746 38] InvariantAssign0.invariant_assign self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 747 15 747 35] IsJustified0.is_justified self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 29] IsBool0.is_bool (let (_, a) = d in a) }
    ensures { result = justified_is_bool self d }
    
  axiom justified_is_bool_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 15 746 38] InvariantAssign0.invariant_assign self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 747 15 747 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 29] IsBool0.is_bool (let (_, a) = d in a))
end
module Cdsat_Theory_Impl4_JustifiedIsBool
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 750 8 759 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = justified_is_bool tl d in ()
      
      end
  val justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 746 15 746 38] InvariantAssign0.invariant_assign self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 747 15 747 35] IsJustified0.is_justified self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 29] IsBool0.is_bool (let (_, a) = d in a) }
    ensures { result = justified_is_bool self d }
    
  axiom justified_is_bool_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 746 15 746 38] InvariantAssign0.invariant_assign self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 747 15 747 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 29] IsBool0.is_bool (let (_, a) = d in a))
end
module Cdsat_Theory_Impl4_JustifiedIsBool_Impl
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use prelude.Int
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  let rec ghost function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 749 4 749 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 746 15 746 38] InvariantAssign0.invariant_assign self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 747 15 747 35] IsJustified0.is_justified self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 748 4 748 29] IsBool0.is_bool (let (_, a) = d in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 750 8 759 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = justified_is_bool tl d in ()
      
      end
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 20 21 20 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 20 21 20 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 20 21 20 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 14 19 41] result = Slice.id self }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 20 21 20 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 14 19 41] shallow_model self = Slice.id self) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 41 8 41 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 85 19 85 23] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 85 19 85 23] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 85 19 85 23] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 85 19 85 23] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 14 83 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl15_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 378 12 378 66] ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module Cdsat_Theory_Impl4_JustificationContains_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 602 4 602 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_JustificationContains_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 602 4 602 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 602 4 602 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 598 15 598 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 599 15 599 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 600 4 600 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 601 14 601 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv }
    ensures { result = justification_contains self kv }
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 598 15 598 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 599 15 599 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 601 14 601 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 600 4 600 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl4_JustificationContains
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 602 4 602 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 603 8 612 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else justification_contains tl kv
      end
  val justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 602 4 602 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 598 15 598 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 599 15 599 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 600 4 600 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 601 14 601 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv }
    ensures { result = justification_contains self kv }
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 598 15 598 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 599 15 599 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 601 14 601 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 600 4 600 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl4_JustificationContains_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 602 4 602 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 598 15 598 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 599 15 599 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 600 4 600 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 601 14 601 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 603 8 612 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = kv} then
        ()
      else
        justification_contains tl kv
      
      end
end
module Cdsat_Theory_Impl3_ResolveSound_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 174 4 179 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl3_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 174 4 179 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 174 4 179 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 170 4 170 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 171 15 171 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 172 15 172 32] Contains0.contains cflct a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 14 173 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just) }
    ensures { result = resolve_sound self cflct just a }
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 4 170 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 15 171 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 172 15 172 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 173 14 173 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl3_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 174 4 179 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 168 4 168 12] ()
  val resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 174 4 179 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 170 4 170 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 171 15 171 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 172 15 172 32] Contains0.contains cflct a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 14 173 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just) }
    ensures { result = resolve_sound self cflct just a }
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 170 4 170 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 171 15 171 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 172 15 172 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 173 14 173 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl3_ResolveSound_Impl
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  let rec ghost function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 174 4 179 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 170 4 170 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 171 15 171 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 172 15 172 32] Contains0.contains cflct a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 173 14 173 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 168 4 168 12] ()
end
module Cdsat_Theory_Impl6_Resolvef_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
end
module Cdsat_Theory_Impl6_Resolvef_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
  val resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 924 15 924 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 925 15 925 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 926 4 926 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 927 4 927 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 928 4 928 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 929 14 929 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 930 14 930 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 931 14 931 44] Level0.level result = Level0.level self }
    ensures { result = resolvef self a }
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 924 15 924 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 925 15 925 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 926 4 926 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 927 4 927 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 928 4 928 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 931 14 931 44] Level0.level (resolvef self a) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 930 14 930 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 929 14 929 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl6_Resolvef
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains_Stub as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 922 4 922 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 924 15 924 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 925 15 925 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 926 4 926 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 927 4 927 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 928 4 928 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 929 14 929 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 930 14 930 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 931 14 931 44] Level0.level result = Level0.level self }
    ensures { result = resolvef self a }
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 924 15 924 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 925 15 925 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 926 4 926 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 927 4 927 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 928 4 928 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 931 14 931 44] Level0.level (resolvef self a) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 930 14 930 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 929 14 929 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl6_Resolvef_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl3_ResolveSound as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 924 15 924 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 925 15 925 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 926 4 926 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 927 4 927 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 928 4 928 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 929 14 929 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 930 14 930 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 931 14 931 44] Level0.level result = Level0.level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 922 4 922 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (let a' = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Fset.union a' just)
end
module Cdsat_Trail_IxToAbsInsert_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 765 0 765 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_IxToAbsInsert_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 765 0 765 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 765 0 765 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 761 11 761 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 762 11 762 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 763 0 763 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 764 10 764 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_insert t x s }
    
  axiom ix_to_abs_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 761 11 761 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 762 11 762 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 763 0 763 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 764 10 764 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_IxToAbsInsert
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 765 0 765 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 765 0 765 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 761 11 761 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 762 11 762 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 763 0 763 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 764 10 764 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_insert t x s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs_insert t x s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 766 4 766 6] ())
  axiom ix_to_abs_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 761 11 761 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 762 11 762 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 763 0 763 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 764 10 764 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_IxToAbsInsert_Impl
  use set.Fset
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    predicate Contains0.contains = Contains4.contains,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains4.contains,
    function Remove0.remove = Remove1.remove,
    function Insert0.insert = Insert1.insert,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains4.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert1.insert,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec ghost function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 765 0 765 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 761 11 761 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 762 11 762 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 763 0 763 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 764 10 764 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 760 10 760 17] Fset.cardinal s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 766 4 766 6] ()
end
module Cdsat_Trail_AbstractJustificationInsert_Stub
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 0 776 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_AbstractJustificationInsert_Interface
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 0 776 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 0 776 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 772 11 772 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 773 11 773 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 775 10 775 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x) }
    ensures { result = abstract_justification_insert t x s }
    
  axiom abstract_justification_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 772 11 772 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 773 11 773 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 775 10 775 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_AbstractJustificationInsert
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 0 776 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 0 776 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 772 11 772 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 773 11 773 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 775 10 775 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x) }
    ensures { result = abstract_justification_insert t x s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . abstract_justification_insert t x s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 777 4 777 39] let _ = AbstractJustification0.abstract_justification t (Seq.snoc s x) in ())
  axiom abstract_justification_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 772 11 772 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 773 11 773 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 775 10 775 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_AbstractJustificationInsert_Impl
  use seq.Seq
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    predicate Contains0.contains = Contains1.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains1.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec ghost function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 776 0 776 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 772 11 772 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 773 11 773 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 775 10 775 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 771 10 771 17] Seq.length s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 777 4 777 39] let _ = AbstractJustification0.abstract_justification t (Seq.snoc s x) in ()
end
module Cdsat_Theory_Impl0_IsBool_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 27 4 27 32] (self : Cdsat_Theory_Term_Type.t_term)
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 27 4 27 32] (self : Cdsat_Theory_Term_Type.t_term)
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 27 4 27 32] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 27 4 27 32] (self : Cdsat_Theory_Term_Type.t_term) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 28 8 28 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 27 4 27 32] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_normal  =
    | C_Normal (Cdsat_Theory_Trail_Type.t_trail)
    
  let function normal_0 (self : t_normal) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Normal a -> a
      end
end
module Cdsat_Theory_Impl5_Sound_Stub
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 30] (self : Cdsat_Theory_Normal_Type.t_normal) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 766 4 766 16] Sound0.sound (Cdsat_Theory_Normal_Type.normal_0 self)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 769 4 769 30] (self : Cdsat_Theory_Normal_Type.t_normal) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl4_RestrictSound_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
end
module Cdsat_Theory_Impl4_RestrictSound_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
  val restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 645 15 645 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 646 14 646 42] Sound0.sound (Restrict0.restrict self level) }
    ensures { result = restrict_sound self level }
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 645 15 645 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 646 14 646 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_RestrictSound
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 648 8 653 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let _ = restrict_sound tl level in ()
      end
  val restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 645 15 645 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 646 14 646 42] Sound0.sound (Restrict0.restrict self level) }
    ensures { result = restrict_sound self level }
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 645 15 645 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 646 14 646 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl4_RestrictSound_Impl
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  let rec ghost function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 647 4 647 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 645 15 645 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 646 14 646 42] Sound0.sound (Restrict0.restrict self level) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 648 8 653 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let _ = restrict_sound tl level in ()
      end
end
module Cdsat_Theory_Impl4_TrailPlausible_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 727 15 727 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 728 15 728 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 729 4 729 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 730 14 730 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = trail_plausible self d }
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 727 15 727 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 728 15 728 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 729 4 729 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 730 14 730 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_TrailPlausible
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 732 8 741 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  val trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 727 15 727 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 728 15 728 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 729 4 729 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 730 14 730 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = trail_plausible self d }
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 727 15 727 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 728 15 728 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 729 4 729 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 730 14 730 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_TrailPlausible_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 731 4 731 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 727 15 727 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 728 15 728 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 729 4 729 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 730 14 730 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 732 8 741 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 718 4 718 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 718 4 718 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
  val restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 718 4 718 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 714 15 714 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 715 15 715 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 716 15 716 23] l1 <= l2}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 717 14 717 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1 }
    ensures { result = restrict_idempotent self l1 l2 }
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 714 15 714 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 715 15 715 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 716 15 716 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 717 14 717 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictIdempotent
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 718 4 718 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 719 8 722 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> restrict_idempotent tl l1 l2
      end
  val restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 718 4 718 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 714 15 714 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 715 15 715 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 716 15 716 23] l1 <= l2}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 717 14 717 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1 }
    ensures { result = restrict_idempotent self l1 l2 }
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 714 15 714 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 715 15 715 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 716 15 716 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 717 14 717 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl4_RestrictIdempotent_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  let rec ghost function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 718 4 718 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 714 15 714 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 715 15 715 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 716 15 716 23] l1 <= l2}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 717 14 717 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 719 8 722 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> restrict_idempotent tl l1 l2
      end
end
module Cdsat_Theory_Impl1_NegateInvolutive_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 77 4 77 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 77 4 77 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
  val negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 77 4 77 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 75 15 75 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 76 14 76 44] Negate0.negate (Negate0.negate self) = self }
    ensures { result = negate_involutive self }
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 75 15 75 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 76 14 76 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 77 4 77 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 73 4 73 12] ()
  val negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 77 4 77 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 75 15 75 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 76 14 76 44] Negate0.negate (Negate0.negate self) = self }
    ensures { result = negate_involutive self }
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 75 15 75 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 76 14 76 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Impl
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  let rec ghost function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 77 4 77 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 75 15 75 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 76 14 76 44] Negate0.negate (Negate0.negate self) = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 73 4 73 12] ()
end
module Cdsat_Theory_Impl3_Lemma_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl3_Lemma_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
  val lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 184 15 184 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 185 15 185 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 186 15 186 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 187 14 187 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v) }
    ensures { result = lemma' self t v }
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 184 15 184 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 185 15 185 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 186 15 186 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 187 14 187 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl3_Lemma
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl3_Interp_Stub as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 189 8 192 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> ()
      | _ -> ()
      end
  val lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 184 15 184 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 185 15 185 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 186 15 186 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 187 14 187 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v) }
    ensures { result = lemma' self t v }
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 184 15 184 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 185 15 185 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 186 15 186 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 187 14 187 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl3_Lemma_Impl
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 188 4 188 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 184 15 184 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 185 15 185 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 186 15 186 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 187 14 187 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 189 8 192 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> ()
      | _ -> ()
      end
end
module Cdsat_Theory_Impl6_LearnJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 916 4 916 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl6_LearnJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 916 4 916 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 916 4 916 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 915 4 915 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)) }
    ensures { result = learn_justified self ass }
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 915 4 915 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl6_LearnJustified
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl3_Lemma_Stub as Lemma0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 916 4 916 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 909 4 909 12] let _ = () in ()
  val learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 916 4 916 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 915 4 915 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)) }
    ensures { result = learn_justified self ass }
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 915 4 915 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl6_LearnJustified_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Invariant as Invariant2 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    function Interp0.interp = Interp0.interp,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 916 4 916 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 915 4 915 126] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 909 4 909 12] let _ = () in ()
end
module Cdsat_Theory_Impl6_Backjump2_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 4 1010 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
end
module Cdsat_Theory_Impl6_Backjump2_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 4 1010 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
  val backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 4 1010 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1001 15 1001 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1002 15 1002 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1003 4 1003 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 4 1004 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 14 1007 28] Sound1.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { result = backjump2 self l }
    
  axiom backjump2_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1001 15 1001 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1002 15 1002 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1003 4 1003 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 4 1004 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 14 1007 28] Sound1.sound (backjump2 self l)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l)))
end
module Cdsat_Theory_Impl6_Backjump2
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant2
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl6_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 4 1010 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 999 4 999 12] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Cdsat_Theory_Normal_Type.C_Normal (Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted)
  val backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 4 1010 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1001 15 1001 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1002 15 1002 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1003 4 1003 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 4 1004 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 14 1007 28] Sound1.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { result = backjump2 self l }
    
  axiom backjump2_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1001 15 1001 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1002 15 1002 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1003 4 1003 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 4 1004 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 14 1007 28] Sound1.sound (backjump2 self l)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l)))
end
module Cdsat_Theory_Impl6_Backjump2_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    function Interp0.interp = Interp0.interp,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl0_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_LearnJustified as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Lemma0.lemma' = Lemma0.lemma',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 4 1010 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1001 15 1001 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1002 15 1002 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1003 4 1003 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 4 1004 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 14 1007 28] Sound1.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 999 4 999 12] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = let b' = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in Cdsat_Theory_Normal_Type.C_Normal (Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted)
end
module Cdsat_Trail_SeqToSet_Stub
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains2
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 680 0 680 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_SeqToSet_Interface
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains2
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 680 0 680 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 680 0 680 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 677 0 677 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 678 0 678 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 679 10 679 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t }
    ensures { result = seq_to_set trail s t }
    
  axiom seq_to_set_spec : forall trail : Cdsat_Trail_Trail_Type.t_trail, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 677 0 677 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 678 0 678 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 679 10 679 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t)
end
module Cdsat_Trail_SeqToSet
  use seq.Seq
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains2
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Contains0.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 680 0 680 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 680 0 680 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 677 0 677 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 678 0 678 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 679 10 679 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t }
    ensures { result = seq_to_set trail s t }
    
  axiom def : forall trail : Cdsat_Trail_Trail_Type.t_trail, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . seq_to_set trail s t = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 673 0 673 8] if s = Seq.empty  then
    ()
  else
    let a = Seq.get s 0 in seq_to_set trail (Remove0.remove s a) (Remove1.remove t a)
  )
  axiom seq_to_set_spec : forall trail : Cdsat_Trail_Trail_Type.t_trail, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 677 0 677 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 678 0 678 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 679 10 679 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t)
end
module Cdsat_Trail_SeqToSet_Impl
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains as Contains2 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Contains0.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function Remove0.remove = Remove1.remove,
    function Insert0.insert = Insert0.insert,
    axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec ghost function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 680 0 680 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 677 0 677 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 678 0 678 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 679 10 679 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 675 10 675 17] Seq.length s}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 673 0 673 8] if pure {s = Seq.empty } then
      ()
    else
      let a = Seq.get s 0 in let b' = Remove0.remove s a in let c' = Remove1.remove t a in seq_to_set trail b' c'
    
end
module Cdsat_Concrete_Impl2_New_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel0
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 322 4 322 20] (_1 : ()) : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 321 14 321 36] ShallowModel0.shallow_model result = Fset.empty  }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 158 20 158 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl3_IntoIterPost
  type t
  type a
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 164 20 164 33] ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl15_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 86 0 154 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2721 17 2721 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 86 0 154 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2721 4 2721 40] Inv1.inv result }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 222 20 222 57] Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl8_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val next (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/into_iter.rs" 188 17 188 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 92 26 95 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/into_iter.rs" 188 4 188 35] Inv1.inv result }
    
end
module Cdsat_Concrete_Impl2_Insert_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel0
  val insert [#"/Users/xavier/Code/cdsat/src/concrete.rs" 328 4 328 47] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) (e : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 327 14 327 43] ShallowModel0.shallow_model ( ^ self) = Insert0.insert (ShallowModel1.shallow_model self) e }
    
end
module Cdsat_Concrete_Impl2_Last_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  use Core_Option_Option_Type as Core_Option_Option_Type
  val last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 338 4 338 41] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 333 4 336 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) other -> LeLog0.le_log other a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 337 14 337 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs" 932 24 932 28] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs" 932 4 932 34] Inv1.inv result }
    
end
module Cdsat_Trail_Impl8_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 173 4 173 32] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 172 14 172 30] result = Cdsat_Trail_TrailIndex_Type.trailindex_0 self }
    
end
module Cdsat_Trail_Impl8_Level
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg level [#"/Users/xavier/Code/cdsat/src/trail.rs" 173 4 173 32] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 172 14 172 30] result = Cdsat_Trail_TrailIndex_Type.trailindex_0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : Cdsat_Trail_TrailIndex_Type.t_trailindex = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self;
    return _0
  }
  
end
module Cdsat_Concrete_Impl2_PopLast_Interface
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  val pop_last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 348 4 348 48] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 343 14 343 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 344 4 347 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> ShallowModel1.shallow_model ( ^ self) = Remove0.remove (ShallowModel0.shallow_model self) a /\ Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model ( ^ self)) other -> LeLog0.le_log other a) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl12_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 131 27 131 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2673 14 2673 18] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2673 20 2673 25] Inv1.inv index}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 132 26 132 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2673 4 2673 46] Inv2.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 109 20 109 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 116 20 116 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Cdsat_Trail_Impl11_Index_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  val index [#"/Users/xavier/Code/cdsat/src/trail.rs" 599 4 599 55] (self : Cdsat_Trail_Trail_Type.t_trail) (index : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Assignment_Type.t_assignment
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 597 15 597 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 598 14 598 67] result = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 index)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 index)) }
    
end
module Cdsat_Trail_Impl11_Index
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv5.inv
  clone Alloc_Vec_Impl12_Index_Interface as Index1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Cdsat_Trail_Assignment_Type.t_assignment,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate HasValue0.has_value = HasValue1.has_value,
    predicate Inv2.inv = Inv3.inv
  clone Alloc_Vec_Impl12_Index_Interface as Index0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv2.inv
  let rec cfg index [#"/Users/xavier/Code/cdsat/src/trail.rs" 599 4 599 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) (index : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Assignment_Type.t_assignment
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 597 15 597 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 598 14 598 67] result = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 index)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 index)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Assignment_Type.t_assignment;
  var self : Cdsat_Trail_Trail_Type.t_trail = self;
  var index : Cdsat_Trail_TrailIndex_Type.t_trailindex = index;
  var _5 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _6 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _8 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    _8 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 600 9 600 34] Index0.index (Cdsat_Trail_Trail_Type.trail_assignments self) (Cdsat_Trail_TrailIndex_Type.trailindex_0 index));
    goto BB1
  }
  BB1 {
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 600 9 600 43] Index1.index _8 (Cdsat_Trail_TrailIndex_Type.trailindex_1 index));
    goto BB2
  }
  BB2 {
    _5 <- _6;
    _0 <- _5;
    return _0
  }
  
end
module Alloc_Vec_Impl10_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val clone' (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2625 14 2625 18] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2625 4 2625 27] Inv1.inv result }
    
end
module Cdsat_Trail_Impl18_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 9 47 14] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_Reason_Type.t_reason
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 9 47 14] result = self }
    
end
module Cdsat_Trail_Impl18_Clone
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Alloc_Vec_Impl10_Clone_Interface as Clone0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 9 47 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_Reason_Type.t_reason
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 9 47 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Reason_Type.t_reason;
  var self : Cdsat_Trail_Reason_Type.t_reason = self;
  var v0_1 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _5 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _7 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB1
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB2
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB3
      end
  }
  BB1 {
    goto BB5
  }
  BB2 {
    goto BB8
  }
  BB3 {
    _0 <- Cdsat_Trail_Reason_Type.C_Input;
    goto BB9
  }
  BB4 {
    absurd
  }
  BB5 {
    v0_1 <- Cdsat_Trail_Reason_Type.justified_0 self;
    _7 <- v0_1;
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 9 47 14] Clone0.clone' _7);
    goto BB6
  }
  BB6 {
    _0 <- Cdsat_Trail_Reason_Type.C_Justified _5;
    _5 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB7
  }
  BB7 {
    goto BB9
  }
  BB8 {
    _0 <- Cdsat_Trail_Reason_Type.C_Decision;
    goto BB9
  }
  BB9 {
    return _0
  }
  BB11 {
    goto BB3
  }
  
end
module Cdsat_Trail_Impl13_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 9 15 14] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Assignment_Type.t_assignment
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 9 15 14] result = self }
    
end
module Cdsat_Trail_Impl13_Clone
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone3
  clone Cdsat_Trail_Impl18_Clone_Interface as Clone2
  clone Cdsat_Term_Impl27_Clone_Interface as Clone1
  clone Cdsat_Term_Impl20_Clone_Interface as Clone0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 9 15 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Assignment_Type.t_assignment
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 9 15 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Assignment_Type.t_assignment;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _3 : Cdsat_Term_Term_Type.t_term;
  var _5 : Cdsat_Term_Term_Type.t_term;
  var _6 : Cdsat_Term_Value_Type.t_value;
  var _8 : Cdsat_Term_Value_Type.t_value;
  var _9 : Cdsat_Trail_Reason_Type.t_reason;
  var _11 : Cdsat_Trail_Reason_Type.t_reason;
  var _12 : usize;
  var _14 : usize;
  {
    goto BB0
  }
  BB0 {
    _5 <- Cdsat_Trail_Assignment_Type.assignment_term self;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 18 18] Clone0.clone' _5);
    goto BB1
  }
  BB1 {
    _8 <- Cdsat_Trail_Assignment_Type.assignment_val self;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 20 4 20 18] Clone1.clone' _8);
    goto BB2
  }
  BB2 {
    _11 <- Cdsat_Trail_Assignment_Type.assignment_reason self;
    _9 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 22 4 22 22] Clone2.clone' _11);
    goto BB3
  }
  BB3 {
    _14 <- Cdsat_Trail_Assignment_Type.assignment_level self;
    _12 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 24 4 24 20] Clone3.clone' _14);
    goto BB4
  }
  BB4 {
    _0 <- Cdsat_Trail_Assignment_Type.C_Assignment _3 _6 _9 _12;
    _3 <- any Cdsat_Term_Term_Type.t_term;
    _6 <- any Cdsat_Term_Value_Type.t_value;
    _9 <- any Cdsat_Trail_Reason_Type.t_reason;
    _12 <- any usize;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Cdsat_Term_Impl8_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val is_bool [#"/Users/xavier/Code/cdsat/src/term.rs" 251 4 251 33] (self : Cdsat_Term_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 250 14 250 41] result = IsBool0.is_bool (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Term_Impl8_IsBool
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg is_bool [#"/Users/xavier/Code/cdsat/src/term.rs" 251 4 251 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 250 14 250 41] result = IsBool0.is_bool (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Term_Value_Type.t_value = self;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 254 29 254 34] false);
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 253 30 253 34] true);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Cdsat_Trail_Impl12_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 617 4 617 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 616 14 616 45] result = IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_Impl12_IsBool
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel0
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Term_Impl8_IsBool_Interface as IsBool0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 617 4 617 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 616 14 616 45] result = IsBool1.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 618 8 618 26] IsBool0.is_bool (Cdsat_Trail_Assignment_Type.assignment_val self));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Trail_Impl12_IsFirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_first_order [#"/Users/xavier/Code/cdsat/src/trail.rs" 628 4 628 47] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 627 14 627 45] result <> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_Impl12_IsFirstOrder
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel0
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl12_IsBool_Interface as IsBool0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  let rec cfg is_first_order [#"/Users/xavier/Code/cdsat/src/trail.rs" 628 4 628 47] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 627 14 627 45] result <> IsBool1.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _3 : bool;
  {
    goto BB0
  }
  BB0 {
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 629 9 629 23] IsBool0.is_bool self);
    goto BB1
  }
  BB1 {
    _0 <- not _3;
    _3 <- any bool;
    return _0
  }
  
end
module Cdsat_Trail_ReasonDeepModel_Type
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  type t_reasondeepmodel  =
    | C_Justified (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex))
    | C_Decision
    | C_Input
    
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = Alloc_Vec_Vec_Type.t_vec t a1
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec u a2,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a1,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec u a2
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a1
  val eq (self : Alloc_Vec_Vec_Type.t_vec t a1) (other : Alloc_Vec_Vec_Type.t_vec u a2) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/partial_eq.rs" 16 19 16 23] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/partial_eq.rs" 16 25 16 30] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module Cdsat_Trail_Impl7_DeepModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 166 4 166 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl7_DeepModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 166 4 166 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 166 4 166 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl7_DeepModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 166 4 166 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 167 8 167 12] self
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 166 4 166 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl22_DeepModel_Stub
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 31 47 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl22_DeepModel_Interface
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 31 47 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 31 47 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl22_DeepModel
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Trail_Impl7_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 31 47 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 31 47 40] match (self) with
      | Cdsat_Trail_Reason_Type.C_Justified v0_1 -> Cdsat_Trail_ReasonDeepModel_Type.C_Justified (DeepModel0.deep_model v0_1)
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Trail_ReasonDeepModel_Type.C_Decision
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Trail_ReasonDeepModel_Type.C_Input
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 31 47 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl19_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] (self : Cdsat_Trail_Reason_Type.t_reason) (rhs : Cdsat_Trail_Reason_Type.t_reason) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl19_Eq
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel4
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel4.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel3.deep_model,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel4.deep_model,
    val Max0.mAX' = Max0.mAX'
  use seq.Seq
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone Alloc_Vec_PartialEq_Impl0_Eq_Interface as Eq0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type u = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a1 = Alloc_Alloc_Global_Type.t_global,
    type a2 = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv0.inv,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Trail_Reason_Type.t_reason,
    type t2 = Cdsat_Trail_Reason_Type.t_reason,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Reason_Type.t_reason) (rhs : Cdsat_Trail_Reason_Type.t_reason) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Reason_Type.t_reason = self;
  var rhs : Cdsat_Trail_Reason_Type.t_reason = rhs;
  var _4 : (Cdsat_Trail_Reason_Type.t_reason, Cdsat_Trail_Reason_Type.t_reason);
  var v0_1 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var v0_2 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _13 : bool;
  {
    goto BB0
  }
  BB0 {
    _4 <- (self, rhs);
    switch (let (a, _) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB1
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB4
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB6
      end
  }
  BB1 {
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB2
      | _ -> goto BB19
      end
  }
  BB2 {
    goto BB8
  }
  BB3 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] false);
    goto BB15
  }
  BB4 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB13
  }
  BB6 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB7
      | _ -> goto BB3
      end
  }
  BB7 {
    goto BB14
  }
  BB8 {
    v0_1 <- Cdsat_Trail_Reason_Type.justified_0 (let (a, _) = _4 in a);
    v0_2 <- Cdsat_Trail_Reason_Type.justified_0 (let (_, a) = _4 in a);
    assume { Resolve0.resolve _4 };
    _13 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] Eq0.eq v0_1 v0_2);
    goto BB12
  }
  BB9 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] false);
    goto BB11
  }
  BB10 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] true);
    goto BB11
  }
  BB11 {
    goto BB15
  }
  BB12 {
    switch (_13)
      | False -> goto BB9
      | True -> goto BB10
      end
  }
  BB13 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] true);
    goto BB15
  }
  BB14 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] true);
    goto BB15
  }
  BB15 {
    return _0
  }
  BB17 {
    assume { Resolve0.resolve _4 };
    goto BB5
  }
  BB18 {
    assume { Resolve0.resolve _4 };
    goto BB3
  }
  BB19 {
    assume { Resolve0.resolve _4 };
    goto BB3
  }
  
end
module Cdsat_Trail_Impl12_IsDecision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 638 4 638 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 637 14 637 57] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Decision) }
    
end
module Cdsat_Trail_Impl12_IsDecision
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl19_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/trail.rs" 638 4 638 44]  : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Trail_Reason_Type.C_Decision in let _0 = _1 in _0
  let rec cfg is_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 638 4 638 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 637 14 637 57] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Decision) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _6 : Cdsat_Trail_Reason_Type.t_reason;
  {
    goto BB0
  }
  BB0 {
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 639 23 639 39] promoted0);
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 639 8 639 39] Eq0.eq (Cdsat_Trail_Assignment_Type.assignment_reason self) _6);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new (_1 : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 59 26 59 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Cdsat_Trail_Impl9_Justification_Interface
  use prelude.Ghost
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 4 421 72] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 415 15 415 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 416 15 416 31] Contains0.contains self a}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 417 4 417 61] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 418 4 418 91] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 419 14 419 99] AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model result) = Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 420 4 420 105] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> LevelLog0.level_log (Seq.get (ShallowModel0.shallow_model result) i) <= LevelLog0.level_log a }
    
end
module Cdsat_Trail_Impl9_Justification
  use prelude.Ghost
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains2 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains2.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv4.inv,
    predicate Contains0.contains = Contains3.contains,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains1.contains = Contains3.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains1.contains
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl10_Clone_Interface as Clone0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv
  clone Cdsat_Theory_Impl4_JustificationContains_Interface as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl11_Index_Interface as Index0 with
    predicate Contains0.contains = Contains0.contains,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec cfg justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 421 4 421 72] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 415 15 415 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 416 15 416 31] Contains0.contains self a}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 417 4 417 61] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 418 4 418 91] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 419 14 419 99] AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model result) = Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 420 4 420 105] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> LevelLog0.level_log (Seq.get (ShallowModel0.shallow_model result) i) <= LevelLog0.level_log a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var self : Cdsat_Trail_Trail_Type.t_trail = self;
  var a : Cdsat_Trail_TrailIndex_Type.t_trailindex = a;
  var _9 : Cdsat_Trail_Reason_Type.t_reason;
  var _10 : Cdsat_Trail_Assignment_Type.t_assignment;
  var v : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  {
    goto BB0
  }
  BB0 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 422 15 422 22] Index0.index self a);
    goto BB1
  }
  BB1 {
    _9 <- Cdsat_Trail_Assignment_Type.assignment_reason _10;
    switch (_9)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB2
      | Cdsat_Trail_Reason_Type.C_Decision -> goto BB3
      | Cdsat_Trail_Reason_Type.C_Input -> goto BB4
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    goto BB8
  }
  BB4 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 428 29 428 39] New0.new ());
    goto BB9
  }
  BB5 {
    absurd
  }
  BB6 {
    v <- Cdsat_Trail_Reason_Type.justified_0 _9;
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 424 16 424 91] let _ = JustificationContains0.justification_contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) in true };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 425 16 425 25] Clone0.clone' v);
    goto BB7
  }
  BB7 {
    goto BB9
  }
  BB8 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 427 32 427 42] New0.new ());
    goto BB9
  }
  BB9 {
    return _0
  }
  BB11 {
    goto BB4
  }
  
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  val iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/mod.rs" 999 17 999 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 232 0 324 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 60 20 60 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 86 0 154 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 17 281 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 86 0 154 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 4 281 27] Inv0.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl15_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl15_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 371 20 371 61] Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl15_Completed_Stub as Completed0 with
    type t = t
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Slice_Iter_Iter_Type.t_iter t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 92 26 95 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs" 131 12 131 47] Inv0.inv result }
    
end
module Cdsat_Theory_Impl4_RestrictFind_Stub
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictFind_Interface
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 518 15 518 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 519 15 519 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 520 15 520 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 14 521 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d }
    ensures { result = restrict_find self level d }
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 518 15 518 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 519 15 519 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 520 15 520 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 521 14 521 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl4_RestrictFind
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 523 8 532 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then () else restrict_find tl level d
      end
  val restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 518 15 518 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 519 15 519 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 520 15 520 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 14 521 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d }
    ensures { result = restrict_find self level d }
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 518 15 518 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 519 15 519 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 520 15 520 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 521 14 521 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl4_RestrictFind_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  let rec ghost function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 518 15 518 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 519 15 519 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 520 15 520 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 521 14 521 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 523 8 532 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        restrict_find tl level d
      
      end
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Stub
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Interface
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 659 15 659 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 660 15 660 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 14 661 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 662 14 662 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 14 663 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 664 14 664 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d }
    ensures { result = restrict_kind_unchanged self level d }
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 659 15 659 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 660 15 660 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 664 14 664 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 663 14 663 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 662 14 662 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 661 14 661 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictFind_Stub as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 666 8 666 36] let _ = RestrictFind0.restrict_find self level d in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_kind_unchanged tl level d in ()
      
      end
  val restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 659 15 659 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 660 15 660 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 14 661 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 662 14 662 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 14 663 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 664 14 664 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d }
    ensures { result = restrict_kind_unchanged self level d }
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 659 15 659 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 660 15 660 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 664 14 664 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 663 14 663 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 662 14 662 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 661 14 661 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictKindUnchanged_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictFind as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains0.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 665 4 665 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 659 15 659 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 660 15 660 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 14 661 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 662 14 662 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 663 14 663 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 664 14 664 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 666 8 666 36] let _ = RestrictFind0.restrict_find self level d in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = restrict_kind_unchanged tl level d in ()
      
      end
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val pop (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : Core_Option_Option_Type.t_option t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1899 20 1899 24] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 72 26 77 17] match (result) with
      | Core_Option_Option_Type.C_Some t -> ShallowModel0.shallow_model ( ^ self) = SeqExt.subsequence (ShallowModel1.shallow_model self) 0 (Seq.length (ShallowModel1.shallow_model self) - 1) /\ ShallowModel1.shallow_model self = Seq.snoc (ShallowModel0.shallow_model ( ^ self)) t
      | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (ShallowModel1.shallow_model self) = 0
      end }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1899 4 1899 38] Inv1.inv result }
    
end
module Cdsat_Trail_Impl9_Restrict_Interface
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val restrict [#"/Users/xavier/Code/cdsat/src/trail.rs" 486 4 486 51] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 480 4 480 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 481 15 481 36] UIntSize.to_int level <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 480 4 480 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 482 14 482 59] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 484 4 484 111] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . LevelLog0.level_log ix <= UIntSize.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 485 4 485 112] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
end
module Cdsat_Trail_Impl9_Restrict
  use prelude.Ghost
  use prelude.Int
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv5.inv,
    predicate Contains0.contains = Contains3.contains,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel5 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Contains1.contains = Contains3.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains_Interface as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictKindUnchanged_Interface as RestrictKindUnchanged0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    axiom .
  clone Alloc_Vec_Impl1_Pop_Interface as Pop0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with
    predicate Sound0.sound = Sound0.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec cfg restrict [#"/Users/xavier/Code/cdsat/src/trail.rs" 486 4 486 51] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 480 4 480 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 481 15 481 36] UIntSize.to_int level <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 480 4 480 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 482 14 482 59] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 484 4 484 111] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . LevelLog0.level_log ix <= UIntSize.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 485 4 485 112] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Cdsat_Trail_Trail_Type.t_trail) = self;
  var level : usize = level;
  var old' : Ghost.ghost_ty (borrowed (Cdsat_Trail_Trail_Type.t_trail));
  var _21 : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _22 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _27 : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
  {
    goto BB0
  }
  BB0 {
    old' <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 487 37 487 49] Ghost.new self);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    invariant { [#"/Users/xavier/Code/cdsat/src/trail.rs" 489 8 489 114] forall i : int . 0 <= i /\ i <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self)) -> Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * self))) i = Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * Ghost.inner old'))) i };
    invariant { [#"/Users/xavier/Code/cdsat/src/trail.rs" 490 20 490 36] Invariant0.invariant' ( * self) };
    invariant { [#"/Users/xavier/Code/cdsat/src/trail.rs" 491 20 491 34]  ^ self =  ^ Ghost.inner old' };
    invariant { [#"/Users/xavier/Code/cdsat/src/trail.rs" 492 20 492 66] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))) };
    invariant { [#"/Users/xavier/Code/cdsat/src/trail.rs" 493 20 493 39] Cdsat_Trail_Trail_Type.trail_level ( * self) >= level };
    goto BB3
  }
  BB3 {
    switch ([#"/Users/xavier/Code/cdsat/src/trail.rs" 494 14 494 32] level < Cdsat_Trail_Trail_Type.trail_level ( * self))
      | False -> goto BB8
      | True -> goto BB4
      end
  }
  BB4 {
    _22 <- Borrow.borrow_mut (Cdsat_Trail_Trail_Type.trail_assignments ( * self));
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self in Cdsat_Trail_Trail_Type.C_Trail ( ^ _22) b c) };
    _21 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 495 12 495 34] Pop0.pop _22);
    _22 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self in Cdsat_Trail_Trail_Type.C_Trail a ([#"/Users/xavier/Code/cdsat/src/trail.rs" 496 12 496 27] Cdsat_Trail_Trail_Type.trail_level ( * self) - ([#"/Users/xavier/Code/cdsat/src/trail.rs" 496 26 496 27] (1 : usize))) c) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 497 12 497 123] exists t : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . RestrictKindUnchanged0.restrict_kind_unchanged (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))) t = () \/ true };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 498 12 498 93] exists t : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . JustificationContains0.justification_contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) t = () \/ true };
    _27 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 499 25 499 80] Ghost.new (Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self)))));
    goto BB7
  }
  BB7 {
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self in Cdsat_Trail_Trail_Type.C_Trail a b _27) };
    _27 <- any Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 500 12 502 13] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self) ix -> Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * self))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)) = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments ( * Ghost.inner old'))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 503 12 503 105] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self) ix -> Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (IndexLogic0.index_logic ( * self) ix) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 504 12 504 93] let _ = RestrictIdempotent0.restrict_idempotent (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self)) + 1) in true };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 505 12 505 107] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( * Ghost.inner old') ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 506 26 506 55] JustifiedIsJustified0.justified_is_justified ( * self) };
    goto BB2
  }
  BB8 {
    assume { Resolve0.resolve self };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 509 22 509 41] level = Cdsat_Trail_Trail_Type.trail_level ( * self) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 511 12 511 91] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'))) (UIntSize.to_int level) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 513 8 513 61] let _ = RestrictSound0.restrict_sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'))) (UIntSize.to_int level) in true };
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Term_Impl8_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val negate [#"/Users/xavier/Code/cdsat/src/term.rs" 260 4 260 39] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 258 15 258 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 259 14 259 41] ShallowModel1.shallow_model result = Negate0.negate (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Term_Impl8_Negate
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg negate [#"/Users/xavier/Code/cdsat/src/term.rs" 260 4 260 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 258 15 258 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 259 14 259 41] ShallowModel1.shallow_model result = Negate0.negate (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  var self : Cdsat_Term_Value_Type.t_value = self;
  var b : bool;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    goto BB3
  }
  BB2 {
    absurd
  }
  BB3 {
    b <- Cdsat_Term_Value_Type.bool_0 self;
    _0 <- Cdsat_Term_Value_Type.C_Bool (not b);
    return _0
  }
  
end
module Cdsat_Trail_Impl9_AddDecision_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val add_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 389 4 389 65] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 384 15 384 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 386 4 386 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 385 14 385 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 387 4 387 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
end
module Cdsat_Trail_SeqUnique_Stub
  type t
  use seq.Seq
  predicate seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 710 0 710 46] (s : Seq.seq t)
end
module Cdsat_Trail_SeqUnique_Interface
  type t
  use seq.Seq
  predicate seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 710 0 710 46] (s : Seq.seq t)
  val seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 710 0 710 46] (s : Seq.seq t) : bool
    ensures { result = seq_unique s }
    
end
module Cdsat_Trail_SeqUnique
  type t
  use seq.Seq
  use prelude.Int
  predicate seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 710 0 710 46] (s : Seq.seq t) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 711 4 711 98] forall j : int . forall i : int . 0 <= i /\ i <= j /\ j < Seq.length s -> i <> j -> Seq.get s i <> Seq.get s j
  val seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 710 0 710 46] (s : Seq.seq t) : bool
    ensures { result = seq_unique s }
    
end
module Cdsat_Concrete_Impl2_IntoVec_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Trail_SeqUnique_Stub as SeqUnique0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel0
  val into_vec [#"/Users/xavier/Code/cdsat/src/concrete.rs" 357 4 357 40] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 353 4 353 75] forall e : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) e -> Contains1.contains (ShallowModel1.shallow_model result) e }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 354 4 354 94] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result) -> Contains0.contains (ShallowModel0.shallow_model self) (Seq.get (ShallowModel1.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 355 14 355 42] Seq.length (ShallowModel1.shallow_model result) = Fset.cardinal (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 356 14 356 33] SeqUnique0.seq_unique (ShallowModel1.shallow_model result) }
    
end
module Cdsat_Theory_Impl4_AddJustified_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    
end
module Cdsat_Theory_Impl4_AddJustified_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    
  val add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 390 15 390 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 391 15 391 36] Acceptable0.acceptable self t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 392 4 392 96] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 393 4 393 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Find0.find self a = Find0.find result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 394 14 394 36] Contains0.contains result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 395 14 395 49] Justification0.justification result (t, v) = just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 14 396 30] Invariant0.invariant' self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 397 14 397 40] IsJustified0.is_justified result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 398 14 398 63] LevelOf0.level_of result (t, v) = SetLevel0.set_level result just }
    ensures { result = add_justified self just t v }
    
  axiom add_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 390 15 390 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 391 15 391 36] Acceptable0.acceptable self t v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 392 4 392 96] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 398 14 398 63] LevelOf0.level_of (add_justified self just t v) (t, v) = SetLevel0.set_level (add_justified self just t v) just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 397 14 397 40] IsJustified0.is_justified (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 396 14 396 30] Invariant0.invariant' self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 395 14 395 49] Justification0.justification (add_justified self just t v) (t, v) = just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 394 14 394 36] Contains0.contains (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 393 4 393 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Find0.find self a = Find0.find (add_justified self just t v) a)
end
module Cdsat_Theory_Impl4_AddJustified
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 400 8 400 90] Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified just t v) (SetLevel0.set_level self just) self
  val add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 390 15 390 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 391 15 391 36] Acceptable0.acceptable self t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 392 4 392 96] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 393 4 393 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Find0.find self a = Find0.find result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 394 14 394 36] Contains0.contains result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 395 14 395 49] Justification0.justification result (t, v) = just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 14 396 30] Invariant0.invariant' self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 397 14 397 40] IsJustified0.is_justified result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 398 14 398 63] LevelOf0.level_of result (t, v) = SetLevel0.set_level result just }
    ensures { result = add_justified self just t v }
    
  axiom add_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 390 15 390 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 391 15 391 36] Acceptable0.acceptable self t v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 392 4 392 96] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 398 14 398 63] LevelOf0.level_of (add_justified self just t v) (t, v) = SetLevel0.set_level (add_justified self just t v) just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 397 14 397 40] IsJustified0.is_justified (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 396 14 396 30] Invariant0.invariant' self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 395 14 395 49] Justification0.justification (add_justified self just t v) (t, v) = just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 394 14 394 36] Contains0.contains (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 393 4 393 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Find0.find self a = Find0.find (add_justified self just t v) a)
end
module Cdsat_Theory_Impl4_AddJustified_Impl
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains0.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains0.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 399 4 399 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 390 15 390 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 391 15 391 36] Acceptable0.acceptable self t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 392 4 392 96] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 393 4 393 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Find0.find self a = Find0.find result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 394 14 394 36] Contains0.contains result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 395 14 395 49] Justification0.justification result (t, v) = just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 14 396 30] Invariant0.invariant' self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 397 14 397 40] IsJustified0.is_justified result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 398 14 398 63] LevelOf0.level_of result (t, v) = SetLevel0.set_level result just }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 400 8 400 90] Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified just t v) (SetLevel0.set_level self just) self
end
module Cdsat_Theory_Impl4_Ext_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 577 4 577 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl4_Ext_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 577 4 577 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail)
    
  val ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 577 4 577 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = ext self o }
    
end
module Cdsat_Theory_Impl4_Ext
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 577 4 577 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 578 8 584 9] if Level0.level self <= Level0.level o then
      forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self kv -> Find0.find self kv = Find0.find o kv
    else
      forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains o kv -> Find0.find o kv = Find0.find self kv
    
  val ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 577 4 577 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = ext self o }
    
end
module Cdsat_Theory_Impl4_JustStable_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Ext_Stub as Ext0
  function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_JustStable_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Ext_Stub as Ext0
  function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 26] Ext0.ext self o}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 590 15 590 32] Contains0.contains self kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 29] Contains0.contains o kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 593 14 593 59] Justification0.justification self kv = Justification0.justification o kv }
    ensures { result = just_stable self o kv }
    
  axiom just_stable_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, o : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 26] Ext0.ext self o) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 590 15 590 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 29] Contains0.contains o kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 593 14 593 59] Justification0.justification self kv = Justification0.justification o kv)
end
module Cdsat_Theory_Impl4_JustStable
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Ext_Stub as Ext0
  function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 587 4 587 12] ()
  val just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 26] Ext0.ext self o}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 590 15 590 32] Contains0.contains self kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 29] Contains0.contains o kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 593 14 593 59] Justification0.justification self kv = Justification0.justification o kv }
    ensures { result = just_stable self o kv }
    
  axiom just_stable_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, o : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 26] Ext0.ext self o) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 590 15 590 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 29] Contains0.contains o kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 593 14 593 59] Justification0.justification self kv = Justification0.justification o kv)
end
module Cdsat_Theory_Impl4_JustStable_Impl
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains0.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Ext as Ext0 with
    function Level0.level = Level0.level,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  let rec ghost function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 594 4 594 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 589 15 589 26] Ext0.ext self o}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 590 15 590 32] Contains0.contains self kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 591 15 591 29] Contains0.contains o kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 592 15 592 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 593 14 593 59] Justification0.justification self kv = Justification0.justification o kv }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 587 4 587 12] ()
end
module Cdsat_Trail_Impl9_TrailExtension_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 4 328 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl9_TrailExtension_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 4 328 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail)
    
  val trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 4 328 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = trail_extension self o }
    
end
module Cdsat_Trail_Impl9_TrailExtension
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  predicate trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 4 328 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 327 4 327 16] if Cdsat_Trail_Trail_Type.trail_level self <= Cdsat_Trail_Trail_Type.trail_level o then
      (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic o ix) /\ (forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) kv -> Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) kv = Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost o)) kv)
    else
      (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains o ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic o ix) /\ (forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost o)) kv -> Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost o)) kv = Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) kv)
    
  val trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 328 4 328 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = trail_extension self o }
    
end
module Cdsat_Trail_Impl9_LemmaAbsJust_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension_Stub as TrailExtension0
  function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_Impl9_LemmaAbsJust_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension_Stub as TrailExtension0
  function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 345 15 345 38] TrailExtension0.trail_extension self o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 347 14 347 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just }
    ensures { result = lemma_abs_just self o just }
    
  axiom lemma_abs_just_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, o : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 345 15 345 38] TrailExtension0.trail_extension self o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 347 14 347 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just)
end
module Cdsat_Trail_Impl9_LemmaAbsJust
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension_Stub as TrailExtension0
  function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 345 15 345 38] TrailExtension0.trail_extension self o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 347 14 347 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just }
    ensures { result = lemma_abs_just self o just }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, o : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . lemma_abs_just self o just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 12] if Seq.length just = 0 then
    ()
  else
    lemma_abs_just self o (Remove0.remove just (Seq.get just 0))
  )
  axiom lemma_abs_just_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, o : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 345 15 345 38] TrailExtension0.trail_extension self o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 347 14 347 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just)
end
module Cdsat_Trail_Impl9_LemmaAbsJust_Impl
  use prelude.Int
  use seq.Seq
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    predicate Contains0.contains = Contains3.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension as TrailExtension0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  let rec ghost function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 348 4 348 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 345 15 345 38] TrailExtension0.trail_extension self o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 347 14 347 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 344 14 344 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 343 4 343 12] if pure {Seq.length just = 0} then
      ()
    else
      let c' = Remove0.remove just (Seq.get just 0) in lemma_abs_just self o c'
    
end
module Core_Panicking_AssertKind_Type
  type t_assertkind  =
    | C_Eq
    | C_Ne
    | C_Match
    
end
module Cdsat_Term_Impl1_Sort_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val sort [#"/Users/xavier/Code/cdsat/src/term.rs" 46 4 46 37] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl1_Sort
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg sort [#"/Users/xavier/Code/cdsat/src/term.rs" 46 4 46 37] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Sort_Type.t_sort
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Sort_Type.t_sort;
  var self : Cdsat_Term_Term_Type.t_term = self;
  var s : Cdsat_Term_Sort_Type.t_sort;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Term_Type.C_Variable _ _ -> goto BB1
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB2
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB6
      | Cdsat_Term_Term_Type.C_Times _ _ -> goto BB7
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB8
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB9
      | Cdsat_Term_Term_Type.C_Conj _ _ -> goto BB10
      | Cdsat_Term_Term_Type.C_Neg _ -> goto BB11
      | Cdsat_Term_Term_Type.C_Disj _ _ -> goto BB12
      | Cdsat_Term_Term_Type.C_Impl _ _ -> goto BB13
      end
  }
  BB1 {
    goto BB14
  }
  BB2 {
    switch (Cdsat_Term_Term_Type.value_0 self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB3
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB4
      end
  }
  BB3 {
    goto BB15
  }
  BB4 {
    goto BB16
  }
  BB5 {
    absurd
  }
  BB6 {
    goto BB17
  }
  BB7 {
    _0 <- Cdsat_Term_Sort_Type.C_Rational;
    goto BB24
  }
  BB8 {
    goto BB18
  }
  BB9 {
    goto BB19
  }
  BB10 {
    goto BB20
  }
  BB11 {
    goto BB21
  }
  BB12 {
    goto BB22
  }
  BB13 {
    goto BB23
  }
  BB14 {
    s <- Cdsat_Term_Term_Type.variable_1 self;
    _0 <- s;
    goto BB24
  }
  BB15 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB16 {
    _0 <- Cdsat_Term_Sort_Type.C_Rational;
    goto BB24
  }
  BB17 {
    _0 <- Cdsat_Term_Sort_Type.C_Rational;
    goto BB24
  }
  BB18 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB19 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB20 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB21 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB22 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB23 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB24
  }
  BB24 {
    return _0
  }
  BB25 {
    goto BB3
  }
  BB26 {
    goto BB6
  }
  BB27 {
    goto BB8
  }
  BB28 {
    goto BB9
  }
  BB29 {
    goto BB10
  }
  BB30 {
    goto BB11
  }
  BB31 {
    goto BB12
  }
  BB32 {
    goto BB13
  }
  BB33 {
    goto BB7
  }
  BB34 {
    goto BB5
  }
  
end
module Cdsat_Term_Impl8_Sort_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val sort [#"/Users/xavier/Code/cdsat/src/term.rs" 216 4 216 30] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl8_Sort
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg sort [#"/Users/xavier/Code/cdsat/src/term.rs" 216 4 216 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Sort_Type.t_sort
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Sort_Type.t_sort;
  var self : Cdsat_Term_Value_Type.t_value = self;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- Cdsat_Term_Sort_Type.C_Rational;
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    _0 <- Cdsat_Term_Sort_Type.C_Boolean;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2049 16 2049 20] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 66 26 66 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl13_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 122 27 122 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2685 22 2685 26] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2685 28 2685 33] Inv1.inv index}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 123 26 123 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 124 26 124 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 125 26 125 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 126 26 126 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2685 4 2685 58] Inv2.inv result }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1824 21 1824 25] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1824 27 1824 32] Inv1.inv value}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 69 26 69 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 123 8 123 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Cdsat_Trail_Impl9_AddJustified_Interface
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel2
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 439 4 439 93] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 433 4 433 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 434 15 434 31] IsBool0.is_bool (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 435 4 435 92] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model into_vec) -> Contains0.contains ( * self) (Seq.get (ShallowModel1.shallow_model into_vec) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 436 4 436 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel2.shallow_model term) (ShallowModel0.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 437 4 437 145] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel1.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel2.shallow_model term, ShallowModel0.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 4 433 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 438 4 438 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
end
module Cdsat_Trail_Impl9_AddJustified
  use prelude.Borrow
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel9 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv11.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic3 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv11.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = usize,
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel11 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv12.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort3
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort2 with
    function Sort0.sort = Sort3.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort3.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort2.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort3.sort,
    function Sort1.sort = Sort2.sort
  clone Cdsat_Theory_Impl4_Len_Interface as Len1 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len1.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort3.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len1.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv11.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv11.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    function IndexLogic1.index_logic = IndexLogic3.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains1.contains = Contains2.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains1.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve5 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_TrailExtension as TrailExtension0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function Find0.find = Find0.find,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  use seq.Seq
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone Cdsat_Theory_Impl4_Ext as Ext0 with
    function Level0.level = Level0.level,
    predicate Contains0.contains = Contains3.contains,
    function Find0.find = Find0.find,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel3 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains3.contains,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Trail_Impl9_Invariant as Invariant2 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len1.len,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv11.inv
  use Core_Panicking_AssertKind_Type as Core_Panicking_AssertKind_Type
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_LemmaAbsJust as LemmaAbsJust0 with
    predicate TrailExtension0.trail_extension = TrailExtension0.trail_extension,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function Remove0.remove = Remove0.remove,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv10.inv,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel10.shallow_model,
    predicate Inv2.inv = Inv11.inv,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl13_IndexMut_Interface as IndexMut0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv7.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel8.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    predicate Inv2.inv = Inv8.inv,
    predicate Inv3.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Alloc_Vec_Impl12_Index_Interface as Index0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv6.inv
  clone Cdsat_Theory_Impl4_JustStable_Interface as JustStable0 with
    predicate Ext0.ext = Ext0.ext,
    predicate Contains0.contains = Contains3.contains,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_AddJustified as AddJustified0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains3.contains,
    function Find0.find = Find0.find,
    function Justification0.justification = Justification0.justification,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort2.sort,
    function Sort1.sort = Sort3.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate Contains1.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_MaxLevel_Interface as MaxLevel0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Alloc_Vec_Impl8_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Term_Impl14_Eq_Interface as Eq0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Term_Sort_Type.t_sort,
    type t2 = Cdsat_Term_Sort_Type.t_sort,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve4.resolve
  clone Cdsat_Term_Impl8_Sort_Interface as Sort1
  clone Cdsat_Term_Impl1_Sort_Interface as Sort0
  let rec cfg add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 439 4 439 93] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 433 4 433 40] Invariant2.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 434 15 434 31] IsBool0.is_bool (ShallowModel2.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 435 4 435 92] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model into_vec) -> Contains0.contains ( * self) (Seq.get (ShallowModel0.shallow_model into_vec) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 436 4 436 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel1.shallow_model term) (ShallowModel2.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 437 4 437 145] forall m : Cdsat_Theory_Model_Type.t_model . Invariant3.invariant' m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel0.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel1.shallow_model term, ShallowModel2.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 433 4 433 40] Invariant2.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 438 4 438 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Cdsat_Trail_Trail_Type.t_trail) = self;
  var into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) = into_vec;
  var term : Cdsat_Term_Term_Type.t_term = term;
  var val' : Cdsat_Term_Value_Type.t_value = val';
  var _13 : (Cdsat_Term_Sort_Type.t_sort, Cdsat_Term_Sort_Type.t_sort);
  var _15 : Cdsat_Term_Sort_Type.t_sort;
  var _18 : Cdsat_Term_Sort_Type.t_sort;
  var left_val : Cdsat_Term_Sort_Type.t_sort;
  var right_val : Cdsat_Term_Sort_Type.t_sort;
  var _23 : bool;
  var kind : Core_Panicking_AssertKind_Type.t_assertkind;
  var _31 : Cdsat_Term_Sort_Type.t_sort;
  var _33 : Cdsat_Term_Sort_Type.t_sort;
  var old' : Ghost.ghost_ty (Cdsat_Trail_Trail_Type.t_trail);
  var level : usize;
  var _40 : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _42 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var xxx : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var just : Ghost.ghost_ty (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value));
  var g : Ghost.ghost_ty (Cdsat_Theory_Assign_Type.t_assign);
  var _59 : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
  var a : Cdsat_Trail_Assignment_Type.t_assignment;
  var x : usize;
  var _73 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var _78 : ();
  var _79 : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _80 : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _81 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _84 : Ghost.ghost_ty ();
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _15 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 441 19 441 30] Sort0.sort term);
    goto BB5
  }
  BB5 {
    _18 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 441 32 441 42] Sort1.sort val');
    goto BB6
  }
  BB6 {
    _13 <- (_15, _18);
    left_val <- (let (a, _) = _13 in a);
    right_val <- (let (_, a) = _13 in a);
    assume { Resolve0.resolve _13 };
    _23 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 441 8 441 43] Eq0.eq left_val right_val);
    goto BB7
  }
  BB7 {
    switch (not _23)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    assume { Resolve3.resolve into_vec };
    assume { Resolve2.resolve self };
    kind <- Core_Panicking_AssertKind_Type.C_Eq;
    _31 <- left_val;
    _33 <- right_val;
    absurd
  }
  BB9 {
    old' <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 442 31 442 45] Ghost.new ( * self));
    goto BB10
  }
  BB10 {
    _42 <- into_vec;
    _40 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 443 35 443 44] Deref0.deref _42);
    goto BB11
  }
  BB11 {
    level <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 443 20 443 45] MaxLevel0.max_level ( * self) _40);
    goto BB12
  }
  BB12 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 445 22 445 50] UIntSize.to_int level <= Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) };
    xxx <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 446 42 446 74] Ghost.new (ShallowModel0.shallow_model into_vec));
    goto BB13
  }
  BB13 {
    just <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 448 12 448 73] Ghost.new (AbstractJustification0.abstract_justification ( * self) (ShallowModel0.shallow_model into_vec)));
    goto BB14
  }
  BB14 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 449 22 449 71] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner just) <= Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) };
    g <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 451 12 451 95] Ghost.new (Cdsat_Theory_Assign_Type.C_Justified (Ghost.inner just) (ShallowModel1.shallow_model term) (ShallowModel2.shallow_model val')));
    goto BB15
  }
  BB15 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 454 22 454 41] level <= Cdsat_Trail_Trail_Type.trail_level ( * self) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 456 22 456 35] Invariant0.invariant' (Ghost.inner g) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 457 22 457 41] JustifiedSound0.justified_sound (Ghost.inner g) };
    _59 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 460 12 460 93] Ghost.new (AddJustified0.add_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner just) (ShallowModel1.shallow_model term) (ShallowModel2.shallow_model val')));
    goto BB16
  }
  BB16 {
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self in Cdsat_Trail_Trail_Type.C_Trail a b _59) };
    _59 <- any Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 462 8 465 10] let _ = JustStable0.just_stable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost (Ghost.inner old'))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel1.shallow_model term, ShallowModel2.shallow_model val') in true };
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    a <- Cdsat_Trail_Assignment_Type.C_Assignment term val' (Cdsat_Trail_Reason_Type.C_Justified into_vec) level;
    term <- any Cdsat_Term_Term_Type.t_term;
    val' <- any Cdsat_Term_Value_Type.t_value;
    into_vec <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 469 8 469 45] Invariant1.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) };
    _73 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 470 16 470 39] Index0.index (Cdsat_Trail_Trail_Type.trail_assignments ( * self)) level);
    goto BB22
  }
  BB22 {
    x <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 470 16 470 45] Len0.len _73);
    goto BB23
  }
  BB23 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 471 22 471 28] UIntSize.to_int x > 0 };
    _81 <- Borrow.borrow_mut (Cdsat_Trail_Trail_Type.trail_assignments ( * self));
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c =  * self in Cdsat_Trail_Trail_Type.C_Trail ( ^ _81) b c) };
    _80 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 472 8 472 31] IndexMut0.index_mut _81 level);
    _81 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    goto BB24
  }
  BB24 {
    _79 <- Borrow.borrow_mut ( * _80);
    _80 <- { _80 with current = ( ^ _79) };
    _78 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 472 8 472 39] Push0.push _79 a);
    _79 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
    a <- any Cdsat_Trail_Assignment_Type.t_assignment;
    goto BB25
  }
  BB25 {
    assume { Resolve1.resolve _80 };
    assume { Resolve2.resolve self };
    _84 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 473 27 473 66] Ghost.new (LemmaAbsJust0.lemma_abs_just (Ghost.inner old') ( * self) (Ghost.inner xxx)));
    goto BB26
  }
  BB26 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 475 8 475 76] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (Ghost.inner old') ix -> Contains0.contains ( * self) ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 476 8 476 102] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (Ghost.inner old') ix -> IndexLogic0.index_logic (Ghost.inner old') ix = IndexLogic0.index_logic ( * self) ix };
    _0 <- ();
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 236 21 236 22] Inv0.inv a}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 236 21 236 22] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 233 4 233 10] ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 236 21 236 22] Inv0.inv a}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 236 21 236 22] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 235 14 235 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 22 243 23] Inv0.inv a}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 43 243 44] Inv0.inv b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 64 243 65] Inv0.inv c}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 22 243 23] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 43 243 44] Inv0.inv b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 64 243 65] Inv0.inv c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 238 4 238 10] ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 22 243 23] Inv0.inv a}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 43 243 44] Inv0.inv b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 64 243 65] Inv0.inv c}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 240 15 240 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 241 15 241 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 22 243 23] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 43 243 44] Inv0.inv b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 64 243 65] Inv0.inv c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 242 14 242 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 71 20 71 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 77 8 77 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 384 14 384 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 384 14 384 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 382 4 382 10] ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 384 14 384 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 384 14 384 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 389 15 389 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces b bc c}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 14 391 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 389 15 389 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 14 391 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl15_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl15_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 387 4 387 10] ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 389 15 389 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces b bc c}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 14 391 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 389 15 389 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 14 391 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val resolve_conflict [#"/Users/xavier/Code/cdsat/src/concrete.rs" 112 4 112 80] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 102 15 102 36] Seq.length (ShallowModel0.shallow_model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 99] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model conflict) -> Contains0.contains ( * trail) (Seq.get (ShallowModel0.shallow_model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 4 108 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (ShallowModel0.shallow_model conflict) in SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) conflict > 0 /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 109 4 109 126] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * trail) ix -> (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) = 0) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (IndexLogic0.index_logic ( * trail) ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 110 14 110 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 111 53] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    
end
module Cdsat_Concrete_Impl0_ResolveConflict
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.UIntSize
  use set.Fset
  use prelude.Slice
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial13 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl5_EqCmp_Interface as EqCmp1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym2_Interface as Antisym21 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym1_Interface as Antisym11 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Trans_Interface as Trans1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Refl_Interface as Refl1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGtLog_Interface as CmpGtLog1 with
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGeLog_Interface as CmpGeLog1 with
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLtLog_Interface as CmpLtLog1 with
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLeLog_Interface as CmpLeLog1 with
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel9 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic6 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX'
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate as Negate1 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Lemma_Interface as Lemma0 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate1.negate,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel13 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel17 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel13.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel16 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv12.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel0
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant4 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant4.invariant'
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level2 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level2.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains4 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains4.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate1.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Contains1.contains = Contains4.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level2.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv13.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl6_ShallowModel_Interface as ShallowModel4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  use seq.Seq
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel15 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Invariant as Invariant3 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel10 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel11 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel10.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic1 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv
  clone Cdsat_Trail_Impl9_Contains as Contains2 with
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision1 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification1 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic5.index_logic,
    function IndexLogic1.index_logic = IndexLogic6.index_logic,
    function IndexLogic2.index_logic = IndexLogic1.index_logic,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains0.contains,
    function Justification0.justification = Justification1.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains3.contains
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains1.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len
  clone Cdsat_Trail_SeqUnique as SeqUnique0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool as IsBool2 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Contains0.contains = Contains3.contains,
    predicate Contains1.contains = Contains4.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_LearnJustified as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool2.is_bool,
    predicate IsBool1.is_bool = IsBool1.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate1.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Lemma0.lemma' = Lemma0.lemma',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Interface as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate1.negate,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains4.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict1 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Interface as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Interface as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Contains0.contains = Contains4.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate1.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Interface as RestrictSound0 with
    predicate Sound0.sound = Sound1.sound,
    function Restrict0.restrict = Restrict1.restrict,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound2 with
    predicate Sound0.sound = Sound1.sound
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_ResolveSound_Interface as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains3.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains_Interface as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification1.justification,
    predicate Contains0.contains = Contains3.contains,
    predicate Contains1.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains4.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function Negate0.negate = Negate1.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel14 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Resolve0.resolve = Resolve3.resolve,
    function ShallowModel0.shallow_model = ShallowModel17.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel16.shallow_model,
    predicate Inv0.inv = Inv12.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel16.shallow_model,
    predicate Inv0.inv = Inv12.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel12 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel16.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv11.inv,
    function ShallowModel0.shallow_model = ShallowModel12.shallow_model,
    function IndexLogic0.index_logic = IndexLogic3.index_logic,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel13.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    predicate Inv0.inv = Inv11.inv,
    function ShallowModel1.shallow_model = ShallowModel12.shallow_model,
    function IndexLogic0.index_logic = IndexLogic3.index_logic
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Interface as SetMax0 with
    predicate Contains0.contains = Contains1.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl1_ShallowModel as ShallowModel0
  use set.Fset
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel7 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve6 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel5 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl8_Completed as Completed0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel15.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl8_Produces as Produces0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl8_ProducesTrans as ProducesTrans0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl8_ProducesRefl as ProducesRefl0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPost as IntoIterPost0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl3_IntoIterPre as IntoIterPre0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Cdsat_Trail_Impl9_Invariant as Invariant1 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Level0.level = Level2.level,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function IndexLogic0.index_logic = IndexLogic5.index_logic,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Contains0.contains = Contains2.contains,
    function IndexLogic1.index_logic = IndexLogic1.index_logic,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Contains0.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl9_AddJustified_Interface as AddJustified0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Contains0.contains = Contains2.contains,
    function ShallowModel2.shallow_model = ShallowModel11.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Impls0.impls = Impls0.impls,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains2.contains = Contains0.contains,
    predicate Unsat0.unsat = Unsat0.unsat
  clone Cdsat_Trail_IxToAbs_Interface as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone Cdsat_Trail_SeqToSet_Interface as SeqToSet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IxToAbs0.ix_to_abs = IxToAbs0.ix_to_abs,
    predicate Contains2.contains = Contains2.contains,
    predicate Contains3.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    axiom .
  clone Cdsat_Concrete_Impl2_IntoVec_Interface as IntoVec0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains1.contains,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains0.contains,
    predicate SeqUnique0.seq_unique = SeqUnique0.seq_unique,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Theory_Impl6_Backjump2 as Backjump20 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool2.is_bool,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Remove0.remove = Remove0.remove,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Sound1.sound = Sound2.sound,
    predicate Impls0.impls = Impls0.impls,
    function RestrictSound0.restrict_sound = RestrictSound0.restrict_sound,
    function TrailPlausible0.trail_plausible = TrailPlausible0.trail_plausible,
    function RestrictIdempotent0.restrict_idempotent = RestrictIdempotent0.restrict_idempotent,
    function NegateInvolutive0.negate_involutive = NegateInvolutive0.negate_involutive,
    function LearnJustified0.learn_justified = LearnJustified0.learn_justified,
    function Restrict0.restrict = Restrict1.restrict,
    function Negate0.negate = Negate1.negate,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Sound2.sound = Sound1.sound,
    predicate Contains1.contains = Contains4.contains,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate Invariant2.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Trail_AbstractJustificationInsert_Interface as AbstractJustificationInsert0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function Insert0.insert = Insert2.insert,
    predicate Contains2.contains = Contains3.contains,
    axiom .
  clone Cdsat_Trail_IxToAbsInsert_Interface as IxToAbsInsert0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    function Insert0.insert = Insert1.insert,
    function IxToAbs0.ix_to_abs = IxToAbs0.ix_to_abs,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function Insert1.insert = Insert2.insert,
    predicate Contains2.contains = Contains3.contains,
    axiom .
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone Cdsat_Theory_Impl6_Level as Level1 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl6_Resolvef as Resolvef0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Contains0.contains = Contains3.contains,
    function Justification0.justification = Justification1.justification,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsDecision0.is_decision = IsDecision1.is_decision,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Level0.level = Level1.level,
    function JustificationContains0.justification_contains = JustificationContains0.justification_contains,
    function ResolveSound0.resolve_sound = ResolveSound0.resolve_sound,
    function Remove0.remove = Remove0.remove,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Sound1.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level1.level = Level2.level,
    function Len0.len = Len0.len,
    predicate Contains1.contains = Contains4.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone Cdsat_Trail_Impl9_AddDecision_Interface as AddDecision0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel10.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Impls0.impls = Impls0.impls,
    predicate Unsat0.unsat = Unsat0.unsat
  clone Cdsat_Term_Impl8_Negate_Interface as Negate0 with
    function ShallowModel0.shallow_model = ShallowModel14.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    function ShallowModel1.shallow_model = ShallowModel10.shallow_model,
    function Negate0.negate = Negate1.negate
  clone Cdsat_Trail_Impl9_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict1.restrict,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate Contains0.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Contains1.contains = Contains4.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic4.index_logic,
    predicate Resolve0.resolve = Resolve6.resolve,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Core_Slice_Iter_Impl181_Next_Interface as Next1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type Item0.item = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv5.inv
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter1 with
    type i = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Inv0.inv = Inv1.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post
  clone Core_Slice_Impl0_Iter_Interface as Iter0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv11.inv,
    function ShallowModel0.shallow_model = ShallowModel13.shallow_model
  clone Alloc_Vec_Impl8_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv10.inv,
    function ShallowModel0.shallow_model = ShallowModel12.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    predicate Inv1.inv = Inv11.inv
  clone Cdsat_Theory_Impl4_JustifiedIsBool_Interface as JustifiedIsBool0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Trail_Impl9_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function Justification0.justification = Justification1.justification,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Contains1.contains = Contains3.contains,
    predicate Contains2.contains = Contains0.contains,
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision1.is_decision
  clone Cdsat_Theory_Impl4_IsInputInv_Interface as IsInputInv0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate IsInput0.is_input = IsInput0.is_input,
    function LevelOf0.level_of = LevelOf0.level_of,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl12_IsDecision_Interface as IsDecision0
  clone Cdsat_Trail_Impl12_IsFirstOrder_Interface as IsFirstOrder0 with
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl12_IsBool_Interface as IsBool0 with
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  clone Cdsat_Trail_Impl13_Clone_Interface as Clone0
  clone Cdsat_Trail_Impl11_Index_Interface as Index0 with
    predicate Contains0.contains = Contains2.contains,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv
  clone Cdsat_Trail_IxToAbsLevel_Interface as IxToAbsLevel0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IxToAbs0.ix_to_abs = IxToAbs0.ix_to_abs,
    function SetLevel0.set_level = SetLevel0.set_level,
    function SetMax0.set_max = SetMax0.set_max,
    function LevelLog0.level_log = LevelLog0.level_log,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Contains2.contains = Contains3.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level2.level,
    function Len0.len = Len0.len,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq as ExtEq0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value),
    predicate Inv0.inv = Inv9.inv,
    predicate Contains0.contains = Contains3.contains,
    axiom .
  clone Cdsat_Trail_IxToAbsRemove_Interface as IxToAbsRemove0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains1.contains,
    function Remove0.remove = Remove1.remove,
    function IxToAbs0.ix_to_abs = IxToAbs0.ix_to_abs,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function Remove1.remove = Remove0.remove,
    predicate Contains2.contains = Contains3.contains,
    axiom .
  clone Cdsat_Concrete_Impl2_PopLast_Interface as PopLast0 with
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function Remove0.remove = Remove1.remove,
    predicate Contains0.contains = Contains1.contains,
    function LeLog0.le_log = LeLog0.le_log
  clone Cdsat_Trail_Impl8_Level_Interface as Level0
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv6.inv
  clone Cdsat_Concrete_Impl2_Last_Interface as Last0 with
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Contains0.contains = Contains1.contains,
    function LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Std1_Vec_Impl11_Resolve as Resolve2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Resolve0.resolve = Resolve6.resolve
  clone Cdsat_Concrete_Impl2_Insert_Interface as Insert0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    function Insert0.insert = Insert1.insert
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Item0.item = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Logic_Ops_Impl6_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Alloc_Vec_Impl15_IntoIter_Interface as IntoIter0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv2.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Inv1.inv = Inv0.inv
  clone Cdsat_Concrete_Impl2_New_Interface as New0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Concrete_Solver_Type.t_solver
  let rec cfg resolve_conflict [#"/Users/xavier/Code/cdsat/src/concrete.rs" 112 4 112 80] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant1.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 102 15 102 36] Seq.length (ShallowModel2.shallow_model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 103 4 103 99] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel2.shallow_model conflict) -> Contains2.contains ( * trail) (Seq.get (ShallowModel2.shallow_model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 104 4 108 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (ShallowModel2.shallow_model conflict) in SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) conflict > 0 /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 109 4 109 126] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains ( * trail) ix -> (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) = 0) = IsDecision1.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (IndexLogic1.index_logic ( * trail) ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 41] Invariant1.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 110 14 110 34] Invariant1.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 111 4 111 53] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Cdsat_Concrete_Solver_Type.t_solver) = self;
  var trail : borrowed (Cdsat_Trail_Trail_Type.t_trail) = trail;
  var conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) = conflict;
  var heap : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
  var old_conflict : Ghost.ghost_ty (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var old_trail : Ghost.ghost_ty (borrowed (Cdsat_Trail_Trail_Type.t_trail));
  var iter : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var iter_old : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var produced : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _29 : ();
  var _30 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _31 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _32 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _35 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var a : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _38 : bool;
  var _39 : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var abs_cflct : Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
  var max_ix : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _47 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _48 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var conflict_level : usize;
  var _65 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _66 : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var ix : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var rem_level : usize;
  var _74 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var ix2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var a1 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _89 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _93 : bool;
  var _94 : bool;
  var _97 : usize;
  var _103 : Ghost.ghost_ty bool;
  var oheap : Ghost.ghost_ty (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var just : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _109 : Ghost.ghost_ty ();
  var old' : Ghost.ghost_ty (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value));
  var _113 : ();
  var _114 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var new : Ghost.ghost_ty (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value));
  var _120 : ();
  var _121 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _124 : Cdsat_Term_Value_Type.t_value;
  var _127 : bool;
  var _128 : bool;
  var _130 : bool;
  var _133 : ();
  var _134 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _136 : usize;
  var just1 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var iter1 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _155 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _157 : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var iter_old1 : Ghost.ghost_ty (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var produced1 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _166 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _167 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _168 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var __creusot_proc_iter_elem1 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _171 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var jix : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var j : Cdsat_Trail_Assignment_Type.t_assignment;
  var _175 : Cdsat_Trail_Assignment_Type.t_assignment;
  var _180 : ();
  var _181 : bool;
  var _182 : bool;
  var _184 : bool;
  var _187 : usize;
  var _189 : usize;
  var _192 : ();
  var _193 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _195 : usize;
  var _197 : ();
  var _198 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _200 : Cdsat_Term_Value_Type.t_value;
  var _209 : Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
  var old_heap : Ghost.ghost_ty (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  var iter2 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var iter_old2 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var produced2 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var _229 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _230 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _231 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var __creusot_proc_iter_elem2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _234 : Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
  var a2 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _237 : Ghost.ghost_ty ();
  var _245 : bool;
  var _246 : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    heap <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 119 37 119 56] New0.new ());
    goto BB4
  }
  BB4 {
    old_conflict <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 120 51 120 67] Ghost.new conflict);
    goto BB5
  }
  BB5 {
    old_trail <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 121 43 121 56] Ghost.new trail);
    goto BB6
  }
  BB6 {
    iter <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] IntoIter0.into_iter conflict);
    conflict <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB7
  }
  BB7 {
    iter_old <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] Ghost.new iter);
    goto BB8
  }
  BB8 {
    produced <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] Ghost.new (Seq.empty ));
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] Inv0.inv iter };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] Produces0.produces (Ghost.inner iter_old) (Ghost.inner produced) iter };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (Ghost.inner produced) a -> Contains1.contains (ShallowModel0.shallow_model heap) a };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced) -> Contains1.contains (ShallowModel0.shallow_model heap) (IndexLogic0.index_logic produced i) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model heap) a -> Contains0.contains (Ghost.inner produced) a };
    goto BB16
  }
  BB16 {
    _32 <- Borrow.borrow_mut iter;
    iter <-  ^ _32;
    _31 <- Borrow.borrow_mut ( * _32);
    _32 <- { _32 with current = ( ^ _31) };
    _30 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] Next0.next _31);
    _31 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
    goto BB17
  }
  BB17 {
    assume { Resolve1.resolve _32 };
    switch (_30)
      | Core_Option_Option_Type.C_None -> goto BB18
      | Core_Option_Option_Type.C_Some _ -> goto BB19
      end
  }
  BB18 {
    assume { Resolve2.resolve iter };
    goto BB24
  }
  BB19 {
    goto BB21
  }
  BB20 {
    absurd
  }
  BB21 {
    __creusot_proc_iter_elem <- Core_Option_Option_Type.some_0 _30;
    _35 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 123 8 123 80] Ghost.new (Seq.(++) (Ghost.inner produced) (Seq.singleton __creusot_proc_iter_elem)));
    goto BB22
  }
  BB22 {
    produced <- _35;
    _35 <- any Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    a <- __creusot_proc_iter_elem;
    _39 <- Borrow.borrow_mut heap;
    heap <-  ^ _39;
    _38 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 127 12 127 26] Insert0.insert _39 a);
    _39 <- any borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
    goto BB23
  }
  BB23 {
    _29 <- ();
    goto BB15
  }
  BB24 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 130 12 131 58] AbstractJustification0.abstract_justification ( * trail) (ShallowModel1.shallow_model old_conflict) = IxToAbs0.ix_to_abs ( * trail) (ShallowModel0.shallow_model heap) };
    goto BB25
  }
  BB25 {
    abs_cflct <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 134 12 134 97] Ghost.new (Cdsat_Theory_Conflict_Type.C_Conflict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (IxToAbs0.ix_to_abs ( * trail) (ShallowModel0.shallow_model heap))));
    goto BB26
  }
  BB26 {
    _48 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 136 22 136 33] Last0.last heap);
    goto BB27
  }
  BB27 {
    _47 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 136 22 136 42] Unwrap0.unwrap _48);
    _48 <- any Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
    goto BB28
  }
  BB28 {
    max_ix <- _47;
    conflict_level <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 137 29 137 43] Level0.level max_ix);
    goto BB29
  }
  BB29 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 138 8 138 80] exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model heap) ix /\ LevelLog0.level_log ix > 0 };
    goto BB30
  }
  BB30 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 140 22 140 41] 0 < UIntSize.to_int conflict_level };
    goto BB31
  }
  BB31 {
    goto BB32
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 8 141 57] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old_trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 142 20 142 47] Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct) = Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail)) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 143 20 143 37] Sound0.sound (Ghost.inner abs_cflct) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 144 20 144 41] Invariant0.invariant' (Ghost.inner abs_cflct) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 145 20 145 56] Level1.level (Ghost.inner abs_cflct) = UIntSize.to_int conflict_level };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 8 141 57] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model heap) ix -> LevelLog0.level_log ix <= UIntSize.to_int conflict_level };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 148 20 148 59] IxToAbs0.ix_to_abs ( * trail) (ShallowModel0.shallow_model heap) = Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 8 141 57] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model heap) a -> Contains2.contains ( * trail) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) a) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 141 8 141 57] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains ( * trail) ix /\ Contains1.contains (ShallowModel0.shallow_model heap) ix /\ IndexLogic1.index_logic ( * trail) ix = a) };
    goto BB36
  }
  BB36 {
    _66 <- Borrow.borrow_mut heap;
    heap <-  ^ _66;
    _65 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 155 29 155 44] PopLast0.pop_last _66);
    _66 <- any borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
    goto BB37
  }
  BB37 {
    switch (_65)
      | Core_Option_Option_Type.C_Some _ -> goto BB38
      | _ -> goto BB133
      end
  }
  BB38 {
    goto BB39
  }
  BB39 {
    ix <- Core_Option_Option_Type.some_0 _65;
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 156 26 156 61] LevelLog0.level_log ix = Level1.level (Ghost.inner abs_cflct) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 157 26 157 61] let _ = IxToAbsRemove0.ix_to_abs_remove ( * trail) ix (ShallowModel0.shallow_model heap) in true };
    goto BB40
  }
  BB40 {
    _74 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 158 34 158 45] Last0.last heap);
    goto BB41
  }
  BB41 {
    switch (_74)
      | Core_Option_Option_Type.C_None -> goto BB42
      | Core_Option_Option_Type.C_Some _ -> goto BB43
      end
  }
  BB42 {
    rem_level <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 24 160 25] (0 : usize));
    goto BB46
  }
  BB43 {
    goto BB44
  }
  BB44 {
    ix2 <- Core_Option_Option_Type.some_0 _74;
    rem_level <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 159 29 159 40] Level0.level ix2);
    goto BB45
  }
  BB45 {
    goto BB46
  }
  BB46 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 164 26 164 100] ExtEq0.ext_eq (IxToAbs0.ix_to_abs ( * trail) (ShallowModel0.shallow_model heap)) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) ix)) };
    goto BB47
  }
  BB47 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 165 26 165 78] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) = LevelLog0.level_log ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 166 27 166 57] let _ = IxToAbsLevel0.ix_to_abs_level ( * trail) (ShallowModel0.shallow_model heap) in true };
    goto BB48
  }
  BB48 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 167 26 167 104] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) ix)) = UIntSize.to_int rem_level };
    _89 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 169 20 169 29] Index0.index ( * trail) ix);
    goto BB49
  }
  BB49 {
    a1 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 169 20 169 37] Clone0.clone' _89);
    goto BB50
  }
  BB50 {
    _94 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 15 171 26] IsBool0.is_bool a1);
    goto BB54
  }
  BB51 {
    _93 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 15 171 52] false);
    goto BB53
  }
  BB52 {
    _97 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 30 171 40] Level0.level ix);
    goto BB55
  }
  BB53 {
    switch (_93)
      | False -> goto BB66
      | True -> goto BB56
      end
  }
  BB54 {
    switch (_94)
      | False -> goto BB51
      | True -> goto BB52
      end
  }
  BB55 {
    _93 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 171 30 171 52] _97 > rem_level);
    _97 <- any usize;
    goto BB53
  }
  BB56 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 172 30 172 69] IndexLogic1.index_logic ( * trail) ix = TermValue0.term_value a1 };
    _103 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 174 37 174 86] Ghost.new (let _ = Backjump20.backjump2 (Ghost.inner abs_cflct) (TermValue0.term_value a1) in true));
    goto BB57
  }
  BB57 {
    oheap <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 176 49 176 61] Ghost.new heap);
    goto BB58
  }
  BB58 {
    just <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 177 27 177 42] IntoVec0.into_vec heap);
    heap <- any Cdsat_Concrete_ConflictHeap_Type.t_conflictheap;
    goto BB59
  }
  BB59 {
    _109 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 180 20 180 88] Ghost.new (SeqToSet0.seq_to_set ( * trail) (ShallowModel2.shallow_model just) (ShallowModel3.shallow_model oheap)));
    goto BB60
  }
  BB60 {
    old' <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 182 70 182 128] Ghost.new (AbstractJustification0.abstract_justification ( * trail) (ShallowModel2.shallow_model just)));
    goto BB61
  }
  BB61 {
    _114 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _114) };
    _113 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 183 16 183 41] Restrict0.restrict _114 rem_level);
    _114 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    goto BB62
  }
  BB62 {
    new <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 184 70 184 128] Ghost.new (AbstractJustification0.abstract_justification ( * trail) (ShallowModel2.shallow_model just)));
    goto BB63
  }
  BB63 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 186 30 186 46] ExtEq0.ext_eq (Ghost.inner new) (Ghost.inner old') };
    _121 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _121) };
    _124 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 50 187 64] Negate0.negate (Cdsat_Trail_Assignment_Type.assignment_val a1));
    goto BB64
  }
  BB64 {
    _120 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 187 16 187 65] AddJustified0.add_justified _121 just (Cdsat_Trail_Assignment_Type.assignment_term a1) _124);
    _121 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    just <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    a1 <- (let Cdsat_Trail_Assignment_Type.C_Assignment a b c d = a1 in Cdsat_Trail_Assignment_Type.C_Assignment (any Cdsat_Term_Term_Type.t_term) b c d);
    _124 <- any Cdsat_Term_Value_Type.t_value;
    goto BB65
  }
  BB65 {
    assume { Resolve5.resolve trail };
    _0 <- ();
    goto BB136
  }
  BB66 {
    _128 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 192 15 192 33] IsFirstOrder0.is_first_order a1);
    goto BB70
  }
  BB67 {
    _127 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 192 15 192 52] false);
    goto BB69
  }
  BB68 {
    _130 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 192 37 192 52] IsDecision0.is_decision a1);
    goto BB71
  }
  BB69 {
    switch (_127)
      | False -> goto BB75
      | True -> goto BB72
      end
  }
  BB70 {
    switch (_128)
      | False -> goto BB67
      | True -> goto BB68
      end
  }
  BB71 {
    _127 <- _130;
    _130 <- any bool;
    goto BB69
  }
  BB72 {
    _134 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _134) };
    _136 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 193 31 193 41] Level0.level ix);
    goto BB73
  }
  BB73 {
    _133 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 193 16 193 46] Restrict0.restrict _134 ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 193 31 193 45] _136 - ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 193 44 193 45] (1 : usize))));
    _134 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    _136 <- any usize;
    goto BB74
  }
  BB74 {
    assume { Resolve5.resolve trail };
    _0 <- ();
    goto BB137
  }
  BB75 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 197 12 197 116] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . forall t : Cdsat_Theory_Trail_Type.t_trail . IsDecision1.is_decision t a -> not IsInput0.is_input t a /\ not IsJustified0.is_justified t a };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 198 12 198 98] IsDecision1.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (TermValue0.term_value a1) -> LevelLog0.level_log ix > UIntSize.to_int rem_level };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 201 12 201 67] not IsDecision1.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (TermValue0.term_value a1) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 203 12 206 14] let _ = IsInputInv0.is_input_inv (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (TermValue0.term_value a1) in true };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 207 12 207 67] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (TermValue0.term_value a1) };
    just1 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 208 23 208 46] Justification0.justification ( * trail) ix);
    goto BB76
  }
  BB76 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 210 12 210 78] let _ = JustifiedIsBool0.justified_is_bool (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (TermValue0.term_value a1) in true };
    _157 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 215 23 215 34] Deref0.deref just1);
    goto BB77
  }
  BB77 {
    _155 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 215 23 215 34] Iter0.iter _157);
    goto BB78
  }
  BB78 {
    iter1 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] IntoIter1.into_iter _155);
    _155 <- any Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex);
    goto BB79
  }
  BB79 {
    iter_old1 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] Ghost.new iter1);
    goto BB80
  }
  BB80 {
    produced1 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] Ghost.new (Seq.empty ));
    goto BB81
  }
  BB81 {
    goto BB82
  }
  BB82 {
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] Inv1.inv iter1 };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] Produces1.produces (Ghost.inner iter_old1) (Ghost.inner produced1) iter1 };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner produced1) -> not IsBool1.is_bool (let (_, a) = IndexLogic1.index_logic ( * trail) (IndexLogic2.index_logic produced1 i) in a) -> IsDecision1.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) (IndexLogic2.index_logic produced1 i)) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) (IndexLogic2.index_logic produced1 i)) < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) };
    goto BB83
  }
  BB83 {
    _168 <- Borrow.borrow_mut iter1;
    iter1 <-  ^ _168;
    _167 <- Borrow.borrow_mut ( * _168);
    _168 <- { _168 with current = ( ^ _167) };
    _166 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] Next1.next _167);
    _167 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    goto BB84
  }
  BB84 {
    assume { Resolve3.resolve _168 };
    switch (_166)
      | Core_Option_Option_Type.C_None -> goto BB85
      | Core_Option_Option_Type.C_Some _ -> goto BB86
      end
  }
  BB85 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 235 12 240 13] let j = AbstractJustification0.abstract_justification ( * trail) (ShallowModel2.shallow_model just1) in forall t : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains3.contains j t -> not IsBool1.is_bool (let (_, a) = t in a) -> IsDecision1.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) t -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) t < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) };
    goto BB106
  }
  BB86 {
    goto BB87
  }
  BB87 {
    __creusot_proc_iter_elem1 <- Core_Option_Option_Type.some_0 _166;
    _171 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 212 12 214 112] Ghost.new (Seq.(++) (Ghost.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)));
    goto BB88
  }
  BB88 {
    produced1 <- _171;
    _171 <- any Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    jix <- __creusot_proc_iter_elem1;
    _175 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 216 25 216 36] Index0.index ( * trail) jix);
    goto BB89
  }
  BB89 {
    j <- _175;
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 217 30 217 50] Contains2.contains ( * trail) jix };
    _182 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 218 19 218 37] IsFirstOrder0.is_first_order j);
    goto BB93
  }
  BB90 {
    _181 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 218 19 218 56] false);
    goto BB92
  }
  BB91 {
    _184 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 218 41 218 56] IsDecision0.is_decision j);
    goto BB94
  }
  BB92 {
    switch (_181)
      | False -> goto BB104
      | True -> goto BB95
      end
  }
  BB93 {
    switch (_182)
      | False -> goto BB90
      | True -> goto BB91
      end
  }
  BB94 {
    _181 <- _184;
    _184 <- any bool;
    goto BB92
  }
  BB95 {
    _187 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 219 23 219 34] Level0.level jix);
    goto BB96
  }
  BB96 {
    _189 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 219 38 219 48] Level0.level ix);
    goto BB97
  }
  BB97 {
    switch ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 219 23 219 48] _187 = _189)
      | False -> goto BB103
      | True -> goto BB98
      end
  }
  BB98 {
    assume { Resolve4.resolve just1 };
    _193 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _193) };
    _195 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 221 39 221 49] Level0.level ix);
    goto BB99
  }
  BB99 {
    _192 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 221 24 221 54] Restrict0.restrict _193 ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 221 39 221 53] _195 - ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 221 52 221 53] (1 : usize))));
    _193 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    _195 <- any usize;
    goto BB100
  }
  BB100 {
    _198 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _198) };
    _200 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 222 51 222 65] Negate0.negate (Cdsat_Trail_Assignment_Type.assignment_val a1));
    goto BB101
  }
  BB101 {
    _197 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 222 24 222 66] AddDecision0.add_decision _198 (Cdsat_Trail_Assignment_Type.assignment_term a1) _200);
    _198 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    a1 <- (let Cdsat_Trail_Assignment_Type.C_Assignment a b c d = a1 in Cdsat_Trail_Assignment_Type.C_Assignment (any Cdsat_Term_Term_Type.t_term) b c d);
    _200 <- any Cdsat_Term_Value_Type.t_value;
    goto BB102
  }
  BB102 {
    assume { Resolve5.resolve trail };
    _0 <- ();
    goto BB135
  }
  BB103 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 225 38 225 70] LevelLog0.level_log jix < LevelLog0.level_log ix };
    _180 <- ();
    goto BB105
  }
  BB104 {
    _180 <- ();
    goto BB105
  }
  BB105 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 229 16 232 17] not IsBool1.is_bool (let (_, a) = IndexLogic1.index_logic ( * trail) jix in a) -> IsDecision1.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) jix) -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) jix) < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 (Ghost.inner abs_cflct)) (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) };
    _29 <- ();
    goto BB82
  }
  BB106 {
    _209 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 243 24 243 66] Ghost.new (Resolvef0.resolvef (Ghost.inner abs_cflct) (TermValue0.term_value a1)));
    goto BB107
  }
  BB107 {
    abs_cflct <- _209;
    _209 <- any Ghost.ghost_ty (Cdsat_Theory_Conflict_Type.t_conflict);
    old_heap <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 245 48 245 60] Ghost.new heap);
    goto BB108
  }
  BB108 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 247 12 249 13] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel2.shallow_model just1) -> Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) (Seq.get (ShallowModel2.shallow_model just1) i)) };
    goto BB109
  }
  BB109 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 250 26 250 123] Fset.union (IxToAbs0.ix_to_abs ( * trail) (ShallowModel0.shallow_model heap)) (AbstractJustification0.abstract_justification ( * trail) (ShallowModel2.shallow_model just1)) = Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct) };
    goto BB110
  }
  BB110 {
    iter2 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] IntoIter0.into_iter just1);
    just1 <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB111
  }
  BB111 {
    iter_old2 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] Ghost.new iter2);
    goto BB112
  }
  BB112 {
    produced2 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] Ghost.new (Seq.empty ));
    goto BB113
  }
  BB113 {
    goto BB114
  }
  BB114 {
    goto BB115
  }
  BB115 {
    goto BB116
  }
  BB116 {
    goto BB117
  }
  BB117 {
    goto BB118
  }
  BB118 {
    goto BB119
  }
  BB119 {
    goto BB120
  }
  BB120 {
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] Inv0.inv iter2 };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] Produces0.produces (Ghost.inner iter_old2) (Ghost.inner produced2) iter2 };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model heap) ix -> LevelLog0.level_log ix <= UIntSize.to_int conflict_level };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model heap) a -> Contains2.contains ( * trail) a /\ Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) a) };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel3.shallow_model old_heap) ix -> Contains1.contains (ShallowModel0.shallow_model heap) ix };
    invariant { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 257 24 257 127] IxToAbs0.ix_to_abs ( * trail) (ShallowModel0.shallow_model heap) = Fset.union (IxToAbs0.ix_to_abs ( * trail) (ShallowModel3.shallow_model old_heap)) (AbstractJustification0.abstract_justification ( * trail) (Ghost.inner produced2)) };
    goto BB121
  }
  BB121 {
    _231 <- Borrow.borrow_mut iter2;
    iter2 <-  ^ _231;
    _230 <- Borrow.borrow_mut ( * _231);
    _231 <- { _231 with current = ( ^ _230) };
    _229 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] Next0.next _230);
    _230 <- any borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
    goto BB122
  }
  BB122 {
    assume { Resolve1.resolve _231 };
    switch (_229)
      | Core_Option_Option_Type.C_None -> goto BB123
      | Core_Option_Option_Type.C_Some _ -> goto BB124
      end
  }
  BB123 {
    assume { Resolve2.resolve iter2 };
    _29 <- ();
    goto BB130
  }
  BB124 {
    goto BB125
  }
  BB125 {
    __creusot_proc_iter_elem2 <- Core_Option_Option_Type.some_0 _229;
    _234 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 253 12 253 99] Ghost.new (Seq.(++) (Ghost.inner produced2) (Seq.singleton __creusot_proc_iter_elem2)));
    goto BB126
  }
  BB126 {
    produced2 <- _234;
    _234 <- any Ghost.ghost_ty (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex));
    a2 <- __creusot_proc_iter_elem2;
    _237 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 260 35 260 89] Ghost.new (IxToAbsInsert0.ix_to_abs_insert ( * trail) a2 (ShallowModel0.shallow_model heap)));
    goto BB127
  }
  BB127 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 261 30 261 83] AbstractJustificationInsert0.abstract_justification_insert ( * trail) a2 (ShallowModel2.shallow_model just1) = () };
    goto BB128
  }
  BB128 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 262 30 262 61] LevelLog0.level_log a2 <= LevelLog0.level_log ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/concrete.rs" 263 16 263 73] Contains3.contains (Cdsat_Theory_Conflict_Type.conflict_1 (Ghost.inner abs_cflct)) (IndexLogic1.index_logic ( * trail) a2) };
    _246 <- Borrow.borrow_mut heap;
    heap <-  ^ _246;
    _245 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 264 16 264 30] Insert0.insert _246 a2);
    _246 <- any borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap);
    goto BB129
  }
  BB129 {
    _29 <- ();
    goto BB120
  }
  BB130 {
    goto BB131
  }
  BB131 {
    goto BB132
  }
  BB132 {
    goto BB35
  }
  BB133 {
    assume { Resolve5.resolve trail };
    _0 <- ();
    goto BB134
  }
  BB134 {
    goto BB140
  }
  BB135 {
    goto BB137
  }
  BB136 {
    goto BB137
  }
  BB137 {
    goto BB138
  }
  BB138 {
    goto BB139
  }
  BB139 {
    goto BB140
  }
  BB140 {
    return _0
  }
  BB167 {
    assume { Resolve2.resolve iter };
    assume { Resolve5.resolve trail };
    goto BB20
  }
  BB168 {
    assume { Resolve5.resolve trail };
    goto BB20
  }
  BB169 {
    assume { Resolve4.resolve just1 };
    assume { Resolve5.resolve trail };
    goto BB20
  }
  BB170 {
    assume { Resolve2.resolve iter2 };
    assume { Resolve5.resolve trail };
    goto BB20
  }
  
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val solver [#"/Users/xavier/Code/cdsat/src/concrete.rs" 77 4 77 57] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_Answer_Type.t_answer
    
end
module Cdsat_Concrete_Impl0_Solver
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Slice
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel7 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic3 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Inv0.inv = Inv4.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone Cdsat_Trail_Impl9_AbstractJustification_Interface as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    function IndexLogic1.index_logic = IndexLogic3.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains2.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains1.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel5 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains3.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve6 with
    type t = Cdsat_Term_Value_Type.t_value
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve5 with
    type t = Cdsat_Term_Term_Type.t_term
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Cdsat_Trail_Impl9_AddDecision_Interface as AddDecision0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Impls0.impls = Impls0.impls,
    predicate Unsat0.unsat = Unsat0.unsat
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve3 with
    type t1 = Cdsat_Term_Term_Type.t_term,
    type t2 = Cdsat_Term_Value_Type.t_value,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Resolve1.resolve = Resolve6.resolve
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Concrete_Impl0_Decision_Interface as Decision0
  clone Cdsat_Concrete_Impl0_Sat_Interface as Sat0
  clone Cdsat_Concrete_Impl0_CanDeduce_Interface as CanDeduce0
  clone Cdsat_Concrete_Impl0_ResolveConflict_Interface as ResolveConflict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate Impls0.impls = Impls0.impls,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate Unsat0.unsat = Unsat0.unsat
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Cdsat_Concrete_Solver_Type.t_solver
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_MaxLevel_Interface as MaxLevel0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Alloc_Vec_Impl8_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Concrete_Impl0_ExtendNext_Interface as ExtendNext0
  let rec cfg solver [#"/Users/xavier/Code/cdsat/src/concrete.rs" 77 4 77 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_Answer_Type.t_answer
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Concrete_Answer_Type.t_answer;
  var self : borrowed (Cdsat_Concrete_Solver_Type.t_solver) = self;
  var trail : borrowed (Cdsat_Trail_Trail_Type.t_trail) = trail;
  var _4 : ();
  var _6 : ();
  var _7 : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var _8 : borrowed (Cdsat_Concrete_Solver_Type.t_solver);
  var _9 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var cflct : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _13 : usize;
  var _16 : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _18 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _19 : ();
  var _20 : borrowed (Cdsat_Concrete_Solver_Type.t_solver);
  var _21 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  var _25 : bool;
  var _28 : bool;
  var t : Cdsat_Term_Term_Type.t_term;
  var v : Cdsat_Term_Value_Type.t_value;
  var _33 : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value);
  var _34 : borrowed (Cdsat_Concrete_Solver_Type.t_solver);
  var _35 : ();
  var _36 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _8 <- Borrow.borrow_mut ( * self);
    self <- { self with current = ( ^ _8) };
    _9 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _9) };
    _7 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 80 37 80 60] ExtendNext0.extend_next _8 _9);
    _8 <- any borrowed (Cdsat_Concrete_Solver_Type.t_solver);
    _9 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    goto BB5
  }
  BB5 {
    switch (_7)
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      | _ -> goto BB13
      end
  }
  BB6 {
    goto BB7
  }
  BB7 {
    cflct <- Core_Option_Option_Type.some_0 _7;
    _7 <- (let Core_Option_Option_Type.C_Some a = _7 in Core_Option_Option_Type.C_Some (any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)));
    _18 <- cflct;
    _16 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 39 81 45] Deref0.deref _18);
    goto BB8
  }
  BB8 {
    _13 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 23 81 46] MaxLevel0.max_level ( * trail) _16);
    goto BB9
  }
  BB9 {
    switch ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 23 81 50] _13 > ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 49 81 50] (0 : usize)))
      | False -> goto BB12
      | True -> goto BB10
      end
  }
  BB10 {
    _20 <- Borrow.borrow_mut ( * self);
    self <- { self with current = ( ^ _20) };
    _21 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _21) };
    _19 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 82 24 82 59] ResolveConflict0.resolve_conflict _20 _21 cflct);
    _20 <- any borrowed (Cdsat_Concrete_Solver_Type.t_solver);
    _21 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    cflct <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB11
  }
  BB11 {
    _6 <- ();
    goto BB14
  }
  BB12 {
    assume { Resolve0.resolve cflct };
    assume { Resolve1.resolve trail };
    assume { Resolve2.resolve self };
    _0 <- Cdsat_Concrete_Answer_Type.C_Unsat;
    goto BB28
  }
  BB13 {
    _6 <- ();
    goto BB15
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    _25 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 87 20 87 37] CanDeduce0.can_deduce ( * self));
    goto BB17
  }
  BB17 {
    switch (not _25)
      | False -> goto BB19
      | True -> goto BB18
      end
  }
  BB18 {
    _28 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 92 15 92 25] Sat0.sat ( * self));
    goto BB20
  }
  BB19 {
    _4 <- ();
    goto BB3
  }
  BB20 {
    switch (_28)
      | False -> goto BB22
      | True -> goto BB21
      end
  }
  BB21 {
    assume { Resolve1.resolve trail };
    assume { Resolve2.resolve self };
    _0 <- Cdsat_Concrete_Answer_Type.C_Sat;
    goto BB30
  }
  BB22 {
    _34 <- Borrow.borrow_mut ( * self);
    self <- { self with current = ( ^ _34) };
    _33 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 95 29 95 44] Decision0.decision _34);
    _34 <- any borrowed (Cdsat_Concrete_Solver_Type.t_solver);
    goto BB23
  }
  BB23 {
    t <- (let (a, _) = _33 in a);
    _33 <- (let (a, b) = _33 in (any Cdsat_Term_Term_Type.t_term, b));
    v <- (let (_, a) = _33 in a);
    _33 <- (let (a, b) = _33 in (a, any Cdsat_Term_Value_Type.t_value));
    assume { Resolve3.resolve _33 };
    goto BB24
  }
  BB24 {
    _36 <- Borrow.borrow_mut ( * trail);
    trail <- { trail with current = ( ^ _36) };
    _35 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 96 16 96 40] AddDecision0.add_decision _36 t v);
    _36 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    t <- any Cdsat_Term_Term_Type.t_term;
    v <- any Cdsat_Term_Value_Type.t_value;
    goto BB25
  }
  BB25 {
    _4 <- ();
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB1
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module Core_Fmt_Rt_Alignment_Type
  type t_alignment  =
    | C_Left
    | C_Right
    | C_Center
    | C_Unknown
    
end
module Core_Fmt_Formatter_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Char
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Opaque
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Fmt_Rt_Alignment_Type as Core_Fmt_Rt_Alignment_Type
  type t_formatter  =
    | C_Formatter uint32 char (Core_Fmt_Rt_Alignment_Type.t_alignment) (Core_Option_Option_Type.t_option usize) (Core_Option_Option_Type.t_option usize) (borrowed dyn)
    
end
module Core_Fmt_Error_Type
  type t_error  =
    | C_Error
    
end
module Core_Fmt_Impl7_WriteStr_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  val write_str (self : borrowed (Core_Fmt_Formatter_Type.t_formatter)) (data : string) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_Impl7_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 9 270 14] (self : Cdsat_Concrete_Answer_Type.t_answer) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_Impl7_Fmt
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Fmt_Formatter_Type.t_formatter
  clone Core_Fmt_Impl7_WriteStr_Interface as WriteStr0
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  let rec cfg fmt [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 9 270 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_Answer_Type.t_answer) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error);
  var self : Cdsat_Concrete_Answer_Type.t_answer = self;
  var f : borrowed (Core_Fmt_Formatter_Type.t_formatter) = f;
  var _3 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _4 : string;
  var _6 : string;
  var _7 : string;
  {
    goto BB0
  }
  BB0 {
    _3 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _3) };
    switch (self)
      | Cdsat_Concrete_Answer_Type.C_Sat -> goto BB1
      | Cdsat_Concrete_Answer_Type.C_Unsat -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _7 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 9 270 14] "Unsat");
    _4 <- _7;
    goto BB5
  }
  BB3 {
    assume { Resolve0.resolve _3 };
    assume { Resolve0.resolve f };
    absurd
  }
  BB4 {
    _6 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 9 270 14] "Sat");
    _4 <- _6;
    goto BB5
  }
  BB5 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 9 270 14] WriteStr0.write_str _3 _4);
    _3 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _4 <- any string;
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve f };
    return _0
  }
  
end
module Cdsat_Concrete_AnswerDeepModel_Type
  type t_answerdeepmodel  =
    | C_Sat
    | C_Unsat
    
end
module Cdsat_Concrete_Impl11_DeepModel_Stub
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 31 270 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    
end
module Cdsat_Concrete_Impl11_DeepModel_Interface
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 31 270 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 31 270 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl11_DeepModel
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 31 270 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 31 270 40] match (self) with
      | Cdsat_Concrete_Answer_Type.C_Sat -> Cdsat_Concrete_AnswerDeepModel_Type.C_Sat
      | Cdsat_Concrete_Answer_Type.C_Unsat -> Cdsat_Concrete_AnswerDeepModel_Type.C_Unsat
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 31 270 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl8_Eq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] (self : Cdsat_Concrete_Answer_Type.t_answer) (rhs : Cdsat_Concrete_Answer_Type.t_answer) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Concrete_Impl8_Eq
  use prelude.Borrow
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone Cdsat_Concrete_Impl11_DeepModel as DeepModel1
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve1 with
    type t = Cdsat_Concrete_Answer_Type.t_answer
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = Cdsat_Concrete_Answer_Type.t_answer,
    type t2 = Cdsat_Concrete_Answer_Type.t_answer,
    predicate Resolve0.resolve = Resolve1.resolve,
    predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_Answer_Type.t_answer) (rhs : Cdsat_Concrete_Answer_Type.t_answer) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Concrete_Answer_Type.t_answer = self;
  var rhs : Cdsat_Concrete_Answer_Type.t_answer = rhs;
  var _4 : (Cdsat_Concrete_Answer_Type.t_answer, Cdsat_Concrete_Answer_Type.t_answer);
  {
    goto BB0
  }
  BB0 {
    _4 <- (self, rhs);
    switch (let (a, _) = _4 in a)
      | Cdsat_Concrete_Answer_Type.C_Sat -> goto BB1
      | Cdsat_Concrete_Answer_Type.C_Unsat -> goto BB4
      end
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Concrete_Answer_Type.C_Sat -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] false);
    goto BB8
  }
  BB4 {
    assume { Resolve0.resolve _4 };
    switch (let (_, a) = _4 in a)
      | Cdsat_Concrete_Answer_Type.C_Unsat -> goto BB5
      | _ -> goto BB3
      end
  }
  BB5 {
    goto BB7
  }
  BB6 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] true);
    goto BB8
  }
  BB7 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] true);
    goto BB8
  }
  BB8 {
    return _0
  }
  BB9 {
    assume { Resolve0.resolve _4 };
    goto BB3
  }
  
end
module Cdsat_Concrete_Impl10_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 27 270 29] (self : Cdsat_Concrete_Answer_Type.t_answer) : ()
    
end
module Cdsat_Concrete_Impl10_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 27 270 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_Answer_Type.t_answer) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Core_Fmt_Impl7_DebugTupleField1Finish_Interface
  use prelude.Borrow
  use prelude.Opaque
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  val debug_tuple_field1_finish (self : borrowed (Core_Fmt_Formatter_Type.t_formatter)) (name : string) (value1 : dyn) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Core_Fmt_Impl7_DebugTupleField2Finish_Interface
  use prelude.Borrow
  use prelude.Opaque
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  val debug_tuple_field2_finish (self : borrowed (Core_Fmt_Formatter_Type.t_formatter)) (name : string) (value1 : dyn) (value2 : dyn) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_Impl12_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] (self : Cdsat_Concrete_ExtendResult_Type.t_extendresult) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_Impl12_Fmt
  use prelude.Borrow
  use prelude.Opaque
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  clone Core_Fmt_Impl7_WriteStr_Interface as WriteStr0
  clone Core_Fmt_Impl7_DebugTupleField2Finish_Interface as DebugTupleField2Finish0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Fmt_Formatter_Type.t_formatter
  clone Core_Fmt_Impl7_DebugTupleField1Finish_Interface as DebugTupleField1Finish0
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  let rec cfg fmt [#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Concrete_ExtendResult_Type.t_extendresult) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error);
  var self : Cdsat_Concrete_ExtendResult_Type.t_extendresult = self;
  var f : borrowed (Core_Fmt_Formatter_Type.t_formatter) = f;
  var __self_0 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _5 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _7 : string;
  var _8 : dyn;
  var _10 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var __self_01 : Cdsat_Term_Term_Type.t_term;
  var __self_1 : Cdsat_Term_Value_Type.t_value;
  var _13 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _15 : string;
  var _16 : dyn;
  var _18 : dyn;
  var _20 : Cdsat_Term_Value_Type.t_value;
  var _21 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _23 : string;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict _ -> goto BB1
      | Cdsat_Concrete_ExtendResult_Type.C_Decision _ _ -> goto BB2
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> goto BB3
      end
  }
  BB1 {
    goto BB5
  }
  BB2 {
    goto BB7
  }
  BB3 {
    _21 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _21) };
    _23 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] "Satisfied");
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] WriteStr0.write_str _21 _23);
    _21 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    goto BB9
  }
  BB4 {
    assume { Resolve0.resolve f };
    absurd
  }
  BB5 {
    __self_0 <- Cdsat_Concrete_ExtendResult_Type.conflict_0 self;
    _5 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _5) };
    _7 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] "Conflict");
    _10 <- __self_0;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] DebugTupleField1Finish0.debug_tuple_field1_finish _5 _7 _8);
    _5 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _8 <- any dyn;
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve f };
    goto BB10
  }
  BB7 {
    __self_01 <- Cdsat_Concrete_ExtendResult_Type.decision_0 self;
    __self_1 <- Cdsat_Concrete_ExtendResult_Type.decision_1 self;
    _13 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _13) };
    _15 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] "Decision");
    _20 <- __self_1;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] DebugTupleField2Finish0.debug_tuple_field2_finish _13 _15 _16 _18);
    _13 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _16 <- any dyn;
    _18 <- any dyn;
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve f };
    goto BB10
  }
  BB9 {
    assume { Resolve0.resolve f };
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Cdsat_Trail_AssignmentDeepModel_Type
  use prelude.Int
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assignmentdeepmodel  =
    | C_AssignmentDeepModel (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value) (Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel) int
    
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int
  val eq (self : usize) (other : usize) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl17_DeepModel_Stub
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 31 15 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl17_DeepModel_Interface
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 31 15 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 31 15 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl17_DeepModel
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel3
  clone Cdsat_Trail_Impl22_DeepModel_Stub as DeepModel2
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel1
  clone Cdsat_Term_Impl5_DeepModel_Stub as DeepModel0
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 31 15 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 31 733 44] Cdsat_Trail_AssignmentDeepModel_Type.C_AssignmentDeepModel (DeepModel0.deep_model (Cdsat_Trail_Assignment_Type.assignment_term self)) (DeepModel1.deep_model (Cdsat_Trail_Assignment_Type.assignment_val self)) (DeepModel2.deep_model (Cdsat_Trail_Assignment_Type.assignment_reason self)) (DeepModel3.deep_model (Cdsat_Trail_Assignment_Type.assignment_level self))
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 31 15 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl14_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 16 15 25] (self : Cdsat_Trail_Assignment_Type.t_assignment) (rhs : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 16 15 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl14_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel10
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel9
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel8 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel9.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel7
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel5
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel6 with
    function DeepModel0.deep_model = DeepModel5.deep_model,
    function DeepModel1.deep_model = DeepModel10.deep_model,
    function DeepModel2.deep_model = DeepModel7.deep_model
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel4 with
    function DeepModel0.deep_model = DeepModel8.deep_model,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel9.deep_model,
    val Max0.mAX' = Max0.mAX'
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl17_DeepModel as DeepModel3 with
    function DeepModel0.deep_model = DeepModel6.deep_model,
    function DeepModel1.deep_model = DeepModel7.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model,
    function DeepModel3.deep_model = DeepModel5.deep_model
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel2 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone Core_Cmp_Impls_Impl21_Eq_Interface as Eq3 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone Cdsat_Trail_Impl19_Eq_Interface as Eq2 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl30_Eq_Interface as Eq1
  clone Cdsat_Term_Impl23_Eq_Interface as Eq0
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 16 15 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) (rhs : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 16 15 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var rhs : Cdsat_Trail_Assignment_Type.t_assignment = rhs;
  var _4 : bool;
  var _5 : bool;
  var _6 : bool;
  var _9 : Cdsat_Term_Term_Type.t_term;
  var _10 : bool;
  var _13 : Cdsat_Term_Value_Type.t_value;
  var _14 : bool;
  var _17 : Cdsat_Trail_Reason_Type.t_reason;
  var _18 : bool;
  var _21 : usize;
  {
    goto BB0
  }
  BB0 {
    _9 <- Cdsat_Trail_Assignment_Type.assignment_term rhs;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 18 18] Eq0.eq (Cdsat_Trail_Assignment_Type.assignment_term self) _9);
    goto BB10
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 24 20] false);
    goto BB3
  }
  BB2 {
    _21 <- Cdsat_Trail_Assignment_Type.assignment_level rhs;
    _18 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 24 4 24 20] Eq3.eq (Cdsat_Trail_Assignment_Type.assignment_level self) _21);
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 22 22] false);
    goto BB6
  }
  BB5 {
    _17 <- Cdsat_Trail_Assignment_Type.assignment_reason rhs;
    _14 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 22 4 22 22] Eq2.eq (Cdsat_Trail_Assignment_Type.assignment_reason self) _17);
    goto BB12
  }
  BB6 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB7 {
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 18 4 20 18] false);
    goto BB9
  }
  BB8 {
    _13 <- Cdsat_Trail_Assignment_Type.assignment_val rhs;
    _10 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 20 4 20 18] Eq1.eq (Cdsat_Trail_Assignment_Type.assignment_val self) _13);
    goto BB11
  }
  BB9 {
    switch (_5)
      | False -> goto BB4
      | True -> goto BB5
      end
  }
  BB10 {
    switch (_6)
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB11 {
    _5 <- _10;
    _10 <- any bool;
    goto BB9
  }
  BB12 {
    _4 <- _14;
    _14 <- any bool;
    goto BB6
  }
  BB13 {
    _0 <- _18;
    _18 <- any bool;
    goto BB3
  }
  
end
module Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 27 15 29] (self : Cdsat_Trail_Assignment_Type.t_assignment) : ()
    
end
module Cdsat_Trail_Impl16_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 27 15 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl0_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 74] (self : Cdsat_Trail_Assignment_Type.t_assignment) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Trail_Impl1_ShallowModel_Stub
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 40 4 40 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl1_ShallowModel_Interface
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 40 4 40 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 40 4 40 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl1_ShallowModel
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl17_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 40 4 40 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 41 8 41 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 40 4 40 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl21_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 27 47 29] (self : Cdsat_Trail_Reason_Type.t_reason) : ()
    
end
module Cdsat_Trail_Impl21_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 27 47 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Reason_Type.t_reason) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl2_ShallowModel_Stub
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 60 4 60 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl2_ShallowModel_Interface
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 60 4 60 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 60 4 60 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl2_ShallowModel
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 60 4 60 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 61 8 61 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 60 4 60 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl23_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 9 65 14] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Trail_Impl23_Fmt
  use prelude.Borrow
  use prelude.Opaque
  use prelude.Int
  use prelude.UIntSize
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Fmt_Formatter_Type.t_formatter
  clone Core_Fmt_Impl7_DebugTupleField2Finish_Interface as DebugTupleField2Finish0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg fmt [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 9 65 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error);
  var self : Cdsat_Trail_TrailIndex_Type.t_trailindex = self;
  var f : borrowed (Core_Fmt_Formatter_Type.t_formatter) = f;
  var _3 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _5 : string;
  var _6 : dyn;
  var _8 : usize;
  var _9 : dyn;
  var _11 : usize;
  {
    goto BB0
  }
  BB0 {
    _3 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _3) };
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 65 9 65 14] "TrailIndex");
    _8 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self;
    _11 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 self;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 65 9 65 14] DebugTupleField2Finish0.debug_tuple_field2_finish _3 _5 _6 _9);
    _3 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _6 <- any dyn;
    _9 <- any dyn;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve f };
    return _0
  }
  
end
module Cdsat_Trail_Impl24_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 16 65 25] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 16 65 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl24_Eq
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel3
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel2
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int,
    function DeepModel0.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone Core_Cmp_Impls_Impl21_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 16 65 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 16 65 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_TrailIndex_Type.t_trailindex = self;
  var rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex = rhs;
  var _4 : bool;
  var _7 : usize;
  var _8 : bool;
  var _11 : usize;
  {
    goto BB0
  }
  BB0 {
    _7 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 rhs;
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 66 22 66 27] Eq0.eq (Cdsat_Trail_TrailIndex_Type.trailindex_0 self) _7);
    goto BB4
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 66 22 66 38] false);
    goto BB3
  }
  BB2 {
    _11 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 rhs;
    _8 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 66 29 66 38] Eq0.eq (Cdsat_Trail_TrailIndex_Type.trailindex_1 self) _11);
    goto BB5
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _0 <- _8;
    _8 <- any bool;
    goto BB3
  }
  
end
module Cdsat_Trail_Impl26_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 27 65 29] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl26_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 27 65 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Trail_Impl27_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 31 65 36] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 31 65 36] result = self }
    
end
module Cdsat_Trail_Impl27_Clone
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone Core_Clone_Impls_Impl5_Clone_Interface as Clone0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 31 65 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 31 65 36] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var self : Cdsat_Trail_TrailIndex_Type.t_trailindex = self;
  var _3 : usize;
  var _5 : usize;
  var _6 : usize;
  var _8 : usize;
  {
    goto BB0
  }
  BB0 {
    _5 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 self;
    _3 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 66 22 66 27] Clone0.clone' _5);
    goto BB1
  }
  BB1 {
    _8 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 self;
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 66 29 66 38] Clone0.clone' _8);
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Trail_TrailIndex_Type.C_TrailIndex _3 _6;
    _3 <- any usize;
    _6 <- any usize;
    return _0
  }
  
end
module CreusotContracts_Logic_Ord_Impl3_CmpLog_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl3_CmpLog_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLog
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 76 12 85 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Core_Cmp_Impls_Impl55_Cmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl3_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  val cmp (self : usize) (other : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 44 26 44 85] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module Cdsat_Trail_Impl4_Cmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  val cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 77 4 77 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 76 14 76 44] result = CmpLog0.cmp_log self other }
    
end
module Cdsat_Trail_Impl4_Cmp
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog2
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog2.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym21 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym11 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_EqCmp as EqCmp0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym2 as Antisym20 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym1 as Antisym10 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Trans as Trans0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Refl as Refl0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpGtLog as CmpGtLog0 with
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpGeLog as CmpGeLog0 with
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpLtLog as CmpLtLog0 with
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpLeLog as CmpLeLog0 with
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl3_CmpLog as CmpLog1
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone Core_Cmp_Impls_Impl55_Cmp_Interface as Cmp0 with
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  let rec cfg cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 77 4 77 43] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 76 14 76 44] result = CmpLog0.cmp_log self other }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Cmp_Ordering_Type.t_ordering;
  var self : Cdsat_Trail_TrailIndex_Type.t_trailindex = self;
  var other : Cdsat_Trail_TrailIndex_Type.t_trailindex = other;
  var _4 : Core_Cmp_Ordering_Type.t_ordering;
  var _7 : usize;
  var _11 : usize;
  {
    goto BB0
  }
  BB0 {
    _7 <- Cdsat_Trail_TrailIndex_Type.trailindex_0 other;
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 78 14 78 34] Cmp0.cmp (Cdsat_Trail_TrailIndex_Type.trailindex_0 self) _7);
    goto BB1
  }
  BB1 {
    switch (_4)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB2
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB3
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB4
      end
  }
  BB2 {
    goto BB6
  }
  BB3 {
    _11 <- Cdsat_Trail_TrailIndex_Type.trailindex_1 other;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 81 31 81 51] Cmp0.cmp (Cdsat_Trail_TrailIndex_Type.trailindex_1 self) _11);
    goto BB8
  }
  BB4 {
    goto BB7
  }
  BB5 {
    absurd
  }
  BB6 {
    _0 <- Core_Cmp_Ordering_Type.C_Less;
    goto BB9
  }
  BB7 {
    _0 <- Core_Cmp_Ordering_Type.C_Greater;
    goto BB9
  }
  BB8 {
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Cdsat_Trail_Impl3_PartialCmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  val partial_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 70 4 70 59] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 69 14 69 50] result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log self other) }
    
end
module Cdsat_Trail_Impl3_PartialCmp
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym21 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym11 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog1 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_EqCmp as EqCmp0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym2 as Antisym20 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym1 as Antisym10 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Trans as Trans0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Refl as Refl0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpGtLog as CmpGtLog0 with
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpGeLog as CmpGeLog0 with
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpLtLog as CmpLtLog0 with
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_CmpLeLog as CmpLeLog0 with
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Trail_Impl4_Cmp_Interface as Cmp0 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  let rec cfg partial_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 70 4 70 59] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 69 14 69 50] result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log self other) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering);
  var self : Cdsat_Trail_TrailIndex_Type.t_trailindex = self;
  var other : Cdsat_Trail_TrailIndex_Type.t_trailindex = other;
  var _4 : Core_Cmp_Ordering_Type.t_ordering;
  {
    goto BB0
  }
  BB0 {
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 71 13 71 28] Cmp0.cmp self other);
    goto BB1
  }
  BB1 {
    _0 <- Core_Option_Option_Type.C_Some _4;
    _4 <- any Core_Cmp_Ordering_Type.t_ordering;
    return _0
  }
  
end
module Cdsat_Trail_Impl6_ShallowModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 155 4 155 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl6_ShallowModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 155 4 155 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 155 4 155 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl6_ShallowModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 155 4 155 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 156 8 156 12] self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 155 4 155 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl9_New_Interface
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val new [#"/Users/xavier/Code/cdsat/src/trail.rs" 204 4 204 50] (inputs : Alloc_Vec_Vec_Type.t_vec (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value) (Alloc_Alloc_Global_Type.t_global)) : Cdsat_Trail_Trail_Type.t_trail
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 202 14 202 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 203 4 203 36] Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost result)) }
    
end
module Cdsat_Trail_Impl9_Len_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val len [#"/Users/xavier/Code/cdsat/src/trail.rs" 217 4 217 30] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 216 14 216 50] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) }
    
end
module Cdsat_Trail_Impl9_Len
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  let rec cfg len [#"/Users/xavier/Code/cdsat/src/trail.rs" 217 4 217 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 216 14 216 50] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : Cdsat_Trail_Trail_Type.t_trail = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 218 8 218 30] Len0.len (Cdsat_Trail_Trail_Type.trail_assignments self));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Trail_Impl9_Unsat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 30] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl9_Unsat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 30] (self : Cdsat_Trail_Trail_Type.t_trail)
  val unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 30] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Trail_Impl9_Unsat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 30] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 222 4 222 16] Unsat0.unsat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 223 4 223 30] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl4_Sat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 630 4 630 28] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl4_Sat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 630 4 630 28] (self : Cdsat_Theory_Trail_Type.t_trail)
  val sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 630 4 630 28] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Theory_Impl4_Sat
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 630 4 630 28] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 631 8 631 56] exists m : Cdsat_Theory_Model_Type.t_model . SatisfiedBy0.satisfied_by self m
  val sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 630 4 630 28] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl9_Sat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 229 4 229 28] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl9_Sat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 229 4 229 28] (self : Cdsat_Trail_Trail_Type.t_trail)
  val sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 229 4 229 28] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl9_Sat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Sat_Stub as Sat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 229 4 229 28] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 228 4 228 16] Sat0.sat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 229 4 229 28] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl9_JustifiedLevel_Stub
  use prelude.Ghost
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function justified_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 4 269 44] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl9_JustifiedLevel_Interface
  use prelude.Ghost
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function justified_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 4 269 44] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val justified_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 4 269 44] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 266 15 266 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 62] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 133] forall x : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) x -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) x <= LevelLog0.level_log ix }
    ensures { result = justified_level self ix }
    
  axiom justified_level_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 266 15 266 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 62] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 133] forall x : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) x -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) x <= LevelLog0.level_log ix)
end
module Cdsat_Trail_Impl9_JustifiedLevel
  use prelude.Ghost
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function justified_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 4 269 44] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 265 4 265 12] ()
  val justified_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 4 269 44] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 266 15 266 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 62] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 133] forall x : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) x -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) x <= LevelLog0.level_log ix }
    ensures { result = justified_level self ix }
    
  axiom justified_level_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 266 15 266 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 62] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 133] forall x : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) x -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) x <= LevelLog0.level_log ix)
end
module Cdsat_Trail_Impl9_JustifiedLevel_Impl
  use prelude.Ghost
  use prelude.Int
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant3 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv3.inv,
    predicate Contains0.contains = Contains3.contains,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Interface as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant3.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel4 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains1 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains3.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Theory_Impl4_Contains as Contains2 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains2.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    function IndexLogic2.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains3.contains,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains0.contains
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound0.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  let rec ghost function justified_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 269 4 269 44] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 266 15 266 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 267 4 267 62] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 268 4 268 133] forall x : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) x -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) x <= LevelLog0.level_log ix }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 265 4 265 12] ()
end
module Cdsat_Trail_Impl9_AbstractAssign_Stub
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 4 292 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
end
module Cdsat_Trail_Impl9_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 4 292 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
  val abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 4 292 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    ensures { result = abstract_assign self a }
    
end
module Cdsat_Trail_Impl9_AbstractAssign
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 4 292 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 293 8 303 9] match (Cdsat_Trail_Assignment_Type.assignment_reason a) with
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Theory_Assign_Type.C_Input (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Theory_Assign_Type.C_Decision (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Justified just -> Cdsat_Theory_Assign_Type.C_Justified (AbstractJustification0.abstract_justification self (ShallowModel2.shallow_model just)) (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      end
  val abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 292 4 292 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    ensures { result = abstract_assign self a }
    
end
module Cdsat_Trail_Impl9_AbsJustCons_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl9_AbsJustCons_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 358 15 358 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 14 360 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_cons self just elem }
    
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 358 15 358 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 360 14 360 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustCons
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 358 15 358 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 14 360 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_cons self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_cons self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 362 8 362 10] ())
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 358 15 358 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 360 14 360 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustCons_Impl
  use prelude.Int
  use seq.Seq
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  let rec ghost function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 361 4 361 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 358 15 358 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 14 360 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 357 14 357 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 362 8 362 10] ()
end
module Cdsat_Trail_Impl9_AbsJustSnoc_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl9_AbsJustSnoc_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_snoc self just elem }
    
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustSnoc
  use prelude.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_AbsJustCons_Stub as AbsJustCons0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_snoc self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_snoc self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 365 4 365 12] if just = Seq.empty  then
    ()
  else
    let j = Seq.snoc just elem in let _ = AbsJustCons0.abs_just_cons self (SeqExt.subsequence j 1 (Seq.length j)) (Seq.get j 0) in abs_just_snoc self (SeqExt.subsequence just 1 (Seq.length just)) elem
  )
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustSnoc_Impl
  use prelude.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel3 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel2 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv2.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Cdsat_Trail_Impl9_AbsJustCons as AbsJustCons0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  let rec ghost function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    variant {[#"/Users/xavier/Code/cdsat/src/trail.rs" 366 14 366 24] Seq.length just}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 365 4 365 12] if pure {just = Seq.empty } then
      ()
    else
      let j = Seq.snoc just elem in let _ = AbsJustCons0.abs_just_cons self (SeqExt.subsequence j 1 (Seq.length j)) (Seq.get j 0) in abs_just_snoc self (SeqExt.subsequence just 1 (Seq.length just)) elem
    
end
module Cdsat_Trail_Impl9_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 380 4 380 39] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
end
module Cdsat_Trail_Impl9_Level
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  let rec cfg level [#"/Users/xavier/Code/cdsat/src/trail.rs" 380 4 380 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : Cdsat_Trail_Trail_Type.t_trail = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Trail_Trail_Type.trail_level self;
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 172 20 172 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel1 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 178 20 178 34] ShallowModel0.shallow_model self = ShallowModel2.shallow_model (ShallowModel1.shallow_model res)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 86 0 154 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2749 17 2749 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 86 0 154 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2749 4 2749 40] Inv1.inv result }
    
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = a
  val eq (self : a) (other : b) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs" 1448 15 1448 19] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs" 1448 21 1448 26] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module Cdsat_Trail_Impl9_IndexOf_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val index_of [#"/Users/xavier/Code/cdsat/src/trail.rs" 397 4 397 65] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Term_Term_Type.t_term) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl9_IndexOf
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv11.inv,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel5
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel4
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel3
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel3.deep_model,
    function DeepModel1.deep_model = DeepModel4.deep_model,
    function DeepModel2.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = slice (Cdsat_Trail_Assignment_Type.t_assignment)
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = slice (Cdsat_Trail_Assignment_Type.t_assignment),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = slice (Cdsat_Trail_Assignment_Type.t_assignment)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = slice (Cdsat_Trail_Assignment_Type.t_assignment),
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel11 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv12.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = slice (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = slice (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = slice (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = slice (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv11.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel1 with
    type t = Cdsat_Term_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv6.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Core_Option_Option_Type.t_option (Cdsat_Trail_Assignment_Type.t_assignment)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Core_Option_Option_Type.t_option (Cdsat_Trail_Assignment_Type.t_assignment),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel9 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX'
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel7 with
    type t = slice (Cdsat_Trail_Assignment_Type.t_assignment),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv10.inv,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel6 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel8 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment),
    type ShallowModelTy0.shallowModelTy = slice (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq1.to_ref_seq,
    predicate Inv0.inv = Inv10.inv,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel11.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel2 with
    type t = slice (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface as ToRefSeq0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv8.inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel3 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = slice (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl15_Produces as Produces0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ToRefSeq0.to_ref_seq = ToRefSeq0.to_ref_seq,
    predicate Inv0.inv = Inv8.inv,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone CreusotContracts_Std1_Slice_Impl15_ProducesTrans as ProducesTrans0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl15_ProducesRefl as ProducesRefl0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment)
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost as IntoIterPost1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre as IntoIterPre1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Std1_Slice_Impl15_Completed as Completed0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Resolve0.resolve = Resolve0.resolve,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost as IntoIterPost0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre as IntoIterPre0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Core_Cmp_Impls_Impl9_Eq_Interface as Eq0 with
    type a = Cdsat_Term_Term_Type.t_term,
    type b = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv6.inv,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  clone Core_Slice_Iter_Impl181_Next_Interface as Next1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type Item0.item = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv5.inv
  clone Alloc_Vec_Impl16_IntoIter_Interface as IntoIter1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Inv0.inv = Inv3.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post,
    predicate Inv1.inv = Inv4.inv
  clone Core_Slice_Iter_Impl181_Next_Interface as Next0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type Item0.item = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv2.inv
  clone Alloc_Vec_Impl16_IntoIter_Interface as IntoIter0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Inv0.inv = Inv0.inv,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Inv1.inv = Inv1.inv
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  let rec cfg index_of [#"/Users/xavier/Code/cdsat/src/trail.rs" 397 4 397 65] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Term_Term_Type.t_term) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var self : Cdsat_Trail_Trail_Type.t_trail = self;
  var a : Cdsat_Term_Term_Type.t_term = a;
  var level : usize;
  var _5 : Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var iter : Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _8 : ();
  var _10 : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _11 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)));
  var _12 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)));
  var assignments : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var offset : usize;
  var _18 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment);
  var iter1 : Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment);
  var _22 : Core_Option_Option_Type.t_option (Cdsat_Trail_Assignment_Type.t_assignment);
  var _23 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment));
  var _24 : borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment));
  var asgn : Cdsat_Trail_Assignment_Type.t_assignment;
  var _29 : bool;
  {
    goto BB0
  }
  BB0 {
    level <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 398 24 398 25] (0 : usize));
    _5 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 399 27 399 44] IntoIter0.into_iter (Cdsat_Trail_Trail_Type.trail_assignments self));
    goto BB1
  }
  BB1 {
    iter <- _5;
    _5 <- any Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _12 <- Borrow.borrow_mut iter;
    iter <-  ^ _12;
    _11 <- Borrow.borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _10 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 399 27 399 44] Next0.next _11);
    _11 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)));
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _12 };
    switch (_10)
      | Core_Option_Option_Type.C_None -> goto BB5
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      end
  }
  BB5 {
    goto BB8
  }
  BB6 {
    assignments <- Core_Option_Option_Type.some_0 _10;
    offset <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 400 29 400 30] (0 : usize));
    _18 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 401 24 401 35] IntoIter1.into_iter assignments);
    goto BB9
  }
  BB7 {
    absurd
  }
  BB8 {
    _0 <- Core_Option_Option_Type.C_None;
    goto BB19
  }
  BB9 {
    iter1 <- _18;
    _18 <- any Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment);
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    _24 <- Borrow.borrow_mut iter1;
    iter1 <-  ^ _24;
    _23 <- Borrow.borrow_mut ( * _24);
    _24 <- { _24 with current = ( ^ _23) };
    _22 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 401 24 401 35] Next1.next _23);
    _23 <- any borrowed (Core_Slice_Iter_Iter_Type.t_iter (Cdsat_Trail_Assignment_Type.t_assignment));
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve _24 };
    switch (_22)
      | Core_Option_Option_Type.C_None -> goto BB13
      | Core_Option_Option_Type.C_Some _ -> goto BB14
      end
  }
  BB13 {
    goto BB15
  }
  BB14 {
    asgn <- Core_Option_Option_Type.some_0 _22;
    _29 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 402 19 402 34] Eq0.eq (Cdsat_Trail_Assignment_Type.assignment_term asgn) a);
    goto BB16
  }
  BB15 {
    level <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 407 12 407 22] level + ([#"/Users/xavier/Code/cdsat/src/trail.rs" 407 21 407 22] (1 : usize)));
    _8 <- ();
    goto BB2
  }
  BB16 {
    switch (_29)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    _0 <- Core_Option_Option_Type.C_Some (Cdsat_Trail_TrailIndex_Type.C_TrailIndex level offset);
    goto BB19
  }
  BB18 {
    offset <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 405 16 405 27] offset + ([#"/Users/xavier/Code/cdsat/src/trail.rs" 405 26 405 27] (1 : usize)));
    _8 <- ();
    goto BB10
  }
  BB19 {
    return _0
  }
  BB21 {
    goto BB7
  }
  BB22 {
    goto BB7
  }
  
end
module Cdsat_Trail_IndexIterator_Type
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  type t_indexiterator  =
    | C_IndexIterator (borrowed (Cdsat_Trail_Trail_Type.t_trail)) (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  let function indexiterator_trail (self : t_indexiterator) : borrowed (Cdsat_Trail_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IndexIterator a _ -> a
      end
end
module Cdsat_Trail_Impl9_Indices_Interface
  use prelude.Borrow
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val indices [#"/Users/xavier/Code/cdsat/src/trail.rs" 548 4 548 57] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Trail_IndexIterator_Type.t_indexiterator
    
end
module Cdsat_Trail_Impl9_Indices
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  let rec cfg indices [#"/Users/xavier/Code/cdsat/src/trail.rs" 548 4 548 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Trail_IndexIterator_Type.t_indexiterator
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_IndexIterator_Type.t_indexiterator;
  var self : borrowed (Cdsat_Trail_Trail_Type.t_trail) = self;
  var _2 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  {
    goto BB0
  }
  BB0 {
    _2 <- Borrow.borrow_mut ( * self);
    self <- { self with current = ( ^ _2) };
    _0 <- Cdsat_Trail_IndexIterator_Type.C_IndexIterator _2 (Cdsat_Trail_TrailIndex_Type.C_TrailIndex ([#"/Users/xavier/Code/cdsat/src/trail.rs" 549 56 549 57] (0 : usize)) ([#"/Users/xavier/Code/cdsat/src/trail.rs" 549 59 549 60] (0 : usize)));
    _2 <- any borrowed (Cdsat_Trail_Trail_Type.t_trail);
    assume { Resolve0.resolve self };
    return _0
  }
  
end
module Cdsat_Trail_Impl10_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 562 4 562 82] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) (just : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Term_Term_Type.t_term) (value : Cdsat_Term_Value_Type.t_value) : ()
    
end
module Cdsat_Trail_Impl10_Trail_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val trail [#"/Users/xavier/Code/cdsat/src/trail.rs" 568 4 568 33] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : Cdsat_Trail_Trail_Type.t_trail
    
end
module Cdsat_Trail_Impl10_Trail
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  let rec cfg trail [#"/Users/xavier/Code/cdsat/src/trail.rs" 568 4 568 33] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : Cdsat_Trail_Trail_Type.t_trail
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Trail_Trail_Type.t_trail;
  var self : Cdsat_Trail_IndexIterator_Type.t_indexiterator = self;
  var _2 : borrowed (Cdsat_Trail_Trail_Type.t_trail);
  {
    goto BB0
  }
  BB0 {
    _2 <- Cdsat_Trail_IndexIterator_Type.indexiterator_trail self;
    _0 <-  * _2;
    return _0
  }
  
end
module Cdsat_Trail_Impl10_Next_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val next [#"/Users/xavier/Code/cdsat/src/trail.rs" 574 4 574 48] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl12_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 612 4 612 39] (self : Cdsat_Trail_Assignment_Type.t_assignment) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 611 14 611 34] result = Cdsat_Trail_Assignment_Type.assignment_level self }
    
end
module Cdsat_Trail_Impl12_Level
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg level [#"/Users/xavier/Code/cdsat/src/trail.rs" 612 4 612 39] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 611 14 611 34] result = Cdsat_Trail_Assignment_Type.assignment_level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Trail_Assignment_Type.assignment_level self;
    return _0
  }
  
end
module Cdsat_Trail_Impl12_IsRational_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_rational [#"/Users/xavier/Code/cdsat/src/trail.rs" 622 4 622 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 14 621 45] result <> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_Impl12_IsRational
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel0
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel1 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Cdsat_Theory_Impl1_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl8_IsBool_Interface as IsBool0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate IsBool0.is_bool = IsBool1.is_bool
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg is_rational [#"/Users/xavier/Code/cdsat/src/trail.rs" 622 4 622 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 14 621 45] result <> IsBool1.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _4 : bool;
  var _6 : bool;
  {
    goto BB0
  }
  BB0 {
    _4 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 623 9 623 27] IsBool0.is_bool (Cdsat_Trail_Assignment_Type.assignment_val self));
    goto BB4
  }
  BB1 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 623 8 624 86] true);
    goto BB3
  }
  BB2 {
    switch (Cdsat_Trail_Assignment_Type.assignment_term self)
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB6
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB7
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB8
      | _ -> goto BB5
      end
  }
  BB3 {
    return _0
  }
  BB4 {
    switch (not _4)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB5 {
    _6 <- ([#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs" 346 17 346 22] false);
    goto BB10
  }
  BB6 {
    goto BB9
  }
  BB7 {
    goto BB9
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _6 <- ([#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs" 345 38 345 42] true);
    goto BB10
  }
  BB10 {
    _0 <- _6;
    _6 <- any bool;
    goto BB3
  }
  
end
module Cdsat_Trail_Impl12_IsJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 633 4 633 45] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 632 14 632 75] result = (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Justified j) }
    
end
module Cdsat_Trail_Impl12_IsJustified
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 633 4 633 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 632 14 632 75] result = (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Justified j) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  {
    goto BB0
  }
  BB0 {
    switch (Cdsat_Trail_Assignment_Type.assignment_reason self)
      | Cdsat_Trail_Reason_Type.C_Justified _ -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    goto BB3
  }
  BB2 {
    _0 <- ([#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs" 346 17 346 22] false);
    goto BB4
  }
  BB3 {
    _0 <- ([#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs" 345 38 345 42] true);
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Cdsat_Trail_Impl12_IsInput_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_input [#"/Users/xavier/Code/cdsat/src/trail.rs" 643 4 643 41] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 642 14 642 54] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Input) }
    
end
module Cdsat_Trail_Impl12_IsInput
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Trail_Impl19_Eq_Interface as Eq0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let constant promoted0 [#"/Users/xavier/Code/cdsat/src/trail.rs" 643 4 643 41]  : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Cdsat_Trail_Reason_Type.C_Input in let _0 = _1 in _0
  let rec cfg is_input [#"/Users/xavier/Code/cdsat/src/trail.rs" 643 4 643 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 642 14 642 54] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Input) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _6 : Cdsat_Trail_Reason_Type.t_reason;
  {
    goto BB0
  }
  BB0 {
    _6 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 644 23 644 36] promoted0);
    _0 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 644 8 644 36] Eq0.eq (Cdsat_Trail_Assignment_Type.assignment_reason self) _6);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Trail_Impl12_Value_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val value [#"/Users/xavier/Code/cdsat/src/trail.rs" 648 4 648 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Term_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 647 14 647 33] result = Cdsat_Trail_Assignment_Type.assignment_val self }
    
end
module Cdsat_Trail_Impl12_Value
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg value [#"/Users/xavier/Code/cdsat/src/trail.rs" 648 4 648 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Term_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 647 14 647 33] result = Cdsat_Trail_Assignment_Type.assignment_val self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _3 : Cdsat_Term_Value_Type.t_value;
  {
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_val self;
    _0 <- _3;
    return _0
  }
  
end
module Cdsat_Trail_Impl12_Term_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val term [#"/Users/xavier/Code/cdsat/src/trail.rs" 653 4 653 38] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Term_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 652 14 652 34] result = Cdsat_Trail_Assignment_Type.assignment_term self }
    
end
module Cdsat_Trail_Impl12_Term
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  let rec cfg term [#"/Users/xavier/Code/cdsat/src/trail.rs" 653 4 653 38] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Term_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 652 14 652 34] result = Cdsat_Trail_Assignment_Type.assignment_term self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var self : Cdsat_Trail_Assignment_Type.t_assignment = self;
  var _3 : Cdsat_Term_Term_Type.t_term;
  {
    goto BB0
  }
  BB0 {
    _3 <- Cdsat_Trail_Assignment_Type.assignment_term self;
    _0 <- _3;
    return _0
  }
  
end
module Cdsat_Theory_Impl4_IsSetLevel_Stub
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 4 214 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
end
module Cdsat_Theory_Impl4_IsSetLevel_Interface
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 4 214 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
  val is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 4 214 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int) : bool
    ensures { result = is_set_level self s m }
    
end
module Cdsat_Theory_Impl4_IsSetLevel
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 4 214 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 216 12 218 67] s = Fset.empty  /\ m = 0 \/ (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
  val is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 4 214 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int) : bool
    ensures { result = is_set_level self s m }
    
end
module Cdsat_Theory_Impl4_SetLevelMax_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 252 4 252 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMax_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 252 4 252 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 252 4 252 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 15 249 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 251 14 251 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem }
    ensures { result = set_level_max self set elem }
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 249 15 249 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 251 14 251 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMax
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 252 4 252 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 247 4 247 12] ()
  val set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 252 4 252 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 15 249 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 251 14 251 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem }
    ensures { result = set_level_max self set elem }
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 249 15 249 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 251 14 251 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl4_SetLevelMax_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  let rec ghost function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 252 4 252 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 15 249 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 250 4 250 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 251 14 251 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 247 4 247 12] ()
end
module Cdsat_Theory_Impl4_SetLevelMin_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 4 259 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_SetLevelMin_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 4 259 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 4 259 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 256 15 256 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 257 15 257 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 258 14 258 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set }
    ensures { result = set_level_min self set elem }
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 256 15 256 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 257 15 257 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 258 14 258 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_SetLevelMin
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 4 259 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 254 4 254 12] ()
  val set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 4 259 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 256 15 256 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 257 15 257 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 258 14 258 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set }
    ensures { result = set_level_min self set elem }
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 256 15 256 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 257 15 257 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 258 14 258 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl4_SetLevelMin_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  let rec ghost function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 259 4 259 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 256 15 256 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 257 15 257 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 258 14 258 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 254 4 254 12] ()
end
module Cdsat_Theory_Impl4_ContainsInverse_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 374 4 374 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_ContainsInverse_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 374 4 374 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 374 4 374 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 370 15 370 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 371 15 371 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 373 14 373 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = contains_inverse self d }
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 370 15 370 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 371 15 371 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 373 14 373 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_ContainsInverse
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 374 4 374 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 368 4 368 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then () else contains_inverse tl d
      end
  val contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 374 4 374 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 370 15 370 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 371 15 371 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 373 14 373 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = contains_inverse self d }
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 370 15 370 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 371 15 371 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 373 14 373 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl4_ContainsInverse_Impl
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 374 4 374 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 370 15 370 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 371 15 371 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 373 14 373 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 368 4 368 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        contains_inverse tl d
      
      end
end
module Cdsat_Theory_Impl4_RestrictTooBig_Stub
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_RestrictTooBig_Interface
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 694 15 694 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 695 15 695 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 696 15 696 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 697 15 697 39] level < LevelOf0.level_of self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 698 14 698 47] not Contains0.contains (Restrict0.restrict self level) d }
    ensures { result = restrict_too_big self level d }
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 694 15 694 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 695 15 695 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 696 15 696 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 697 15 697 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 698 14 698 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictTooBig
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 700 8 709 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  val restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 694 15 694 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 695 15 695 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 696 15 696 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 697 15 697 39] level < LevelOf0.level_of self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 698 14 698 47] not Contains0.contains (Restrict0.restrict self level) d }
    ensures { result = restrict_too_big self level d }
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 694 15 694 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 695 15 695 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 696 15 696 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 697 15 697 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 698 14 698 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl4_RestrictTooBig_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  let rec ghost function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 699 4 699 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 694 15 694 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 695 15 695 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 696 15 696 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 697 15 697 39] level < LevelOf0.level_of self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 698 14 698 47] not Contains0.contains (Restrict0.restrict self level) d }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 700 8 709 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if let a = ToPair0.to_pair a in pure {a = d} then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
end
module Cdsat_Theory_Impl5_Decide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Decide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 776 15 776 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 777 15 777 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 778 4 778 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 779 4 779 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = decide self t val' tgt }
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 776 15 776 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 777 15 777 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 779 4 779 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 778 4 778 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Decide
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 774 4 774 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision t val') (Level0.level (Cdsat_Theory_Normal_Type.normal_0 self) + 1) (Cdsat_Theory_Normal_Type.normal_0 self)
  val decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 776 15 776 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 777 15 777 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 778 4 778 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 779 4 779 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = decide self t val' tgt }
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 776 15 776 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 777 15 777 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 779 4 779 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 778 4 778 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Decide_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains0.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 781 4 781 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 776 15 776 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 777 15 777 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 778 4 778 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 779 4 779 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 780 4 780 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 774 4 774 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t val' && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision t val') (Level0.level (Cdsat_Theory_Normal_Type.normal_0 self) + 1) (Cdsat_Theory_Normal_Type.normal_0 self) in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl5_Deduce_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 4 795 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl5_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 4 795 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 4 795 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 791 15 791 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = deduce self just tgt }
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 791 15 791 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 4 795 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.normal_0 self)
  val deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 4 795 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 791 15 791 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = deduce self just tgt }
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 791 15 791 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl5_Deduce_Impl
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains1.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 795 4 795 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 790 15 790 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 791 15 791 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 792 4 792 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 793 4 793 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 794 4 794 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) && Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) && pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && pure {forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)} && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.normal_0 self) in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl5_Fail_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 813 15 813 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 816 4 816 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail self just }
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 813 15 813 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 816 4 816 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 8 825 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a) = 0
  val fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 813 15 813 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 816 4 816 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail self just }
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 813 15 813 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 816 4 816 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail_Impl
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 817 4 817 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 812 15 812 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 813 15 813 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 814 4 814 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 815 4 815 110] forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 816 4 816 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 818 8 825 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && not Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) && pure {forall m : Cdsat_Theory_Model_Type.t_model . Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)} && Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l && (let a = LevelOf0.level_of (Cdsat_Theory_Normal_Type.normal_0 self) not_l in pure {a = 0}) && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a) in pure {a = 0})
end
module Cdsat_Theory_Impl5_Fail2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 834 4 834 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 834 4 834 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 834 4 834 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 831 15 831 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 832 15 832 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail2 self just }
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 831 15 831 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 832 15 832 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 834 4 834 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 838 12 840 39] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just = 0
  val fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 834 4 834 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 831 15 831 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 832 15 832 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail2 self just }
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 831 15 831 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 832 15 832 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl5_Fail2_Impl
  use set.Fset
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  let rec ghost predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 834 4 834 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 831 15 831 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 832 15 832 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 838 12 840 39] pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && pure {forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m just -> false} && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just in pure {a = 0})
end
module Cdsat_Theory_Impl5_ConflictSolve_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl5_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 848 15 848 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve self just tgt }
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 848 15 848 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 855 8 865 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 848 15 848 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve self just tgt }
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 848 15 848 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve_Impl
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 848 15 848 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 850 4 850 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 855 8 865 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l && pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && not Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) && pure {forall m : Cdsat_Theory_Model_Type.t_model . Invariant1.invariant' m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)} && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict in pure {a > 0}) && pure {tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict}
end
module Cdsat_Theory_Impl5_ConflictSolve2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl5_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve2 self conflict tgt }
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 879 10 882 43] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve2 self conflict tgt }
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl5_ConflictSolve2_Impl
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 879 10 882 43] pure {forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j} && pure {forall m : Cdsat_Theory_Model_Type.t_model . SatisfySet0.satisfy_set m conflict -> false} && (let a = SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict in pure {a > 0}) && pure {tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict}
end
module Cdsat_Theory_Impl6_Resolve_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_Resolve_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 943 15 943 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 944 15 944 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 945 4 945 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 946 4 946 42] result -> Invariant0.invariant' tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 54] result -> Level0.level tgt = Level0.level self }
    ensures { result = resolve self a tgt }
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 943 15 943 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 944 15 944 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 945 4 945 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 54] resolve self a tgt -> Level0.level tgt = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 946 4 946 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl6_Resolve
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl3_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains_Stub as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 941 4 941 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) a -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 943 15 943 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 944 15 944 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 945 4 945 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 946 4 946 42] result -> Invariant0.invariant' tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 54] result -> Level0.level tgt = Level0.level self }
    ensures { result = resolve self a tgt }
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 943 15 943 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 944 15 944 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 945 4 945 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 54] resolve self a tgt -> Level0.level tgt = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 946 4 946 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl6_Resolve_Impl
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_ResolveSound as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_JustificationContains as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 949 4 949 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 943 15 943 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 944 15 944 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 945 4 945 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 946 4 946 42] result -> Invariant0.invariant' tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 947 4 947 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 948 4 948 54] result -> Level0.level tgt = Level0.level self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 941 4 941 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a && pure {forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) a -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)} && (let b = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (let a' = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Fset.union a' just) in pure {tgt = b})
end
module Cdsat_Theory_Impl6_Backjump_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 967 4 967 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_Backjump_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 967 4 967 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 967 4 967 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 962 15 962 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 963 15 963 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 964 4 964 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 965 4 965 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 966 4 966 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = backjump self l tgt }
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 962 15 962 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 963 15 963 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 966 4 966 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 965 4 965 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 964 4 964 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl3_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant2
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl6_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 967 4 967 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 960 4 960 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  val backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 967 4 967 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 962 15 962 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 963 15 963 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 964 4 964 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 965 4 965 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 966 4 966 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = backjump self l tgt }
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 962 15 962 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 963 15 963 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 966 4 966 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 965 4 965 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 964 4 964 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Backjump_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_Lemma as Lemma0 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    function Interp0.interp = Interp0.interp,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl0_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl6_LearnJustified as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Invariant1.invariant' = Invariant2.invariant',
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Lemma0.lemma' = Lemma0.lemma',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  let rec ghost predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 967 4 967 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 962 15 962 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 963 15 963 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 964 4 964 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 965 4 965 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 966 4 966 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 960 4 960 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = let b' = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l && IsBool0.is_bool (let (_, a) = l in a) && IsBool1.is_bool (let (a, _) = l in a) && (let b = SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e in let a = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l in pure {a > b}) && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl6_Backjump2Pre_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 990 4 990 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl6_Backjump2Pre_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 990 4 990 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 990 4 990 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 989 4 989 91] result = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l }
    ensures { result = backjump2_pre self l }
    
  axiom backjump2_pre_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 989 4 989 91] backjump2_pre self l = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l
end
module Cdsat_Theory_Impl6_Backjump2Pre
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 990 4 990 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 987 4 987 16] Invariant0.invariant' self /\ Sound0.sound self /\ Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)
  val backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 990 4 990 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 989 4 989 91] result = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l }
    ensures { result = backjump2_pre self l }
    
  axiom backjump2_pre_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 989 4 989 91] backjump2_pre self l = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l
end
module Cdsat_Theory_Impl6_Backjump2Pre_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl0_IsBool as IsBool1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 990 4 990 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 989 4 989 91] result = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 987 4 987 16] Invariant0.invariant' self && Sound0.sound self && Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l && IsBool0.is_bool (let (_, a) = l in a) && IsBool1.is_bool (let (a, _) = l in a) && (let b = let b' = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in let a = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l in pure {a > b})
end
module Cdsat_Theory_Impl6_UndoClear_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1056 4 1056 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_UndoClear_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1056 4 1056 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1056 4 1056 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1051 15 1051 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1052 15 1052 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1053 4 1053 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1054 4 1054 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1055 4 1055 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_clear self a tgt }
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1051 15 1051 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1052 15 1052 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1055 4 1055 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1054 4 1054 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1053 4 1053 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_IsSetLevel_Stub as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1056 4 1056 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1057 8 1063 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : int . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1)
  val undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1056 4 1056 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1051 15 1051 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1052 15 1052 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1053 4 1053 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1054 4 1054 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1055 4 1055 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_clear self a tgt }
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1051 15 1051 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1052 15 1052 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1055 4 1055 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1054 4 1054 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1053 4 1053 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoClear_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_IsSetLevel as IsSetLevel0 with
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_RestrictIdempotent as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1056 4 1056 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1051 15 1051 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1052 15 1052 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1053 4 1053 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1054 4 1054 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1055 4 1055 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1057 8 1063 11] let _ = let b' = Level0.level self - 1 in RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in let _ = let c' = Level0.level self - 1 in RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 c' in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a && not IsBool0.is_bool (let (_, a) = a in a) && pure {exists l : int . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e l} && (let b = let b' = Level0.level self - 1 in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Theory_Impl6_UndoDecide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1075 4 1075 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1075 4 1075 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1075 4 1075 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 15 1069 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 15 1070 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1071 4 1071 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1072 4 1072 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1073 4 1073 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1074 4 1074 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_decide self l tgt }
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 15 1069 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 15 1070 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1071 4 1071 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1074 4 1074 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1073 4 1073 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1072 4 1072 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl4_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl4_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl4_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl4_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_SatisfiedBy_Stub as SatisfiedBy0
  clone Cdsat_Theory_Impl4_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl4_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl4_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level_Stub as Level0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl4_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound2.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig_Stub as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl6_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1075 4 1075 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1067 4 1067 16] let _ = () in let _ = () in let _ = () in let _ = () in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  val undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1075 4 1075 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 15 1069 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 15 1070 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1071 4 1071 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1072 4 1072 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1073 4 1073 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1074 4 1074 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_decide self l tgt }
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 15 1069 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 15 1070 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1071 4 1071 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1074 4 1074 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1073 4 1073 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1072 4 1072 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_UndoDecide_Impl
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl3_Interp as Interp0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl3_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl4_Len as Len0 with
    axiom .
  clone Cdsat_Theory_Impl4_Level as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl4_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level1.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl4_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl4_CountBounds as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl3_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_Sound as Sound2 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl4_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl3_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl4_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl4_Restrict as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Unsat as Unsat0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl6_Level as Level0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound2.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl4_TrailPlausible as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictTooBig as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl4_RestrictSound as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl4_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant1.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate Sound0.sound = Sound2.sound
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound2.sound,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set
  clone Cdsat_Theory_Impl6_Invariant as Invariant0 with
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  let rec ghost predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1075 4 1075 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 15 1069 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 15 1070 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1071 4 1071 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1072 4 1072 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1073 4 1073 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1074 4 1074 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1067 4 1067 16] let _ = () in let _ = () in let _ = () in let _ = () in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let restr = let b' = Level0.level self - 1 in Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) b' in IsBool0.is_bool (let (_, a) = l in a) && pure {exists a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a = Level0.level self} && (let b = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let a = Level0.level self in pure {a = b}) && (let b = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr in pure {Cdsat_Theory_Normal_Type.normal_0 tgt = b})
end
module Cdsat_Term_Impl12_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 11 16 11 21] (self : Cdsat_Term_Sort_Type.t_sort) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl12_Fmt
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Fmt_Formatter_Type.t_formatter
  clone Core_Fmt_Impl7_WriteStr_Interface as WriteStr0
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  let rec cfg fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 11 16 11 21] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Sort_Type.t_sort) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error);
  var self : Cdsat_Term_Sort_Type.t_sort = self;
  var f : borrowed (Core_Fmt_Formatter_Type.t_formatter) = f;
  var _3 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _4 : string;
  var _6 : string;
  var _7 : string;
  {
    goto BB0
  }
  BB0 {
    _3 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _3) };
    switch (self)
      | Cdsat_Term_Sort_Type.C_Boolean -> goto BB1
      | Cdsat_Term_Sort_Type.C_Rational -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _7 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 16 11 21] "Rational");
    _4 <- _7;
    goto BB5
  }
  BB3 {
    assume { Resolve0.resolve _3 };
    assume { Resolve0.resolve f };
    absurd
  }
  BB4 {
    _6 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 16 11 21] "Boolean");
    _4 <- _6;
    goto BB5
  }
  BB5 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 16 11 21] WriteStr0.write_str _3 _4);
    _3 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _4 <- any string;
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve f };
    return _0
  }
  
end
module Cdsat_Term_Impl16_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 11 34 11 36] (self : Cdsat_Term_Sort_Type.t_sort) : ()
    
end
module Cdsat_Term_Impl16_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 11 34 11 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Sort_Type.t_sort) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Core_Hash_Impls_Impl18_Hash_Interface
  type h
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed h
  val hash (self : isize) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hash/mod.rs" 809 42 809 47] Inv0.inv state}
    
end
module Cdsat_Term_Impl19_Hash_Interface
  type __h
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed __h
  val hash [#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] (self : Cdsat_Term_Sort_Type.t_sort) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] Inv0.inv state}
    
end
module Cdsat_Term_Impl19_Hash
  type __h
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = isize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = __h
  clone Core_Hash_Impls_Impl18_Hash_Interface as Hash0 with
    type h = __h,
    predicate Inv0.inv = Inv1.inv
  clone Core_Intrinsics_Extern0_DiscriminantValue_Interface as DiscriminantValue0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    type Discriminant0.discriminant = isize
  let rec cfg hash [#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Sort_Type.t_sort) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] Inv1.inv state}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : Cdsat_Term_Sort_Type.t_sort = self;
  var state : borrowed __h = state;
  var __self_tag : isize;
  var _6 : isize;
  var _7 : borrowed __h;
  {
    goto BB0
  }
  BB0 {
    __self_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] DiscriminantValue0.discriminant_value self);
    goto BB1
  }
  BB1 {
    _6 <- __self_tag;
    _7 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _7) };
    assume { Inv0.inv ( ^ _7) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] Hash0.hash _6 _7);
    _7 <- any borrowed __h;
    goto BB2
  }
  BB2 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    return _0
  }
  
end
module Cdsat_Term_Impl0_ShallowModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 24 4 24 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl0_ShallowModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 24 4 24 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 24 4 24 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl0_ShallowModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 24 4 24 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 25 8 25 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 24 4 24 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl21_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] (self : Cdsat_Term_Term_Type.t_term) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl21_Fmt
  use prelude.Borrow
  use prelude.Opaque
  use prelude.Int
  use prelude.UIntSize
  use prelude.IntSize
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  clone Core_Fmt_Impl7_DebugTupleField1Finish_Interface as DebugTupleField1Finish0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Fmt_Formatter_Type.t_formatter
  clone Core_Fmt_Impl7_DebugTupleField2Finish_Interface as DebugTupleField2Finish0
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error);
  var self : Cdsat_Term_Term_Type.t_term = self;
  var f : borrowed (Core_Fmt_Formatter_Type.t_formatter) = f;
  var __self_0 : usize;
  var __self_1 : Cdsat_Term_Sort_Type.t_sort;
  var _6 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _8 : string;
  var _9 : dyn;
  var _11 : dyn;
  var _13 : Cdsat_Term_Sort_Type.t_sort;
  var __self_01 : Cdsat_Term_Value_Type.t_value;
  var _15 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _17 : string;
  var _18 : dyn;
  var _20 : Cdsat_Term_Value_Type.t_value;
  var __self_02 : Cdsat_Term_Term_Type.t_term;
  var __self_11 : Cdsat_Term_Term_Type.t_term;
  var _23 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _25 : string;
  var _26 : dyn;
  var _28 : dyn;
  var _30 : Cdsat_Term_Term_Type.t_term;
  var __self_03 : isize;
  var __self_12 : Cdsat_Term_Term_Type.t_term;
  var _33 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _35 : string;
  var _36 : dyn;
  var _38 : dyn;
  var _40 : Cdsat_Term_Term_Type.t_term;
  var __self_04 : Cdsat_Term_Term_Type.t_term;
  var __self_13 : Cdsat_Term_Term_Type.t_term;
  var _43 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _45 : string;
  var _46 : dyn;
  var _48 : dyn;
  var _50 : Cdsat_Term_Term_Type.t_term;
  var __self_05 : Cdsat_Term_Term_Type.t_term;
  var __self_14 : Cdsat_Term_Term_Type.t_term;
  var _53 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _55 : string;
  var _56 : dyn;
  var _58 : dyn;
  var _60 : Cdsat_Term_Term_Type.t_term;
  var __self_06 : Cdsat_Term_Term_Type.t_term;
  var __self_15 : Cdsat_Term_Term_Type.t_term;
  var _63 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _65 : string;
  var _66 : dyn;
  var _68 : dyn;
  var _70 : Cdsat_Term_Term_Type.t_term;
  var __self_07 : Cdsat_Term_Term_Type.t_term;
  var _72 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _74 : string;
  var _75 : dyn;
  var _77 : Cdsat_Term_Term_Type.t_term;
  var __self_08 : Cdsat_Term_Term_Type.t_term;
  var __self_16 : Cdsat_Term_Term_Type.t_term;
  var _80 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _82 : string;
  var _83 : dyn;
  var _85 : dyn;
  var _87 : Cdsat_Term_Term_Type.t_term;
  var __self_09 : Cdsat_Term_Term_Type.t_term;
  var __self_17 : Cdsat_Term_Term_Type.t_term;
  var _90 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _92 : string;
  var _93 : dyn;
  var _95 : dyn;
  var _97 : Cdsat_Term_Term_Type.t_term;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Term_Type.C_Variable _ _ -> goto BB1
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB2
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB3
      | Cdsat_Term_Term_Type.C_Times _ _ -> goto BB4
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB5
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB6
      | Cdsat_Term_Term_Type.C_Conj _ _ -> goto BB7
      | Cdsat_Term_Term_Type.C_Neg _ -> goto BB8
      | Cdsat_Term_Term_Type.C_Disj _ _ -> goto BB9
      | Cdsat_Term_Term_Type.C_Impl _ _ -> goto BB10
      end
  }
  BB1 {
    goto BB12
  }
  BB2 {
    goto BB14
  }
  BB3 {
    goto BB16
  }
  BB4 {
    goto BB18
  }
  BB5 {
    goto BB20
  }
  BB6 {
    goto BB22
  }
  BB7 {
    goto BB24
  }
  BB8 {
    goto BB26
  }
  BB9 {
    goto BB28
  }
  BB10 {
    __self_09 <- Cdsat_Term_Term_Type.impl_0 self;
    __self_17 <- Cdsat_Term_Term_Type.impl_1 self;
    _90 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _90) };
    _92 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Impl");
    _97 <- __self_17;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _90 _92 _93 _95);
    _90 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _93 <- any dyn;
    _95 <- any dyn;
    goto BB30
  }
  BB11 {
    assume { Resolve0.resolve f };
    absurd
  }
  BB12 {
    __self_0 <- Cdsat_Term_Term_Type.variable_0 self;
    __self_1 <- Cdsat_Term_Term_Type.variable_1 self;
    _6 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _6) };
    _8 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Variable");
    _13 <- __self_1;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _6 _8 _9 _11);
    _6 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _9 <- any dyn;
    _11 <- any dyn;
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB14 {
    __self_01 <- Cdsat_Term_Term_Type.value_0 self;
    _15 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _15) };
    _17 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Value");
    _20 <- __self_01;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField1Finish0.debug_tuple_field1_finish _15 _17 _18);
    _15 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _18 <- any dyn;
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB16 {
    __self_02 <- Cdsat_Term_Term_Type.plus_0 self;
    __self_11 <- Cdsat_Term_Term_Type.plus_1 self;
    _23 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _23) };
    _25 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Plus");
    _30 <- __self_11;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _23 _25 _26 _28);
    _23 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _26 <- any dyn;
    _28 <- any dyn;
    goto BB17
  }
  BB17 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB18 {
    __self_03 <- Cdsat_Term_Term_Type.times_0 self;
    __self_12 <- Cdsat_Term_Term_Type.times_1 self;
    _33 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _33) };
    _35 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Times");
    _40 <- __self_12;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _33 _35 _36 _38);
    _33 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _36 <- any dyn;
    _38 <- any dyn;
    goto BB19
  }
  BB19 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB20 {
    __self_04 <- Cdsat_Term_Term_Type.eq_0 self;
    __self_13 <- Cdsat_Term_Term_Type.eq_1 self;
    _43 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _43) };
    _45 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Eq");
    _50 <- __self_13;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _43 _45 _46 _48);
    _43 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _46 <- any dyn;
    _48 <- any dyn;
    goto BB21
  }
  BB21 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB22 {
    __self_05 <- Cdsat_Term_Term_Type.lt_0 self;
    __self_14 <- Cdsat_Term_Term_Type.lt_1 self;
    _53 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _53) };
    _55 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Lt");
    _60 <- __self_14;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _53 _55 _56 _58);
    _53 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _56 <- any dyn;
    _58 <- any dyn;
    goto BB23
  }
  BB23 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB24 {
    __self_06 <- Cdsat_Term_Term_Type.conj_0 self;
    __self_15 <- Cdsat_Term_Term_Type.conj_1 self;
    _63 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _63) };
    _65 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Conj");
    _70 <- __self_15;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _63 _65 _66 _68);
    _63 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _66 <- any dyn;
    _68 <- any dyn;
    goto BB25
  }
  BB25 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB26 {
    __self_07 <- Cdsat_Term_Term_Type.neg_0 self;
    _72 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _72) };
    _74 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Neg");
    _77 <- __self_07;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField1Finish0.debug_tuple_field1_finish _72 _74 _75);
    _72 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _75 <- any dyn;
    goto BB27
  }
  BB27 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB28 {
    __self_08 <- Cdsat_Term_Term_Type.disj_0 self;
    __self_16 <- Cdsat_Term_Term_Type.disj_1 self;
    _80 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _80) };
    _82 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] "Disj");
    _87 <- __self_16;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] DebugTupleField2Finish0.debug_tuple_field2_finish _80 _82 _83 _85);
    _80 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _83 <- any dyn;
    _85 <- any dyn;
    goto BB29
  }
  BB29 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB30 {
    assume { Resolve0.resolve f };
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module Cdsat_Term_Impl25_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 30 34 30 36] (self : Cdsat_Term_Term_Type.t_term) : ()
    
end
module Cdsat_Term_Impl25_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 30 34 30 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Core_Hash_Impls_Impl13_Hash_Interface
  type h
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed h
  val hash (self : usize) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hash/mod.rs" 809 42 809 47] Inv0.inv state}
    
end
module Core_Hash_Impls_Impl0_Hash_Interface
  type h
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed h
  val hash (self : bool) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hash/mod.rs" 845 34 845 39] Inv0.inv state}
    
end
module NumRational_Impl9_Hash_Interface
  type t
  type h
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed h
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val hash (self : NumRational_Ratio_Type.t_ratio t) (state : borrowed h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 391 24 391 28] Inv0.inv self}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 391 30 391 35] Inv1.inv state}
    
end
module Cdsat_Term_Impl33_Hash_Interface
  type __h
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed __h
  val hash [#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] (self : Cdsat_Term_Value_Type.t_value) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] Inv0.inv state}
    
end
module Cdsat_Term_Impl33_Hash
  type __h
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = isize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone NumRational_Impl9_Hash_Interface as Hash2 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    type h = __h,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv1.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = __h
  clone Core_Hash_Impls_Impl0_Hash_Interface as Hash1 with
    type h = __h,
    predicate Inv0.inv = Inv1.inv
  clone Core_Hash_Impls_Impl18_Hash_Interface as Hash0 with
    type h = __h,
    predicate Inv0.inv = Inv1.inv
  clone Core_Intrinsics_Extern0_DiscriminantValue_Interface as DiscriminantValue0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    type Discriminant0.discriminant = isize
  let rec cfg hash [#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] Inv1.inv state}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : Cdsat_Term_Value_Type.t_value = self;
  var state : borrowed __h = state;
  var __self_tag : isize;
  var _5 : ();
  var _7 : isize;
  var _8 : borrowed __h;
  var __self_0 : bool;
  var _12 : borrowed __h;
  var __self_01 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _15 : borrowed __h;
  {
    goto BB0
  }
  BB0 {
    __self_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] DiscriminantValue0.discriminant_value self);
    goto BB1
  }
  BB1 {
    _7 <- __self_tag;
    _8 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _8) };
    assume { Inv0.inv ( ^ _8) };
    _5 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] Hash0.hash _7 _8);
    _8 <- any borrowed __h;
    goto BB2
  }
  BB2 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB3
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB4
      end
  }
  BB3 {
    goto BB6
  }
  BB4 {
    __self_01 <- Cdsat_Term_Value_Type.rat_0 self;
    _15 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _15) };
    assume { Inv0.inv ( ^ _15) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] Hash2.hash __self_01 _15);
    _15 <- any borrowed __h;
    goto BB8
  }
  BB5 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    absurd
  }
  BB6 {
    __self_0 <- Cdsat_Term_Value_Type.bool_0 self;
    _12 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _12) };
    assume { Inv0.inv ( ^ _12) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] Hash1.hash __self_0 _12);
    _12 <- any borrowed __h;
    goto BB7
  }
  BB7 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB9
  }
  BB8 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module Alloc_Boxed_Impl18_Hash_Interface
  type t
  type a
  type h
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed h
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val hash (self : t) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1384 24 1384 28] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1384 30 1384 35] Inv1.inv state}
    
end
module Cdsat_Term_Impl26_Hash_Interface
  type __h
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed __h
  val hash [#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] (self : Cdsat_Term_Term_Type.t_term) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Inv0.inv state}
    
end
module Cdsat_Term_Impl26_Hash
  type __h
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.UIntSize
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = isize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Alloc_Boxed_Impl18_Hash_Interface as Hash4 with
    type t = Cdsat_Term_Term_Type.t_term,
    type a = Alloc_Alloc_Global_Type.t_global,
    type h = __h,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv1.inv
  clone Cdsat_Term_Impl33_Hash_Interface as Hash3 with
    type __h = __h,
    predicate Inv0.inv = Inv1.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = __h
  clone Cdsat_Term_Impl19_Hash_Interface as Hash2 with
    type __h = __h,
    predicate Inv0.inv = Inv1.inv
  clone Core_Hash_Impls_Impl13_Hash_Interface as Hash1 with
    type h = __h,
    predicate Inv0.inv = Inv1.inv
  clone Core_Hash_Impls_Impl18_Hash_Interface as Hash0 with
    type h = __h,
    predicate Inv0.inv = Inv1.inv
  clone Core_Intrinsics_Extern0_DiscriminantValue_Interface as DiscriminantValue0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    type Discriminant0.discriminant = isize
  let rec cfg hash [#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Inv1.inv state}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : Cdsat_Term_Term_Type.t_term = self;
  var state : borrowed __h = state;
  var __self_tag : isize;
  var _5 : ();
  var _7 : isize;
  var _8 : borrowed __h;
  var __self_0 : usize;
  var __self_1 : Cdsat_Term_Sort_Type.t_sort;
  var _12 : ();
  var _14 : borrowed __h;
  var _16 : borrowed __h;
  var __self_01 : Cdsat_Term_Value_Type.t_value;
  var _19 : borrowed __h;
  var __self_02 : Cdsat_Term_Term_Type.t_term;
  var __self_11 : Cdsat_Term_Term_Type.t_term;
  var _22 : ();
  var _24 : borrowed __h;
  var _26 : borrowed __h;
  var __self_03 : isize;
  var __self_12 : Cdsat_Term_Term_Type.t_term;
  var _29 : ();
  var _31 : borrowed __h;
  var _33 : borrowed __h;
  var __self_04 : Cdsat_Term_Term_Type.t_term;
  var __self_13 : Cdsat_Term_Term_Type.t_term;
  var _36 : ();
  var _38 : borrowed __h;
  var _40 : borrowed __h;
  var __self_05 : Cdsat_Term_Term_Type.t_term;
  var __self_14 : Cdsat_Term_Term_Type.t_term;
  var _43 : ();
  var _45 : borrowed __h;
  var _47 : borrowed __h;
  var __self_06 : Cdsat_Term_Term_Type.t_term;
  var __self_15 : Cdsat_Term_Term_Type.t_term;
  var _50 : ();
  var _52 : borrowed __h;
  var _54 : borrowed __h;
  var __self_07 : Cdsat_Term_Term_Type.t_term;
  var _57 : borrowed __h;
  var __self_08 : Cdsat_Term_Term_Type.t_term;
  var __self_16 : Cdsat_Term_Term_Type.t_term;
  var _60 : ();
  var _62 : borrowed __h;
  var _64 : borrowed __h;
  var __self_09 : Cdsat_Term_Term_Type.t_term;
  var __self_17 : Cdsat_Term_Term_Type.t_term;
  var _67 : ();
  var _69 : borrowed __h;
  var _71 : borrowed __h;
  {
    goto BB0
  }
  BB0 {
    __self_tag <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] DiscriminantValue0.discriminant_value self);
    goto BB1
  }
  BB1 {
    _7 <- __self_tag;
    _8 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _8) };
    assume { Inv0.inv ( ^ _8) };
    _5 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash0.hash _7 _8);
    _8 <- any borrowed __h;
    goto BB2
  }
  BB2 {
    switch (self)
      | Cdsat_Term_Term_Type.C_Variable _ _ -> goto BB3
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB4
      | Cdsat_Term_Term_Type.C_Plus _ _ -> goto BB5
      | Cdsat_Term_Term_Type.C_Times _ _ -> goto BB6
      | Cdsat_Term_Term_Type.C_Eq _ _ -> goto BB7
      | Cdsat_Term_Term_Type.C_Lt _ _ -> goto BB8
      | Cdsat_Term_Term_Type.C_Conj _ _ -> goto BB9
      | Cdsat_Term_Term_Type.C_Neg _ -> goto BB10
      | Cdsat_Term_Term_Type.C_Disj _ _ -> goto BB11
      | Cdsat_Term_Term_Type.C_Impl _ _ -> goto BB12
      end
  }
  BB3 {
    goto BB14
  }
  BB4 {
    goto BB17
  }
  BB5 {
    goto BB19
  }
  BB6 {
    goto BB22
  }
  BB7 {
    goto BB25
  }
  BB8 {
    goto BB28
  }
  BB9 {
    goto BB31
  }
  BB10 {
    goto BB34
  }
  BB11 {
    goto BB36
  }
  BB12 {
    __self_09 <- Cdsat_Term_Term_Type.impl_0 self;
    __self_17 <- Cdsat_Term_Term_Type.impl_1 self;
    _69 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _69) };
    assume { Inv0.inv ( ^ _69) };
    _67 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_09 _69);
    _69 <- any borrowed __h;
    goto BB39
  }
  BB13 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    absurd
  }
  BB14 {
    __self_0 <- Cdsat_Term_Term_Type.variable_0 self;
    __self_1 <- Cdsat_Term_Term_Type.variable_1 self;
    _14 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _14) };
    assume { Inv0.inv ( ^ _14) };
    _12 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash1.hash __self_0 _14);
    _14 <- any borrowed __h;
    goto BB15
  }
  BB15 {
    _16 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _16) };
    assume { Inv0.inv ( ^ _16) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash2.hash __self_1 _16);
    _16 <- any borrowed __h;
    goto BB16
  }
  BB16 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB17 {
    __self_01 <- Cdsat_Term_Term_Type.value_0 self;
    _19 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _19) };
    assume { Inv0.inv ( ^ _19) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash3.hash __self_01 _19);
    _19 <- any borrowed __h;
    goto BB18
  }
  BB18 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB19 {
    __self_02 <- Cdsat_Term_Term_Type.plus_0 self;
    __self_11 <- Cdsat_Term_Term_Type.plus_1 self;
    _24 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _24) };
    assume { Inv0.inv ( ^ _24) };
    _22 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_02 _24);
    _24 <- any borrowed __h;
    goto BB20
  }
  BB20 {
    _26 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _26) };
    assume { Inv0.inv ( ^ _26) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_11 _26);
    _26 <- any borrowed __h;
    goto BB21
  }
  BB21 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB22 {
    __self_03 <- Cdsat_Term_Term_Type.times_0 self;
    __self_12 <- Cdsat_Term_Term_Type.times_1 self;
    _31 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _31) };
    assume { Inv0.inv ( ^ _31) };
    _29 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash0.hash __self_03 _31);
    _31 <- any borrowed __h;
    goto BB23
  }
  BB23 {
    _33 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _33) };
    assume { Inv0.inv ( ^ _33) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_12 _33);
    _33 <- any borrowed __h;
    goto BB24
  }
  BB24 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB25 {
    __self_04 <- Cdsat_Term_Term_Type.eq_0 self;
    __self_13 <- Cdsat_Term_Term_Type.eq_1 self;
    _38 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _38) };
    assume { Inv0.inv ( ^ _38) };
    _36 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_04 _38);
    _38 <- any borrowed __h;
    goto BB26
  }
  BB26 {
    _40 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _40) };
    assume { Inv0.inv ( ^ _40) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_13 _40);
    _40 <- any borrowed __h;
    goto BB27
  }
  BB27 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB28 {
    __self_05 <- Cdsat_Term_Term_Type.lt_0 self;
    __self_14 <- Cdsat_Term_Term_Type.lt_1 self;
    _45 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _45) };
    assume { Inv0.inv ( ^ _45) };
    _43 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_05 _45);
    _45 <- any borrowed __h;
    goto BB29
  }
  BB29 {
    _47 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _47) };
    assume { Inv0.inv ( ^ _47) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_14 _47);
    _47 <- any borrowed __h;
    goto BB30
  }
  BB30 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB31 {
    __self_06 <- Cdsat_Term_Term_Type.conj_0 self;
    __self_15 <- Cdsat_Term_Term_Type.conj_1 self;
    _52 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _52) };
    assume { Inv0.inv ( ^ _52) };
    _50 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_06 _52);
    _52 <- any borrowed __h;
    goto BB32
  }
  BB32 {
    _54 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _54) };
    assume { Inv0.inv ( ^ _54) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_15 _54);
    _54 <- any borrowed __h;
    goto BB33
  }
  BB33 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB34 {
    __self_07 <- Cdsat_Term_Term_Type.neg_0 self;
    _57 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _57) };
    assume { Inv0.inv ( ^ _57) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_07 _57);
    _57 <- any borrowed __h;
    goto BB35
  }
  BB35 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB36 {
    __self_08 <- Cdsat_Term_Term_Type.disj_0 self;
    __self_16 <- Cdsat_Term_Term_Type.disj_1 self;
    _62 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _62) };
    assume { Inv0.inv ( ^ _62) };
    _60 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_08 _62);
    _62 <- any borrowed __h;
    goto BB37
  }
  BB37 {
    _64 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _64) };
    assume { Inv0.inv ( ^ _64) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_16 _64);
    _64 <- any borrowed __h;
    goto BB38
  }
  BB38 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB39 {
    _71 <- Borrow.borrow_mut ( * state);
    state <- { state with current = ( ^ _71) };
    assume { Inv0.inv ( ^ _71) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] Hash4.hash __self_17 _71);
    _71 <- any borrowed __h;
    goto BB40
  }
  BB40 {
    assert { [@expl:type invariant] Inv1.inv state };
    assume { Resolve0.resolve state };
    goto BB41
  }
  BB41 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Not_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val not' [#"/Users/xavier/Code/cdsat/src/term.rs" 62 4 62 43] (remove : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Not
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg not' [#"/Users/xavier/Code/cdsat/src/term.rs" 62 4 62 43] [@cfg:stackify] [@cfg:subregion_analysis] (remove : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var remove : Cdsat_Term_Term_Type.t_term = remove;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _0 <- Cdsat_Term_Term_Type.C_Neg remove;
    remove <- any Cdsat_Term_Term_Type.t_term;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_True_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val true_ [#"/Users/xavier/Code/cdsat/src/term.rs" 66 4 66 26] (_1 : ()) : Cdsat_Term_Term_Type.t_term
end
module Cdsat_Term_Impl1_True
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg true_ [#"/Users/xavier/Code/cdsat/src/term.rs" 66 4 66 26] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Term_Term_Type.C_Value (Cdsat_Term_Value_Type.C_Bool ([#"/Users/xavier/Code/cdsat/src/term.rs" 67 32 67 36] true));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_False_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val false_ [#"/Users/xavier/Code/cdsat/src/term.rs" 70 4 70 27] (_1 : ()) : Cdsat_Term_Term_Type.t_term
end
module Cdsat_Term_Impl1_False
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg false_ [#"/Users/xavier/Code/cdsat/src/term.rs" 70 4 70 27] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Term_Term_Type.C_Value (Cdsat_Term_Value_Type.C_Bool ([#"/Users/xavier/Code/cdsat/src/term.rs" 71 32 71 37] false));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Var_Interface
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val var' [#"/Users/xavier/Code/cdsat/src/term.rs" 74 4 74 45] (ix : usize) (sort : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Var
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg var' [#"/Users/xavier/Code/cdsat/src/term.rs" 74 4 74 45] [@cfg:stackify] [@cfg:subregion_analysis] (ix : usize) (sort : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var ix : usize = ix;
  var sort : Cdsat_Term_Sort_Type.t_sort = sort;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Term_Term_Type.C_Variable ix sort;
    return _0
  }
  
end
module Cdsat_Term_Impl1_Val_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val val' [#"/Users/xavier/Code/cdsat/src/term.rs" 78 4 78 32] (v : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Val
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg val' [#"/Users/xavier/Code/cdsat/src/term.rs" 78 4 78 32] [@cfg:stackify] [@cfg:subregion_analysis] (v : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var v : Cdsat_Term_Value_Type.t_value = v;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Term_Term_Type.C_Value v;
    v <- any Cdsat_Term_Value_Type.t_value;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Plus_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val plus [#"/Users/xavier/Code/cdsat/src/term.rs" 82 4 82 41] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Plus
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg plus [#"/Users/xavier/Code/cdsat/src/term.rs" 82 4 82 41] [@cfg:stackify] [@cfg:subregion_analysis] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var a : Cdsat_Term_Term_Type.t_term = a;
  var b : Cdsat_Term_Term_Type.t_term = b;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Term_Term_Type.C_Plus a b;
    a <- any Cdsat_Term_Term_Type.t_term;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Core_Convert_Impl3_Into_Interface
  type t
  type u
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = u
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val into (self : t) : u
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs" 715 12 715 16] Inv0.inv self}
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs" 715 4 715 22] Inv1.inv result }
    
end
module NumRational_Impl1_New_Interface
  type t
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = NumRational_Ratio_Type.t_ratio t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val new (numer : t) (denom : t) : NumRational_Ratio_Type.t_ratio t
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 99 15 99 20] Inv0.inv numer}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 99 25 99 30] Inv0.inv denom}
    ensures { [#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 99 4 99 46] Inv1.inv result }
    
end
module Cdsat_Term_Impl10_Rat_Interface
  use prelude.Int
  use prelude.Int64
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val rat [#"/Users/xavier/Code/cdsat/src/term.rs" 287 4 287 38] (a : int64) (b : int64) : Cdsat_Term_Value_Type.t_value
end
module Cdsat_Term_Impl10_Rat
  use prelude.Int
  use prelude.Int64
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = int64
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = int64,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone NumRational_Impl1_New_Interface as New0 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv
  clone Core_Convert_Impl3_Into_Interface as Into0 with
    type t = int64,
    type u = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  let rec cfg rat [#"/Users/xavier/Code/cdsat/src/term.rs" 287 4 287 38] [@cfg:stackify] [@cfg:subregion_analysis] (a : int64) (b : int64) : Cdsat_Term_Value_Type.t_value
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  var a : int64 = a;
  var b : int64 = b;
  var _3 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _4 : NumBigint_Bigint_BigInt_Type.t_bigint;
  var _6 : NumBigint_Bigint_BigInt_Type.t_bigint;
  {
    goto BB0
  }
  BB0 {
    _4 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 288 36 288 44] Into0.into a);
    goto BB1
  }
  BB1 {
    _6 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 288 46 288 54] Into0.into b);
    goto BB2
  }
  BB2 {
    _3 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 288 19 288 55] New0.new _4 _6);
    _4 <- any NumBigint_Bigint_BigInt_Type.t_bigint;
    _6 <- any NumBigint_Bigint_BigInt_Type.t_bigint;
    goto BB3
  }
  BB3 {
    _0 <- Cdsat_Term_Value_Type.C_Rat _3;
    _3 <- any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Cdsat_Term_Impl9_Zero_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val zero [#"/Users/xavier/Code/cdsat/src/term.rs" 275 4 275 25] (_1 : ()) : Cdsat_Term_Value_Type.t_value
end
module Cdsat_Term_Impl9_Zero
  use prelude.Int
  use prelude.Int64
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl10_Rat_Interface as Rat0
  let rec cfg zero [#"/Users/xavier/Code/cdsat/src/term.rs" 275 4 275 25] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : Cdsat_Term_Value_Type.t_value
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 276 8 276 24] Rat0.rat ([#"/Users/xavier/Code/cdsat/src/term.rs" 276 19 276 20] (0 : int64)) ([#"/Users/xavier/Code/cdsat/src/term.rs" 276 22 276 23] (1 : int64)));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Times_Interface
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val times [#"/Users/xavier/Code/cdsat/src/term.rs" 86 4 86 43] (k : isize) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Times
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl1_Val_Interface as Val0
  clone Cdsat_Term_Impl9_Zero_Interface as Zero0
  let rec cfg times [#"/Users/xavier/Code/cdsat/src/term.rs" 86 4 86 43] [@cfg:stackify] [@cfg:subregion_analysis] (k : isize) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var k : isize = k;
  var b : Cdsat_Term_Term_Type.t_term = b;
  var _5 : Cdsat_Term_Value_Type.t_value;
  {
    goto BB0
  }
  BB0 {
    switch ([#"/Users/xavier/Code/cdsat/src/term.rs" 87 11 87 17] k = ([#"/Users/xavier/Code/cdsat/src/term.rs" 87 16 87 17] (0 : isize)))
      | False -> goto BB4
      | True -> goto BB1
      end
  }
  BB1 {
    _5 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 88 22 88 35] Zero0.zero ());
    goto BB2
  }
  BB2 {
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 88 12 88 36] Val0.val' _5);
    _5 <- any Cdsat_Term_Value_Type.t_value;
    goto BB3
  }
  BB3 {
    goto BB10
  }
  BB4 {
    switch ([#"/Users/xavier/Code/cdsat/src/term.rs" 89 18 89 24] k = ([#"/Users/xavier/Code/cdsat/src/term.rs" 89 23 89 24] (1 : isize)))
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _0 <- b;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB9
  }
  BB6 {
    goto BB7
  }
  BB7 {
    _0 <- Cdsat_Term_Term_Type.C_Times k b;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_And_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val and [#"/Users/xavier/Code/cdsat/src/term.rs" 96 4 96 40] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_And
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg and [#"/Users/xavier/Code/cdsat/src/term.rs" 96 4 96 40] [@cfg:stackify] [@cfg:subregion_analysis] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var a : Cdsat_Term_Term_Type.t_term = a;
  var b : Cdsat_Term_Term_Type.t_term = b;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Term_Term_Type.C_Conj a b;
    a <- any Cdsat_Term_Term_Type.t_term;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Or_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val or [#"/Users/xavier/Code/cdsat/src/term.rs" 100 4 100 39] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Or
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg or [#"/Users/xavier/Code/cdsat/src/term.rs" 100 4 100 39] [@cfg:stackify] [@cfg:subregion_analysis] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var a : Cdsat_Term_Term_Type.t_term = a;
  var b : Cdsat_Term_Term_Type.t_term = b;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Term_Term_Type.C_Disj a b;
    a <- any Cdsat_Term_Term_Type.t_term;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Lt_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val lt [#"/Users/xavier/Code/cdsat/src/term.rs" 104 4 104 39] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Lt
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg lt [#"/Users/xavier/Code/cdsat/src/term.rs" 104 4 104 39] [@cfg:stackify] [@cfg:subregion_analysis] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var a : Cdsat_Term_Term_Type.t_term = a;
  var b : Cdsat_Term_Term_Type.t_term = b;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Term_Term_Type.C_Lt a b;
    a <- any Cdsat_Term_Term_Type.t_term;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_Eq_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val eq_ [#"/Users/xavier/Code/cdsat/src/term.rs" 108 4 108 40] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Eq
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg eq_ [#"/Users/xavier/Code/cdsat/src/term.rs" 108 4 108 40] [@cfg:stackify] [@cfg:subregion_analysis] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var a : Cdsat_Term_Term_Type.t_term = a;
  var b : Cdsat_Term_Term_Type.t_term = b;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _0 <- Cdsat_Term_Term_Type.C_Eq a b;
    a <- any Cdsat_Term_Term_Type.t_term;
    b <- any Cdsat_Term_Term_Type.t_term;
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module Cdsat_Term_Impl1_AsVal_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val as_val [#"/Users/xavier/Code/cdsat/src/term.rs" 112 4 112 40] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl1_AsVal
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl27_Clone_Interface as Clone0
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  let rec cfg as_val [#"/Users/xavier/Code/cdsat/src/term.rs" 112 4 112 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Value_Type.t_value
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  var self : Cdsat_Term_Term_Type.t_term = self;
  var v : Cdsat_Term_Value_Type.t_value;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Term_Type.C_Value _ -> goto BB1
      | _ -> goto BB4
      end
  }
  BB1 {
    goto BB2
  }
  BB2 {
    v <- Cdsat_Term_Term_Type.value_0 self;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 114 12 114 21] Clone0.clone' v);
    goto BB3
  }
  BB3 {
    return _0
  }
  BB4 {
    absurd
  }
  
end
module Cdsat_Term_Impl2_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 123 4 123 74] (self : Cdsat_Term_Term_Type.t_term) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl3_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 142 4 142 74] (self : Cdsat_Term_Value_Type.t_value) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl28_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] (self : Cdsat_Term_Value_Type.t_value) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl28_Fmt
  use prelude.Borrow
  use prelude.Opaque
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Fmt_Formatter_Type.t_formatter
  clone Core_Fmt_Impl7_DebugTupleField1Finish_Interface as DebugTupleField1Finish0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error);
  var self : Cdsat_Term_Value_Type.t_value = self;
  var f : borrowed (Core_Fmt_Formatter_Type.t_formatter) = f;
  var __self_0 : bool;
  var _5 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _7 : string;
  var _8 : dyn;
  var _10 : bool;
  var __self_01 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _12 : borrowed (Core_Fmt_Formatter_Type.t_formatter);
  var _14 : string;
  var _15 : dyn;
  var _17 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    __self_01 <- Cdsat_Term_Value_Type.rat_0 self;
    _12 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _12) };
    _14 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] "Rat");
    _17 <- __self_01;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] DebugTupleField1Finish0.debug_tuple_field1_finish _12 _14 _15);
    _12 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _15 <- any dyn;
    goto BB6
  }
  BB3 {
    assume { Resolve0.resolve f };
    absurd
  }
  BB4 {
    __self_0 <- Cdsat_Term_Value_Type.bool_0 self;
    _5 <- Borrow.borrow_mut ( * f);
    f <- { f with current = ( ^ _5) };
    _7 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] "Bool");
    _10 <- __self_0;
    _0 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] DebugTupleField1Finish0.debug_tuple_field1_finish _5 _7 _8);
    _5 <- any borrowed (Core_Fmt_Formatter_Type.t_formatter);
    _8 <- any dyn;
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve f };
    goto BB7
  }
  BB6 {
    assume { Resolve0.resolve f };
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Cdsat_Term_Impl32_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 187 34 187 36] (self : Cdsat_Term_Value_Type.t_value) : ()
    
end
module Cdsat_Term_Impl32_AssertReceiverIsTotalEq
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 187 34 187 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Cdsat_Term_Impl8_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val bool [#"/Users/xavier/Code/cdsat/src/term.rs" 223 4 223 30] (self : Cdsat_Term_Value_Type.t_value) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 222 4 222 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    
end
module Cdsat_Term_Impl8_Bool
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  let rec cfg bool [#"/Users/xavier/Code/cdsat/src/term.rs" 223 4 223 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 222 4 222 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self : Cdsat_Term_Value_Type.t_value = self;
  var b : bool;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    absurd
  }
  BB4 {
    b <- Cdsat_Term_Value_Type.bool_0 self;
    _0 <- b;
    return _0
  }
  
end
module Cdsat_Term_Impl8_Lt_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val lt [#"/Users/xavier/Code/cdsat/src/term.rs" 233 4 233 36] (self : Cdsat_Term_Value_Type.t_value) (o : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl8_Add_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val add [#"/Users/xavier/Code/cdsat/src/term.rs" 243 4 243 37] (self : Cdsat_Term_Value_Type.t_value) (o : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl9_True_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val true_ [#"/Users/xavier/Code/cdsat/src/term.rs" 271 4 271 33] (_1 : ()) : Cdsat_Term_Value_Type.t_value
end
module Cdsat_Term_Impl9_True
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg true_ [#"/Users/xavier/Code/cdsat/src/term.rs" 271 4 271 33] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : Cdsat_Term_Value_Type.t_value
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  {
    goto BB0
  }
  BB0 {
    _0 <- Cdsat_Term_Value_Type.C_Bool ([#"/Users/xavier/Code/cdsat/src/term.rs" 272 20 272 24] true);
    return _0
  }
  
end
module NumRational_Impl10_Mul_Interface
  type t
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val mul (self : NumRational_Ratio_Type.t_ratio t) (rhs : NumRational_Ratio_Type.t_ratio t) : NumRational_Ratio_Type.t_ratio t
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 685 11 685 15] Inv0.inv self}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 685 17 685 20] Inv0.inv rhs}
    ensures { [#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 685 4 685 43] Inv0.inv result }
    
end
module Cdsat_Term_Impl10_Scale_Interface
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val scale [#"/Users/xavier/Code/cdsat/src/term.rs" 281 4 281 40] (self : Cdsat_Term_Value_Type.t_value) (k : isize) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl10_Scale
  use prelude.Int
  use prelude.Int32
  use prelude.IntSize
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = int32
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = int32,
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = isize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = isize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone NumRational_Impl10_Mul_Interface as Mul0 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv3.inv
  clone NumRational_Impl1_New_Interface as New0 with
    type t = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv3.inv
  clone Core_Convert_Impl3_Into_Interface as Into1 with
    type t = int32,
    type u = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv1.inv
  clone Core_Convert_Impl3_Into_Interface as Into0 with
    type t = isize,
    type u = NumBigint_Bigint_BigInt_Type.t_bigint,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  let rec cfg scale [#"/Users/xavier/Code/cdsat/src/term.rs" 281 4 281 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : Cdsat_Term_Value_Type.t_value) (k : isize) : Cdsat_Term_Value_Type.t_value
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Value_Type.t_value;
  var self : Cdsat_Term_Value_Type.t_value = self;
  var k : isize = k;
  var r : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _5 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _7 : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
  var _8 : NumBigint_Bigint_BigInt_Type.t_bigint;
  var _10 : NumBigint_Bigint_BigInt_Type.t_bigint;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | Cdsat_Term_Value_Type.C_Bool _ -> goto BB1
      | Cdsat_Term_Value_Type.C_Rat _ -> goto BB2
      end
  }
  BB1 {
    absurd
  }
  BB2 {
    goto BB4
  }
  BB3 {
    absurd
  }
  BB4 {
    r <- Cdsat_Term_Value_Type.rat_0 self;
    self <- (let Cdsat_Term_Value_Type.C_Rat a = self in Cdsat_Term_Value_Type.C_Rat (any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)));
    _8 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 283 61 283 69] Into0.into k);
    goto BB5
  }
  BB5 {
    _10 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 283 71 283 79] Into1.into ([#"/Users/xavier/Code/cdsat/src/term.rs" 283 71 283 72] (1 : int32)));
    goto BB6
  }
  BB6 {
    _7 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 283 44 283 80] New0.new _8 _10);
    _8 <- any NumBigint_Bigint_BigInt_Type.t_bigint;
    _10 <- any NumBigint_Bigint_BigInt_Type.t_bigint;
    goto BB7
  }
  BB7 {
    _5 <- ([#"/Users/xavier/Code/cdsat/src/term.rs" 283 40 283 80] Mul0.mul r _7);
    r <- any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
    _7 <- any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
    goto BB8
  }
  BB8 {
    _0 <- Cdsat_Term_Value_Type.C_Rat _5;
    _5 <- any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Hashbrown_Raw_Inner_RawTableInner_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt8
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_rawtableinner 'a =
    | C_RawTableInner usize (Core_Ptr_NonNull_NonNull_Type.t_nonnull uint8) usize usize 'a
    
end
module Hashbrown_Raw_Inner_RawTable_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Hashbrown_Raw_Inner_RawTableInner_Type as Hashbrown_Raw_Inner_RawTableInner_Type
  type t_rawtable 't 'a =
    | C_RawTable (Hashbrown_Raw_Inner_RawTableInner_Type.t_rawtableinner 'a) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Hashbrown_Raw_Inner_Alloc_Inner_Global_Type
  type t_global  =
    | C_Global
    
end
module Indexmap_HashValue_Type
  use prelude.Int
  use prelude.UIntSize
  type t_hashvalue  =
    | C_HashValue usize
    
end
module Indexmap_Bucket_Type
  use Indexmap_HashValue_Type as Indexmap_HashValue_Type
  type t_bucket 'k 'v =
    | C_Bucket (Indexmap_HashValue_Type.t_hashvalue) 'k 'v
    
end
module Indexmap_Map_Core_IndexMapCore_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Indexmap_Bucket_Type as Indexmap_Bucket_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Hashbrown_Raw_Inner_Alloc_Inner_Global_Type as Hashbrown_Raw_Inner_Alloc_Inner_Global_Type
  use Hashbrown_Raw_Inner_RawTable_Type as Hashbrown_Raw_Inner_RawTable_Type
  type t_indexmapcore 'k 'v =
    | C_IndexMapCore (Hashbrown_Raw_Inner_RawTable_Type.t_rawtable usize (Hashbrown_Raw_Inner_Alloc_Inner_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec (Indexmap_Bucket_Type.t_bucket 'k 'v) (Alloc_Alloc_Global_Type.t_global))
    
end
module Indexmap_Map_IndexMap_Type
  use Indexmap_Map_Core_IndexMapCore_Type as Indexmap_Map_Core_IndexMapCore_Type
  type t_indexmap 'k 'v 's =
    | C_IndexMap (Indexmap_Map_Core_IndexMapCore_Type.t_indexmapcore 'k 'v) 's
    
end
module Alloc_String_String_Type
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_string  =
    | C_String (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Symbol_Type
  use Alloc_String_String_Type as Alloc_String_String_Type
  type t_symbol  =
    | C_Symbol (Alloc_String_String_Type.t_string)
    
end
module Std_Collections_Hash_Map_RandomState_Type
  use prelude.Int
  use prelude.UInt64
  type t_randomstate  =
    | C_RandomState uint64 uint64
    
end
module Smt2parser_Visitors_AttributeValue_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_attributevalue 'constant' 'symbol 'sexpr =
    | C_None
    | C_Constant 'constant'
    | C_Symbol 'symbol
    | C_SExpr (Alloc_Vec_Vec_Type.t_vec 'sexpr (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Term_Type
  use Smt2parser_Visitors_AttributeValue_Type as Smt2parser_Visitors_AttributeValue_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort =
    | C_Constant 'constant'
    | C_QualIdentifier 'qualidentifier
    | C_Application 'qualidentifier (Alloc_Vec_Vec_Type.t_vec (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    | C_Let (Alloc_Vec_Vec_Type.t_vec ('symbol, t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global)) (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort)
    | C_Forall (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global)) (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort)
    | C_Exists (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global)) (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort)
    | C_Match (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec 'symbol (Alloc_Alloc_Global_Type.t_global), t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    | C_Attributes (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Vec_Vec_Type.t_vec ('keyword, Smt2parser_Visitors_AttributeValue_Type.t_attributevalue 'constant' 'symbol 'sexpr) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Constant_Type
  use prelude.Int
  use prelude.UInt8
  use Alloc_String_String_Type as Alloc_String_String_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  type t_constant  =
    | C_Numeral (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Decimal (NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint))
    | C_Hexadecimal (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    | C_Binary (Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global))
    | C_String (Alloc_String_String_Type.t_string)
    
end
module Smt2parser_Concrete_QualIdentifier_Type
  type t_qualidentifier 'identifier 'sort =
    | C_Simple 'identifier
    | C_Sorted 'identifier 'sort
    
end
module Smt2parser_Visitors_Index_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  type t_index 'symbol =
    | C_Numeral (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Symbol 'symbol
    
end
module Smt2parser_Visitors_Identifier_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Smt2parser_Visitors_Index_Type as Smt2parser_Visitors_Index_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_identifier 'symbol =
    | C_Simple 'symbol
    | C_Indexed 'symbol (Alloc_Vec_Vec_Type.t_vec (Smt2parser_Visitors_Index_Type.t_index 'symbol) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Sort_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_sort 'identifier =
    | C_Simple 'identifier
    | C_Parameterized 'identifier (Alloc_Vec_Vec_Type.t_vec (t_sort 'identifier) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Keyword_Type
  use Alloc_String_String_Type as Alloc_String_String_Type
  type t_keyword  =
    | C_Keyword (Alloc_String_String_Type.t_string)
    
end
module Smt2parser_Concrete_SExpr_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_sexpr 'constant' 'symbol 'keyword =
    | C_Constant 'constant'
    | C_Symbol 'symbol
    | C_Keyword 'keyword
    | C_Application (Alloc_Vec_Vec_Type.t_vec (t_sexpr 'constant' 'symbol 'keyword) (Alloc_Alloc_Global_Type.t_global))
    
end
module Cdsat_TermToTerm_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  val term_to_term [#"/Users/xavier/Code/cdsat/src/main.rs" 62 0 62 85] (vars : Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)) (t : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) : Cdsat_Term_Term_Type.t_term
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module Cdsat_TermToTerm_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  type cdsat_termtoterm_closure0  =
    | Cdsat_TermToTerm_Closure0 (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))
    
end
module Cdsat_TermToTerm_Closure0_Interface
  use export Cdsat_TermToTerm_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  let function field_0 [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) : Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let Cdsat_TermToTerm_Closure0 a = self in a
  predicate resolve [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (_1 : cdsat_termtoterm_closure0) =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] true
  predicate unnest [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) (_2 : cdsat_termtoterm_closure0)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (a) = args in true
  predicate postcondition_once [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (result : Cdsat_Term_Term_Type.t_term)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (a) = args in true
  predicate postcondition_mut [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : borrowed cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (result : Cdsat_Term_Term_Type.t_term)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] (let (a) = args in true) /\ unnest ( * self) ( ^ self)
  val cdsat_TermToTerm_Closure0 [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (_1 : borrowed cdsat_termtoterm_closure0) (a : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) : Cdsat_Term_Term_Type.t_term
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module Cdsat_TermToTerm_Closure0
  use export Cdsat_TermToTerm_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  clone Cdsat_TermToTerm_Interface as TermToTerm0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = cdsat_termtoterm_closure0
  let function field_0 [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) : Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let Cdsat_TermToTerm_Closure0 a = self in a
  predicate resolve [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (_1 : cdsat_termtoterm_closure0) =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] true
  predicate unnest [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) (_2 : cdsat_termtoterm_closure0)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (a) = args in true
  predicate postcondition_once [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (result : Cdsat_Term_Term_Type.t_term)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (a) = args in true
  predicate postcondition_mut [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] (self : borrowed cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (result : Cdsat_Term_Term_Type.t_term)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] (let (a) = args in true) /\ unnest ( * self) ( ^ self)
  let rec cfg cdsat_TermToTerm_Closure0 [#"/Users/xavier/Code/cdsat/src/main.rs" 67 42 67 45] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed cdsat_termtoterm_closure0) (a : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) : Cdsat_Term_Term_Type.t_term
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Cdsat_Term_Term_Type.t_term;
  var _1 : borrowed cdsat_termtoterm_closure0 = _1;
  var a : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) = a;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _1 };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/main.rs" 67 46 67 67] TermToTerm0.term_to_term (field_0 ( * _1)) a);
    a <- any Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)));
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Smt2parser_Visitors_ConstructorDec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_constructordec 'symbol 'sort =
    | C_ConstructorDec 'symbol (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Visitors_DatatypeDec_Type
  use Smt2parser_Visitors_ConstructorDec_Type as Smt2parser_Visitors_ConstructorDec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_datatypedec 'symbol 'sort =
    | C_DatatypeDec (Alloc_Vec_Vec_Type.t_vec 'symbol (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec (Smt2parser_Visitors_ConstructorDec_Type.t_constructordec 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Visitors_FunctionDec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_functiondec 'symbol 'sort =
    | C_FunctionDec 'symbol (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global)) 'sort
    
end
module Smt2parser_Concrete_Command_Type
  use Smt2parser_Visitors_AttributeValue_Type as Smt2parser_Visitors_AttributeValue_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_String_String_Type as Alloc_String_String_Type
  use Smt2parser_Visitors_FunctionDec_Type as Smt2parser_Visitors_FunctionDec_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  use Smt2parser_Visitors_DatatypeDec_Type as Smt2parser_Visitors_DatatypeDec_Type
  type t_command 'term 'symbol 'sort 'keyword 'constant' 'sexpr =
    | C_Assert 'term
    | C_CheckSat
    | C_CheckSatAssuming (Alloc_Vec_Vec_Type.t_vec ('symbol, bool) (Alloc_Alloc_Global_Type.t_global))
    | C_DeclareConst 'symbol 'sort
    | C_DeclareDatatype 'symbol (Smt2parser_Visitors_DatatypeDec_Type.t_datatypedec 'symbol 'sort)
    | C_DeclareDatatypes (Alloc_Vec_Vec_Type.t_vec ('symbol, NumBigint_Biguint_BigUint_Type.t_biguint, Smt2parser_Visitors_DatatypeDec_Type.t_datatypedec 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    | C_DeclareFun 'symbol (Alloc_Vec_Vec_Type.t_vec 'sort (Alloc_Alloc_Global_Type.t_global)) 'sort
    | C_DeclareSort 'symbol (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_DefineFun (Smt2parser_Visitors_FunctionDec_Type.t_functiondec 'symbol 'sort) 'term
    | C_DefineFunRec (Smt2parser_Visitors_FunctionDec_Type.t_functiondec 'symbol 'sort) 'term
    | C_DefineFunsRec (Alloc_Vec_Vec_Type.t_vec (Smt2parser_Visitors_FunctionDec_Type.t_functiondec 'symbol 'sort, 'term) (Alloc_Alloc_Global_Type.t_global))
    | C_DefineSort 'symbol (Alloc_Vec_Vec_Type.t_vec 'symbol (Alloc_Alloc_Global_Type.t_global)) 'sort
    | C_Echo (Alloc_String_String_Type.t_string)
    | C_Exit
    | C_GetAssertions
    | C_GetAssignment
    | C_GetInfo 'keyword
    | C_GetModel
    | C_GetOption 'keyword
    | C_GetProof
    | C_GetUnsatAssumptions
    | C_GetUnsatCore
    | C_GetValue (Alloc_Vec_Vec_Type.t_vec 'term (Alloc_Alloc_Global_Type.t_global))
    | C_Pop (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Push (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Reset
    | C_ResetAssertions
    | C_SetInfo 'keyword (Smt2parser_Visitors_AttributeValue_Type.t_attributevalue 'constant' 'symbol 'sexpr)
    | C_SetLogic 'symbol
    | C_SetOption 'keyword (Smt2parser_Visitors_AttributeValue_Type.t_attributevalue 'constant' 'symbol 'sexpr)
    
end
module Cdsat_ToAssign_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Smt2parser_Concrete_Command_Type as Smt2parser_Concrete_Command_Type
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  val to_assign [#"/Users/xavier/Code/cdsat/src/main.rs" 135 0 135 84] (vars : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))) (c : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    
end
module Std_Io_Error_ErrorKind_Type
  type t_errorkind  =
    | C_NotFound
    | C_PermissionDenied
    | C_ConnectionRefused
    | C_ConnectionReset
    | C_HostUnreachable
    | C_NetworkUnreachable
    | C_ConnectionAborted
    | C_NotConnected
    | C_AddrInUse
    | C_AddrNotAvailable
    | C_NetworkDown
    | C_BrokenPipe
    | C_AlreadyExists
    | C_WouldBlock
    | C_NotADirectory
    | C_IsADirectory
    | C_DirectoryNotEmpty
    | C_ReadOnlyFilesystem
    | C_FilesystemLoop
    | C_StaleNetworkFileHandle
    | C_InvalidInput
    | C_InvalidData
    | C_TimedOut
    | C_WriteZero
    | C_StorageFull
    | C_NotSeekable
    | C_FilesystemQuotaExceeded
    | C_FileTooLarge
    | C_ResourceBusy
    | C_ExecutableFileBusy
    | C_Deadlock
    | C_CrossesDevices
    | C_TooManyLinks
    | C_InvalidFilename
    | C_ArgumentListTooLong
    | C_Interrupted
    | C_Unsupported
    | C_UnexpectedEof
    | C_OutOfMemory
    | C_Other
    | C_Uncategorized
    
end
module Std_Io_Error_SimpleMessage_Type
  use prelude.Borrow
  use Std_Io_Error_ErrorKind_Type as Std_Io_Error_ErrorKind_Type
  type t_simplemessage  =
    | C_SimpleMessage (Std_Io_Error_ErrorKind_Type.t_errorkind) string
    
end
module Std_Io_Error_ErrorData_Type
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  use Std_Io_Error_SimpleMessage_Type as Std_Io_Error_SimpleMessage_Type
  use Std_Io_Error_ErrorKind_Type as Std_Io_Error_ErrorKind_Type
  type t_errordata 'c =
    | C_Os int32
    | C_Simple (Std_Io_Error_ErrorKind_Type.t_errorkind)
    | C_SimpleMessage (Std_Io_Error_SimpleMessage_Type.t_simplemessage)
    | C_Custom 'c
    
end
module Std_Io_Error_Custom_Type
  use prelude.Opaque
  use Std_Io_Error_ErrorKind_Type as Std_Io_Error_ErrorKind_Type
  type t_custom  =
    | C_Custom (Std_Io_Error_ErrorKind_Type.t_errorkind) dyn
    
end
module Std_Io_Error_ReprBitpacked_Repr_Type
  use Std_Io_Error_Custom_Type as Std_Io_Error_Custom_Type
  use Std_Io_Error_ErrorData_Type as Std_Io_Error_ErrorData_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_repr  =
    | C_Repr (Core_Ptr_NonNull_NonNull_Type.t_nonnull ()) (Core_Marker_PhantomData_Type.t_phantomdata (Std_Io_Error_ErrorData_Type.t_errordata (Std_Io_Error_Custom_Type.t_custom)))
    
end
module Std_Io_Error_Error_Type
  use Std_Io_Error_ReprBitpacked_Repr_Type as Std_Io_Error_ReprBitpacked_Repr_Type
  type t_error  =
    | C_Error (Std_Io_Error_ReprBitpacked_Repr_Type.t_repr)
    
end
module Cdsat_Main_Interface
  use Std_Io_Error_Error_Type as Std_Io_Error_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  val main [#"/Users/xavier/Code/cdsat/src/main.rs" 194 0 194 32] (_1 : ()) : Core_Result_Result_Type.t_result () (Std_Io_Error_Error_Type.t_error)
    
end
module Cdsat_Main_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  type cdsat_main_closure0  =
    | Cdsat_Main_Closure0 (borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)))
    
end
module Cdsat_Main_Closure0_Interface
  use export Cdsat_Main_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Smt2parser_Concrete_Command_Type as Smt2parser_Concrete_Command_Type
  let function field_0 [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let Cdsat_Main_Closure0 a = self in a
  predicate resolve [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (_1 : cdsat_main_closure0) =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) (_2 : cdsat_main_closure0)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (c) = args in true
  predicate postcondition_once [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) (result : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (c) = args in true
  predicate postcondition_mut [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : borrowed cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) (result : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] (let (c) = args in true) /\ unnest ( * self) ( ^ self)
  val cdsat_Main_Closure0 [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (_1 : borrowed cdsat_main_closure0) (c : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module Cdsat_Main_Closure0
  use export Cdsat_Main_Closure0_Type
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Smt2parser_Concrete_Command_Type as Smt2parser_Concrete_Command_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = cdsat_main_closure0
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)
  clone Cdsat_ToAssign_Interface as ToAssign0
  let function field_0 [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let Cdsat_Main_Closure0 a = self in a
  predicate resolve [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (_1 : cdsat_main_closure0) =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) (_2 : cdsat_main_closure0)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (c) = args in true
  predicate postcondition_once [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) (result : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (c) = args in true
  predicate postcondition_mut [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] (self : borrowed cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) (result : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] (let (c) = args in true) /\ unnest ( * self) ( ^ self)
  let rec cfg cdsat_Main_Closure0 [#"/Users/xavier/Code/cdsat/src/main.rs" 203 40 203 43] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed cdsat_main_closure0) (c : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value);
  var _1 : borrowed cdsat_main_closure0 = _1;
  var c : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) = c;
  var _3 : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate));
  var _4 : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate));
  {
    goto BB0
  }
  BB0 {
    _4 <- Borrow.borrow_mut ( * field_0 ( * _1));
    _1 <- { _1 with current = (let Cdsat_Main_Closure0 a =  * _1 in Cdsat_Main_Closure0 ({ (field_0 ( * _1)) with current = ( ^ _4) })) };
    _3 <- Borrow.borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    _0 <- ([#"/Users/xavier/Code/cdsat/src/main.rs" 203 44 203 67] ToAssign0.to_assign _3 c);
    _3 <- any borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate));
    c <- any Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword));
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    assume { Resolve1.resolve _1 };
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module Cdsat_Concrete_Impl3
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel5
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel3
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 9 18 18] forall self : Cdsat_Concrete_TheoryState_Type.t_theorystate . forall other : Cdsat_Concrete_TheoryState_Type.t_theorystate . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Concrete_Impl8
  use prelude.Borrow
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone Cdsat_Concrete_Impl11_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 16 270 25] forall self : Cdsat_Concrete_Answer_Type.t_answer . forall other : Cdsat_Concrete_Answer_Type.t_answer . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl14
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel8
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel7 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel8.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel_Interface as DeepModel6
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel5
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel4 with
    function DeepModel0.deep_model = DeepModel7.deep_model,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel8.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Term_Impl6_DeepModel_Interface as DeepModel3
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel5.deep_model,
    function DeepModel1.deep_model = DeepModel6.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl17_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model,
    function DeepModel3.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 16 15 25] forall self : Cdsat_Trail_Assignment_Type.t_assignment . forall other : Cdsat_Trail_Assignment_Type.t_assignment . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl19
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 16 47 25] forall self : Cdsat_Trail_Reason_Type.t_reason . forall other : Cdsat_Trail_Reason_Type.t_reason . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl24
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 16 65 25] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Term_Impl14
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl17_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 11 23 11 32] forall self : Cdsat_Term_Sort_Type.t_sort . forall other : Cdsat_Term_Sort_Type.t_sort . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Term_Impl23
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel4
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl17_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 30 23 30 32] forall self : Cdsat_Term_Term_Type.t_term . forall other : Cdsat_Term_Term_Type.t_term . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Term_Impl30
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 187 23 187 32] forall self : Cdsat_Term_Value_Type.t_value . forall other : Cdsat_Term_Value_Type.t_value . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Concrete_Impl4
  
end
module Cdsat_Concrete_Impl9
  
end
module Cdsat_Trail_Impl15
  
end
module Cdsat_Trail_Impl20
  
end
module Cdsat_Trail_Impl25
  
end
module Cdsat_Term_Impl15
  
end
module Cdsat_Term_Impl24
  
end
module Cdsat_Term_Impl31
  
end
module Cdsat_Concrete_Impl5
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 18 20 18 22] true
end
module Cdsat_Concrete_Impl10
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 27 270 29] true
end
module Cdsat_Trail_Impl16
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 27 15 29] true
end
module Cdsat_Trail_Impl21
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 27 47 29] true
end
module Cdsat_Trail_Impl26
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 27 65 29] true
end
module Cdsat_Term_Impl16
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 11 34 11 36] true
end
module Cdsat_Term_Impl25
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 30 34 30 36] true
end
module Cdsat_Term_Impl32
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 187 34 187 36] true
end
module Cdsat_Concrete_Impl6
  
end
module Cdsat_Concrete_Impl11
  
end
module Cdsat_Trail_Impl17
  
end
module Cdsat_Trail_Impl22
  
end
module Cdsat_Trail_Impl7
  
end
module Cdsat_Term_Impl17
  
end
module Cdsat_Term_Impl5
  
end
module Cdsat_Term_Impl6
  
end
module Cdsat_Concrete_Impl7
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 270 9 270 14] true
end
module Cdsat_Concrete_Impl12
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 276 9 276 14] true
end
module Cdsat_Trail_Impl23
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 9 65 14] true
end
module Cdsat_Term_Impl12
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 11 16 11 21] true
end
module Cdsat_Term_Impl21
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 30 16 30 21] true
end
module Cdsat_Term_Impl28
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 187 16 187 21] true
end
module Cdsat_Concrete_Impl1
  
end
module Cdsat_Trail_Impl1
  
end
module Cdsat_Trail_Impl2
  
end
module Cdsat_Trail_Impl6
  
end
module Cdsat_Term_Impl0
  
end
module Cdsat_Term_Impl4
  
end
module Cdsat_Term_Impl7
  
end
module Cdsat_Trail_Impl13
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 15 9 15 14] forall self : Cdsat_Trail_Assignment_Type.t_assignment . Inv0.inv self -> (forall result : Cdsat_Trail_Assignment_Type.t_assignment . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Trail_Impl18
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 47 9 47 14] forall self : Cdsat_Trail_Reason_Type.t_reason . Inv0.inv self -> (forall result : Cdsat_Trail_Reason_Type.t_reason . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Trail_Impl27
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 65 31 65 36] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv self -> (forall result : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Term_Impl11
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 11 9 11 14] forall self : Cdsat_Term_Sort_Type.t_sort . Inv0.inv self -> (forall result : Cdsat_Term_Sort_Type.t_sort . Inv1.inv result /\ result = self)
end
module Cdsat_Term_Impl20
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 30 9 30 14] forall self : Cdsat_Term_Term_Type.t_term . Inv0.inv self -> (forall result : Cdsat_Term_Term_Type.t_term . Inv1.inv result /\ result = self)
end
module Cdsat_Term_Impl27
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 187 9 187 14] forall self : Cdsat_Term_Value_Type.t_value . Inv0.inv self -> (forall result : Cdsat_Term_Value_Type.t_value . Inv1.inv result /\ result = self)
end
module Cdsat_Trail_Impl0
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 29 4 29 74] true
end
module Cdsat_Term_Impl2
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 123 4 123 74] true
end
module Cdsat_Term_Impl3
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 142 4 142 74] true
end
module Cdsat_Trail_Impl28
  
end
module Cdsat_Term_Impl18
  
end
module Cdsat_Trail_Impl3
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel0
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  use Core_Option_Option_Type as Core_Option_Option_Type
  goal partial_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 70 4 70 59] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv other /\ Inv0.inv self -> (forall result : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering) . result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log self other) -> result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other)))
end
module Cdsat_Trail_Impl4
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel0
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  goal cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 77 4 77 43] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv other /\ Inv0.inv self -> (forall result : Core_Cmp_Ordering_Type.t_ordering . result = CmpLog0.cmp_log self other -> result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl5
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  goal trans_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 4 129 52] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall z : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall o : Core_Cmp_Ordering_Type.t_ordering . Inv0.inv z /\ Inv0.inv y /\ Inv0.inv x /\ CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o /\ (forall result : () . CmpLog0.cmp_log x z = o -> CmpLog0.cmp_log x z = o)
  goal eq_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 4 146 31] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) -> (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
  goal cmp_gt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 4 117 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
  goal cmp_ge_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 4 112 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) -> GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
  goal cmp_le_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 4 102 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) -> LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
  goal cmp_lt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 4 107 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
  goal refl_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 4 122 20] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv x -> (forall result : () . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
  goal antisym1_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 4 135 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x /\ CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
  goal antisym2_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 4 141 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x /\ CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl11
  goal index_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 599 4 599 55] true
end
module Cdsat_Term_Impl13
  
end
module Cdsat_Term_Impl22
  
end
module Cdsat_Term_Impl29
  
end
module Cdsat_Term_Impl19
  type __h
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal hash_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 11 55 11 59] forall self : Cdsat_Term_Sort_Type.t_sort . forall state : borrowed __h . Inv0.inv state /\ Inv1.inv self -> Inv0.inv state
end
module Cdsat_Term_Impl26
  type __h
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal hash_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 30 38 30 42] forall self : Cdsat_Term_Term_Type.t_term . forall state : borrowed __h . Inv0.inv state /\ Inv1.inv self -> Inv0.inv state
end
module Cdsat_Term_Impl33
  type __h
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal hash_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 187 38 187 42] forall self : Cdsat_Term_Value_Type.t_value . forall state : borrowed __h . Inv0.inv state /\ Inv1.inv self -> Inv0.inv state
end
