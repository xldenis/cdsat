
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Cdsat_Term_Sort_Type
  type t_sort  =
    | C_Boolean
    | C_Rational
    
end
module NumRational_Ratio_Type
  type t_ratio 't =
    | C_Ratio 't 't
    
end
module NumBigint_Bigint_Sign_Type
  type t_sign  =
    | C_Minus
    | C_NoSign
    | C_Plus
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module NumBigint_Biguint_BigUint_Type
  use prelude.Int
  use prelude.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_biguint  =
    | C_BigUint (Alloc_Vec_Vec_Type.t_vec uint64 (Alloc_Alloc_Global_Type.t_global))
    
end
module NumBigint_Bigint_BigInt_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  use NumBigint_Bigint_Sign_Type as NumBigint_Bigint_Sign_Type
  type t_bigint  =
    | C_BigInt (NumBigint_Bigint_Sign_Type.t_sign) (NumBigint_Biguint_BigUint_Type.t_biguint)
    
end
module Cdsat_Term_Value_Type
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  type t_value  =
    | C_Bool bool
    | C_Rat (NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint))
    
  let function bool_0 (self : t_value) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool a -> a
      | C_Rat _ -> any bool
      end
  let function rat_0 (self : t_value) : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Bool _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Rat a -> a
      end
end
module Cdsat_Term_Term_Type
  use prelude.Int
  use prelude.UIntSize
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  type t_term  =
    | C_Variable usize (Cdsat_Term_Sort_Type.t_sort)
    | C_Value (Cdsat_Term_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Times (NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Lt (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    | C_Neg (t_term)
    | C_Disj (t_term) (t_term)
    | C_Impl (t_term) (t_term)
    
  let function variable_1 (self : t_term) : Cdsat_Term_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ a -> a
      | C_Value _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Plus _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Times _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Eq _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Lt _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Conj _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Neg _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Disj _ _ -> any Cdsat_Term_Sort_Type.t_sort
      | C_Impl _ _ -> any Cdsat_Term_Sort_Type.t_sort
      end
  let function variable_0 (self : t_term) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable a _ -> a
      | C_Value _ -> any usize
      | C_Plus _ _ -> any usize
      | C_Times _ _ -> any usize
      | C_Eq _ _ -> any usize
      | C_Lt _ _ -> any usize
      | C_Conj _ _ -> any usize
      | C_Neg _ -> any usize
      | C_Disj _ _ -> any usize
      | C_Impl _ _ -> any usize
      end
  let function value_0 (self : t_term) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Value a -> a
      | C_Plus _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Times _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Eq _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Lt _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Conj _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Neg _ -> any Cdsat_Term_Value_Type.t_value
      | C_Disj _ _ -> any Cdsat_Term_Value_Type.t_value
      | C_Impl _ _ -> any Cdsat_Term_Value_Type.t_value
      end
  let function eq_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ a -> a
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function eq_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq a _ -> a
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj a _ -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function conj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ a -> a
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function neg_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg a -> a
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function disj_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj a _ -> a
      | C_Impl _ _ -> any t_term
      end
  let function disj_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ a -> a
      | C_Impl _ _ -> any t_term
      end
  let function impl_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl a _ -> a
      end
  let function impl_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ a -> a
      end
  let function plus_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus a _ -> a
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function plus_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ a -> a
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function times_0 (self : t_term) : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Value _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Plus _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Times a _ -> a
      | C_Eq _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Lt _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Conj _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Neg _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Disj _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      | C_Impl _ _ -> any NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)
      end
  let function times_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ a -> a
      | C_Eq _ _ -> any t_term
      | C_Lt _ _ -> any t_term
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function lt_0 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt a _ -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
  let function lt_1 (self : t_term) : t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Variable _ _ -> any t_term
      | C_Value _ -> any t_term
      | C_Plus _ _ -> any t_term
      | C_Times _ _ -> any t_term
      | C_Eq _ _ -> any t_term
      | C_Lt _ a -> a
      | C_Conj _ _ -> any t_term
      | C_Neg _ -> any t_term
      | C_Disj _ _ -> any t_term
      | C_Impl _ _ -> any t_term
      end
end
module Cdsat_Trail_TrailIndex_Type
  use prelude.Int
  use prelude.UIntSize
  type t_trailindex  =
    | C_TrailIndex usize usize
    
  let function trailindex_0 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex a _ -> a
      end
  let function trailindex_1 (self : t_trailindex) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_TrailIndex _ a -> a
      end
end
module Cdsat_Trail_Reason_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_reason  =
    | C_Justified (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision
    | C_Input
    
  let function justified_0 (self : t_reason) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Justified a -> a
      | C_Decision -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Input -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module Cdsat_Trail_Assignment_Type
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  type t_assignment  =
    | C_Assignment (Cdsat_Term_Term_Type.t_term) (Cdsat_Term_Value_Type.t_value) (Cdsat_Trail_Reason_Type.t_reason) usize
    
  let function assignment_term (self : t_assignment) : Cdsat_Term_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment a _ _ _ -> a
      end
  let function assignment_val (self : t_assignment) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ a _ _ -> a
      end
  let function assignment_reason (self : t_assignment) : Cdsat_Trail_Reason_Type.t_reason
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ a _ -> a
      end
  let function assignment_level (self : t_assignment) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Assignment _ _ _ a -> a
      end
end
module Cdsat_Theory_Sort_Type
  type t_sort  =
    | C_Rational
    | C_Boolean
    
end
module Cdsat_Theory_Var_Type
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  type t_var  =
    | C_Var int (Cdsat_Theory_Sort_Type.t_sort)
    
  let function var_1 (self : t_var) : Cdsat_Theory_Sort_Type.t_sort = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Var _ a -> a
      end
end
module Cdsat_Theory_Value_Type
  use prelude.Real
  type t_value  =
    | C_Bool bool
    | C_Rat (Real.real)
    
end
module Cdsat_Theory_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_term  =
    | C_Variable (Cdsat_Theory_Var_Type.t_var)
    | C_Value (Cdsat_Theory_Value_Type.t_value)
    | C_Plus (t_term) (t_term)
    | C_Eq (t_term) (t_term)
    | C_Conj (t_term) (t_term)
    | C_Disj (t_term) (t_term)
    | C_Neg (t_term)
    
end
module Cdsat_Theory_Assign_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assign  =
    | C_Decision (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Justified (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Input (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Trail_Type
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  type t_trail  =
    | C_Empty
    | C_Assign (Cdsat_Theory_Assign_Type.t_assign) int (t_trail)
    
end
module Cdsat_Trail_Trail_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_trail  =
    | C_Trail (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)) usize (Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail)) usize
    
  let function trail_assignments (self : t_trail) : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail a _ _ _ -> a
      end
  let function trail_ghost (self : t_trail) : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ _ a _ -> a
      end
  let function trail_level (self : t_trail) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Trail _ a _ _ -> a
      end
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27] (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module Cdsat_Trail_Impl9_Contains_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Trail_Impl9_Contains_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { result = contains self ix }
    
end
module Cdsat_Trail_Impl9_Contains
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 285 12 285 92] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix) < Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) /\ UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) < Seq.length (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix))))
  val contains [#"/Users/xavier/Code/cdsat/src/trail.rs" 283 4 283 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { result = contains self ix }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/num.rs" 22 16 22 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl16_DeepModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 14 38 14 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl16_DeepModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 14 38 14 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 14 38 14 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl16_DeepModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 14 38 14 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 14 38 14 47] match (self) with
      | Cdsat_Term_Sort_Type.C_Boolean -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Term_Sort_Type.C_Rational -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 14 38 14 47] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = deep_model self }
    
end
module CreusotContracts_NumRational_Impl0_DeepModel_Stub
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  function deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
end
module CreusotContracts_NumRational_Impl0_DeepModel_Interface
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  function deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
  val deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
    ensures { result = deep_model self }
    
end
module CreusotContracts_NumRational_Impl0_DeepModel
  use prelude.Real
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  function deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
  val deep_model (self : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) : Real.real
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl6_DeepModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 229 4 229 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Term_Impl6_DeepModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 229 4 229 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 229 4 229 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl6_DeepModel
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Stub as DeepModel0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 229 4 229 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 230 8 233 9] match (self) with
      | Cdsat_Term_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool b
      | Cdsat_Term_Value_Type.C_Rat br -> Cdsat_Theory_Value_Type.C_Rat (DeepModel0.deep_model br)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 229 4 229 44] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl5_DeepModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 181 4 181 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Term_Impl5_DeepModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 181 4 181 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 181 4 181 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl5_DeepModel
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Stub as DeepModel3
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel2
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl16_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 181 4 181 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 183 8 213 9] match (self) with
      | Cdsat_Term_Term_Type.C_Variable v s -> Cdsat_Theory_Term_Type.C_Variable (Cdsat_Theory_Var_Type.C_Var (DeepModel0.deep_model v) (DeepModel1.deep_model s))
      | Cdsat_Term_Term_Type.C_Value v -> Cdsat_Theory_Term_Type.C_Value (DeepModel2.deep_model v)
      | Cdsat_Term_Term_Type.C_Plus l r -> Cdsat_Theory_Term_Type.C_Plus (deep_model l) (deep_model r)
      | Cdsat_Term_Term_Type.C_Eq l r -> Cdsat_Theory_Term_Type.C_Eq (deep_model l) (deep_model r)
      | Cdsat_Term_Term_Type.C_Conj l r -> Cdsat_Theory_Term_Type.C_Conj (deep_model l) (deep_model r)
      | Cdsat_Term_Term_Type.C_Disj l r -> Cdsat_Theory_Term_Type.C_Disj (deep_model l) (deep_model r)
      | Cdsat_Term_Term_Type.C_Neg t -> Cdsat_Theory_Term_Type.C_Neg (deep_model t)
      | Cdsat_Term_Term_Type.C_Impl l r -> Cdsat_Theory_Term_Type.C_Disj (Cdsat_Theory_Term_Type.C_Neg (deep_model l)) (deep_model r)
      | Cdsat_Term_Term_Type.C_Times l r -> Cdsat_Theory_Term_Type.C_Plus (Cdsat_Theory_Term_Type.C_Value (Cdsat_Theory_Value_Type.C_Rat (DeepModel3.deep_model l))) (deep_model r)
      | Cdsat_Term_Term_Type.C_Lt l r -> Cdsat_Theory_Term_Type.C_Eq (deep_model l) (deep_model r)
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/term.rs" 181 4 181 44] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl4_ShallowModel_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 170 4 170 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
end
module Cdsat_Term_Impl4_ShallowModel_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 170 4 170 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 170 4 170 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl4_ShallowModel
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 170 4 170 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 171 8 171 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 170 4 170 50] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Theory_Term_Type.t_term
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl7_ShallowModel_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 243 4 243 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Term_Impl7_ShallowModel_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 243 4 243 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 243 4 243 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl7_ShallowModel
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 243 4 243 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 244 8 244 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 243 4 243 50] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl12_TermValue_Stub
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 701 4 701 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl12_TermValue_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 701 4 701 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 701 4 701 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = term_value self }
    
end
module Cdsat_Trail_Impl12_TermValue
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 701 4 701 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 702 8 702 61] (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term self), ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self))
  val term_value [#"/Users/xavier/Code/cdsat/src/trail.rs" 701 4 701 61] (self : Cdsat_Trail_Assignment_Type.t_assignment) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = term_value self }
    
end
module Cdsat_Trail_Impl9_IndexLogic_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 4 621 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl9_IndexLogic_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 4 621 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 4 621 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = index_logic self ix }
    
end
module Cdsat_Trail_Impl9_IndexLogic
  use prelude.UIntSize
  use seq.Seq
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl12_TermValue_Stub as TermValue0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 4 621 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 622 8 624 9] TermValue0.term_value (Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix)))
  val index_logic [#"/Users/xavier/Code/cdsat/src/trail.rs" 621 4 621 77] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = index_logic self ix }
    
end
module Cdsat_Theory_Impl1_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 87 4 87 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl1_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 87 4 87 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 87 4 87 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl1_Sort
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 87 4 87 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 88 8 91 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Value_Type.C_Rat _ -> Cdsat_Theory_Sort_Type.C_Rational
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 87 4 87 29] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl0_Sort_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 16 4 16 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Theory_Impl0_Sort_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 16 4 16 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 16 4 16 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl0_Sort
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 16 4 16 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 17 8 25 9] match (self) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Cdsat_Theory_Var_Type.var_1 v
      | Cdsat_Theory_Term_Type.C_Value v -> Sort0.sort v
      | Cdsat_Theory_Term_Type.C_Plus _ _ -> Cdsat_Theory_Sort_Type.C_Rational
      | Cdsat_Theory_Term_Type.C_Eq _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Conj _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Neg _ -> Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Disj _ _ -> Cdsat_Theory_Sort_Type.C_Boolean
      end
  val sort [#"/Users/xavier/Code/cdsat/src/theory.rs" 16 4 16 29] (self : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = sort self }
    
end
module Cdsat_Theory_Impl2_Invariant_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 121 4 121 34] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_Invariant_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 121 4 121 34] (self : Cdsat_Theory_Assign_Type.t_assign)
    
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 121 4 121 34] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl2_Invariant
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 121 4 121 34] (self : Cdsat_Theory_Assign_Type.t_assign)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 122 8 126 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t v -> Sort0.sort t = Sort1.sort v
      | Cdsat_Theory_Assign_Type.C_Justified _ t v -> Sort0.sort t = Sort1.sort v /\ Sort0.sort t = Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Assign_Type.C_Input t v -> Sort0.sort t = Sort1.sort v
      end
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 121 4 121 34] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl5_InvariantAssign_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_InvariantAssign_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_assign self }
    
end
module Cdsat_Theory_Impl5_InvariantAssign
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant_Stub as Invariant0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 345 8 348 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_assign tl /\ Invariant0.invariant' a
      end
  val invariant_assign [#"/Users/xavier/Code/cdsat/src/theory.rs" 344 4 344 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_assign self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Cdsat_Theory_Impl2_ToPair_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 131 4 131 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl2_ToPair_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 131 4 131 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 131 4 131 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = to_pair self }
    
end
module Cdsat_Theory_Impl2_ToPair
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  function to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 131 4 131 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 132 8 136 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Decision t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Input t val' -> (t, val')
      | Cdsat_Theory_Assign_Type.C_Justified _ t val' -> (t, val')
      end
  val to_pair [#"/Users/xavier/Code/cdsat/src/theory.rs" 131 4 131 41] (self : Cdsat_Theory_Assign_Type.t_assign) : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { result = to_pair self }
    
end
module Cdsat_Theory_Impl5_Len_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 610 4 610 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl5_Len_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 610 4 610 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  val len [#"/Users/xavier/Code/cdsat/src/theory.rs" 610 4 610 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 609 14 609 25] result >= 0 }
    ensures { result = len self }
    
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 609 14 609 25] len self >= 0
end
module Cdsat_Theory_Impl5_Len
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  function len [#"/Users/xavier/Code/cdsat/src/theory.rs" 610 4 610 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 611 8 614 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> len tl + 1
      end
  val len [#"/Users/xavier/Code/cdsat/src/theory.rs" 610 4 610 27] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 609 14 609 25] result >= 0 }
    ensures { result = len self }
    
  axiom len_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 609 14 609 25] len self >= 0
end
module Cdsat_Theory_Impl5_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 599 4 599 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
end
module Cdsat_Theory_Impl5_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 599 4 599 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 599 4 599 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 14 596 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 597 14 597 34] result <= Len0.len self }
    ensures { result = level self }
    
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 597 14 597 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 596 14 596 25] level self >= 0)
end
module Cdsat_Theory_Impl5_Level
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 599 4 599 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 600 8 604 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> 0
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> 1 + level tl
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> level tl
      end
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 599 4 599 29] (self : Cdsat_Theory_Trail_Type.t_trail) : int
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 596 14 596 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 597 14 597 34] result <= Len0.len self }
    ensures { result = level self }
    
  axiom level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 597 14 597 34] level self <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 596 14 596 25] level self >= 0)
end
module Cdsat_Theory_Impl5_InvariantNonneg_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 4 335 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_InvariantNonneg_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 4 335 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 4 335 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_nonneg self }
    
end
module Cdsat_Theory_Impl5_InvariantNonneg
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  predicate invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 4 335 41] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 336 8 339 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_nonneg tl /\ l >= 0 /\ l <= Level0.level self
      end
  val invariant_nonneg [#"/Users/xavier/Code/cdsat/src/theory.rs" 335 4 335 41] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_nonneg self }
    
end
module Cdsat_Theory_Impl5_Find_Stub
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 470 4 470 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
end
module Cdsat_Theory_Impl5_Find_Interface
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 470 4 470 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
  val find [#"/Users/xavier/Code/cdsat/src/theory.rs" 470 4 470 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 464 14 467 5] match (result) with
      | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 469 4 469 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)) }
    ensures { result = find self d }
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 469 4 469 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 464 14 467 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl5_Find
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  function find [#"/Users/xavier/Code/cdsat/src/theory.rs" 470 4 470 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 471 8 480 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Core_Option_Option_Type.C_None
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        Core_Option_Option_Type.C_Some (a, l)
      else
        find tl d
      
      end
  val find [#"/Users/xavier/Code/cdsat/src/theory.rs" 470 4 470 64] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Core_Option_Option_Type.t_option (Cdsat_Theory_Assign_Type.t_assign, int)
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 464 14 467 5] match (result) with
      | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
      | _ -> true
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 469 4 469 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . result = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)) }
    ensures { result = find self d }
    
  axiom find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 469 4 469 104] InvariantAssign0.invariant_assign self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 468 4 468 111] InvariantNonneg0.invariant_nonneg self -> (forall p : (Cdsat_Theory_Assign_Type.t_assign, int) . find self d = Core_Option_Option_Type.C_Some p -> (let (_, a) = p in a) >= 0 /\ (let (_, a) = p in a) <= Level0.level self)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 464 14 467 5] match (find self d) with
    | Core_Option_Option_Type.C_Some (a, l) -> ToPair0.to_pair a = d
    | _ -> true
    end)
end
module Cdsat_Theory_Impl5_Contains_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 417 4 417 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_Contains_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 417 4 417 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 417 4 417 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 416 4 416 87] InvariantAssign0.invariant_assign self -> result = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a) }
    ensures { result = contains self d }
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 416 4 416 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl5_Contains
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 417 4 417 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 418 8 421 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some ix -> true
      | Core_Option_Option_Type.C_None -> false
      end
  val contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 417 4 417 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 416 4 416 87] InvariantAssign0.invariant_assign self -> result = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a) }
    ensures { result = contains self d }
    
  axiom contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 416 4 416 87] InvariantAssign0.invariant_assign self -> contains self d = true -> Sort0.sort (let (a, _) = d in a) = Sort1.sort (let (_, a) = d in a)
end
module Cdsat_Theory_Impl5_LevelOf_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl5_LevelOf_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 405 15 405 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 406 14 406 51] result >= 0 /\ result <= Level0.level self }
    ensures { result = level_of self d }
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 15 405 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 406 14 406 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Theory_Impl5_LevelOf
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  function level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 408 8 411 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (_, l) -> l
      | Core_Option_Option_Type.C_None -> 0
      end
  val level_of [#"/Users/xavier/Code/cdsat/src/theory.rs" 407 4 407 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 405 15 405 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 406 14 406 51] result >= 0 /\ result <= Level0.level self }
    ensures { result = level_of self d }
    
  axiom level_of_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 405 15 405 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 406 14 406 51] level_of self d >= 0 /\ level_of self d <= Level0.level self)
end
module Cdsat_Trail_Impl8_LevelLog_Stub
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 180 4 180 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
end
module Cdsat_Trail_Impl8_LevelLog_Interface
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 180 4 180 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
  val level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 180 4 180 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    ensures { result = level_log self }
    
end
module Cdsat_Trail_Impl8_LevelLog
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 180 4 180 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 179 4 179 12] UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 self)
  val level_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 180 4 180 33] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : int
    ensures { result = level_log self }
    
end
module Cdsat_Trail_Impl9_AbstractRelation_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 271 4 271 42] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl9_AbstractRelation_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 271 4 271 42] (self : Cdsat_Trail_Trail_Type.t_trail)
    
  val abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 271 4 271 42] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = abstract_relation self }
    
end
module Cdsat_Trail_Impl9_AbstractRelation
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  predicate abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 271 4 271 42] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 273 12 277 13] (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix)) /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ LevelLog0.level_log ix = LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) a /\ IndexLogic0.index_logic self ix = a))
  val abstract_relation [#"/Users/xavier/Code/cdsat/src/trail.rs" 271 4 271 42] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = abstract_relation self }
    
end
module Cdsat_Theory_Model_Type
  use map.Map
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  type t_model  =
    | C_Model (Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value))
    
  let function model_0 (self : t_model) : Map.map (Cdsat_Theory_Var_Type.t_var) (Cdsat_Theory_Value_Type.t_value)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Model a -> a
      end
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Stub
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
end
module CreusotContracts_Logic_Fset_Impl0_Contains_Interface
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t)
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Logic_Fset_Impl0_Contains
  type t
  use set.Fset
  predicate contains [@inline:trivial] (self : Fset.fset t) (e : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 16 8 16 26] Fset.mem e self
  val contains [@inline:trivial] (self : Fset.fset t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Cdsat_Theory_Impl3_Invariant_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 156 4 156 30] (self : Cdsat_Theory_Model_Type.t_model)
end
module Cdsat_Theory_Impl3_Invariant_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 156 4 156 30] (self : Cdsat_Theory_Model_Type.t_model)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 156 4 156 30] (self : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl3_Invariant
  use map.Map
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 156 4 156 30] (self : Cdsat_Theory_Model_Type.t_model)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 157 8 159 9] forall v : Cdsat_Theory_Value_Type.t_value . forall k : Cdsat_Theory_Var_Type.t_var . Map.get (Cdsat_Theory_Model_Type.model_0 self) k = v -> Cdsat_Theory_Var_Type.var_1 k = Sort0.sort v
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 156 4 156 30] (self : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_NumRational_Impl1_FromInt_Stub
  use prelude.Int
  use prelude.Real
  function from_int (_1 : int) : Real.real
end
module CreusotContracts_NumRational_Impl1_FromInt_Interface
  use prelude.Int
  use prelude.Real
  function from_int (_1 : int) : Real.real
  val from_int (_1 : int) : Real.real
    ensures { result = from_int _1 }
    
end
module CreusotContracts_NumRational_Impl1_FromInt
  use prelude.Int
  use prelude.Real
  function from_int (_1 : int) : Real.real
  val from_int (_1 : int) : Real.real
    ensures { result = from_int _1 }
    
end
module Cdsat_Theory_Model_Type_Inv
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  axiom inv_t_model [@rewrite] : forall self : Cdsat_Theory_Model_Type.t_model . Inv0.inv self = Invariant0.invariant' self
end
module Cdsat_Theory_Impl4_Interp_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl4_Interp_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
  val interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 167 18 167 22] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 166 4 166 62] Invariant0.invariant' self -> Sort0.sort result = Sort1.sort t }
    ensures { result = interp self t }
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 167 18 167 22] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 166 4 166 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t)
end
module Cdsat_Theory_Impl4_Interp
  use map.Map
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone CreusotContracts_NumRational_Impl1_FromInt_Stub as FromInt0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  function interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 168 8 188 9] match (t) with
      | Cdsat_Theory_Term_Type.C_Variable v -> Map.get (Cdsat_Theory_Model_Type.model_0 self) v
      | Cdsat_Theory_Term_Type.C_Value v -> v
      | Cdsat_Theory_Term_Type.C_Plus l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Rat r1, Cdsat_Theory_Value_Type.C_Rat r2) -> Cdsat_Theory_Value_Type.C_Rat r1
        | _ -> Cdsat_Theory_Value_Type.C_Rat (FromInt0.from_int (- 1))
        end
      | Cdsat_Theory_Term_Type.C_Conj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 /\ b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Disj l r -> match ((interp self l, interp self r)) with
        | (Cdsat_Theory_Value_Type.C_Bool b1, Cdsat_Theory_Value_Type.C_Bool b2) -> Cdsat_Theory_Value_Type.C_Bool (b1 \/ b2)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      | Cdsat_Theory_Term_Type.C_Eq l r -> Cdsat_Theory_Value_Type.C_Bool (interp self l = interp self r)
      | Cdsat_Theory_Term_Type.C_Neg t -> match (interp self t) with
        | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
        | _ -> Cdsat_Theory_Value_Type.C_Bool false
        end
      end
  val interp [#"/Users/xavier/Code/cdsat/src/theory.rs" 167 4 167 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 167 18 167 22] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 166 4 166 62] Invariant0.invariant' self -> Sort0.sort result = Sort1.sort t }
    ensures { result = interp self t }
    
  axiom interp_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 167 18 167 22] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 166 4 166 62] Invariant0.invariant' self -> Sort0.sort (interp self t) = Sort1.sort t)
end
module Cdsat_Theory_Impl4_Satisfies_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 4 193 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_Satisfies_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 4 193 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 4 193 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfies self v }
    
end
module Cdsat_Theory_Impl4_Satisfies
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Interp_Stub as Interp0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 4 193 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 194 8 194 31] Interp0.interp self (let (a, _) = v in a) = (let (_, a) = v in a)
  val satisfies [#"/Users/xavier/Code/cdsat/src/theory.rs" 193 4 193 52] (self : Cdsat_Theory_Model_Type.t_model) (v : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfies self v }
    
end
module Cdsat_Theory_Impl4_SatisfySet_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_SatisfySet_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfy_set self v }
    
end
module Cdsat_Theory_Impl4_SatisfySet
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 200 8 200 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains v a -> Satisfies0.satisfies self a
  val satisfy_set [#"/Users/xavier/Code/cdsat/src/theory.rs" 199 4 199 60] (self : Cdsat_Theory_Model_Type.t_model) (v : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = satisfy_set self v }
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Stub
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 4 141 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
end
module Cdsat_Theory_Impl2_JustifiedSound_Interface
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 4 141 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
  val justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 4 141 40] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = justified_sound self }
    
end
module Cdsat_Theory_Impl2_JustifiedSound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 4 141 40] (self : Cdsat_Theory_Assign_Type.t_assign)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 142 8 147 9] match (self) with
      | Cdsat_Theory_Assign_Type.C_Justified just t val' -> forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, val')
      | _ -> true
      end
  val justified_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 141 4 141 40] (self : Cdsat_Theory_Assign_Type.t_assign) : bool
    ensures { result = justified_sound self }
    
end
module Cdsat_Theory_Impl5_Sound_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 261 4 261 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_Sound_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 261 4 261 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 261 4 261 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl5_Sound
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 261 4 261 30] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 262 8 265 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> sound tl /\ JustifiedSound0.justified_sound a
      end
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 261 4 261 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sound self }
    
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Stub
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Remove_Interface
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
  val remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
    ensures { result = remove self a }
    
end
module CreusotContracts_Logic_Fset_Impl0_Remove
  type t
  use set.Fset
  function remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 53 8 53 26] Fset.remove a self
  val remove [@inline:trivial] (self : Fset.fset t) (a : t) : Fset.fset t
    ensures { result = remove self a }
    
end
module Cdsat_Theory_Impl5_SetLevel_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 287 4 287 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
end
module Cdsat_Theory_Impl5_SetLevel_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 287 4 287 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 287 4 287 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 281 15 281 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 282 4 282 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 283 4 283 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 284 4 284 48] s = Fset.empty  -> result = 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 285 14 285 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 286 14 286 36] result <= Level0.level self }
    ensures { result = set_level self s }
    
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 281 15 281 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 286 14 286 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 285 14 285 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 284 4 284 48] s = Fset.empty  -> set_level self s = 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 283 4 283 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 282 4 282 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl5_SetLevel
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 287 4 287 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    
  val set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 287 4 287 57] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : int
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 281 15 281 38] InvariantNonneg0.invariant_nonneg self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 282 4 282 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 283 4 283 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 284 4 284 48] s = Fset.empty  -> result = 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 285 14 285 25] result >= 0 }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 286 14 286 36] result <= Level0.level self }
    ensures { result = set_level self s }
    
  axiom def : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . set_level self s = ([#"/Users/xavier/Code/cdsat/src/theory.rs" 278 4 278 12] if Fset.cardinal s = 0 then
    0
  else
    if Fset.cardinal s = 1 then
      LevelOf0.level_of self (Fset.pick s)
    else
      let a = Fset.pick s in let rec' = set_level self (Remove0.remove s a) in if LevelOf0.level_of self a >= rec' then
        LevelOf0.level_of self a
      else
        rec'
      
    
  )
  axiom set_level_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 281 15 281 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 286 14 286 36] set_level self s <= Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 285 14 285 25] set_level self s >= 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 284 4 284 48] s = Fset.empty  -> set_level self s = 0) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 283 4 283 94] s <> Fset.empty  -> (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = set_level self s)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 282 4 282 74] forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= set_level self s)
end
module Cdsat_Theory_Impl5_InvariantLevel_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 319 4 319 40] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_InvariantLevel_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 319 4 319 40] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 319 4 319 40] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_level self }
    
end
module Cdsat_Theory_Impl5_InvariantLevel
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 319 4 319 40] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 320 8 330 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_level tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Input _ _ -> l = 0
        | Cdsat_Theory_Assign_Type.C_Decision _ _ -> Level0.level tl + 1 = l
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> SetLevel0.set_level tl j = l
        end
      end
  val invariant_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 319 4 319 40] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_level self }
    
end
module Cdsat_Theory_Impl5_InvariantContains_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 353 4 353 43] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_InvariantContains_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 353 4 353 43] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 353 4 353 43] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_contains self }
    
end
module Cdsat_Theory_Impl5_InvariantContains
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  predicate invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 353 4 353 43] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 354 8 367 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> invariant_contains tl /\ match (a) with
        | Cdsat_Theory_Assign_Type.C_Justified j _ _ -> forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains j a -> Contains1.contains tl a
        | _ -> true
        end
      end
  val invariant_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 353 4 353 43] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant_contains self }
    
end
module Cdsat_Theory_Impl1_IsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 81 4 81 32] (self : Cdsat_Theory_Value_Type.t_value)
end
module Cdsat_Theory_Impl1_IsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 81 4 81 32] (self : Cdsat_Theory_Value_Type.t_value)
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 81 4 81 32] (self : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 81 4 81 32] (self : Cdsat_Theory_Value_Type.t_value) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 82 8 82 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 81 4 81 32] (self : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl1_Negate_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 98 4 98 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
end
module Cdsat_Theory_Impl1_Negate_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 98 4 98 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
  val negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 98 4 98 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 96 15 96 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 97 14 97 30] IsBool0.is_bool result }
    ensures { result = negate self }
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 96 15 96 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 97 14 97 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl1_Negate
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  function negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 98 4 98 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 99 8 102 9] match (self) with
      | Cdsat_Theory_Value_Type.C_Bool b -> Cdsat_Theory_Value_Type.C_Bool (not b)
      | _ -> self
      end
  val negate [#"/Users/xavier/Code/cdsat/src/theory.rs" 98 4 98 31] (self : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 96 15 96 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 97 14 97 30] IsBool0.is_bool result }
    ensures { result = negate self }
    
  axiom negate_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 96 15 96 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 97 14 97 30] IsBool0.is_bool (negate self))
end
module Cdsat_Theory_Impl5_TrailUnique_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_TrailUnique_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
  val trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = trail_unique self }
    
end
module Cdsat_Theory_Impl5_TrailUnique
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  predicate trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 37] (self : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 373 8 381 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> true
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let ap = ToPair0.to_pair a in not Contains0.contains tl ap /\ trail_unique tl /\ (if IsBool0.is_bool (let (_, a) = ap in a) then
        not Contains0.contains tl (let (a, _) = ap in a, Negate0.negate (let (_, a) = ap in a))
      else
        true
      )
      end
  val trail_unique [#"/Users/xavier/Code/cdsat/src/theory.rs" 372 4 372 37] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = trail_unique self }
    
end
module Cdsat_Theory_Impl5_Invariant_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 34] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl5_Invariant_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 34] (self : Cdsat_Theory_Trail_Type.t_trail)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 34] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl5_Invariant
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_TrailUnique_Stub as TrailUnique0
  clone Cdsat_Theory_Impl5_InvariantContains_Stub as InvariantContains0
  clone Cdsat_Theory_Impl5_InvariantLevel_Stub as InvariantLevel0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 34] (self : Cdsat_Theory_Trail_Type.t_trail)
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 387 8 391 38] InvariantLevel0.invariant_level self /\ InvariantContains0.invariant_contains self /\ TrailUnique0.trail_unique self /\ InvariantNonneg0.invariant_nonneg self /\ InvariantAssign0.invariant_assign self
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 386 4 386 34] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type a
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 19 8 19 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Cdsat_Theory_Impl5_IsDecision_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 512 4 512 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_IsDecision_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 512 4 512 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 512 4 512 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_decision self d }
    
end
module Cdsat_Theory_Impl5_IsDecision
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 512 4 512 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 513 8 516 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Decision _ _, _) -> true
      | _ -> false
      end
  val is_decision [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 512 4 512 54] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_decision self d }
    
end
module CreusotContracts_Logic_Ops_Impl1_IndexLogic_Stub
  type t
  type a
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : usize) : t
end
module CreusotContracts_Logic_Ops_Impl1_IndexLogic_Interface
  type t
  type a
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : usize) : t
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : usize) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl1_IndexLogic
  type t
  type a
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : usize) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 30 8 30 32] Seq.get (ShallowModel0.shallow_model self) (UIntSize.to_int ix)
  val index_logic [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t a) (ix : usize) : t
    ensures { result = index_logic self ix }
    
end
module Cdsat_Trail_Impl9_Reason_Stub
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function reason [#"/Users/xavier/Code/cdsat/src/trail.rs" 529 4 529 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Reason_Type.t_reason
    
end
module Cdsat_Trail_Impl9_Reason_Interface
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function reason [#"/Users/xavier/Code/cdsat/src/trail.rs" 529 4 529 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Reason_Type.t_reason
    
  val reason [#"/Users/xavier/Code/cdsat/src/trail.rs" 529 4 529 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Reason_Type.t_reason
    ensures { result = reason self ix }
    
end
module Cdsat_Trail_Impl9_Reason
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl1_IndexLogic_Stub as IndexLogic1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Ops_Impl1_IndexLogic_Stub as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function reason [#"/Users/xavier/Code/cdsat/src/trail.rs" 529 4 529 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Reason_Type.t_reason
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 527 4 527 12] Cdsat_Trail_Assignment_Type.assignment_reason (IndexLogic1.index_logic (IndexLogic0.index_logic (Cdsat_Trail_Trail_Type.trail_assignments self) (Cdsat_Trail_TrailIndex_Type.trailindex_0 ix)) (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix))
  val reason [#"/Users/xavier/Code/cdsat/src/trail.rs" 529 4 529 49] (self : Cdsat_Trail_Trail_Type.t_trail) (ix : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Reason_Type.t_reason
    ensures { result = reason self ix }
    
end
module Cdsat_Theory_Impl5_IsInput_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_IsInput_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_input self d }
    
end
module Cdsat_Theory_Impl5_IsInput
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 523 8 526 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Input _ _, _) -> true
      | _ -> false
      end
  val is_input [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 522 4 522 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_input self d }
    
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Stub
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Logic_Seq_Impl0_Contains
  type t
  use seq.Seq
  use prelude.Int
  predicate contains (self : Seq.seq t) (e : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/seq.rs" 128 8 128 78] exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2 : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2 }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  function lt_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  function lt_log (self : self) (o : self) : bool
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function lt_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 21 20 21 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module Cdsat_Theory_Impl5_IsJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 4 502 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl5_IsJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 4 502 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 4 502 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_justified self d }
    
end
module Cdsat_Theory_Impl5_IsJustified
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  predicate is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 4 502 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 503 8 506 9] match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified _ _ _, _) -> true
      | _ -> false
      end
  val is_justified [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 502 4 502 55] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = is_justified self d }
    
end
module Cdsat_Theory_Impl4_Entails_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl4_Entails_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = entails self j c }
    
end
module Cdsat_Theory_Impl4_Entails
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  predicate entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 206 8 206 84] Invariant0.invariant' self -> SatisfySet0.satisfy_set self j -> Satisfies0.satisfies self c
  val entails [#"/Users/xavier/Code/cdsat/src/theory.rs" 205 4 205 74] (self : Cdsat_Theory_Model_Type.t_model) (j : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (c : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { result = entails self j c }
    
end
module Cdsat_Theory_Impl5_FindJustified_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 621 4 621 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_FindJustified_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 621 4 621 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 621 4 621 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 618 15 618 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 619 15 619 32] Contains0.contains self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 620 4 620 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a }
    ensures { result = find_justified self kv }
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 618 15 618 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 619 15 619 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 620 4 620 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl5_FindJustified
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  function find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 621 4 621 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 622 8 631 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else find_justified tl kv
      end
  val find_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 621 4 621 46] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 618 15 618 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 619 15 619 32] Contains0.contains self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 620 4 620 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a }
    ensures { result = find_justified self kv }
    
  axiom find_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 618 15 618 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 619 15 619 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 620 4 620 90] forall l : int . forall a : Cdsat_Theory_Assign_Type.t_assign . Find0.find self kv = Core_Option_Option_Type.C_Some (a, l) -> JustifiedSound0.justified_sound a)
end
module Cdsat_Theory_Impl5_Justification_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 4 491 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl5_Justification_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 4 491 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 4 491 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 485 15 485 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 486 15 486 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 54] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m result d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 58] IsInput0.is_input self d -> result = Fset.empty  }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 61] IsDecision0.is_decision self d -> result = Fset.empty  }
    ensures { result = justification self d }
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 485 15 485 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 486 15 486 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 54] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m (justification self d) d)
end
module Cdsat_Theory_Impl5_Justification
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl2_JustifiedSound_Stub as JustifiedSound0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_FindJustified_Stub as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 4 491 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 492 8 492 30] let _ = FindJustified0.find_justified self d in match (Find0.find self d) with
      | Core_Option_Option_Type.C_Some (Cdsat_Theory_Assign_Type.C_Justified j _ _, _) -> j
      | _ -> Fset.empty 
      end
  val justification [#"/Users/xavier/Code/cdsat/src/theory.rs" 491 4 491 71] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 485 15 485 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 486 15 486 35] IsJustified0.is_justified self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 54] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m result d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 58] IsInput0.is_input self d -> result = Fset.empty  }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 61] IsDecision0.is_decision self d -> result = Fset.empty  }
    ensures { result = justification self d }
    
  axiom justification_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 485 15 485 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 486 15 486 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 487 15 487 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 490 4 490 61] IsDecision0.is_decision self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 489 4 489 58] IsInput0.is_input self d -> justification self d = Fset.empty ) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 488 4 488 54] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m (justification self d) d)
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module Cdsat_Trail_Remove_Stub
  type t
  use seq.Seq
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 0 790 39] (s : Seq.seq t) (e : t) : Seq.seq t
end
module Cdsat_Trail_Remove_Interface
  type t
  use seq.Seq
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 0 790 39] (s : Seq.seq t) (e : t) : Seq.seq t
  val remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 0 790 39] (s : Seq.seq t) (e : t) : Seq.seq t
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 790 13 790 14] Inv0.inv s}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 790 24 790 25] Inv1.inv e}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 785 0 785 73] forall t : t . Inv1.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains result t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 786 0 786 63] forall t : t . Inv1.inv t -> Contains0.contains result t -> Contains0.contains s t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 787 0 787 55] forall t : t . Inv1.inv t -> Contains0.contains result t -> t <> e }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 788 0 788 52] Contains0.contains s e -> Seq.length result < Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 789 10 789 33] Seq.length result <= Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 33 790 39] Inv0.inv result }
    ensures { result = remove s e }
    
  axiom remove_spec : forall s : Seq.seq t, e : t . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 790 13 790 14] Inv0.inv s) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 790 24 790 25] Inv1.inv e) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 790 33 790 39] Inv0.inv (remove s e)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 789 10 789 33] Seq.length (remove s e) <= Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 788 0 788 52] Contains0.contains s e -> Seq.length (remove s e) < Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 787 0 787 55] forall t : t . Inv1.inv t -> Contains0.contains (remove s e) t -> t <> e) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 786 0 786 63] forall t : t . Inv1.inv t -> Contains0.contains (remove s e) t -> Contains0.contains s t) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 785 0 785 73] forall t : t . Inv1.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains (remove s e) t)
end
module Cdsat_Trail_Remove
  type t
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  use seq.Seq
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  function remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 0 790 39] (s : Seq.seq t) (e : t) : Seq.seq t
  val remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 0 790 39] (s : Seq.seq t) (e : t) : Seq.seq t
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 790 13 790 14] Inv0.inv s}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 790 24 790 25] Inv1.inv e}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 785 0 785 73] forall t : t . Inv1.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains result t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 786 0 786 63] forall t : t . Inv1.inv t -> Contains0.contains result t -> Contains0.contains s t }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 787 0 787 55] forall t : t . Inv1.inv t -> Contains0.contains result t -> t <> e }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 788 0 788 52] Contains0.contains s e -> Seq.length result < Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 789 10 789 33] Seq.length result <= Seq.length s }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 790 33 790 39] Inv0.inv result }
    ensures { result = remove s e }
    
  axiom def : forall s : Seq.seq t, e : t . remove s e = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 783 0 783 8] if s = Seq.empty  then
    Seq.empty 
  else
    if Seq.get s (Seq.length s - 1) = e then
      remove (SeqExt.subsequence s 0 (Seq.length s - 1)) e
    else
      Seq.snoc (remove (SeqExt.subsequence s 0 (Seq.length s - 1)) e) (Seq.get s (Seq.length s - 1))
    
  )
  axiom remove_spec : forall s : Seq.seq t, e : t . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 790 13 790 14] Inv0.inv s) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 790 24 790 25] Inv1.inv e) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 790 33 790 39] Inv0.inv (remove s e)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 789 10 789 33] Seq.length (remove s e) <= Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 788 0 788 52] Contains0.contains s e -> Seq.length (remove s e) < Seq.length s) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 787 0 787 55] forall t : t . Inv1.inv t -> Contains0.contains (remove s e) t -> t <> e) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 786 0 786 63] forall t : t . Inv1.inv t -> Contains0.contains (remove s e) t -> Contains0.contains s t) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 785 0 785 73] forall t : t . Inv1.inv t -> Contains0.contains s t -> e <> t -> Contains0.contains (remove s e) t)
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Stub
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
end
module CreusotContracts_Logic_Fset_Impl0_Insert_Interface
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module CreusotContracts_Logic_Fset_Impl0_Insert
  type t
  use set.Fset
  function insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 31 8 31 26] Fset.add e self
  val insert [@inline:trivial] (self : Fset.fset t) (e : t) : Fset.fset t
    ensures { result = insert self e }
    
end
module Cdsat_Trail_Impl9_AbstractJustification_Stub
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 315 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_Impl9_AbstractJustification_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 315 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 315 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 307 4 307 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 40] Fset.cardinal result <= Seq.length just }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains result (IndexLogic0.index_logic self (Seq.get just i)) }
    ensures { result = abstract_justification self just }
    
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 307 4 307 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl9_AbstractJustification
  use prelude.Int
  use seq.Seq
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  function abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 315 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val abstract_justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 312 4 315 44] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 307 4 307 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 40] Fset.cardinal result <= Seq.length just }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains result (IndexLogic0.index_logic self (Seq.get just i)) }
    ensures { result = abstract_justification self just }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . abstract_justification self just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 304 4 304 12] if Seq.length just > 0 then
    let set = abstract_justification self (Remove0.remove just (Seq.get just 0)) in let a = IndexLogic0.index_logic self (Seq.get just 0) in Insert0.insert set a
  else
    Fset.empty 
  )
  axiom abstract_justification_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 307 4 307 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 311 4 311 101] forall i : int . 0 <= i /\ i < Seq.length just -> Contains1.contains (abstract_justification self just) (IndexLogic0.index_logic self (Seq.get just i))) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 310 4 310 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains2.contains just ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 309 4 309 115] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (abstract_justification self just) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix /\ a = IndexLogic0.index_logic self ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 308 14 308 40] Fset.cardinal (abstract_justification self just) <= Seq.length just)
end
module Cdsat_Trail_Impl9_JustifiedIsJustified_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 47] (self : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl9_JustifiedIsJustified_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 47] (self : Cdsat_Trail_Trail_Type.t_trail)
    
  val justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 47] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = justified_is_justified self }
    
end
module Cdsat_Trail_Impl9_JustifiedIsJustified
  use prelude.Ghost
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Cdsat_Theory_Model_Type.t_model
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv2.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl9_Reason_Stub as Reason0
  predicate justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 47] (self : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 254 8 266 9] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> (let reason = Reason0.reason self ix in (reason = Cdsat_Trail_Reason_Type.C_Decision) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) /\ (reason = Cdsat_Trail_Reason_Type.C_Input) = IsInput0.is_input (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) /\ (forall j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . reason = Cdsat_Trail_Reason_Type.C_Justified j -> (forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel0.shallow_model j) i -> LtLog0.lt_log i ix /\ Contains0.contains self i) /\ IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) /\ Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self ix) = AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model j)))
  val justified_is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 253 4 253 47] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = justified_is_justified self }
    
end
module Cdsat_Theory_Impl0_WellSorted_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function well_sorted [#"/Users/xavier/Code/cdsat/src/theory.rs" 30 4 30 36] (self : Cdsat_Theory_Term_Type.t_term) : bool
    
end
module Cdsat_Theory_Impl0_WellSorted_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  function well_sorted [#"/Users/xavier/Code/cdsat/src/theory.rs" 30 4 30 36] (self : Cdsat_Theory_Term_Type.t_term) : bool
    
  val well_sorted [#"/Users/xavier/Code/cdsat/src/theory.rs" 30 4 30 36] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = well_sorted self }
    
end
module Cdsat_Theory_Impl0_WellSorted
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  function well_sorted [#"/Users/xavier/Code/cdsat/src/theory.rs" 30 4 30 36] (self : Cdsat_Theory_Term_Type.t_term) : bool
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 31 8 54 9] match (self) with
      | Cdsat_Theory_Term_Type.C_Variable v -> true
      | Cdsat_Theory_Term_Type.C_Value v -> true
      | Cdsat_Theory_Term_Type.C_Plus l r -> well_sorted l /\ well_sorted r /\ Sort0.sort l = Sort0.sort r /\ Sort0.sort r = Cdsat_Theory_Sort_Type.C_Rational
      | Cdsat_Theory_Term_Type.C_Eq l r -> well_sorted l /\ well_sorted r /\ Sort0.sort l = Sort0.sort r
      | Cdsat_Theory_Term_Type.C_Conj l r -> well_sorted l /\ well_sorted r /\ Sort0.sort l = Sort0.sort r /\ Sort0.sort r = Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Disj l r -> well_sorted l /\ well_sorted r /\ Sort0.sort l = Sort0.sort r /\ Sort0.sort r = Cdsat_Theory_Sort_Type.C_Boolean
      | Cdsat_Theory_Term_Type.C_Neg t -> well_sorted t /\ Sort0.sort t = Cdsat_Theory_Sort_Type.C_Boolean
      end
  val well_sorted [#"/Users/xavier/Code/cdsat/src/theory.rs" 30 4 30 36] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = well_sorted self }
    
end
module Cdsat_Trail_Impl9_Invariant_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 4 237 34] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl9_Invariant_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 4 237 34] (self : Cdsat_Trail_Trail_Type.t_trail)
  val invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 4 237 34] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Trail_Impl9_Invariant
  use prelude.Ghost
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl0_WellSorted_Stub as WellSorted0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_JustifiedIsJustified_Stub as JustifiedIsJustified0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic1
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Trail_Impl9_AbstractRelation_Stub as AbstractRelation0
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 4 237 34] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 238 8 248 9] AbstractRelation0.abstract_relation self /\ Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Invariant0.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) /\ Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) /\ UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level self) = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) - 1 /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) -> Seq.length (ShallowModel1.shallow_model (IndexLogic0.index_logic (Cdsat_Trail_Trail_Type.trail_assignments self) i)) > 0) /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) = 0) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic1.index_logic self ix)) /\ (forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self i -> Contains0.contains self j -> i <> j -> IndexLogic1.index_logic self i <> IndexLogic1.index_logic self j) /\ JustifiedIsJustified0.justified_is_justified self /\ (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> WellSorted0.well_sorted (let (a, _) = IndexLogic1.index_logic self ix in a))
  val invariant' [#"/Users/xavier/Code/cdsat/src/trail.rs" 237 4 237 34] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_extendresult  =
    | C_Conflict (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    | C_Decision (Cdsat_Term_Term_Type.t_term) (Cdsat_Term_Value_Type.t_value)
    | C_Satisfied
    
  let function decision_0 (self : t_extendresult) : Cdsat_Term_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Term_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Satisfied -> any Cdsat_Term_Term_Type.t_term
      end
  let function decision_1 (self : t_extendresult) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ -> any Cdsat_Term_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Satisfied -> any Cdsat_Term_Value_Type.t_value
      end
  let function conflict_0 (self : t_extendresult) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a -> a
      | C_Decision _ _ -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      | C_Satisfied -> any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
      end
end
module Cdsat_Theory_Impl5_Acceptable_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Theory_Impl5_Acceptable_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
  val acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = acceptable self t val' }
    
end
module Cdsat_Theory_Impl5_Acceptable
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 397 8 399 79] not Contains0.contains self (t, val') /\ Sort0.sort t = Sort1.sort val' /\ (IsBool0.is_bool val' -> not Contains0.contains self (t, Negate0.negate val'))
  val acceptable [#"/Users/xavier/Code/cdsat/src/theory.rs" 396 4 396 56] (self : Cdsat_Theory_Trail_Type.t_trail) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) : bool
    ensures { result = acceptable self t val' }
    
end
module Cdsat_Theory_Impl5_SatisfiedBy_Stub
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 676 4 676 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
end
module Cdsat_Theory_Impl5_SatisfiedBy_Interface
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 676 4 676 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
  val satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 676 4 676 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = satisfied_by self m }
    
end
module Cdsat_Theory_Impl5_SatisfiedBy
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 676 4 676 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 677 8 677 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> Satisfies0.satisfies m a
  val satisfied_by [#"/Users/xavier/Code/cdsat/src/theory.rs" 676 4 676 47] (self : Cdsat_Theory_Trail_Type.t_trail) (m : Cdsat_Theory_Model_Type.t_model) : bool
    ensures { result = satisfied_by self m }
    
end
module Cdsat_Theory_Impl5_CountBounds_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 742 4 742 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
end
module Cdsat_Theory_Impl5_CountBounds_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 742 4 742 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
  val count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 742 4 742 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 740 15 740 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 741 4 741 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self }
    ensures { result = count_bounds self }
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 740 15 740 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 741 4 741 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl5_CountBounds
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 742 4 742 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 743 8 748 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Input _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision _ _) _ tl -> count_bounds tl
      | Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified _ _ _) _ tl -> count_bounds tl
      end
  val count_bounds [#"/Users/xavier/Code/cdsat/src/theory.rs" 742 4 742 35] (self : Cdsat_Theory_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 740 15 740 31] Invariant0.invariant' self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 741 4 741 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self }
    ensures { result = count_bounds self }
    
  axiom count_bounds_spec : forall self : Cdsat_Theory_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 740 15 740 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 741 4 741 83] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= Level0.level self)
end
module Cdsat_Theory_Impl5_Restrict_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
end
module Cdsat_Theory_Impl5_Restrict_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
  val restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 549 15 549 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 551 15 551 25] level >= 0}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 552 4 552 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains result a /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 553 4 553 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains result a -> Contains0.contains self a /\ LevelOf0.level_of result a <= level /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 554 4 554 56] level >= Level0.level self -> result = self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 555 4 555 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 556 4 556 77] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by result m }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 65] Level0.level self >= level -> Level0.level result = level }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 558 4 558 71] Level0.level self < level -> Level0.level result = Level0.level self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 559 14 559 40] Len0.len result <= Len0.len self }
    ensures { result = restrict self level }
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 549 15 549 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 551 15 551 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 559 14 559 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 558 4 558 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 556 4 556 77] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 555 4 555 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 554 4 554 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 553 4 553 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 552 4 552 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl5_Restrict
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  function restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 561 8 572 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> Cdsat_Theory_Trail_Type.C_Empty
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let tl = restrict tl level in let _ = CountBounds0.count_bounds tl in if l <= level then
        Cdsat_Theory_Trail_Type.C_Assign a l tl
      else
        tl
      
      end
  val restrict [#"/Users/xavier/Code/cdsat/src/theory.rs" 560 4 560 45] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 549 15 549 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 551 15 551 25] level >= 0}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 552 4 552 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains result a /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 553 4 553 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains result a -> Contains0.contains self a /\ LevelOf0.level_of result a <= level /\ LevelOf0.level_of result a = LevelOf0.level_of self a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 554 4 554 56] level >= Level0.level self -> result = self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 555 4 555 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 556 4 556 77] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by result m }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 65] Level0.level self >= level -> Level0.level result = level }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 558 4 558 71] Level0.level self < level -> Level0.level result = Level0.level self }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 559 14 559 40] Len0.len result <= Len0.len self }
    ensures { result = restrict self level }
    
  axiom restrict_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 549 15 549 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 551 15 551 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 559 14 559 40] Len0.len (restrict self level) <= Len0.len self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 558 4 558 71] Level0.level self < level -> Level0.level (restrict self level) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 557 4 557 65] Level0.level self >= level -> Level0.level (restrict self level) = level) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 556 4 556 77] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfiedBy0.satisfied_by self m -> SatisfiedBy0.satisfied_by (restrict self level) m) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 555 4 555 71] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . not Contains0.contains self a -> not Contains0.contains (restrict self level) a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 554 4 554 56] level >= Level0.level self -> restrict self level = self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 553 4 553 142] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (restrict self level) a -> Contains0.contains self a /\ LevelOf0.level_of (restrict self level) a <= level /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 552 4 552 141] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self a -> LevelOf0.level_of self a <= level -> Contains0.contains (restrict self level) a /\ LevelOf0.level_of (restrict self level) a = LevelOf0.level_of self a) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 550 14 550 32] Invariant0.invariant' (restrict self level))
end
module Cdsat_Theory_Impl5_Unsat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 30] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl5_Unsat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 30] (self : Cdsat_Theory_Trail_Type.t_trail)
  val unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl5_Unsat
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  predicate unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 30] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 684 8 684 82] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> false
  val unsat [#"/Users/xavier/Code/cdsat/src/theory.rs" 683 4 683 30] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl5_Impls_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 696 4 696 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_Impls_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 696 4 696 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
  val impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 696 4 696 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 695 4 695 55] result -> Unsat0.unsat rhs -> Unsat0.unsat self }
    ensures { result = impls self rhs }
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 695 4 695 55] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Theory_Impl5_Impls
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  predicate impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 696 4 696 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 697 8 697 108] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfiedBy0.satisfied_by (Restrict0.restrict self 0) m -> SatisfiedBy0.satisfied_by (Restrict0.restrict rhs 0) m
  val impls [#"/Users/xavier/Code/cdsat/src/theory.rs" 696 4 696 41] (self : Cdsat_Theory_Trail_Type.t_trail) (rhs : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 695 4 695 55] result -> Unsat0.unsat rhs -> Unsat0.unsat self }
    ensures { result = impls self rhs }
    
  axiom impls_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, rhs : Cdsat_Theory_Trail_Type.t_trail . [#"/Users/xavier/Code/cdsat/src/theory.rs" 695 4 695 55] impls self rhs -> Unsat0.unsat rhs -> Unsat0.unsat self
end
module Cdsat_Bool_BoolTheory_Type
  type t_booltheory  =
    | C_BoolTheory
    
end
module Cdsat_Trail_IndexIterator_Type
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  type t_indexiterator  =
    | C_IndexIterator (borrowed (Cdsat_Trail_Trail_Type.t_trail)) (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  let function indexiterator_trail (self : t_indexiterator) : borrowed (Cdsat_Trail_Trail_Type.t_trail)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IndexIterator a _ -> a
      end
  let function indexiterator_cur_ix (self : t_indexiterator) : Cdsat_Trail_TrailIndex_Type.t_trailindex
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_IndexIterator _ a -> a
      end
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  let function err_0 (self : t_result 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok _ -> any 'e
      | C_Err a -> a
      end
  let function ok_0 (self : t_result 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok a -> a
      | C_Err _ -> any 't
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 16 8 16 60] Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 51 8 51 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Trail_Impl29_Resolve_Stub
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  predicate resolve [#"/Users/xavier/Code/cdsat/src/trail.rs" 644 4 644 28] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator)
    
end
module Cdsat_Trail_Impl29_Resolve_Interface
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  predicate resolve [#"/Users/xavier/Code/cdsat/src/trail.rs" 644 4 644 28] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator)
    
  val resolve [#"/Users/xavier/Code/cdsat/src/trail.rs" 644 4 644 28] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Trail_Impl29_Resolve
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  predicate resolve [#"/Users/xavier/Code/cdsat/src/trail.rs" 644 4 644 28] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 643 4 643 16] Resolve0.resolve (Cdsat_Trail_IndexIterator_Type.indexiterator_trail self)
  val resolve [#"/Users/xavier/Code/cdsat/src/trail.rs" 644 4 644 28] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Trail_Impl9_Indices_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val indices [#"/Users/xavier/Code/cdsat/src/trail.rs" 628 4 628 57] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Trail_IndexIterator_Type.t_indexiterator
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 627 14 627 34] Cdsat_Trail_IndexIterator_Type.indexiterator_trail result = self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl5_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl5_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 83 8 83 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2049 16 2049 20] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl12_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 141 27 141 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2673 14 2673 18] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2673 20 2673 25] Inv1.inv index}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 142 26 142 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2673 4 2673 46] Inv2.inv result }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 108 20 108 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 115 20 115 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Cdsat_Trail_Impl10_Next_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val next [#"/Users/xavier/Code/cdsat/src/trail.rs" 668 4 668 48] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 663 14 663 44] Cdsat_Trail_IndexIterator_Type.indexiterator_trail ( ^ self) = Cdsat_Trail_IndexIterator_Type.indexiterator_trail ( * self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 664 14 667 5] match (result) with
      | Core_Option_Option_Type.C_Some ix -> Contains0.contains ( * Cdsat_Trail_IndexIterator_Type.indexiterator_trail ( * self)) ix
      | Core_Option_Option_Type.C_None -> true
      end }
    
end
module Cdsat_Trail_Impl10_Trail_Interface
  use prelude.Borrow
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val trail [#"/Users/xavier/Code/cdsat/src/trail.rs" 658 4 658 33] (self : Cdsat_Trail_IndexIterator_Type.t_indexiterator) : Cdsat_Trail_Trail_Type.t_trail
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 657 14 657 36] result =  * Cdsat_Trail_IndexIterator_Type.indexiterator_trail self }
    
end
module Cdsat_Trail_Impl11_Index_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment)
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  val index [#"/Users/xavier/Code/cdsat/src/trail.rs" 693 4 693 55] (self : Cdsat_Trail_Trail_Type.t_trail) (index : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_Assignment_Type.t_assignment
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 691 15 691 35] Contains0.contains self index}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 692 14 692 67] result = Seq.get (ShallowModel1.shallow_model (Seq.get (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_0 index)))) (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 index)) }
    
end
module Cdsat_Theory_Impl0_IsBool_Stub
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 59 4 59 32] (self : Cdsat_Theory_Term_Type.t_term)
end
module Cdsat_Theory_Impl0_IsBool_Interface
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 59 4 59 32] (self : Cdsat_Theory_Term_Type.t_term)
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 59 4 59 32] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Theory_Impl0_IsBool
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  predicate is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 59 4 59 32] (self : Cdsat_Theory_Term_Type.t_term) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 60 8 60 36] Sort0.sort self = Cdsat_Theory_Sort_Type.C_Boolean
  val is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 59 4 59 32] (self : Cdsat_Theory_Term_Type.t_term) : bool
    ensures { result = is_bool self }
    
end
module Cdsat_Term_Impl0_ShallowModel_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 27 4 27 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
end
module Cdsat_Term_Impl0_ShallowModel_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 27 4 27 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 27 4 27 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl0_ShallowModel
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl16_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 27 4 27 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    
   =
    [#"/Users/xavier/Code/cdsat/src/term.rs" 28 8 28 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/term.rs" 27 4 27 50] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Theory_Sort_Type.t_sort
    ensures { result = shallow_model self }
    
end
module Cdsat_Term_Impl1_Sort_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Term_Term_Type.t_term,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Term_Type.t_term
  clone Cdsat_Term_Impl0_ShallowModel_Stub as ShallowModel0
  val sort [#"/Users/xavier/Code/cdsat/src/term.rs" 50 4 50 37] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Sort_Type.t_sort
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 49 14 49 37] ShallowModel0.shallow_model result = Sort0.sort (ShallowModel1.shallow_model self) }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl4_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 74 8 74 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module Cdsat_Term_Impl13_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort
  val eq [#"/Users/xavier/Code/cdsat/src/term.rs" 14 23 14 32] (self : Cdsat_Term_Sort_Type.t_sort) (rhs : Cdsat_Term_Sort_Type.t_sort) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 14 23 14 32] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Bool_Impl0_IsRelevant_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_relevant [#"/Users/xavier/Code/cdsat/src/bool.rs" 88 4 88 49] (self : Cdsat_Bool_BoolTheory_Type.t_booltheory) (a : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 87 4 87 44] result -> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) }
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  val new (_1 : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 68 26 68 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 420 4 420 30] Inv0.inv result }
    
end
module CreusotContracts_Model_Impl7_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl7_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl7_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 101 8 101 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl9_AbsJustExtend_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  function abs_just_extend [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 4 360 79] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_Impl9_AbsJustExtend_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  function abs_just_extend [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 4 360 79] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abs_just_extend [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 4 360 79] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 84] forall i : int . 0 <= i /\ i < Seq.length just2 -> Contains0.contains self (Seq.get just2 i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 358 4 358 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains just ix -> Contains1.contains just2 ix}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 129] forall tv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains2.contains (AbstractJustification0.abstract_justification self just) tv -> Contains2.contains (AbstractJustification0.abstract_justification self just2) tv }
    ensures { result = abs_just_extend self just just2 }
    
  axiom abs_just_extend_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 84] forall i : int . 0 <= i /\ i < Seq.length just2 -> Contains0.contains self (Seq.get just2 i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 358 4 358 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains just ix -> Contains1.contains just2 ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 129] forall tv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains2.contains (AbstractJustification0.abstract_justification self just) tv -> Contains2.contains (AbstractJustification0.abstract_justification self just2) tv)
end
module Cdsat_Trail_Impl9_AbsJustExtend
  use prelude.Int
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  function abs_just_extend [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 4 360 79] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abs_just_extend [#"/Users/xavier/Code/cdsat/src/trail.rs" 360 4 360 79] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 84] forall i : int . 0 <= i /\ i < Seq.length just2 -> Contains0.contains self (Seq.get just2 i)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 358 4 358 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains just ix -> Contains1.contains just2 ix}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 129] forall tv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains2.contains (AbstractJustification0.abstract_justification self just) tv -> Contains2.contains (AbstractJustification0.abstract_justification self just2) tv }
    ensures { result = abs_just_extend self just just2 }
    
  axiom abs_just_extend_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), just2 : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 357 4 357 84] forall i : int . 0 <= i /\ i < Seq.length just2 -> Contains0.contains self (Seq.get just2 i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 358 4 358 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains just ix -> Contains1.contains just2 ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 359 4 359 129] forall tv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains2.contains (AbstractJustification0.abstract_justification self just) tv -> Contains2.contains (AbstractJustification0.abstract_justification self just2) tv)
end
module Cdsat_Theory_Impl4_Subset_Stub
  use set.Fset
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function subset [#"/Users/xavier/Code/cdsat/src/theory.rs" 249 4 249 90] (self : Cdsat_Theory_Model_Type.t_model) (other : Cdsat_Theory_Model_Type.t_model) (set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_Subset_Interface
  use set.Fset
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function subset [#"/Users/xavier/Code/cdsat/src/theory.rs" 249 4 249 90] (self : Cdsat_Theory_Model_Type.t_model) (other : Cdsat_Theory_Model_Type.t_model) (set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val subset [#"/Users/xavier/Code/cdsat/src/theory.rs" 249 4 249 90] (self : Cdsat_Theory_Model_Type.t_model) (other : Cdsat_Theory_Model_Type.t_model) (set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 246 4 246 71] forall ix : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set1 ix -> Contains0.contains set2 ix}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 247 15 247 37] SatisfySet0.satisfy_set self set1}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 18 249 22] Inv0.inv self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 24 249 29] Inv0.inv other}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 248 14 248 36] SatisfySet0.satisfy_set self set2 }
    ensures { result = subset self other set1 set2 }
    
  axiom subset_spec : forall self : Cdsat_Theory_Model_Type.t_model, other : Cdsat_Theory_Model_Type.t_model, set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 246 4 246 71] forall ix : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set1 ix -> Contains0.contains set2 ix) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 247 15 247 37] SatisfySet0.satisfy_set self set1) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 249 18 249 22] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 249 24 249 29] Inv0.inv other) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 248 14 248 36] SatisfySet0.satisfy_set self set2)
end
module Cdsat_Theory_Impl4_Subset
  use set.Fset
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function subset [#"/Users/xavier/Code/cdsat/src/theory.rs" 249 4 249 90] (self : Cdsat_Theory_Model_Type.t_model) (other : Cdsat_Theory_Model_Type.t_model) (set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 244 4 244 12] ()
  val subset [#"/Users/xavier/Code/cdsat/src/theory.rs" 249 4 249 90] (self : Cdsat_Theory_Model_Type.t_model) (other : Cdsat_Theory_Model_Type.t_model) (set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 246 4 246 71] forall ix : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set1 ix -> Contains0.contains set2 ix}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 247 15 247 37] SatisfySet0.satisfy_set self set1}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 18 249 22] Inv0.inv self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 249 24 249 29] Inv0.inv other}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 248 14 248 36] SatisfySet0.satisfy_set self set2 }
    ensures { result = subset self other set1 set2 }
    
  axiom subset_spec : forall self : Cdsat_Theory_Model_Type.t_model, other : Cdsat_Theory_Model_Type.t_model, set1 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), set2 : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 246 4 246 71] forall ix : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set1 ix -> Contains0.contains set2 ix) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 247 15 247 37] SatisfySet0.satisfy_set self set1) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 249 18 249 22] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 249 24 249 29] Inv0.inv other) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 248 14 248 36] SatisfySet0.satisfy_set self set2)
end
module Core_Clone_Impls_Impl19_Clone_Interface
  use prelude.Borrow
  val clone' (self : bool) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module NumRational_Impl37_Clone_Interface
  type t
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = NumRational_Ratio_Type.t_ratio t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val clone' (self : NumRational_Ratio_Type.t_ratio t) : NumRational_Ratio_Type.t_ratio t
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 50 15 50 20] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 50 15 50 20] Inv1.inv result }
    
end
module Cdsat_Term_Impl25_Clone_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 218 9 218 14] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 218 9 218 14] result = self }
    
end
module Core_Cmp_Impls_Impl19_Eq_Interface
  use prelude.Borrow
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = bool,
    type DeepModelTy0.deepModelTy = bool
  val eq (self : bool) (other : bool) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module NumRational_Impl7_Eq_Interface
  type t
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = NumRational_Ratio_Type.t_ratio t
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = NumRational_Ratio_Type.t_ratio t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val eq (self : NumRational_Ratio_Type.t_ratio t) (other : NumRational_Ratio_Type.t_ratio t) : bool
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 381 11 381 15] Inv0.inv self}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 381 17 381 22] Inv0.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module CreusotContracts_Model_Impl8_DeepModel_Stub
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl8_DeepModel_Interface
  function deep_model (self : bool) : bool
  val deep_model (self : bool) : bool
    ensures { result = deep_model self }
    
end
module CreusotContracts_Model_Impl8_DeepModel
  function deep_model (self : bool) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/model.rs" 111 8 111 12] self
  val deep_model (self : bool) : bool
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl27_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value
  val eq [#"/Users/xavier/Code/cdsat/src/term.rs" 218 23 218 32] (self : Cdsat_Term_Value_Type.t_value) (rhs : Cdsat_Term_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 218 23 218 32] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Term_Impl8_Bool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val bool [#"/Users/xavier/Code/cdsat/src/term.rs" 259 4 259 30] (self : Cdsat_Term_Value_Type.t_value) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 257 4 257 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 258 14 258 42] self = Cdsat_Term_Value_Type.C_Bool result }
    
end
module Cdsat_Term_Impl8_Negate_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val negate [#"/Users/xavier/Code/cdsat/src/term.rs" 296 4 296 39] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 294 15 294 32] IsBool0.is_bool (ShallowModel0.shallow_model self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 295 14 295 41] ShallowModel1.shallow_model result = Negate0.negate (ShallowModel0.shallow_model self) }
    
end
module Core_Slice_Iter_Iter_Type
  use prelude.Opaque
  use prelude.Borrow
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_iter 't =
    | C_Iter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) opaque_ptr (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl13_ShallowModel
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  function shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
  val shallow_model (self : Core_Slice_Iter_Iter_Type.t_iter t) : slice t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function shallow_model (self : slice t) : Seq.seq t
  val shallow_model (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] result = Slice.id self }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 21 19 25] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 19 4 19 50] Inv1.inv (shallow_model self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 18 14 18 41] shallow_model self = Slice.id self) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic_Interface
  type t
  use prelude.Slice
  use prelude.Int
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl2_IndexLogic
  type t
  use prelude.Slice
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  function index_logic [@inline:trivial] (self : slice t) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 41 8 41 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : slice t) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv result }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv (to_ref_seq self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl4_ToRefSeq
  type t
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  function to_ref_seq (self : slice t) : Seq.seq t
  val to_ref_seq (self : slice t) : Seq.seq t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length result = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length result -> Seq.get result i = IndexLogic0.index_logic self i }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv result }
    ensures { result = to_ref_seq self }
    
  axiom to_ref_seq_spec : forall self : slice t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 19 84 23] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 84 4 84 35] Inv1.inv (to_ref_seq self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 83 4 83 82] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq self) -> Seq.get (to_ref_seq self) i = IndexLogic0.index_logic self i) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 82 14 82 41] Seq.length (to_ref_seq self) = Seq.length (ShallowModel0.shallow_model self))
end
module CreusotContracts_Std1_Slice_Impl14_Produces_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
end
module CreusotContracts_Std1_Slice_Impl14_Produces_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Slice_Impl14_Produces
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Logic_Ops_Impl2_IndexLogic_Stub as IndexLogic0 with
    type t = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl4_ToRefSeq_Stub as ToRefSeq0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  predicate produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t)
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 379 12 379 66] ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model self) = Seq.(++) visited (ToRefSeq0.to_ref_seq (ShallowModel0.shallow_model tl))
  val produces (self : Core_Slice_Iter_Iter_Type.t_iter t) (visited : Seq.seq t) (tl : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = produces self visited tl }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPre
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 182 20 182 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Stub
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl5_IntoIterPost
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel2 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel1 with
    type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 188 20 188 34] ShallowModel0.shallow_model self = ShallowModel2.shallow_model (ShallowModel1.shallow_model res)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Core_Slice_Iter_Iter_Type.t_iter t) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl16_IntoIter_Interface
  type t
  type a
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl5_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2749 17 2749 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    
end
module CreusotContracts_Std1_Slice_Impl14_Completed_Stub
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
end
module CreusotContracts_Std1_Slice_Impl14_Completed_Interface
  type t
  use prelude.Borrow
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t))
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl14_Completed
  type t
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t,
    type ShallowModelTy0.shallowModelTy = slice t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Slice_Iter_Iter_Type.t_iter t
  predicate completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 372 20 372 61] Resolve0.resolve self /\ ShallowModel1.shallow_model (ShallowModel0.shallow_model self) = Seq.empty 
  val completed (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : bool
    ensures { result = completed self }
    
end
module Core_Slice_Iter_Impl181_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl14_Completed_Stub as Completed0 with
    type t = t
  val next (self : borrowed (Core_Slice_Iter_Iter_Type.t_iter t)) : Core_Option_Option_Type.t_option t
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs" 131 12 131 47] Inv0.inv result }
    
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = a
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = b,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = a,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = a
  val eq (self : a) (other : b) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs" 1448 15 1448 19] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs" 1448 21 1448 26] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl_Stub
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl_Interface
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl14_ProducesRefl
  type t
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 383 4 383 10] ()
  val produces_refl (a : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t . [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 385 14 385 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans_Stub
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans_Interface
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Slice_Impl14_ProducesTrans
  type t
  use seq.Seq
  use prelude.Borrow
  use seq.Seq
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  clone CreusotContracts_Std1_Slice_Impl14_Produces_Stub as Produces0 with
    type t = t
  function produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 388 4 388 10] ()
  val produces_trans (a : Core_Slice_Iter_Iter_Type.t_iter t) (ab : Seq.seq t) (b : Core_Slice_Iter_Iter_Type.t_iter t) (bc : Seq.seq t) (c : Core_Slice_Iter_Iter_Type.t_iter t) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Slice_Iter_Iter_Type.t_iter t, ab : Seq.seq t, b : Core_Slice_Iter_Iter_Type.t_iter t, bc : Seq.seq t, c : Core_Slice_Iter_Iter_Type.t_iter t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 390 15 390 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 391 15 391 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 31 393 33] Inv0.inv ab) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 393 61 393 63] Inv0.inv bc) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 392 14 392 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module Cdsat_Trail_Impl9_IndexOf_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Term_Type.t_term
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  use Core_Option_Option_Type as Core_Option_Option_Type
  val index_of [#"/Users/xavier/Code/cdsat/src/trail.rs" 411 4 411 65] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Term_Term_Type.t_term) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 407 14 410 5] match (result) with
      | Core_Option_Option_Type.C_Some x -> Contains0.contains self x /\ (let (a, _) = IndexLogic0.index_logic self x in a) = ShallowModel0.shallow_model a
      | Core_Option_Option_Type.C_None -> forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> (let (a, _) = IndexLogic0.index_logic self ix in a) <> ShallowModel0.shallow_model a
      end }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1824 21 1824 25] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1824 27 1824 32] Inv1.inv value}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 78 26 78 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module Core_Clone_Impls_Impl5_Clone_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  val clone' (self : usize) : usize
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    
end
module Cdsat_Term_Impl11_Clone_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 14 9 14 14] (self : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Term_Sort_Type.t_sort
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 14 9 14 14] result = self }
    
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val clone' (self : t) : t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1279 14 1279 18] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1279 4 1279 27] Inv1.inv result }
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Cdsat_Term_Impl19_Clone_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/term.rs" 33 9 33 14] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 33 9 33 14] result = self }
    
end
module CreusotContracts_Std1_Boxed_Impl1_ShallowModel_Stub
  type t
  type a
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Std1_Boxed_Impl1_ShallowModel_Interface
  type t
  type a
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Boxed_Impl1_ShallowModel
  type t
  type a
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/boxed.rs" 20 8 20 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  function le_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  function le_log (self : self) (o : self) : bool
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function le_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 11 20 11 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 18 16 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 16 27 16 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 15 14 15 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 18 26 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 26 27 26 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 25 14 25 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  function ge_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  function ge_log (self : self) (o : self) : bool
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function ge_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 31 20 31 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 18 36 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 36 27 36 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 35 14 35 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  function gt_log (self : self) (o : self) : bool
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  function gt_log (self : self) (o : self) : bool
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function gt_log (self : self) (o : self) : bool =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 41 20 41 56] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 18 46 19] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 46 27 46 28] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 45 14 45 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 50 12 50 13] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 49 14 49 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 53 15 53 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 54 15 54 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 13 56 14] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 22 56 23] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 56 31 56 32] Inv0.inv z) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 55 14 55 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 59 15 59 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 16 61 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 61 25 61 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 60 14 60 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 64 15 64 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 16 66 17] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 66 25 66 26] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 65 14 65 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 14 70 15] Inv0.inv x) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 70 23 70 24] Inv0.inv y) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 69 14 69 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
end
module CreusotContracts_Logic_Ord_Impl9_CmpLog_Stub
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl9_CmpLog_Interface
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpLog
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 137 12 146 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : usize) (o : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Cdsat_Trail_Impl5_CmpLog_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 4 92 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
end
module Cdsat_Trail_Impl5_CmpLog_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 4 92 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
  val cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 4 92 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self rhs }
    
end
module Cdsat_Trail_Impl5_CmpLog
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog_Stub as CmpLog0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 4 92 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 93 8 97 9] match (CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_0 self) (Cdsat_Trail_TrailIndex_Type.trailindex_0 rhs)) with
      | Core_Cmp_Ordering_Type.C_Less -> Core_Cmp_Ordering_Type.C_Less
      | Core_Cmp_Ordering_Type.C_Greater -> Core_Cmp_Ordering_Type.C_Greater
      | Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log (Cdsat_Trail_TrailIndex_Type.trailindex_1 self) (Cdsat_Trail_TrailIndex_Type.trailindex_1 rhs)
      end
  val cmp_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 92 4 92 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self rhs }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpLeLog_Stub
  use prelude.Int
  use prelude.UIntSize
  function cmp_le_log (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_CmpLeLog_Interface
  use prelude.Int
  use prelude.UIntSize
  function cmp_le_log (_1 : usize) (_2 : usize) : ()
  val cmp_le_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpLeLog
  use prelude.Int
  use prelude.UIntSize
  function cmp_le_log (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 79 12 79 14] ()
  val cmp_le_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpLtLog_Stub
  use prelude.Int
  use prelude.UIntSize
  function cmp_lt_log (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_CmpLtLog_Interface
  use prelude.Int
  use prelude.UIntSize
  function cmp_lt_log (_1 : usize) (_2 : usize) : ()
  val cmp_lt_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpLtLog
  use prelude.Int
  use prelude.UIntSize
  function cmp_lt_log (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 85 12 85 14] ()
  val cmp_lt_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpGeLog_Stub
  use prelude.Int
  use prelude.UIntSize
  function cmp_ge_log (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_CmpGeLog_Interface
  use prelude.Int
  use prelude.UIntSize
  function cmp_ge_log (_1 : usize) (_2 : usize) : ()
  val cmp_ge_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpGeLog
  use prelude.Int
  use prelude.UIntSize
  function cmp_ge_log (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 91 12 91 14] ()
  val cmp_ge_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpGtLog_Stub
  use prelude.Int
  use prelude.UIntSize
  function cmp_gt_log (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_CmpGtLog_Interface
  use prelude.Int
  use prelude.UIntSize
  function cmp_gt_log (_1 : usize) (_2 : usize) : ()
  val cmp_gt_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_CmpGtLog
  use prelude.Int
  use prelude.UIntSize
  function cmp_gt_log (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 97 12 97 14] ()
  val cmp_gt_log (_1 : usize) (_2 : usize) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Refl_Stub
  use prelude.Int
  use prelude.UIntSize
  function refl (_1 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_Refl_Interface
  use prelude.Int
  use prelude.UIntSize
  function refl (_1 : usize) : ()
  val refl (_1 : usize) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Refl
  use prelude.Int
  use prelude.UIntSize
  function refl (_1 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 103 12 103 14] ()
  val refl (_1 : usize) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Trans_Stub
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : usize) (_2 : usize) (_3 : usize) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_Impl9_Trans_Interface
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : usize) (_2 : usize) (_3 : usize) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (_1 : usize) (_2 : usize) (_3 : usize) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Trans
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : usize) (_2 : usize) (_3 : usize) (_4 : Core_Cmp_Ordering_Type.t_ordering) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 109 12 109 14] ()
  val trans (_1 : usize) (_2 : usize) (_3 : usize) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Antisym1_Stub
  use prelude.Int
  use prelude.UIntSize
  function antisym1 (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_Antisym1_Interface
  use prelude.Int
  use prelude.UIntSize
  function antisym1 (_1 : usize) (_2 : usize) : ()
  val antisym1 (_1 : usize) (_2 : usize) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Antisym1
  use prelude.Int
  use prelude.UIntSize
  function antisym1 (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 115 12 115 14] ()
  val antisym1 (_1 : usize) (_2 : usize) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Antisym2_Stub
  use prelude.Int
  use prelude.UIntSize
  function antisym2 (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_Antisym2_Interface
  use prelude.Int
  use prelude.UIntSize
  function antisym2 (_1 : usize) (_2 : usize) : ()
  val antisym2 (_1 : usize) (_2 : usize) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_Antisym2
  use prelude.Int
  use prelude.UIntSize
  function antisym2 (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 121 12 121 14] ()
  val antisym2 (_1 : usize) (_2 : usize) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_EqCmp_Stub
  use prelude.Int
  use prelude.UIntSize
  function eq_cmp (_1 : usize) (_2 : usize) : ()
end
module CreusotContracts_Logic_Ord_Impl9_EqCmp_Interface
  use prelude.Int
  use prelude.UIntSize
  function eq_cmp (_1 : usize) (_2 : usize) : ()
  val eq_cmp (_1 : usize) (_2 : usize) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl9_EqCmp
  use prelude.Int
  use prelude.UIntSize
  function eq_cmp (_1 : usize) (_2 : usize) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 127 12 127 14] ()
  val eq_cmp (_1 : usize) (_2 : usize) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module Cdsat_Trail_Impl5_CmpLeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 103 4 103 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpLeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 103 4 103 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 103 4 103 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 14 102 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 14 102 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpLeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 103 4 103 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 100 4 100 10] ()
  val cmp_le_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 103 4 103 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 14 102 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 102 14 102 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpLtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpLtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 14 107 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 14 107 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpLtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 105 4 105 10] ()
  val cmp_lt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 14 107 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 107 14 107 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpGeLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 113 4 113 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpGeLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 113 4 113 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 113 4 113 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 14 112 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 14 112 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpGeLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 113 4 113 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 110 4 110 10] ()
  val cmp_ge_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 113 4 113 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 14 112 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) }
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 112 14 112 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_CmpGtLog_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 118 4 118 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_CmpGtLog_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 118 4 118 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 118 4 118 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 14 117 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 14 117 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_CmpGtLog
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 118 4 118 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 115 4 115 10] ()
  val cmp_gt_log [#"/Users/xavier/Code/cdsat/src/trail.rs" 118 4 118 35] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 14 117 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) }
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 117 14 117 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_Refl_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 4 123 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_Refl_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 4 123 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 4 123 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 14 122 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 14 122 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl5_Refl
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 4 123 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 120 4 120 10] ()
  val refl [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 4 123 20] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 14 122 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal }
    ensures { result = refl x }
    
  axiom refl_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 122 14 122 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module Cdsat_Trail_Impl5_Trans_Stub
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 4 130 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
end
module Cdsat_Trail_Impl5_Trans_Interface
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 4 130 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 4 130 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 128 15 128 32] CmpLog0.cmp_log y z = o}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 14 129 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 128 15 128 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 129 14 129 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl5_Trans
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 4 130 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 125 4 125 10] ()
  val trans [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 4 130 52] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) (z : Cdsat_Trail_TrailIndex_Type.t_trailindex) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log x y = o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 128 15 128 32] CmpLog0.cmp_log y z = o}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 129 14 129 31] CmpLog0.cmp_log x z = o }
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex, z : Cdsat_Trail_TrailIndex_Type.t_trailindex, o : Core_Cmp_Ordering_Type.t_ordering . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 127 15 127 32] CmpLog0.cmp_log x y = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 128 15 128 32] CmpLog0.cmp_log y z = o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 129 14 129 31] CmpLog0.cmp_log x z = o)
end
module Cdsat_Trail_Impl5_Antisym1_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_Antisym1_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 134 15 134 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 14 135 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 134 15 134 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 135 14 135 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_Antisym1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 132 4 132 10] ()
  val antisym1 [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 134 15 134 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 135 14 135 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater }
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 134 15 134 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 135 14 135 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module Cdsat_Trail_Impl5_Antisym2_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 142 4 142 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_Antisym2_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 142 4 142 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 142 4 142 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 140 15 140 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 14 141 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 140 15 140 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 141 14 141 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_Antisym2
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 142 4 142 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 138 4 138 10] ()
  val antisym2 [#"/Users/xavier/Code/cdsat/src/trail.rs" 142 4 142 33] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 140 15 140 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 141 14 141 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less }
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 140 15 140 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 141 14 141 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module Cdsat_Trail_Impl5_EqCmp_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 147 4 147 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl5_EqCmp_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 147 4 147 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 147 4 147 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 14 146 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 14 146 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl5_EqCmp
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  function eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 147 4 147 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 144 4 144 10] ()
  val eq_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 147 4 147 31] (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (y : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 14 146 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) }
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex, y : Cdsat_Trail_TrailIndex_Type.t_trailindex . [#"/Users/xavier/Code/cdsat/src/trail.rs" 146 14 146 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Bool_Impl0_EvalInner_Interface
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel4
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel2
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl0_WellSorted_Stub as WellSorted0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Term_Type.t_term
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val eval_inner [#"/Users/xavier/Code/cdsat/src/bool.rs" 140 4 145 28] (self : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Term_Term_Type.t_term) (used : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))) : Core_Result_Result_Type.t_result (Cdsat_Term_Value_Type.t_value) (Cdsat_Term_Term_Type.t_term)
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 126 15 126 29] Invariant0.invariant' tl}
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 127 4 127 34] WellSorted0.well_sorted (ShallowModel0.shallow_model tm)}
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 128 4 128 30] IsBool0.is_bool (ShallowModel0.shallow_model tm)}
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 129 4 129 70] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model used) ix -> Contains1.contains tl ix}
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 130 14 137 5] match (result) with
      | Core_Result_Result_Type.C_Ok v -> IsBool1.is_bool (ShallowModel2.shallow_model v) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification tl (ShallowModel3.shallow_model ( ^ used))) -> Satisfies0.satisfies m (ShallowModel0.shallow_model tm, ShallowModel2.shallow_model v))
      | Core_Result_Result_Type.C_Err t -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost tl)) (ShallowModel4.shallow_model t) (ShallowModel2.shallow_model (Cdsat_Term_Value_Type.C_Bool true))
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 138 4 138 75] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model used) ix -> Contains0.contains (ShallowModel3.shallow_model ( ^ used)) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 139 4 139 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel3.shallow_model ( ^ used)) ix -> Contains1.contains tl ix }
    
end
module Cdsat_Bool_Impl0_Eval_Interface
  use prelude.Ghost
  use prelude.Borrow
  use seq.Seq
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel3
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel2
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl0_WellSorted_Stub as WellSorted0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Term_Type.t_term
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val eval [#"/Users/xavier/Code/cdsat/src/bool.rs" 115 4 115 87] (self : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory)) (tl : Cdsat_Trail_Trail_Type.t_trail) (tm : Cdsat_Term_Term_Type.t_term) : (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global), Core_Result_Result_Type.t_result (Cdsat_Term_Value_Type.t_value) (Cdsat_Term_Term_Type.t_term))
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 104 15 104 29] Invariant0.invariant' tl}
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 105 4 105 34] WellSorted0.well_sorted (ShallowModel0.shallow_model tm)}
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 106 4 106 30] IsBool0.is_bool (ShallowModel0.shallow_model tm)}
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 107 4 107 73] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model (let (a, _) = result in a)) ix -> Contains1.contains tl ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 108 14 114 5] match (let (_, a) = result in a) with
      | Core_Result_Result_Type.C_Ok v -> IsBool1.is_bool (ShallowModel2.shallow_model v) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification tl (ShallowModel1.shallow_model (let (a, _) = result in a))) -> Satisfies0.satisfies m (ShallowModel0.shallow_model tm, ShallowModel2.shallow_model v))
      | Core_Result_Result_Type.C_Err t -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost tl)) (ShallowModel3.shallow_model t) (ShallowModel2.shallow_model (Cdsat_Term_Value_Type.C_Bool true))
      end }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = rhs
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  val ne (self : self) (other : rhs) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs" 226 11 226 15] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs" 226 17 226 22] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 17 26 17 75] result = (DeepModel0.deep_model self <> DeepModel1.deep_model other) }
    
end
module Cdsat_Trail_Impl9_AbsJustCons_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl9_AbsJustCons_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_cons self just elem }
    
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustCons
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_cons [#"/Users/xavier/Code/cdsat/src/trail.rs" 370 4 370 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_cons self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_cons self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 371 8 371 10] ())
  axiom abs_just_cons_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 367 15 367 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 368 4 368 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 369 14 369 144] AbstractJustification0.abstract_justification self (Seq.(++) (Seq.singleton elem) just) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustSnoc_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 379 4 379 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl9_AbsJustSnoc_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 379 4 379 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 379 4 379 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 376 15 376 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 377 4 377 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 378 14 378 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_snoc self just elem }
    
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 376 15 376 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 377 4 377 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 378 14 378 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_Impl9_AbsJustSnoc
  use prelude.Int
  use seq.Seq
  use seq_ext.SeqExt
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_AbsJustCons_Stub as AbsJustCons0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains1.contains,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  function abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 379 4 379 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
  val abs_just_snoc [#"/Users/xavier/Code/cdsat/src/trail.rs" 379 4 379 67] (self : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (elem : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 376 15 376 34] Contains0.contains self elem}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 377 4 377 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 378 14 378 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem) }
    ensures { result = abs_just_snoc self just elem }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . abs_just_snoc self just elem = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 374 4 374 12] if just = Seq.empty  then
    ()
  else
    let j = Seq.snoc just elem in let _ = AbsJustCons0.abs_just_cons self (SeqExt.subsequence j 1 (Seq.length j)) (Seq.get j 0) in abs_just_snoc self (SeqExt.subsequence just 1 (Seq.length just)) elem
  )
  axiom abs_just_snoc_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), elem : Cdsat_Trail_TrailIndex_Type.t_trailindex . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 376 15 376 34] Contains0.contains self elem) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 377 4 377 82] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 378 14 378 126] AbstractJustification0.abstract_justification self (Seq.snoc just elem) = Insert0.insert (AbstractJustification0.abstract_justification self just) (IndexLogic0.index_logic self elem))
end
module Cdsat_Trail_AbstractJustificationInsert_Stub
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 880 0 880 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_AbstractJustificationInsert_Interface
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 880 0 880 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 880 0 880 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 876 11 876 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 877 11 877 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 878 0 878 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 879 10 879 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x) }
    ensures { result = abstract_justification_insert t x s }
    
  axiom abstract_justification_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 876 11 876 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 877 11 877 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 878 0 878 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 879 10 879 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_AbstractJustificationInsert
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_AbsJustSnoc_Stub as AbsJustSnoc0 with
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function Insert0.insert = Insert0.insert,
    predicate Contains1.contains = Contains2.contains,
    predicate Contains2.contains = Contains1.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 880 0 880 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abstract_justification_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 880 0 880 88] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 876 11 876 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 877 11 877 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 878 0 878 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 879 10 879 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x) }
    ensures { result = abstract_justification_insert t x s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . abstract_justification_insert t x s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 881 4 881 25] AbsJustSnoc0.abs_just_snoc t s x)
  axiom abstract_justification_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 876 11 876 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 877 11 877 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 878 0 878 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 879 10 879 101] AbstractJustification0.abstract_justification t (Seq.snoc s x) = Insert0.insert (AbstractJustification0.abstract_justification t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Theory_Impl4_Consistent_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  function consistent [#"/Users/xavier/Code/cdsat/src/theory.rs" 242 4 242 56] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) (w : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl4_Consistent_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  function consistent [#"/Users/xavier/Code/cdsat/src/theory.rs" 242 4 242 56] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) (w : Cdsat_Theory_Value_Type.t_value) : ()
    
  val consistent [#"/Users/xavier/Code/cdsat/src/theory.rs" 242 4 242 56] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) (w : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 238 15 238 37] Satisfies0.satisfies self (t, v)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 239 15 239 37] Satisfies0.satisfies self (t, w)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 240 15 240 21] v <> w}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 242 22 242 26] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 241 14 241 19] false }
    ensures { result = consistent self t v w }
    
  axiom consistent_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value, w : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 238 15 238 37] Satisfies0.satisfies self (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 239 15 239 37] Satisfies0.satisfies self (t, w)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 240 15 240 21] v <> w) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 242 22 242 26] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 241 14 241 19] false)
end
module Cdsat_Theory_Impl4_Consistent
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  function consistent [#"/Users/xavier/Code/cdsat/src/theory.rs" 242 4 242 56] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) (w : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 236 4 236 12] ()
  val consistent [#"/Users/xavier/Code/cdsat/src/theory.rs" 242 4 242 56] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) (w : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 238 15 238 37] Satisfies0.satisfies self (t, v)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 239 15 239 37] Satisfies0.satisfies self (t, w)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 240 15 240 21] v <> w}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 242 22 242 26] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 241 14 241 19] false }
    ensures { result = consistent self t v w }
    
  axiom consistent_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value, w : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 238 15 238 37] Satisfies0.satisfies self (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 239 15 239 37] Satisfies0.satisfies self (t, w)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 240 15 240 21] v <> w) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 242 22 242 26] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 241 14 241 19] false)
end
module Cdsat_Bool_Impl0_Extend_Interface
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val extend [#"/Users/xavier/Code/cdsat/src/bool.rs" 33 4 33 60] (self : borrowed (Cdsat_Bool_BoolTheory_Type.t_booltheory)) (tl : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_ExtendResult_Type.t_extendresult
    requires {[#"/Users/xavier/Code/cdsat/src/bool.rs" 19 4 19 38] Invariant0.invariant' ( * tl)}
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 19 4 19 38] Invariant0.invariant' ( ^ tl) }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 20 14 31 5] match (result) with
      | Cdsat_Concrete_ExtendResult_Type.C_Satisfied -> true
      | Cdsat_Concrete_ExtendResult_Type.C_Decision t v -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) (ShallowModel0.shallow_model t) (ShallowModel1.shallow_model v)
      | Cdsat_Concrete_ExtendResult_Type.C_Conflict c -> let conflict = AbstractJustification0.abstract_justification ( ^ tl) (ShallowModel2.shallow_model c) in Seq.length (ShallowModel2.shallow_model c) > 0 /\ (forall t : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel2.shallow_model c) t -> Contains1.contains ( ^ tl) t) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m conflict -> false)
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/bool.rs" 32 4 32 44] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * tl))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ tl))) }
    
end
module Cdsat_Concrete_TheoryState_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  type t_theorystate  =
    | C_Sat
    | C_Decision (Cdsat_Term_Term_Type.t_term) (Cdsat_Term_Value_Type.t_value)
    | C_Unknown
    
  let function decision_0 (self : t_theorystate) : Cdsat_Term_Term_Type.t_term = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Term_Term_Type.t_term
      | C_Decision a _ -> a
      | C_Unknown -> any Cdsat_Term_Term_Type.t_term
      end
  let function decision_1 (self : t_theorystate) : Cdsat_Term_Value_Type.t_value = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sat -> any Cdsat_Term_Value_Type.t_value
      | C_Decision _ a -> a
      | C_Unknown -> any Cdsat_Term_Value_Type.t_value
      end
end
module Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_theorystatedeepmodel  =
    | C_Sat
    | C_Decision (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value)
    | C_Unknown
    
end
module Core_Cmp_Impls_Impl21_Eq_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Int
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = usize,
    type DeepModelTy0.deepModelTy = int
  val eq (self : usize) (other : usize) : bool
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel0.deep_model other) }
    
end
module Alloc_Boxed_Impl14_Eq_Interface
  type t
  type a1
  type a2
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val eq (self : t) (other : t) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1329 11 1329 15] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1329 17 1329 22] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel_Stub
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel_Interface
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Boxed_Impl0_DeepModel
  type t
  type a
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/boxed.rs" 10 17 10 37] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Cdsat_Term_Impl21_Eq_Interface
  use prelude.Borrow
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term
  val eq [#"/Users/xavier/Code/cdsat/src/term.rs" 33 23 33 32] (self : Cdsat_Term_Term_Type.t_term) (rhs : Cdsat_Term_Term_Type.t_term) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 33 23 33 32] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Concrete_Impl6_DeepModel_Stub
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 24 21 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    
end
module Cdsat_Concrete_Impl6_DeepModel_Interface
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 24 21 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 24 21 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl6_DeepModel
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel1
  clone Cdsat_Term_Impl5_DeepModel_Stub as DeepModel0
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 24 21 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 24 21 33] match (self) with
      | Cdsat_Concrete_TheoryState_Type.C_Sat -> Cdsat_Concrete_TheoryStateDeepModel_Type.C_Sat
      | Cdsat_Concrete_TheoryState_Type.C_Decision v0_1 v1_1 -> Cdsat_Concrete_TheoryStateDeepModel_Type.C_Decision (DeepModel0.deep_model v0_1) (DeepModel1.deep_model v1_1)
      | Cdsat_Concrete_TheoryState_Type.C_Unknown -> Cdsat_Concrete_TheoryStateDeepModel_Type.C_Unknown
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 24 21 33] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl3_Eq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 9 21 18] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) (rhs : Cdsat_Concrete_TheoryState_Type.t_theorystate) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 9 21 18] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Concrete_Impl5_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 20 21 22] (self : Cdsat_Concrete_TheoryState_Type.t_theorystate) : ()
    
end
module Cdsat_Lra_LraTheory_Type
  type t_lratheory  =
    | C_LRATheory
    
end
module Cdsat_Concrete_Solver_Type
  use Cdsat_Lra_LraTheory_Type as Cdsat_Lra_LraTheory_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Bool_BoolTheory_Type as Cdsat_Bool_BoolTheory_Type
  type t_solver  =
    | C_Solver (Cdsat_Bool_BoolTheory_Type.t_booltheory) (Cdsat_Concrete_TheoryState_Type.t_theorystate) (Cdsat_Lra_LraTheory_Type.t_lratheory) (Cdsat_Concrete_TheoryState_Type.t_theorystate)
    
  let function solver_bool_state (self : t_solver) : Cdsat_Concrete_TheoryState_Type.t_theorystate
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver _ a _ _ -> a
      end
  let function solver_lra_state (self : t_solver) : Cdsat_Concrete_TheoryState_Type.t_theorystate
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver _ _ _ a -> a
      end
  let function solver_lra_th (self : t_solver) : Cdsat_Lra_LraTheory_Type.t_lratheory = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver _ _ a _ -> a
      end
  let function solver_bool_th (self : t_solver) : Cdsat_Bool_BoolTheory_Type.t_booltheory
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Solver a _ _ _ -> a
      end
end
module Cdsat_Concrete_Impl0_New_Interface
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 29 4 29 24] (_1 : ()) : Cdsat_Concrete_Solver_Type.t_solver
end
module Cdsat_Concrete_Impl0_DecAcc_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  predicate dec_acc [#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 4 81 42] (self : Cdsat_Concrete_Solver_Type.t_solver) (trail : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Concrete_Impl0_DecAcc_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  predicate dec_acc [#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 4 81 42] (self : Cdsat_Concrete_Solver_Type.t_solver) (trail : Cdsat_Trail_Trail_Type.t_trail)
    
  val dec_acc [#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 4 81 42] (self : Cdsat_Concrete_Solver_Type.t_solver) (trail : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = dec_acc self trail }
    
end
module Cdsat_Concrete_Impl0_DecAcc
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  predicate dec_acc [#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 4 81 42] (self : Cdsat_Concrete_Solver_Type.t_solver) (trail : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 82 8 85 9] forall v : Cdsat_Term_Value_Type.t_value . forall t : Cdsat_Term_Term_Type.t_term . Cdsat_Concrete_Solver_Type.solver_bool_state self = Cdsat_Concrete_TheoryState_Type.C_Decision t v \/ Cdsat_Concrete_Solver_Type.solver_lra_state self = Cdsat_Concrete_TheoryState_Type.C_Decision t v -> Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost trail)) (ShallowModel0.shallow_model t) (ShallowModel1.shallow_model v)
  val dec_acc [#"/Users/xavier/Code/cdsat/src/concrete.rs" 81 4 81 42] (self : Cdsat_Concrete_Solver_Type.t_solver) (trail : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = dec_acc self trail }
    
end
module Cdsat_Lra_Impl0_Extend_Interface
  use prelude.Borrow
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Lra_LraTheory_Type as Cdsat_Lra_LraTheory_Type
  val extend [#"/Users/xavier/Code/cdsat/src/main.rs" 28 8 28 63] (self : borrowed (Cdsat_Lra_LraTheory_Type.t_lratheory)) (_2 : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_ExtendResult_Type.t_extendresult
    
end
module Cdsat_Concrete_Impl0_ExtendNext_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Concrete_Impl0_DecAcc_Stub as DecAcc0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val extend_next [#"/Users/xavier/Code/cdsat/src/concrete.rs" 53 4 53 75] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Core_Option_Option_Type.t_option (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global))
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 49 4 49 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 50 15 50 96] Cdsat_Concrete_Solver_Type.solver_bool_state ( * self) = Cdsat_Concrete_TheoryState_Type.C_Unknown /\ Cdsat_Concrete_Solver_Type.solver_lra_state ( * self) = Cdsat_Concrete_TheoryState_Type.C_Unknown}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 38 14 48 5] match (result) with
      | Core_Option_Option_Type.C_None -> true
      | Core_Option_Option_Type.C_Some c -> let conflict = AbstractJustification0.abstract_justification ( ^ trail) (ShallowModel0.shallow_model c) in Seq.length (ShallowModel0.shallow_model c) > 0 /\ (forall t : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model c) t -> Contains1.contains ( ^ trail) t) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m conflict -> false)
      end }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 49 4 49 41] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 51 14 51 37] DecAcc0.dec_acc ( ^ self) ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 52 4 52 50] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    
end
module Cdsat_Concrete_Impl0_CanDeduce_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val can_deduce [#"/Users/xavier/Code/cdsat/src/concrete.rs" 89 4 89 36] (self : Cdsat_Concrete_Solver_Type.t_solver) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 88 14 88 107] result = (Cdsat_Concrete_Solver_Type.solver_bool_state self = Cdsat_Concrete_TheoryState_Type.C_Unknown \/ Cdsat_Concrete_Solver_Type.solver_lra_state self = Cdsat_Concrete_TheoryState_Type.C_Unknown) }
    
end
module Cdsat_Concrete_Impl0_Sat_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  val sat [#"/Users/xavier/Code/cdsat/src/concrete.rs" 94 4 94 29] (self : Cdsat_Concrete_Solver_Type.t_solver) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 93 14 93 99] result = (Cdsat_Concrete_Solver_Type.solver_bool_state self = Cdsat_Concrete_TheoryState_Type.C_Sat /\ Cdsat_Concrete_Solver_Type.solver_lra_state self = Cdsat_Concrete_TheoryState_Type.C_Sat) }
    
end
module Cdsat_Concrete_Impl0_Decision_Interface
  use prelude.Borrow
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val decision [#"/Users/xavier/Code/cdsat/src/concrete.rs" 101 4 101 47] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) : (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 98 4 99 105] exists v : Cdsat_Term_Value_Type.t_value . exists t : Cdsat_Term_Term_Type.t_term . Cdsat_Concrete_Solver_Type.solver_bool_state ( * self) = Cdsat_Concrete_TheoryState_Type.C_Decision t v \/ Cdsat_Concrete_Solver_Type.solver_lra_state ( * self) = Cdsat_Concrete_TheoryState_Type.C_Decision t v}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 100 14 100 137] Cdsat_Concrete_Solver_Type.solver_bool_state ( * self) = Cdsat_Concrete_TheoryState_Type.C_Decision (let (a, _) = result in a) (let (_, a) = result in a) \/ Cdsat_Concrete_Solver_Type.solver_lra_state ( * self) = Cdsat_Concrete_TheoryState_Type.C_Decision (let (a, _) = result in a) (let (_, a) = result in a) }
    
end
module Cdsat_Concrete_Answer_Type
  type t_answer  =
    | C_Sat
    | C_Unsat
    
end
module Cdsat_Trail_Impl9_AddDecision_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val add_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 398 4 398 65] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 393 15 393 31] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 395 4 395 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 394 14 394 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 396 4 396 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
end
module Alloc_Vec_Impl8_Deref_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = slice t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val deref (self : Alloc_Vec_Vec_Type.t_vec t a) : slice t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2608 14 2608 18] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 147 26 147 42] ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2608 4 2608 27] Inv1.inv result }
    
end
module Cdsat_Trail_Impl9_MaxLevel_Interface
  use prelude.Int
  use seq.Seq
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Slice
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val max_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 599 4 599 71] (self : Cdsat_Trail_Trail_Type.t_trail) (assignments : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : usize
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 596 15 596 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 597 4 597 102] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model assignments) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model assignments) i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 598 14 598 88] SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model assignments)) = UIntSize.to_int result }
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl7_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl7_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module CreusotContracts_Std1_Vec_Impl8_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 237 12 237 41] ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Cdsat_Concrete_ConflictHeap_Type
  type t_conflictheap
end
module Cdsat_Concrete_Impl1_ShallowModel_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 386 4 386 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
end
module Cdsat_Concrete_Impl1_ShallowModel_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 386 4 386 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 386 4 386 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { result = shallow_model self }
    
end
module Cdsat_Concrete_Impl1_ShallowModel
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 386 4 386 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 386 4 386 50] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Stub
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic_Interface
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl6_IndexLogic
  type t
  use prelude.Ghost
  use seq.Seq
  use prelude.Int
  function index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ops.rs" 85 8 85 33] Seq.get (Ghost.inner self) ix
  val index_logic [@inline:trivial] (self : Ghost.ghost_ty (Seq.seq t)) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl11_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl11_Resolve
  type t
  type a
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 222 8 222 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/ghost.rs" 26 20 26 48] ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_IxToAbs_Stub
  use set.Fset
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 758 0 758 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
end
module Cdsat_Trail_IxToAbs_Interface
  use set.Fset
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 758 0 758 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 758 0 758 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 756 0 756 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains result (IndexLogic0.index_logic t ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 757 0 757 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix) }
    ensures { result = ix_to_abs t s }
    
  axiom ix_to_abs_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 757 0 757 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (ix_to_abs t s) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 756 0 756 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains (ix_to_abs t s) (IndexLogic0.index_logic t ix))
end
module Cdsat_Trail_IxToAbs
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 758 0 758 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
  val ix_to_abs [#"/Users/xavier/Code/cdsat/src/trail.rs" 758 0 758 93] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 756 0 756 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains result (IndexLogic0.index_logic t ix) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 757 0 757 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix) }
    ensures { result = ix_to_abs t s }
    
  axiom def : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ix_to_abs t s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 753 0 753 8] if s = Fset.empty  then
    Fset.empty 
  else
    let a = Fset.pick s in Insert0.insert (ix_to_abs t (Remove0.remove s a)) (IndexLogic0.index_logic t a)
  )
  axiom ix_to_abs_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 757 0 757 102] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (ix_to_abs t s) a -> (exists ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . a = IndexLogic0.index_logic t ix /\ Contains0.contains s ix)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 756 0 756 79] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s ix -> Contains1.contains (ix_to_abs t s) (IndexLogic0.index_logic t ix))
end
module Cdsat_Theory_Conflict_Type
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_conflict  =
    | C_Conflict (Cdsat_Theory_Trail_Type.t_trail) (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  let function conflict_0 (self : t_conflict) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict a _ -> a
      end
  let function conflict_1 (self : t_conflict) : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Conflict _ a -> a
      end
end
module Cdsat_Theory_Impl7_Sound_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 979 4 979 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl7_Sound_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 979 4 979 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 979 4 979 30] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl7_Sound
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 979 4 979 30] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 980 8 980 91] Sound0.sound (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (Cdsat_Theory_Conflict_Type.conflict_1 self) -> false)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 979 4 979 30] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl7_Invariant_Stub
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 972 4 972 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl7_Invariant_Interface
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 972 4 972 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 972 4 972 34] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl7_Invariant
  use prelude.Int
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 972 4 972 34] (self : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 973 8 973 131] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self) > 0 /\ Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 self) /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a -> Contains1.contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a)
  val invariant' [#"/Users/xavier/Code/cdsat/src/theory.rs" 972 4 972 34] (self : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    ensures { result = invariant' self }
    
end
module Cdsat_Theory_Impl7_Level_Stub
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 985 4 985 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
end
module Cdsat_Theory_Impl7_Level_Interface
  use prelude.Int
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 985 4 985 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 985 4 985 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    ensures { result = level self }
    
end
module Cdsat_Theory_Impl7_Level
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  function level [#"/Users/xavier/Code/cdsat/src/theory.rs" 985 4 985 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 983 4 983 12] SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)
  val level [#"/Users/xavier/Code/cdsat/src/theory.rs" 985 4 985 29] (self : Cdsat_Theory_Conflict_Type.t_conflict) : int
    ensures { result = level self }
    
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub
  type t
  use set.Fset
  use set.Fset
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Fset.fset t
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq_Interface
  type t
  use set.Fset
  use set.Fset
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Fset.fset t
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t)
  val ext_eq (self : Fset.fset t) (other : Fset.fset t) : bool
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 18 105 22] Inv0.inv self}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 24 105 29] Inv0.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] result -> self = other }
    ensures { result = ext_eq self other }
    
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 18 105 22] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 24 105 29] Inv0.inv other) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] ext_eq self other -> self = other)
end
module CreusotContracts_Logic_Fset_Impl0_ExtEq
  type t
  use set.Fset
  use set.Fset
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Fset.fset t
  predicate ext_eq (self : Fset.fset t) (other : Fset.fset t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 109 8 111 9] forall e : t . Inv1.inv e -> Contains0.contains self e = Contains0.contains other e
  val ext_eq (self : Fset.fset t) (other : Fset.fset t) : bool
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 18 105 22] Inv0.inv self}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 24 105 29] Inv0.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] result -> self = other }
    ensures { result = ext_eq self other }
    
  axiom ext_eq_spec : forall self : Fset.fset t, other : Fset.fset t . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 18 105 22] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 105 24 105 29] Inv0.inv other) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/fset.rs" 104 4 104 40] ext_eq self other -> self = other)
end
module Cdsat_Trail_IxToAbsRemove_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 856 0 856 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_IxToAbsRemove_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 856 0 856 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 856 0 856 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 852 11 852 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 853 11 853 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 854 0 854 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 855 10 855 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_remove t x s }
    
  axiom ix_to_abs_remove_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 852 11 852 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 853 11 853 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 854 0 854 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 855 10 855 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_IxToAbsRemove
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use set.Fset
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 856 0 856 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_remove [#"/Users/xavier/Code/cdsat/src/trail.rs" 856 0 856 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 852 11 852 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 853 11 853 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 854 0 854 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 855 10 855 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_remove t x s }
    
  axiom ix_to_abs_remove_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 852 11 852 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 853 11 853 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 854 0 854 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 855 10 855 79] IxToAbs0.ix_to_abs t (Remove0.remove s x) = Remove1.remove (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_SetMax_Stub
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 814 0 814 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_SetMax_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 814 0 814 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 814 0 814 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 810 11 810 24] not Fset.is_empty s}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 812 10 812 28] Contains0.contains s result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 813 0 813 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o result }
    ensures { result = set_max s }
    
  axiom set_max_spec : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 810 11 810 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 813 0 813 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o (set_max s)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 812 10 812 28] Contains0.contains s (set_max s))
end
module Cdsat_Trail_SetMax
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  function set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 814 0 814 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val set_max [#"/Users/xavier/Code/cdsat/src/trail.rs" 814 0 814 56] (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 810 11 810 24] not Fset.is_empty s}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 812 10 812 28] Contains0.contains s result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 813 0 813 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o result }
    ensures { result = set_max s }
    
  axiom def : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . set_max s = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 808 0 808 8] let x = Fset.pick s in let s = Remove0.remove s x in if Fset.is_empty s then
    x
  else
    let rec' = set_max s in if GeLog0.ge_log x rec' then x else rec'
  )
  axiom set_max_spec : forall s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 810 11 810 24] not Fset.is_empty s) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 813 0 813 56] forall o : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s o -> LeLog0.le_log o (set_max s)) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 812 10 812 28] Contains0.contains s (set_max s))
end
module Cdsat_Trail_IxToAbsLevel_Stub
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 837 0 837 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_IxToAbsLevel_Interface
  use set.Fset
  use prelude.Ghost
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 837 0 837 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 837 0 837 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 832 11 832 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 834 0 834 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 835 0 835 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 836 0 836 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0 }
    ensures { result = ix_to_abs_level t s }
    
  axiom ix_to_abs_level_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 832 11 832 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 834 0 834 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 836 0 836 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 835 0 835 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s))
end
module Cdsat_Trail_IxToAbsLevel
  use set.Fset
  use prelude.Ghost
  use prelude.Int
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_SetMax_Stub as SetMax0 with
    predicate Contains0.contains = Contains0.contains,
    function LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 837 0 837 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_level [#"/Users/xavier/Code/cdsat/src/trail.rs" 837 0 837 60] (t : Cdsat_Trail_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 832 11 832 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 834 0 834 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 835 0 835 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 836 0 836 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0 }
    ensures { result = ix_to_abs_level t s }
    
  axiom ix_to_abs_level_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 832 11 832 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 834 0 834 57] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 836 0 836 68] Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = 0) && ([#"/Users/xavier/Code/cdsat/src/trail.rs" 835 0 835 90] not Fset.is_empty s -> SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost t)) (IxToAbs0.ix_to_abs t s) = LevelLog0.level_log (SetMax0.set_max s))
end
module Cdsat_Theory_Impl5_IsInputInv_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 534 4 534 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_IsInputInv_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 534 4 534 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 534 4 534 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 531 15 531 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 532 15 532 31] IsInput0.is_input self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 533 14 533 35] LevelOf0.level_of self d = 0 }
    ensures { result = is_input_inv self d }
    
  axiom is_input_inv_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 531 15 531 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 532 15 532 31] IsInput0.is_input self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 533 14 533 35] LevelOf0.level_of self d = 0)
end
module Cdsat_Theory_Impl5_IsInputInv
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 534 4 534 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 535 8 544 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then () else is_input_inv tl d
      end
  val is_input_inv [#"/Users/xavier/Code/cdsat/src/theory.rs" 534 4 534 47] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 531 15 531 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 532 15 532 31] IsInput0.is_input self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 533 14 533 35] LevelOf0.level_of self d = 0 }
    ensures { result = is_input_inv self d }
    
  axiom is_input_inv_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 531 15 531 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 532 15 532 31] IsInput0.is_input self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 533 14 533 35] LevelOf0.level_of self d = 0)
end
module Cdsat_Theory_Impl5_JustifiedIsBool_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_JustifiedIsBool_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 38] InvariantAssign0.invariant_assign self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 35] IsJustified0.is_justified self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 29] IsBool0.is_bool (let (_, a) = d in a) }
    ensures { result = justified_is_bool self d }
    
  axiom justified_is_bool_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 38] InvariantAssign0.invariant_assign self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 29] IsBool0.is_bool (let (_, a) = d in a))
end
module Cdsat_Theory_Impl5_JustifiedIsBool
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  function justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 809 8 818 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = justified_is_bool tl d in ()
      
      end
  val justified_is_bool [#"/Users/xavier/Code/cdsat/src/theory.rs" 808 4 808 52] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 38] InvariantAssign0.invariant_assign self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 35] IsJustified0.is_justified self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 29] IsBool0.is_bool (let (_, a) = d in a) }
    ensures { result = justified_is_bool self d }
    
  axiom justified_is_bool_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 805 15 805 38] InvariantAssign0.invariant_assign self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 806 15 806 35] IsJustified0.is_justified self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 807 4 807 29] IsBool0.is_bool (let (_, a) = d in a))
end
module Cdsat_Theory_Impl5_JustificationContains_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 4 661 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_JustificationContains_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 4 661 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 4 661 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 657 15 657 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 659 4 659 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 660 14 660 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv }
    ensures { result = justification_contains self kv }
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 657 15 657 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 660 14 660 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 659 4 659 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl5_JustificationContains
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 4 661 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 662 8 671 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = kv then () else justification_contains tl kv
      end
  val justification_contains [#"/Users/xavier/Code/cdsat/src/theory.rs" 661 4 661 58] (self : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 657 15 657 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 659 4 659 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 660 14 660 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv }
    ensures { result = justification_contains self kv }
    
  axiom justification_contains_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 657 15 657 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 658 15 658 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 660 14 660 73] SetLevel0.set_level self (Justification0.justification self kv) = LevelOf0.level_of self kv) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 659 4 659 126] forall e : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification self kv) e -> Contains1.contains self e /\ LevelOf0.level_of self e <= LevelOf0.level_of self kv)
end
module Cdsat_Theory_Impl4_ResolveSound_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 215 4 220 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl4_ResolveSound_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 215 4 220 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 215 4 220 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 212 15 212 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 213 15 213 32] Contains0.contains cflct a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 216 8 216 12] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 14 214 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just) }
    ensures { result = resolve_sound self cflct just a }
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 212 15 212 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 213 15 213 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 216 8 216 12] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 214 14 214 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl4_ResolveSound
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  function resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 215 4 220 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 209 4 209 12] ()
  val resolve_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 215 4 220 5] (self : Cdsat_Theory_Model_Type.t_model) (cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 212 15 212 39] not SatisfySet0.satisfy_set self cflct}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 213 15 213 32] Contains0.contains cflct a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 216 8 216 12] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 214 14 214 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just) }
    ensures { result = resolve_sound self cflct just a }
    
  axiom resolve_sound_spec : forall self : Cdsat_Theory_Model_Type.t_model, cflct : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 211 4 211 61] SatisfySet0.satisfy_set self just -> Satisfies0.satisfies self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 212 15 212 39] not SatisfySet0.satisfy_set self cflct) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 213 15 213 32] Contains0.contains cflct a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 216 8 216 12] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 214 14 214 60] not SatisfySet0.satisfy_set self (Fset.union (Remove0.remove cflct a) just))
end
module Cdsat_Theory_Impl7_Resolvef_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 1012 4 1012 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
end
module Cdsat_Theory_Impl7_Resolvef_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 1012 4 1012 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
  val resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 1012 4 1012 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 15 1004 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 4 1007 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1009 14 1009 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 14 1010 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1011 14 1011 44] Level0.level result = Level0.level self }
    ensures { result = resolvef self a }
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 15 1004 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 4 1007 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1011 14 1011 44] Level0.level (resolvef self a) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 14 1010 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1009 14 1009 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Theory_Impl7_Resolvef
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    predicate Inv0.inv = Inv0.inv,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_JustificationContains_Stub as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 1012 4 1012 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1002 4 1002 12] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolvef [#"/Users/xavier/Code/cdsat/src/theory.rs" 1012 4 1012 51] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Conflict_Type.t_conflict
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 15 1004 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 4 1007 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1009 14 1009 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 14 1010 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1011 14 1011 44] Level0.level result = Level0.level self }
    ensures { result = resolvef self a }
    
  axiom resolvef_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1004 15 1004 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1005 15 1005 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1006 4 1006 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1007 4 1007 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1008 4 1008 161] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a) j -> not IsBool0.is_bool (let (_, a) = j in a) -> IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) j -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) j < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1011 14 1011 44] Level0.level (resolvef self a) = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1010 14 1010 28] Sound0.sound (resolvef self a)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1009 14 1009 32] Invariant0.invariant' (resolvef self a))
end
module Cdsat_Trail_IxToAbsInsert_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 869 0 869 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_IxToAbsInsert_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 869 0 869 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 869 0 869 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 865 11 865 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 866 11 866 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 867 0 867 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 868 10 868 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_insert t x s }
    
  axiom ix_to_abs_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 865 11 865 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 866 11 866 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 867 0 867 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 868 10 868 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Trail_IxToAbsInsert
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use set.Fset
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_ExtEq_Stub as ExtEq0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value),
    predicate Inv0.inv = Inv0.inv,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 869 0 869 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val ix_to_abs_insert [#"/Users/xavier/Code/cdsat/src/trail.rs" 869 0 869 76] (t : Cdsat_Trail_Trail_Type.t_trail) (x : Cdsat_Trail_TrailIndex_Type.t_trailindex) (s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 865 11 865 24] Invariant0.invariant' t}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 866 11 866 24] Contains0.contains t x}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 867 0 867 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 868 10 868 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x) }
    ensures { result = ix_to_abs_insert t x s }
    
  axiom ix_to_abs_insert_spec : forall t : Cdsat_Trail_Trail_Type.t_trail, x : Cdsat_Trail_TrailIndex_Type.t_trailindex, s : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 865 11 865 24] Invariant0.invariant' t) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 866 11 866 24] Contains0.contains t x) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 867 0 867 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains s i -> Contains0.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 868 10 868 79] IxToAbs0.ix_to_abs t (Insert0.insert s x) = Insert1.insert (IxToAbs0.ix_to_abs t s) (IndexLogic0.index_logic t x))
end
module Cdsat_Theory_Normal_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  type t_normal  =
    | C_Normal (Cdsat_Theory_Trail_Type.t_trail)
    
  let function normal_0 (self : t_normal) : Cdsat_Theory_Trail_Type.t_trail = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Normal a -> a
      end
end
module Cdsat_Theory_Impl6_Sound_Stub
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 828 4 828 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_Sound_Interface
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 828 4 828 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 828 4 828 30] (self : Cdsat_Theory_Normal_Type.t_normal) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl6_Sound
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  predicate sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 828 4 828 30] (self : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 825 4 825 16] Sound0.sound (Cdsat_Theory_Normal_Type.normal_0 self)
  val sound [@inline:trivial] [#"/Users/xavier/Code/cdsat/src/theory.rs" 828 4 828 30] (self : Cdsat_Theory_Normal_Type.t_normal) : bool
    ensures { result = sound self }
    
end
module Cdsat_Theory_Impl5_RestrictSound_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 706 4 706 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
end
module Cdsat_Theory_Impl5_RestrictSound_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 706 4 706 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
  val restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 706 4 706 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 704 15 704 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 705 14 705 42] Sound0.sound (Restrict0.restrict self level) }
    ensures { result = restrict_sound self level }
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 704 15 704 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 705 14 705 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl5_RestrictSound
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  function restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 706 4 706 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 707 8 712 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> let _ = restrict_sound tl level in ()
      end
  val restrict_sound [#"/Users/xavier/Code/cdsat/src/theory.rs" 706 4 706 43] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 704 15 704 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 705 14 705 42] Sound0.sound (Restrict0.restrict self level) }
    ensures { result = restrict_sound self level }
    
  axiom restrict_sound_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 704 15 704 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 705 14 705 42] Sound0.sound (Restrict0.restrict self level))
end
module Cdsat_Theory_Impl5_TrailPlausible_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 4 790 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_TrailPlausible_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 4 790 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 4 790 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 786 15 786 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 787 15 787 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 789 14 789 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = trail_plausible self d }
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 786 15 786 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 787 15 787 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 789 14 789 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl5_TrailPlausible
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 4 790 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 791 8 800 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = trail_plausible tl d in ()
      
      end
  val trail_plausible [#"/Users/xavier/Code/cdsat/src/theory.rs" 790 4 790 50] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 786 15 786 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 787 15 787 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 789 14 789 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = trail_plausible self d }
    
  axiom trail_plausible_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 786 15 786 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 787 15 787 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 788 4 788 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 789 14 789 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl5_RestrictIdempotent_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 777 4 777 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
end
module Cdsat_Theory_Impl5_RestrictIdempotent_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 777 4 777 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
  val restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 777 4 777 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 773 15 773 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 774 15 774 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 775 15 775 23] l1 <= l2}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 776 14 776 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1 }
    ensures { result = restrict_idempotent self l1 l2 }
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 773 15 773 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 774 15 774 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 775 15 775 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 776 14 776 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl5_RestrictIdempotent
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 777 4 777 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 778 8 781 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign _ _ tl -> restrict_idempotent tl l1 l2
      end
  val restrict_idempotent [#"/Users/xavier/Code/cdsat/src/theory.rs" 777 4 777 54] (self : Cdsat_Theory_Trail_Type.t_trail) (l1 : int) (l2 : int) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 773 15 773 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 774 15 774 33] l1 >= 0 /\ l2 >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 775 15 775 23] l1 <= l2}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 776 14 776 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1 }
    ensures { result = restrict_idempotent self l1 l2 }
    
  axiom restrict_idempotent_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, l1 : int, l2 : int . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 773 15 773 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 774 15 774 33] l1 >= 0 /\ l2 >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 775 15 775 23] l1 <= l2) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 776 14 776 65] Restrict0.restrict self l1 = Restrict0.restrict (Restrict0.restrict self l2) l1)
end
module Cdsat_Theory_Impl1_NegateInvolutive_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl1_NegateInvolutive_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
  val negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 107 15 107 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 108 14 108 44] Negate0.negate (Negate0.negate self) = self }
    ensures { result = negate_involutive self }
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 107 15 107 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 108 14 108 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl1_NegateInvolutive
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  function negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 105 4 105 12] ()
  val negate_involutive [#"/Users/xavier/Code/cdsat/src/theory.rs" 109 4 109 34] (self : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 107 15 107 29] IsBool0.is_bool self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 108 14 108 44] Negate0.negate (Negate0.negate self) = self }
    ensures { result = negate_involutive self }
    
  axiom negate_involutive_spec : forall self : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 107 15 107 29] IsBool0.is_bool self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 108 14 108 44] Negate0.negate (Negate0.negate self) = self)
end
module Cdsat_Theory_Impl4_Lemma_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
end
module Cdsat_Theory_Impl4_Lemma_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
  val lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 226 15 226 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 227 15 227 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 229 17 229 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 14 228 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v) }
    ensures { result = lemma' self t v }
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 226 15 226 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 227 15 227 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 17 229 21] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 14 228 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl4_Lemma
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Interp_Stub as Interp0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  function lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 230 8 233 9] match (Interp0.interp self t) with
      | Cdsat_Theory_Value_Type.C_Bool _ -> ()
      | _ -> ()
      end
  val lemma' [#"/Users/xavier/Code/cdsat/src/theory.rs" 229 4 229 41] (self : Cdsat_Theory_Model_Type.t_model) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 226 15 226 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 227 15 227 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 229 17 229 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 228 14 228 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v) }
    ensures { result = lemma' self t v }
    
  axiom lemma'_spec : forall self : Cdsat_Theory_Model_Type.t_model, t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 225 15 225 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 226 15 226 40] Sort1.sort t = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 227 15 227 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 229 17 229 21] Inv0.inv self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 228 14 228 71] Satisfies0.satisfies self (t, v) \/ Satisfies0.satisfies self (t, Negate0.negate v))
end
module Cdsat_Theory_Impl7_LearnJustified_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 996 4 996 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl7_LearnJustified_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 996 4 996 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 996 4 996 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 991 15 991 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 992 15 992 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 993 4 993 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 994 4 994 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 995 4 995 108] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)) }
    ensures { result = learn_justified self ass }
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 991 15 991 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 992 15 992 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 993 4 993 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 994 4 994 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 995 4 995 108] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl7_LearnJustified
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant_Stub as Invariant1
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Lemma_Stub as Lemma0 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv0.inv = Inv0.inv,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Negate0.negate = Negate0.negate,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    axiom .
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 996 4 996 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 989 4 989 12] let _ = () in ()
  val learn_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 996 4 996 52] (self : Cdsat_Theory_Conflict_Type.t_conflict) (ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 991 15 991 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 992 15 992 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 993 4 993 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 994 4 994 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 995 4 995 108] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)) }
    ensures { result = learn_justified self ass }
    
  axiom learn_justified_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, ass : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 991 15 991 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 992 15 992 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 993 4 993 37] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 994 4 994 51] IsBool0.is_bool (let (a, _) = ass in a) /\ IsBool1.is_bool (let (_, a) = ass in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 995 4 995 108] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) ass) -> Satisfies0.satisfies m (let (a, _) = ass in a, Negate0.negate (let (_, a) = ass in a)))
end
module Cdsat_Theory_Impl7_Backjump2_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1090 4 1090 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
end
module Cdsat_Theory_Impl7_Backjump2_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1090 4 1090 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
  val backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1090 4 1090 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1081 15 1081 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1082 15 1082 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1083 4 1083 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1084 4 1084 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1085 15 1085 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1086 4 1086 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1087 14 1087 28] Sound1.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1088 4 1088 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { result = backjump2 self l }
    
  axiom backjump2_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1081 15 1081 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1082 15 1082 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1083 4 1083 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1084 4 1084 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1085 15 1085 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1088 4 1088 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1087 14 1087 28] Sound1.sound (backjump2 self l)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1086 4 1086 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l)))
end
module Cdsat_Theory_Impl7_Backjump2
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl7_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Inv0.inv = Inv0.inv,
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1090 4 1090 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1079 4 1079 12] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Cdsat_Theory_Normal_Type.C_Normal (Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted)
  val backjump2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 1090 4 1090 54] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1081 15 1081 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1082 15 1082 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1083 4 1083 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1084 4 1084 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1085 15 1085 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1086 4 1086 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1087 14 1087 28] Sound1.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1088 4 1088 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { result = backjump2 self l }
    
  axiom backjump2_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1081 15 1081 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1082 15 1082 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1083 4 1083 35] Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1084 4 1084 47] IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1085 15 1085 70] LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1088 4 1088 38] Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1087 14 1087 28] Sound1.sound (backjump2 self l)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1086 4 1086 36] Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 (backjump2 self l)))
end
module Cdsat_Trail_SeqToSet_Stub
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains2
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_SeqToSet_Interface
  use seq.Seq
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains2
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 771 0 771 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 772 0 772 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 773 10 773 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t }
    ensures { result = seq_to_set trail s t }
    
  axiom seq_to_set_spec : forall trail : Cdsat_Trail_Trail_Type.t_trail, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 771 0 771 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 772 0 772 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 773 10 773 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t)
end
module Cdsat_Trail_SeqToSet
  use seq.Seq
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains3 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains2
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Contains0.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_IxToAbs_Stub as IxToAbs0 with
    predicate Contains0.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    axiom .
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val seq_to_set [#"/Users/xavier/Code/cdsat/src/trail.rs" 774 0 774 79] (trail : Cdsat_Trail_Trail_Type.t_trail) (s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 771 0 771 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 772 0 772 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 773 10 773 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t }
    ensures { result = seq_to_set trail s t }
    
  axiom def : forall trail : Cdsat_Trail_Trail_Type.t_trail, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . seq_to_set trail s t = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 767 0 767 8] if s = Seq.empty  then
    ()
  else
    let a = Seq.get s 0 in seq_to_set trail (Remove0.remove s a) (Remove1.remove t a)
  )
  axiom seq_to_set_spec : forall trail : Cdsat_Trail_Trail_Type.t_trail, s : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex), t : Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 771 0 771 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains s i -> Contains1.contains t i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 772 0 772 58] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains t i -> Contains0.contains s i) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 773 10 773 64] AbstractJustification0.abstract_justification trail s = IxToAbs0.ix_to_abs trail t)
end
module Core_Fmt_Rt_Argument_Type
  use prelude.Borrow
  use prelude.Opaque
  type t_argument  =
    | C_Argument foreign opaque_ptr
    
end
module Alloc_String_String_Type
  use prelude.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_string  =
    | C_String (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    
end
module Core_Fmt_Rt_Alignment_Type
  type t_alignment  =
    | C_Left
    | C_Right
    | C_Center
    | C_Unknown
    
end
module Core_Fmt_Rt_Count_Type
  use prelude.Int
  use prelude.UIntSize
  type t_count  =
    | C_Is usize
    | C_Param usize
    | C_Implied
    
end
module Core_Fmt_Rt_Placeholder_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.Char
  use prelude.UInt32
  use Core_Fmt_Rt_Count_Type as Core_Fmt_Rt_Count_Type
  use Core_Fmt_Rt_Alignment_Type as Core_Fmt_Rt_Alignment_Type
  type t_placeholder  =
    | C_Placeholder usize char (Core_Fmt_Rt_Alignment_Type.t_alignment) uint32 (Core_Fmt_Rt_Count_Type.t_count) (Core_Fmt_Rt_Count_Type.t_count)
    
end
module Core_Fmt_Arguments_Type
  use prelude.Borrow
  use prelude.Slice
  use Core_Fmt_Rt_Argument_Type as Core_Fmt_Rt_Argument_Type
  use Core_Fmt_Rt_Placeholder_Type as Core_Fmt_Rt_Placeholder_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  type t_arguments  =
    | C_Arguments (slice string) (Core_Option_Option_Type.t_option (slice (Core_Fmt_Rt_Placeholder_Type.t_placeholder))) (slice (Core_Fmt_Rt_Argument_Type.t_argument))
    
end
module Core_Fmt_Error_Type
  type t_error  =
    | C_Error
    
end
module Alloc_String_Impl54_From_Interface
  use prelude.Borrow
  use Alloc_String_String_Type as Alloc_String_String_Type
  val from (s : string) : Alloc_String_String_Type.t_string
end
module Cdsat_Concrete_Impl2_New_Interface
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel0
  val new [#"/Users/xavier/Code/cdsat/src/concrete.rs" 397 4 397 20] (_1 : ()) : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 396 14 396 36] ShallowModel0.shallow_model result = Fset.empty  }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 168 20 168 24] true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Vec_Impl4_IntoIterPost
  type t
  type a
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 174 20 174 33] ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl15_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl4_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2721 17 2721 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2721 4 2721 40] Inv1.inv result }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl8_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl8_Completed
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 230 20 230 57] Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl8_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
  val next (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/into_iter.rs" 188 17 188 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 95 26 98 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/into_iter.rs" 188 4 188 35] Inv1.inv result }
    
end
module Cdsat_Concrete_Impl2_Insert_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel0
  val insert [#"/Users/xavier/Code/cdsat/src/concrete.rs" 403 4 403 47] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) (e : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 402 14 402 43] ShallowModel0.shallow_model ( ^ self) = Insert0.insert (ShallowModel1.shallow_model self) e }
    
end
module Cdsat_Concrete_Impl2_Last_Interface
  use prelude.Borrow
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  use Core_Option_Option_Type as Core_Option_Option_Type
  val last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 413 4 413 41] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 408 4 411 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) other -> LeLog0.le_log other a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 412 14 412 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] self <> Core_Option_Option_Type.C_None}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs" 932 24 932 28] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/option.rs" 17 0 114 1] Core_Option_Option_Type.C_Some result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs" 932 4 932 34] Inv1.inv result }
    
end
module Cdsat_Trail_Impl8_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 174 4 174 32] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 173 14 173 30] result = Cdsat_Trail_TrailIndex_Type.trailindex_0 self }
    
end
module Cdsat_Concrete_Impl2_PopLast_Interface
  use set.Fset
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use set.Fset
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel1
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Concrete_ConflictHeap_Type.t_conflictheap,
    type ShallowModelTy0.shallowModelTy = Fset.fset (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  val pop_last [#"/Users/xavier/Code/cdsat/src/concrete.rs" 423 4 423 48] (self : borrowed (Cdsat_Concrete_ConflictHeap_Type.t_conflictheap)) : Core_Option_Option_Type.t_option (Cdsat_Trail_TrailIndex_Type.t_trailindex)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 418 14 418 58] (ShallowModel0.shallow_model self = Fset.empty ) = (result = Core_Option_Option_Type.C_None) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 419 4 422 6] forall a : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = Core_Option_Option_Type.C_Some a -> ShallowModel1.shallow_model ( ^ self) = Remove0.remove (ShallowModel0.shallow_model self) a /\ Contains0.contains (ShallowModel0.shallow_model self) a /\ (forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel1.shallow_model ( ^ self)) other -> LeLog0.le_log other a) }
    
end
module Alloc_Vec_Impl10_Clone_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  val clone' (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_Vec_Type.t_vec t a
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2625 14 2625 18] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/clone.rs" 7 0 20 1] result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2625 4 2625 27] Inv1.inv result }
    
end
module Cdsat_Trail_Impl18_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 9 48 14] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_Reason_Type.t_reason
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 9 48 14] result = self }
    
end
module Cdsat_Trail_Impl13_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 9 16 14] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_Assignment_Type.t_assignment
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 9 16 14] result = self }
    
end
module Cdsat_Term_Impl8_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  val is_bool [#"/Users/xavier/Code/cdsat/src/term.rs" 287 4 287 33] (self : Cdsat_Term_Value_Type.t_value) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 286 14 286 41] result = IsBool0.is_bool (ShallowModel0.shallow_model self) }
    
end
module Cdsat_Trail_Impl12_IsBool_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_bool [#"/Users/xavier/Code/cdsat/src/trail.rs" 711 4 711 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 710 14 710 45] result = IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_Impl12_IsFirstOrder_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_first_order [#"/Users/xavier/Code/cdsat/src/trail.rs" 722 4 722 47] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 721 14 721 45] result <> IsBool0.is_bool (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val self)) }
    
end
module Cdsat_Trail_ReasonDeepModel_Type
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  type t_reasondeepmodel  =
    | C_Justified (Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex))
    | C_Decision
    | C_Input
    
end
module Alloc_Vec_PartialEq_Impl0_Eq_Interface
  type t
  type u
  type a1
  type a2
  use prelude.Borrow
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = Alloc_Vec_Vec_Type.t_vec t a1
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec u a2,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a1,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec u a2
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a1
  val eq (self : Alloc_Vec_Vec_Type.t_vec t a1) (other : Alloc_Vec_Vec_Type.t_vec u a2) : bool
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/partial_eq.rs" 16 19 16 23] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/partial_eq.rs" 16 25 16 30] Inv1.inv other}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 11 26 11 75] result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 4 33 44] Inv1.inv result }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 4 33 44] Inv1.inv (deep_model self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length result }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get result i = DeepModel0.deep_model (IndexLogic0.index_logic self i) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 4 33 44] Inv1.inv result }
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 18 33 22] Inv0.inv self) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 33 4 33 44] Inv1.inv (deep_model self)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 31 4 32 53] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (IndexLogic0.index_logic self i)) && ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 30 14 30 56] Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self))
end
module Cdsat_Trail_Impl7_DeepModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 167 4 167 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl7_DeepModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 167 4 167 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 167 4 167 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl7_DeepModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 167 4 167 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 168 8 168 12] self
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 167 4 167 44] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl22_DeepModel_Stub
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 31 48 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl22_DeepModel_Interface
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 31 48 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 31 48 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl22_DeepModel
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Cdsat_Trail_Impl7_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate Inv1.inv = Inv1.inv,
    predicate Inv2.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 31 48 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 31 48 40] match (self) with
      | Cdsat_Trail_Reason_Type.C_Justified v0_1 -> Cdsat_Trail_ReasonDeepModel_Type.C_Justified (DeepModel0.deep_model v0_1)
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Trail_ReasonDeepModel_Type.C_Decision
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Trail_ReasonDeepModel_Type.C_Input
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 31 48 40] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl19_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 16 48 25] (self : Cdsat_Trail_Reason_Type.t_reason) (rhs : Cdsat_Trail_Reason_Type.t_reason) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 16 48 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl12_IsDecision_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_decision [#"/Users/xavier/Code/cdsat/src/trail.rs" 732 4 732 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 731 14 731 57] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Decision) }
    
end
module Cdsat_Trail_Impl9_Justification_Interface
  use prelude.Ghost
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv2.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val justification [#"/Users/xavier/Code/cdsat/src/trail.rs" 443 4 443 72] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 437 15 437 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 438 15 438 31] Contains0.contains self a}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 439 4 439 61] IsJustified0.is_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 440 4 440 91] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> Contains0.contains self (Seq.get (ShallowModel0.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 441 14 441 99] AbstractJustification0.abstract_justification self (ShallowModel0.shallow_model result) = Justification0.justification (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (IndexLogic0.index_logic self a) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 442 4 442 105] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model result) -> LevelLog0.level_log (Seq.get (ShallowModel0.shallow_model result) i) <= LevelLog0.level_log a }
    
end
module Core_Slice_Impl0_Iter_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use Core_Slice_Iter_Iter_Type as Core_Slice_Iter_Iter_Type
  clone CreusotContracts_Std1_Slice_Impl13_ShallowModel_Stub as ShallowModel0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = slice t
  val iter (self : slice t) : Core_Slice_Iter_Iter_Type.t_iter t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/mod.rs" 999 17 999 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 231 0 327 1] ShallowModel0.shallow_model result = self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 63 20 63 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPre0.into_iter_pre self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 17 281 21] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 89 0 166 1] IntoIterPost0.into_iter_post self result }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 281 4 281 27] Inv0.inv result }
    
end
module Cdsat_Theory_Impl5_RestrictFind_Stub
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_RestrictFind_Interface
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 577 15 577 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 578 15 578 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 580 14 580 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d }
    ensures { result = restrict_find self level d }
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 577 15 577 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 578 15 578 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 580 14 580 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl5_RestrictFind
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 582 8 591 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then () else restrict_find tl level d
      end
  val restrict_find [#"/Users/xavier/Code/cdsat/src/theory.rs" 581 4 581 60] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 577 15 577 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 578 15 578 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 580 14 580 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d }
    ensures { result = restrict_find self level d }
    
  axiom restrict_find_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 577 15 577 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 578 15 578 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 579 15 579 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 580 14 580 58] Find0.find (Restrict0.restrict self level) d = Find0.find self d)
end
module Cdsat_Theory_Impl5_RestrictKindUnchanged_Stub
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_RestrictKindUnchanged_Interface
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 717 15 717 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 718 15 718 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 719 15 719 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 720 14 720 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 721 14 721 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 722 14 722 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 723 14 723 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d }
    ensures { result = restrict_kind_unchanged self level d }
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 717 15 717 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 718 15 718 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 719 15 719 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 723 14 723 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 722 14 722 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 721 14 721 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 720 14 720 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl5_RestrictKindUnchanged
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictFind_Stub as RestrictFind0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains0.contains,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  function restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 725 8 725 36] let _ = RestrictFind0.restrict_find self level d in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a _ tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_kind_unchanged tl level d in ()
      
      end
  val restrict_kind_unchanged [#"/Users/xavier/Code/cdsat/src/theory.rs" 724 4 724 70] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 717 15 717 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 718 15 718 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 719 15 719 47] Contains0.contains (Restrict0.restrict self level) d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 720 14 720 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 721 14 721 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 722 14 722 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 723 14 723 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d }
    ensures { result = restrict_kind_unchanged self level d }
    
  axiom restrict_kind_unchanged_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 717 15 717 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 718 15 718 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 719 15 719 47] Contains0.contains (Restrict0.restrict self level) d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 723 14 723 66] IsInput0.is_input self d = IsInput0.is_input (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 722 14 722 72] IsDecision0.is_decision self d = IsDecision0.is_decision (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 721 14 721 76] Justification0.justification self d = Justification0.justification (Restrict0.restrict self level) d) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 720 14 720 74] IsJustified0.is_justified self d = IsJustified0.is_justified (Restrict0.restrict self level) d)
end
module Cdsat_Trail_Impl9_ReasonsDontChange_Stub
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_JustifiedIsJustified_Stub as JustifiedIsJustified0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_Reason_Stub as Reason0
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl9_AbstractRelation_Stub as AbstractRelation0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function reasons_dont_change [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 45] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) : ()
    
end
module Cdsat_Trail_Impl9_ReasonsDontChange_Interface
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_JustifiedIsJustified_Stub as JustifiedIsJustified0
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl9_Reason_Stub as Reason0
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl9_AbstractRelation_Stub as AbstractRelation0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function reasons_dont_change [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 45] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) : ()
    
  val reasons_dont_change [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 45] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 534 15 534 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 535 4 535 69] AbstractRelation0.abstract_relation other /\ Invariant1.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other))}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 536 15 536 64] Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)) = Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 537 15 537 50] Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 538 4 538 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Contains0.contains self ix}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 539 4 539 99] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic other ix}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 90] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Reason0.reason self ix = Reason0.reason other ix}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 44] JustifiedIsJustified0.justified_is_justified other }
    ensures { result = reasons_dont_change self other }
    
  axiom reasons_dont_change_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, other : Cdsat_Trail_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 534 15 534 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 535 4 535 69] AbstractRelation0.abstract_relation other /\ Invariant1.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other))) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 536 15 536 64] Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)) = Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 537 15 537 50] Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 538 4 538 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Contains0.contains self ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 539 4 539 99] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic other ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 90] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Reason0.reason self ix = Reason0.reason other ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 44] JustifiedIsJustified0.justified_is_justified other)
end
module Cdsat_Trail_Impl9_ReasonsDontChange
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictKindUnchanged_Stub as RestrictKindUnchanged0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Sound0.sound = Sound0.sound,
    predicate Entails0.entails = Entails0.entails,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_JustifiedIsJustified_Stub as JustifiedIsJustified0
  clone Cdsat_Trail_Impl9_Reason_Stub as Reason0
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractRelation_Stub as AbstractRelation0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  function reasons_dont_change [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 45] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) : ()
    
  val reasons_dont_change [#"/Users/xavier/Code/cdsat/src/trail.rs" 542 4 542 45] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 534 15 534 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 535 4 535 69] AbstractRelation0.abstract_relation other /\ Invariant1.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other))}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 536 15 536 64] Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)) = Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 537 15 537 50] Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 538 4 538 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Contains0.contains self ix}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 539 4 539 99] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic other ix}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 90] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Reason0.reason self ix = Reason0.reason other ix}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 44] JustifiedIsJustified0.justified_is_justified other }
    ensures { result = reasons_dont_change self other }
    
  axiom reasons_dont_change_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, other : Cdsat_Trail_Trail_Type.t_trail . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 534 15 534 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 535 4 535 69] AbstractRelation0.abstract_relation other /\ Invariant1.invariant' (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other))) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 536 15 536 64] Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) (UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)) = Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 537 15 537 50] Level0.level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost other)) = UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level other)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 538 4 538 72] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Contains0.contains self ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 539 4 539 99] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic other ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 540 4 540 90] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains other ix -> Reason0.reason self ix = Reason0.reason other ix) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 541 14 541 44] JustifiedIsJustified0.justified_is_justified other)
end
module Alloc_Vec_Impl1_Pop_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use seq_ext.SeqExt
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  val pop (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : Core_Option_Option_Type.t_option t
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1899 20 1899 24] Inv0.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 81 26 86 17] match (result) with
      | Core_Option_Option_Type.C_Some t -> ShallowModel0.shallow_model ( ^ self) = SeqExt.subsequence (ShallowModel1.shallow_model self) 0 (Seq.length (ShallowModel1.shallow_model self) - 1) /\ ShallowModel1.shallow_model self = Seq.snoc (ShallowModel0.shallow_model ( ^ self)) t
      | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (ShallowModel1.shallow_model self) = 0
      end }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 1899 4 1899 38] Inv1.inv result }
    
end
module Cdsat_Trail_Impl9_Restrict_Interface
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl8_LevelLog_Stub as LevelLog0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val restrict [#"/Users/xavier/Code/cdsat/src/trail.rs" 566 4 566 51] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (level : usize) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 560 4 560 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 561 15 561 36] UIntSize.to_int level <= UIntSize.to_int (Cdsat_Trail_Trail_Type.trail_level ( * self))}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 560 4 560 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 562 14 562 59] Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self)) = Restrict0.restrict (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (UIntSize.to_int level) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 564 4 564 111] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . LevelLog0.level_log ix <= UIntSize.to_int level -> Contains0.contains ( * self) ix -> Contains0.contains ( ^ self) ix }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 565 4 565 112] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( ^ self) ix -> IndexLogic0.index_logic ( * self) ix = IndexLogic0.index_logic ( ^ self) ix }
    
end
module Cdsat_Trail_SeqUnique_Stub
  type t
  use seq.Seq
  predicate seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 804 0 804 46] (s : Seq.seq t)
end
module Cdsat_Trail_SeqUnique_Interface
  type t
  use seq.Seq
  predicate seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 804 0 804 46] (s : Seq.seq t)
  val seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 804 0 804 46] (s : Seq.seq t) : bool
    ensures { result = seq_unique s }
    
end
module Cdsat_Trail_SeqUnique
  type t
  use seq.Seq
  use prelude.Int
  predicate seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 804 0 804 46] (s : Seq.seq t) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 805 4 805 98] forall j : int . forall i : int . 0 <= i /\ i <= j /\ j < Seq.length s -> i <> j -> Seq.get s i <> Seq.get s j
  val seq_unique [#"/Users/xavier/Code/cdsat/src/trail.rs" 804 0 804 46] (s : Seq.seq t) : bool
    ensures { result = seq_unique s }
    
end
module Cdsat_Concrete_Impl2_IntoVec_Interface
  use prelude.Int
  use seq.Seq
  use set.Fset
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Concrete_ConflictHeap_Type as Cdsat_Concrete_ConflictHeap_Type
  clone Cdsat_Trail_SeqUnique_Stub as SeqUnique0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Concrete_Impl1_ShallowModel_Stub as ShallowModel0
  val into_vec [#"/Users/xavier/Code/cdsat/src/concrete.rs" 432 4 432 40] (self : Cdsat_Concrete_ConflictHeap_Type.t_conflictheap) : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 428 4 428 75] forall e : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel0.shallow_model self) e -> Contains1.contains (ShallowModel1.shallow_model result) e }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 429 4 429 94] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result) -> Contains0.contains (ShallowModel0.shallow_model self) (Seq.get (ShallowModel1.shallow_model result) i) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 430 14 430 42] Seq.length (ShallowModel1.shallow_model result) = Fset.cardinal (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 431 14 431 33] SeqUnique0.seq_unique (ShallowModel1.shallow_model result) }
    
end
module Cdsat_Theory_Impl6_Deducef_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function deducef [#"/Users/xavier/Code/cdsat/src/theory.rs" 880 4 880 78] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Normal_Type.t_normal
    
end
module Cdsat_Theory_Impl6_Deducef_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  function deducef [#"/Users/xavier/Code/cdsat/src/theory.rs" 880 4 880 78] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Normal_Type.t_normal
    
  val deducef [#"/Users/xavier/Code/cdsat/src/theory.rs" 880 4 880 78] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 26] IsBool0.is_bool v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 40] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 71] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 58] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m just (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 36] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 878 14 878 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 879 4 879 38] Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { result = deducef self just t v }
    
  axiom deducef_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 26] IsBool0.is_bool v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 40] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 71] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 58] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m just (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 879 4 879 38] Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 (deducef self just t v))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 878 14 878 28] Sound0.sound (deducef self just t v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 36] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 (deducef self just t v)))
end
module Cdsat_Theory_Impl6_Deducef
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  function deducef [#"/Users/xavier/Code/cdsat/src/theory.rs" 880 4 880 78] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Normal_Type.t_normal
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 869 4 869 12] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in Cdsat_Theory_Normal_Type.C_Normal (Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified just t v) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just) (Cdsat_Theory_Normal_Type.normal_0 self))
  val deducef [#"/Users/xavier/Code/cdsat/src/theory.rs" 880 4 880 78] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Normal_Type.t_normal
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 26] IsBool0.is_bool v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 40] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 71] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 58] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m just (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 36] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 878 14 878 28] Sound0.sound result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 879 4 879 38] Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 result) }
    ensures { result = deducef self just t v }
    
  axiom deducef_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 871 15 871 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 872 15 872 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 873 15 873 26] IsBool0.is_bool v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 874 4 874 40] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 875 4 875 71] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 876 4 876 58] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m just (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 879 4 879 38] Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 (deducef self just t v))) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 878 14 878 28] Sound0.sound (deducef self just t v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 877 4 877 36] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 (deducef self just t v)))
end
module Cdsat_Theory_Impl5_AddJustified_Stub
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 458 4 458 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    
end
module Cdsat_Theory_Impl5_AddJustified_Interface
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 458 4 458 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    
  val add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 458 4 458 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 446 15 446 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 447 4 447 68] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a -> Contains1.contains self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 36] Acceptable0.acceptable self t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 450 4 450 78] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains self a -> Find0.find self a = Find0.find result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 452 14 452 36] Contains1.contains result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 14 453 49] Justification0.justification result (t, v) = just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 454 14 454 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 455 14 455 40] IsJustified0.is_justified result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 456 14 456 63] LevelOf0.level_of result (t, v) = SetLevel0.set_level result just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 457 4 457 84] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> Contains1.contains self a \/ a = (t, v) }
    ensures { result = add_justified self just t v }
    
  axiom add_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 446 15 446 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 447 4 447 68] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a -> Contains1.contains self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 36] Acceptable0.acceptable self t v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 450 4 450 78] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 457 4 457 84] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (add_justified self just t v) a -> Contains1.contains self a \/ a = (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 456 14 456 63] LevelOf0.level_of (add_justified self just t v) (t, v) = SetLevel0.set_level (add_justified self just t v) just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 455 14 455 40] IsJustified0.is_justified (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 454 14 454 32] Invariant0.invariant' (add_justified self just t v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 453 14 453 49] Justification0.justification (add_justified self just t v) (t, v) = just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 452 14 452 36] Contains1.contains (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains self a -> Find0.find self a = Find0.find (add_justified self just t v) a)
end
module Cdsat_Theory_Impl5_AddJustified
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 458 4 458 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 459 8 459 90] Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified just t v) (SetLevel0.set_level self just) self
  val add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 458 4 458 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 446 15 446 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 447 4 447 68] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a -> Contains1.contains self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 36] Acceptable0.acceptable self t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 450 4 450 78] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains self a -> Find0.find self a = Find0.find result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 452 14 452 36] Contains1.contains result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 14 453 49] Justification0.justification result (t, v) = just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 454 14 454 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 455 14 455 40] IsJustified0.is_justified result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 456 14 456 63] LevelOf0.level_of result (t, v) = SetLevel0.set_level result just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 457 4 457 84] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> Contains1.contains self a \/ a = (t, v) }
    ensures { result = add_justified self just t v }
    
  axiom add_justified_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), t : Cdsat_Theory_Term_Type.t_term, v : Cdsat_Theory_Value_Type.t_value . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 446 15 446 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 447 4 447 68] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a -> Contains1.contains self a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 36] Acceptable0.acceptable self t v) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 450 4 450 78] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 457 4 457 84] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (add_justified self just t v) a -> Contains1.contains self a \/ a = (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 456 14 456 63] LevelOf0.level_of (add_justified self just t v) (t, v) = SetLevel0.set_level (add_justified self just t v) just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 455 14 455 40] IsJustified0.is_justified (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 454 14 454 32] Invariant0.invariant' (add_justified self just t v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 453 14 453 49] Justification0.justification (add_justified self just t v) (t, v) = just) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 452 14 452 36] Contains1.contains (add_justified self just t v) (t, v)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains self a -> Find0.find self a = Find0.find (add_justified self just t v) a)
end
module Cdsat_Theory_Impl5_AddJustified_Impl
  use set.Fset
  clone CreusotContracts_NumRational_Impl1_FromInt_Interface as FromInt0
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort0
  clone Cdsat_Theory_Impl0_Sort as Sort1 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Remove as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant1 with
    function Sort0.sort = Sort0.sort
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Interp as Interp0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function FromInt0.from_int = FromInt0.from_int,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl5_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Sound as Sound0 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl5_FindJustified as FindJustified0 with
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains1.contains,
    function Find0.find = Find0.find,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl5_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl4_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Model_Type_Inv as Cdsat_Theory_Model_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort0.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl5_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone Cdsat_Theory_Impl5_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len0.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Remove0.remove = Remove0.remove,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len0.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone Cdsat_Theory_Impl5_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function Len0.len = Len0.len
  clone Cdsat_Theory_Impl5_Invariant as Invariant0 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl5_Justification as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    function FindJustified0.find_justified = FindJustified0.find_justified,
    function Find0.find = Find0.find,
    predicate Contains0.contains = Contains1.contains,
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains1.contains,
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  let rec ghost function add_justified [#"/Users/xavier/Code/cdsat/src/theory.rs" 458 4 458 84] (self : Cdsat_Theory_Trail_Type.t_trail) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (t : Cdsat_Theory_Term_Type.t_term) (v : Cdsat_Theory_Value_Type.t_value) : Cdsat_Theory_Trail_Type.t_trail
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 446 15 446 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 447 4 447 68] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a -> Contains1.contains self a}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 448 15 448 36] Acceptable0.acceptable self t v}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 449 15 449 40] Sort0.sort v = Cdsat_Theory_Sort_Type.C_Boolean}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 450 4 450 78] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> Satisfies0.satisfies m (t, v)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 451 4 451 81] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains self a -> Find0.find self a = Find0.find result a }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 452 14 452 36] Contains1.contains result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 453 14 453 49] Justification0.justification result (t, v) = just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 454 14 454 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 455 14 455 40] IsJustified0.is_justified result (t, v) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 456 14 456 63] LevelOf0.level_of result (t, v) = SetLevel0.set_level result just }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 457 4 457 84] forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains result a -> Contains1.contains self a \/ a = (t, v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 459 8 459 90] Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified just t v) (SetLevel0.set_level self just) self
end
module Cdsat_Trail_Impl9_AbsJustEquiv_Stub
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function abs_just_equiv [#"/Users/xavier/Code/cdsat/src/trail.rs" 523 4 523 63] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_Impl9_AbsJustEquiv_Interface
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function abs_just_equiv [#"/Users/xavier/Code/cdsat/src/trail.rs" 523 4 523 63] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val abs_just_equiv [#"/Users/xavier/Code/cdsat/src/trail.rs" 523 4 523 63] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 521 4 521 136] forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains just j -> Contains1.contains self j /\ Contains1.contains other j /\ IndexLogic0.index_logic self j = IndexLogic0.index_logic other j}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 522 14 522 85] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification other just }
    ensures { result = abs_just_equiv self other just }
    
  axiom abs_just_equiv_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, other : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 521 4 521 136] forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains just j -> Contains1.contains self j /\ Contains1.contains other j /\ IndexLogic0.index_logic self j = IndexLogic0.index_logic other j) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 522 14 522 85] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification other just)
end
module Cdsat_Trail_Impl9_AbsJustEquiv
  use seq.Seq
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  function abs_just_equiv [#"/Users/xavier/Code/cdsat/src/trail.rs" 523 4 523 63] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 524 8 524 10] ()
  val abs_just_equiv [#"/Users/xavier/Code/cdsat/src/trail.rs" 523 4 523 63] (self : Cdsat_Trail_Trail_Type.t_trail) (other : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 521 4 521 136] forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains just j -> Contains1.contains self j /\ Contains1.contains other j /\ IndexLogic0.index_logic self j = IndexLogic0.index_logic other j}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 522 14 522 85] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification other just }
    ensures { result = abs_just_equiv self other just }
    
  axiom abs_just_equiv_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, other : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 521 4 521 136] forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains just j -> Contains1.contains self j /\ Contains1.contains other j /\ IndexLogic0.index_logic self j = IndexLogic0.index_logic other j) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 522 14 522 85] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification other just)
end
module Cdsat_Theory_Impl5_Ext_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail)
    
end
module Cdsat_Theory_Impl5_Ext_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail)
    
  val ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = ext self o }
    
end
module Cdsat_Theory_Impl5_Ext
  use prelude.Int
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  predicate ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 637 8 643 9] if Level0.level self <= Level0.level o then
      forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains self kv -> Find0.find self kv = Find0.find o kv
    else
      forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains o kv -> Find0.find o kv = Find0.find self kv
    
  val ext [#"/Users/xavier/Code/cdsat/src/theory.rs" 636 4 636 37] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = ext self o }
    
end
module Cdsat_Trail_Impl9_LogJustified_Interface
  use prelude.Borrow
  use prelude.Slice
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val log_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 455 4 455 74] (self : Cdsat_Trail_Trail_Type.t_trail) (just : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl13_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = borrowed Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl7_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 132 27 132 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2685 22 2685 26] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2685 28 2685 33] Inv1.inv index}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 133 26 133 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 134 26 134 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 135 26 135 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 136 26 136 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2685 4 2685 58] Inv2.inv result }
    
end
module Cdsat_Theory_Impl5_JustStable_Stub
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Ext_Stub as Ext0
  function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_JustStable_Interface
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Ext_Stub as Ext0
  function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 648 15 648 26] Ext0.ext self o}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 649 15 649 32] Contains0.contains self kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 29] Contains0.contains o kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 652 14 652 59] Justification0.justification self kv = Justification0.justification o kv }
    ensures { result = just_stable self o kv }
    
  axiom just_stable_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, o : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 648 15 648 26] Ext0.ext self o) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 649 15 649 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 29] Contains0.contains o kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 652 14 652 59] Justification0.justification self kv = Justification0.justification o kv)
end
module Cdsat_Theory_Impl5_JustStable
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound0.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Ext_Stub as Ext0
  function just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 646 4 646 12] ()
  val just_stable [#"/Users/xavier/Code/cdsat/src/theory.rs" 653 4 653 56] (self : Cdsat_Theory_Trail_Type.t_trail) (o : Cdsat_Theory_Trail_Type.t_trail) (kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 648 15 648 26] Ext0.ext self o}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 649 15 649 32] Contains0.contains self kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 29] Contains0.contains o kv}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 36] IsJustified0.is_justified self kv}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 652 14 652 59] Justification0.justification self kv = Justification0.justification o kv }
    ensures { result = just_stable self o kv }
    
  axiom just_stable_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, o : Cdsat_Theory_Trail_Type.t_trail, kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 648 15 648 26] Ext0.ext self o) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 649 15 649 32] Contains0.contains self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 650 15 650 29] Contains0.contains o kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 651 15 651 36] IsJustified0.is_justified self kv) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 652 14 652 59] Justification0.justification self kv = Justification0.justification o kv)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/slice.rs" 122 8 122 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Cdsat_Trail_Impl9_AddJustified_Interface
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains1
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains0.contains,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Theory_Impl0_WellSorted_Stub as WellSorted0
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 473 4 473 93] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 467 4 467 36] WellSorted0.well_sorted (ShallowModel0.shallow_model term)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 468 15 468 31] IsBool0.is_bool (ShallowModel1.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 469 4 469 73] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains (ShallowModel2.shallow_model into_vec) i -> Contains1.contains ( * self) i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 470 4 470 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 471 4 471 128] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel2.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel0.shallow_model term, ShallowModel1.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 472 4 472 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
end
module Cdsat_Trail_Impl9_AddJustified
  use prelude.Borrow
  use prelude.Ghost
  use prelude.UIntSize
  use prelude.Int
  use prelude.Slice
  use set.Fset
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv16 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial15 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv16.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl9_EqCmp_Interface as EqCmp2
  clone CreusotContracts_Logic_Ord_Impl9_Antisym2_Interface as Antisym22
  clone CreusotContracts_Logic_Ord_Impl9_Antisym1_Interface as Antisym12
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_Trans_Interface as Trans2
  clone CreusotContracts_Logic_Ord_Impl9_Refl_Interface as Refl2
  clone CreusotContracts_Logic_Ord_Impl9_CmpGtLog_Interface as CmpGtLog2
  clone CreusotContracts_Logic_Ord_Impl9_CmpGeLog_Interface as CmpGeLog2
  clone CreusotContracts_Logic_Ord_Impl9_CmpLtLog_Interface as CmpLtLog2
  clone CreusotContracts_Logic_Ord_Impl9_CmpLeLog_Interface as CmpLeLog2
  clone CreusotContracts_NumRational_Impl1_FromInt_Interface as FromInt0
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial14 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv15.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial13 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial12 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone Cdsat_Trail_Impl5_EqCmp as EqCmp1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym2 as Antisym21 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Antisym1 as Antisym11 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Trans as Trans1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone Cdsat_Trail_Impl5_Refl as Refl1 with
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGtLog as CmpGtLog1 with
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpGeLog as CmpGeLog1 with
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLtLog as CmpLtLog1 with
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone Cdsat_Trail_Impl5_CmpLeLog as CmpLeLog1 with
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial11 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial10 with
    type t = usize,
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv10.inv,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort as Sort1
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Theory_Impl0_Sort as Sort0 with
    function Sort0.sort = Sort1.sort
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl3_Invariant as Invariant2 with
    function Sort0.sort = Sort1.sort
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl4_Interp as Interp0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort,
    function FromInt0.from_int = FromInt0.from_int,
    axiom .
  clone Cdsat_Theory_Impl4_Satisfies as Satisfies0 with
    function Interp0.interp = Interp0.interp,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    function Sort0.sort = Sort1.sort,
    function Sort1.sort = Sort0.sort
  clone CreusotContracts_Logic_Fset_Impl0_Contains as Contains2 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl4_SatisfySet as SatisfySet0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_JustifiedSound as JustifiedSound0 with
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl2_Invariant as Invariant3 with
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign as InvariantAssign0 with
    predicate Invariant0.invariant' = Invariant3.invariant'
  clone Cdsat_Theory_Impl1_IsBool as IsBool0 with
    function Sort0.sort = Sort1.sort
  clone Cdsat_Theory_Impl1_Negate as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Len_Interface as Len1 with
    axiom .
  clone Cdsat_Theory_Impl5_Level as Level0 with
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg as InvariantNonneg0 with
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl2_ToPair as ToPair0
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Theory_Impl5_Find_Interface as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains as Contains3 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl5_TrailUnique as TrailUnique0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate Contains0.contains = Contains3.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl5_InvariantContains as InvariantContains0 with
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl5_LevelOf as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Find0.find = Find0.find,
    function Len0.len = Len1.len,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Interface as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantLevel as InvariantLevel0 with
    function Level0.level = Level0.level,
    function SetLevel0.set_level = SetLevel0.set_level,
    function Len0.len = Len1.len,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains2.contains,
    function LevelOf0.level_of = LevelOf0.level_of
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial8 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial7 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    axiom .
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Interface as DeepModel4
  clone Cdsat_Term_Impl16_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment)
  clone TyInv_Trivial as TyInv_Trivial5 with
    type t = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    predicate Inv0.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial4 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone TyInv_Trivial as TyInv_Trivial3 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel12 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv16.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Cdsat_Theory_Impl5_SatisfiedBy as SatisfiedBy0 with
    predicate Contains0.contains = Contains3.contains,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort
  clone Cdsat_Theory_Impl5_Invariant as Invariant1 with
    predicate InvariantLevel0.invariant_level = InvariantLevel0.invariant_level,
    predicate InvariantContains0.invariant_contains = InvariantContains0.invariant_contains,
    predicate TrailUnique0.trail_unique = TrailUnique0.trail_unique,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl5_Restrict_Interface as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Model_Type_Inv as Cdsat_Theory_Model_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone Cdsat_Trail_Impl8_LevelLog as LevelLog0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel7 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl1_IndexLogic as IndexLogic2 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv
  clone CreusotContracts_Logic_Ops_Impl1_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel11 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl7_ShallowModel as ShallowModel10 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    function GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    function GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    function LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv9.inv,
    function LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel9 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_Assignment_Type.t_assignment),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone Cdsat_Theory_Impl5_IsDecision as IsDecision0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl5_IsInput as IsInput0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl5_Sound as Sound1 with
    predicate JustifiedSound0.justified_sound = JustifiedSound0.justified_sound
  clone Cdsat_Theory_Impl5_IsJustified as IsJustified0 with
    function Find0.find = Find0.find,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len1.len
  clone Cdsat_Theory_Impl4_Entails as Entails0 with
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies
  clone Cdsat_Theory_Impl5_Justification_Interface as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_Unsat as Unsat0 with
    predicate Inv0.inv = Inv0.inv,
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl5_CountBounds_Interface as CountBounds0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len1.len,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound as Sound0 with
    predicate Sound0.sound = Sound1.sound
  clone CreusotContracts_Logic_Fset_Impl0_Insert as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone Cdsat_Trail_Remove as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv9.inv,
    predicate Contains0.contains = Contains1.contains,
    axiom .
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel4.deep_model
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel0 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel1.deep_model,
    function DeepModel3.deep_model = DeepModel4.deep_model
  clone Cdsat_Term_Impl7_ShallowModel as ShallowModel1 with
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone Cdsat_Term_Impl4_ShallowModel as ShallowModel0 with
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone Cdsat_Trail_Impl12_TermValue as TermValue0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl5_ShallowModel as ShallowModel4 with
    type t = slice (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel12.shallow_model
  clone Cdsat_Theory_Impl5_Impls as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    predicate Inv0.inv = Inv0.inv,
    function Restrict0.restrict = Restrict0.restrict,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Acceptable as Acceptable0 with
    predicate Contains0.contains = Contains3.contains,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign
  clone Cdsat_Theory_Impl0_WellSorted as WellSorted0 with
    function Sort0.sort = Sort0.sort
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic as IndexLogic0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    function TermValue0.term_value = TermValue0.term_value,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv6.inv
  clone Cdsat_Trail_Impl9_Contains as Contains0 with
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv6.inv
  clone Cdsat_Trail_Impl9_AbstractJustification as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    function Remove0.remove = Remove0.remove,
    function Insert0.insert = Insert0.insert,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv9.inv,
    axiom .
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl9_Reason as Reason0 with
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic
  clone Cdsat_Trail_Impl9_JustifiedIsJustified as JustifiedIsJustified0 with
    predicate Contains0.contains = Contains0.contains,
    function Reason0.reason = Reason0.reason,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate IsInput0.is_input = IsInput0.is_input,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Contains1.contains = Contains1.contains,
    function LtLog0.lt_log = LtLog0.lt_log,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound1.sound,
    predicate Inv2.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate Contains2.contains = Contains2.contains
  clone Cdsat_Trail_Impl9_AbstractRelation as AbstractRelation0 with
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains1.contains = Contains3.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function LevelLog0.level_log = LevelLog0.level_log,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Trail_Impl9_Invariant as Invariant0 with
    predicate AbstractRelation0.abstract_relation = AbstractRelation0.abstract_relation,
    predicate Sound0.sound = Sound1.sound,
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Level0.level = Level0.level,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    function IndexLogic0.index_logic = IndexLogic3.index_logic,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function IndexLogic1.index_logic = IndexLogic0.index_logic,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate JustifiedIsJustified0.justified_is_justified = JustifiedIsJustified0.justified_is_justified,
    function WellSorted0.well_sorted = WellSorted0.well_sorted,
    function Len0.len = Len1.len,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv6.inv
  clone Cdsat_Theory_Impl5_Ext as Ext0 with
    function Level0.level = Level0.level,
    predicate Contains0.contains = Contains3.contains,
    function Find0.find = Find0.find,
    function Len0.len = Len1.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg
  clone Cdsat_Theory_Impl5_JustStable_Interface as JustStable0 with
    predicate Ext0.ext = Ext0.ext,
    predicate Contains0.contains = Contains3.contains,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Trail_Impl9_AbsJustEquiv as AbsJustEquiv0 with
    predicate Contains0.contains = Contains1.contains,
    predicate Contains1.contains = Contains0.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Cdsat_Trail_Trail_Type.t_trail
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv14.inv,
    predicate Inv1.inv = Inv15.inv,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel11.shallow_model,
    predicate Inv2.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv3.inv = Inv6.inv
  clone Alloc_Vec_Impl13_IndexMut_Interface as IndexMut0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel10.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv13.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    predicate Inv2.inv = Inv14.inv,
    predicate Inv3.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv4.inv = Inv4.inv
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv12.inv,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone Alloc_Vec_Impl12_Index_Interface as Index0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv10.inv,
    predicate Inv1.inv = Inv11.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv12.inv
  clone Cdsat_Theory_Impl5_AddJustified as AddJustified0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    function Sort0.sort = Sort1.sort,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    function Find0.find = Find0.find,
    function Justification0.justification = Justification0.justification,
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort1.sort = Sort0.sort,
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len,
    predicate Sound0.sound = Sound1.sound,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl6_Deducef as Deducef0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    predicate Acceptable0.acceptable = Acceptable0.acceptable,
    predicate Contains0.contains = Contains2.contains,
    predicate Contains1.contains = Contains3.contains,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate Impls0.impls = Impls0.impls,
    function CountBounds0.count_bounds = CountBounds0.count_bounds,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate Unsat0.unsat = Unsat0.unsat,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len1.len,
    axiom .
  clone Cdsat_Trail_Impl9_MaxLevel_Interface as MaxLevel0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate Contains0.contains = Contains0.contains,
    function AbstractJustification0.abstract_justification = AbstractJustification0.abstract_justification,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Contains1.contains = Contains2.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains1.contains,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len1.len
  clone Cdsat_Trail_Impl9_LogJustified_Interface as LogJustified0
  clone Alloc_Vec_Impl8_Deref_Interface as Deref0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    predicate Inv1.inv = Inv2.inv
  let rec cfg add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 473 4 473 93] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Term_Term_Type.t_term) (val' : Cdsat_Term_Value_Type.t_value) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 40] Invariant0.invariant' ( * self)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 467 4 467 36] WellSorted0.well_sorted (ShallowModel0.shallow_model term)}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 468 15 468 31] IsBool0.is_bool (ShallowModel1.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 469 4 469 73] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel2.shallow_model into_vec) i -> Contains0.contains ( * self) i}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 470 4 470 51] Acceptable0.acceptable (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 471 4 471 128] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (AbstractJustification0.abstract_justification ( * self) (ShallowModel2.shallow_model into_vec)) -> Satisfies0.satisfies m (ShallowModel0.shallow_model term, ShallowModel1.shallow_model val')}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 466 4 466 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 472 4 472 48] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Cdsat_Trail_Trail_Type.t_trail) = self;
  var into_vec : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) = into_vec;
  var term : Cdsat_Term_Term_Type.t_term = term;
  var val' : Cdsat_Term_Value_Type.t_value = val';
  var _13 : ();
  var _16 : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _18 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var _20 : Cdsat_Term_Term_Type.t_term;
  var _22 : Cdsat_Term_Value_Type.t_value;
  var level : usize;
  var _28 : slice (Cdsat_Trail_TrailIndex_Type.t_trailindex);
  var _30 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
  var g_vec : Ghost.ghost_ty (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global));
  var just : Ghost.ghost_ty (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value));
  var _37 : Ghost.ghost_ty (Cdsat_Theory_Normal_Type.t_normal);
  var old' : Ghost.ghost_ty (borrowed (Cdsat_Trail_Trail_Type.t_trail));
  var _41 : Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
  var v : Ghost.ghost_ty (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value);
  var a : Cdsat_Trail_Assignment_Type.t_assignment;
  var x : usize;
  var _55 : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global);
  var new_ix : Cdsat_Trail_TrailIndex_Type.t_trailindex;
  var _67 : ();
  var _68 : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _69 : borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
  var _70 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _73 : Ghost.ghost_ty ();
  var _75 : Ghost.ghost_ty ();
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    _18 <- into_vec;
    _16 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 474 27 474 36] Deref0.deref _18);
    goto BB6
  }
  BB6 {
    _20 <- term;
    _22 <- val';
    _13 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 474 8 474 50] LogJustified0.log_justified ( * self) _16 _20 _22);
    goto BB7
  }
  BB7 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 475 8 475 97] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self) ix -> IndexLogic0.index_logic ( * self) ix <> (ShallowModel0.shallow_model term, ShallowModel1.shallow_model val') };
    goto BB8
  }
  BB8 {
    _30 <- into_vec;
    _28 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 477 35 477 44] Deref0.deref _30);
    goto BB9
  }
  BB9 {
    level <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 477 20 477 45] MaxLevel0.max_level ( * self) _28);
    goto BB10
  }
  BB10 {
    g_vec <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 480 31 480 47] Ghost.new into_vec);
    goto BB11
  }
  BB11 {
    just <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 482 12 482 73] Ghost.new (AbstractJustification0.abstract_justification ( * self) (ShallowModel2.shallow_model into_vec)));
    goto BB12
  }
  BB12 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 484 22 484 59] UIntSize.to_int level = SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner just) };
    _37 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 486 27 486 120] Ghost.new (Deducef0.deducef (Cdsat_Theory_Normal_Type.C_Normal (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self)))) (Ghost.inner just) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')));
    goto BB13
  }
  BB13 {
    old' <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 488 29 488 41] Ghost.new self);
    goto BB14
  }
  BB14 {
    _41 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 491 12 491 93] Ghost.new (AddJustified0.add_justified (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner just) (ShallowModel0.shallow_model term) (ShallowModel1.shallow_model val')));
    goto BB15
  }
  BB15 {
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c d =  * self in Cdsat_Trail_Trail_Type.C_Trail a b _41 d) };
    _41 <- any Ghost.ghost_ty (Cdsat_Theory_Trail_Type.t_trail);
    v <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 494 27 494 77] Ghost.new (ShallowModel0.shallow_model term, ShallowModel1.shallow_model val'));
    goto BB16
  }
  BB16 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 496 22 496 55] LevelOf0.level_of (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) (Ghost.inner v) = UIntSize.to_int level };
    goto BB17
  }
  BB17 {
    a <- Cdsat_Trail_Assignment_Type.C_Assignment term val' (Cdsat_Trail_Reason_Type.C_Justified into_vec) level;
    term <- any Cdsat_Term_Term_Type.t_term;
    val' <- any Cdsat_Term_Value_Type.t_value;
    into_vec <- any Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global);
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    _55 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 498 16 498 39] Index0.index (Cdsat_Trail_Trail_Type.trail_assignments ( * self)) level);
    goto BB21
  }
  BB21 {
    x <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 498 16 498 45] Len0.len _55);
    goto BB22
  }
  BB22 {
    new_ix <- Cdsat_Trail_TrailIndex_Type.C_TrailIndex level x;
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 501 8 501 75] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel3.shallow_model g_vec) i -> Cdsat_Trail_TrailIndex_Type.trailindex_0 i <= Cdsat_Trail_TrailIndex_Type.trailindex_0 new_ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 502 8 502 70] forall i : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains1.contains (ShallowModel3.shallow_model g_vec) i -> LtLog0.lt_log i new_ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 504 22 504 28] UIntSize.to_int x > 0 };
    _70 <- Borrow.borrow_mut (Cdsat_Trail_Trail_Type.trail_assignments ( * self));
    self <- { self with current = (let Cdsat_Trail_Trail_Type.C_Trail a b c d =  * self in Cdsat_Trail_Trail_Type.C_Trail ( ^ _70) b c d) };
    _69 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 506 8 506 31] IndexMut0.index_mut _70 level);
    _70 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
    goto BB23
  }
  BB23 {
    _68 <- Borrow.borrow_mut ( * _69);
    _69 <- { _69 with current = ( ^ _68) };
    _67 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 506 8 506 39] Push0.push _68 a);
    _68 <- any borrowed (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global));
    a <- any Cdsat_Trail_Assignment_Type.t_assignment;
    goto BB24
  }
  BB24 {
    assume { Resolve0.resolve _69 };
    assume { Resolve1.resolve self };
    _73 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 509 28 509 69] Ghost.new (AbsJustEquiv0.abs_just_equiv ( * self) ( * Ghost.inner old') (ShallowModel3.shallow_model g_vec)));
    goto BB25
  }
  BB25 {
    _75 <- ([#"/Users/xavier/Code/cdsat/src/trail.rs" 510 27 510 61] Ghost.new ());
    goto BB26
  }
  BB26 {
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 511 8 511 92] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * Ghost.inner old') ix -> Reason0.reason ( * self) ix = Reason0.reason ( * Ghost.inner old') ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 512 8 512 102] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * Ghost.inner old') ix -> IndexLogic0.index_logic ( * Ghost.inner old') ix = IndexLogic0.index_logic ( * self) ix };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 514 8 514 88] forall j : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * self) j -> j = new_ix \/ Contains0.contains ( * Ghost.inner old') j };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 515 8 515 49] Ext0.ext (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * Ghost.inner old'))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * self))) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 516 22 516 51] JustifiedIsJustified0.justified_is_justified ( * self) };
    assert { [@expl:assertion] [#"/Users/xavier/Code/cdsat/src/trail.rs" 517 22 517 46] AbstractRelation0.abstract_relation ( * self) };
    _0 <- ();
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module Core_Fmt_Rt_Impl1_NewDisplay_Interface
  type t
  use prelude.Borrow
  use Core_Fmt_Rt_Argument_Type as Core_Fmt_Rt_Argument_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val new_display (x : t) : Core_Fmt_Rt_Argument_Type.t_argument
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/fmt/rt.rs" 96 39 96 40] Inv0.inv x}
    
end
module Core_Fmt_Impl2_NewV1_Interface
  use prelude.Borrow
  use prelude.Slice
  use Core_Fmt_Arguments_Type as Core_Fmt_Arguments_Type
  use Core_Fmt_Rt_Argument_Type as Core_Fmt_Rt_Argument_Type
  val new_v1 (pieces : slice string) (args : slice (Core_Fmt_Rt_Argument_Type.t_argument)) : Core_Fmt_Arguments_Type.t_arguments
    
end
module Core_Fmt_Write_WriteFmt_Interface
  type self
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Arguments_Type as Core_Fmt_Arguments_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val write_fmt (self : borrowed self) (args : Core_Fmt_Arguments_Type.t_arguments) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/fmt/mod.rs" 191 21 191 25] Inv0.inv self}
    
end
module Core_Result_Impl0_Unwrap_Interface
  type t
  type e
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Result_Result_Type.t_result t e
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val unwrap (self : Core_Result_Result_Type.t_result t e) : t
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/result.rs" 46 16 46 55] exists t : t . Inv0.inv t /\ self = Core_Result_Result_Type.C_Ok t}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs" 1070 18 1070 22] Inv1.inv self}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/result.rs" 18 0 119 1] Core_Result_Result_Type.C_Ok result = self }
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs" 1070 4 1072 22] Inv0.inv result }
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 241 4 241 10] ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 244 21 244 22] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 243 14 243 39] Produces0.produces a (Seq.empty ) a)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Vec_Impl8_ProducesTrans
  type t
  type a
  use seq.Seq
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl8_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 246 4 246 10] ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc}
    requires {[#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c}
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 248 15 248 32] Produces0.produces a ab b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 249 15 249 32] Produces0.produces b bc c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 22 251 23] Inv0.inv a) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 31 251 33] Inv1.inv ab) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 43 251 44] Inv0.inv b) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 52 251 54] Inv1.inv bc) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 251 64 251 65] Inv0.inv c) -> ([#"/Users/xavier/Code/creusot/creusot-contracts/src/std/vec.rs" 250 14 250 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  predicate into_iter_pre (self : i) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 74 20 74 24] true
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/iter.rs" 80 8 80 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module Cdsat_Concrete_Impl0_ResolveConflict_Interface
  use prelude.Borrow
  use seq.Seq
  use prelude.Int
  use prelude.Ghost
  use prelude.UIntSize
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val resolve_conflict [#"/Users/xavier/Code/cdsat/src/concrete.rs" 169 4 169 80] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) (conflict : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 158 4 158 41] Invariant0.invariant' ( * trail)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 159 15 159 36] Seq.length (ShallowModel0.shallow_model conflict) > 0}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 160 4 160 99] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model conflict) -> Contains0.contains ( * trail) (Seq.get (ShallowModel0.shallow_model conflict) i)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 161 4 165 7] let conflict = AbstractJustification0.abstract_justification ( * trail) (ShallowModel0.shallow_model conflict) in SetLevel0.set_level (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) conflict > 0 /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m conflict -> false)}
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 166 4 166 126] forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains ( * trail) ix -> (UIntSize.to_int (Cdsat_Trail_TrailIndex_Type.trailindex_1 ix) = 0) = IsDecision0.is_decision (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (IndexLogic0.index_logic ( * trail) ix)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 158 4 158 41] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 167 14 167 34] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 168 4 168 53] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    
end
module Cdsat_Concrete_Impl0_Solver_Interface
  use prelude.Borrow
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  use Cdsat_Concrete_Solver_Type as Cdsat_Concrete_Solver_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val solver [#"/Users/xavier/Code/cdsat/src/concrete.rs" 115 4 115 57] (self : borrowed (Cdsat_Concrete_Solver_Type.t_solver)) (trail : borrowed (Cdsat_Trail_Trail_Type.t_trail)) : Cdsat_Concrete_Answer_Type.t_answer
    requires {[#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 4 113 41] Invariant0.invariant' ( * trail)}
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 113 4 113 41] Invariant0.invariant' ( ^ trail) }
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 114 4 114 50] Impls0.impls (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( * trail))) (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost ( ^ trail))) }
    
end
module Core_Fmt_Formatter_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Char
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Opaque
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Fmt_Rt_Alignment_Type as Core_Fmt_Rt_Alignment_Type
  type t_formatter  =
    | C_Formatter uint32 char (Core_Fmt_Rt_Alignment_Type.t_alignment) (Core_Option_Option_Type.t_option usize) (Core_Option_Option_Type.t_option usize) (borrowed dyn)
    
end
module Core_Fmt_Impl7_WriteStr_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  val write_str (self : borrowed (Core_Fmt_Formatter_Type.t_formatter)) (data : string) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_Impl7_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 9 345 14] (self : Cdsat_Concrete_Answer_Type.t_answer) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_AnswerDeepModel_Type
  type t_answerdeepmodel  =
    | C_Sat
    | C_Unsat
    
end
module Cdsat_Concrete_Impl11_DeepModel_Stub
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 31 345 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    
end
module Cdsat_Concrete_Impl11_DeepModel_Interface
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 31 345 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 31 345 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl11_DeepModel
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 31 345 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 31 345 40] match (self) with
      | Cdsat_Concrete_Answer_Type.C_Sat -> Cdsat_Concrete_AnswerDeepModel_Type.C_Sat
      | Cdsat_Concrete_Answer_Type.C_Unsat -> Cdsat_Concrete_AnswerDeepModel_Type.C_Unsat
      end
  val deep_model [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 31 345 40] (self : Cdsat_Concrete_Answer_Type.t_answer) : Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Concrete_Impl8_Eq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 16 345 25] (self : Cdsat_Concrete_Answer_Type.t_answer) (rhs : Cdsat_Concrete_Answer_Type.t_answer) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 16 345 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Concrete_Impl10_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 27 345 29] (self : Cdsat_Concrete_Answer_Type.t_answer) : ()
    
end
module Core_Fmt_Impl7_DebugTupleField1Finish_Interface
  use prelude.Borrow
  use prelude.Opaque
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  val debug_tuple_field1_finish (self : borrowed (Core_Fmt_Formatter_Type.t_formatter)) (name : string) (value1 : dyn) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Core_Fmt_Impl7_DebugTupleField2Finish_Interface
  use prelude.Borrow
  use prelude.Opaque
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  val debug_tuple_field2_finish (self : borrowed (Core_Fmt_Formatter_Type.t_formatter)) (name : string) (value1 : dyn) (value2 : dyn) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Concrete_Impl12_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Concrete_ExtendResult_Type as Cdsat_Concrete_ExtendResult_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/concrete.rs" 351 9 351 14] (self : Cdsat_Concrete_ExtendResult_Type.t_extendresult) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Trail_AssignmentDeepModel_Type
  use prelude.Int
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  type t_assignmentdeepmodel  =
    | C_AssignmentDeepModel (Cdsat_Theory_Term_Type.t_term) (Cdsat_Theory_Value_Type.t_value) (Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel) int
    
end
module Cdsat_Trail_Impl17_DeepModel_Stub
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 31 16 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl17_DeepModel_Interface
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 31 16 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 31 16 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl17_DeepModel
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel3
  clone Cdsat_Trail_Impl22_DeepModel_Stub as DeepModel2
  clone Cdsat_Term_Impl6_DeepModel_Stub as DeepModel1
  clone Cdsat_Term_Impl5_DeepModel_Stub as DeepModel0
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 31 16 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 31 729 44] Cdsat_Trail_AssignmentDeepModel_Type.C_AssignmentDeepModel (DeepModel0.deep_model (Cdsat_Trail_Assignment_Type.assignment_term self)) (DeepModel1.deep_model (Cdsat_Trail_Assignment_Type.assignment_val self)) (DeepModel2.deep_model (Cdsat_Trail_Assignment_Type.assignment_reason self)) (DeepModel3.deep_model (Cdsat_Trail_Assignment_Type.assignment_level self))
  val deep_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 31 16 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = deep_model self }
    
end
module Cdsat_Trail_Impl14_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 16 16 25] (self : Cdsat_Trail_Assignment_Type.t_assignment) (rhs : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 16 16 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl16_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 27 16 29] (self : Cdsat_Trail_Assignment_Type.t_assignment) : ()
    
end
module Cdsat_Trail_Impl0_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 4 30 74] (self : Cdsat_Trail_Assignment_Type.t_assignment) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Trail_Impl1_ShallowModel_Stub
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 41 4 41 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
end
module Cdsat_Trail_Impl1_ShallowModel_Interface
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 41 4 41 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 41 4 41 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl1_ShallowModel
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl17_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 41 4 41 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 42 8 42 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 41 4 41 50] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl21_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 27 48 29] (self : Cdsat_Trail_Reason_Type.t_reason) : ()
    
end
module Cdsat_Trail_Impl2_ShallowModel_Stub
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 61 4 61 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
end
module Cdsat_Trail_Impl2_ShallowModel_Interface
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 61 4 61 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 61 4 61 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl2_ShallowModel
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel_Stub as DeepModel0
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 61 4 61 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 62 8 62 25] DeepModel0.deep_model self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 61 4 61 50] (self : Cdsat_Trail_Reason_Type.t_reason) : Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl23_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 9 66 14] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Trail_Impl24_Eq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex
  val eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 16 66 25] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (rhs : Cdsat_Trail_TrailIndex_Type.t_trailindex) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 16 66 25] result = (DeepModel0.deep_model self = DeepModel0.deep_model rhs) }
    
end
module Cdsat_Trail_Impl26_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 27 66 29] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : ()
    
end
module Cdsat_Trail_Impl27_Clone_Interface
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  val clone' [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 31 66 36] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 31 66 36] result = self }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLog_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_Impl3_CmpLog_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLog
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 137 12 146 17] if self < o then
      Core_Cmp_Ordering_Type.C_Less
    else
      if self = o then Core_Cmp_Ordering_Type.C_Equal else Core_Cmp_Ordering_Type.C_Greater
    
  val cmp_log (self : int) (o : int) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self o }
    
end
module Core_Cmp_Impls_Impl55_Cmp_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl3_CmpLog_Stub as CmpLog0
  clone CreusotContracts_Std1_Num_Impl16_DeepModel_Stub as DeepModel0
  val cmp (self : usize) (other : usize) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/creusot/creusot-contracts/src/std/cmp.rs" 50 26 50 85] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Stub
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog_Interface
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : ()
  val cmp_le_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLeLog
  use prelude.Int
  function cmp_le_log (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 79 12 79 14] ()
  val cmp_le_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_le_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Stub
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog_Interface
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : ()
  val cmp_lt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpLtLog
  use prelude.Int
  function cmp_lt_log (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 85 12 85 14] ()
  val cmp_lt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_lt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Stub
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog_Interface
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : ()
  val cmp_ge_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGeLog
  use prelude.Int
  function cmp_ge_log (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 91 12 91 14] ()
  val cmp_ge_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_ge_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Stub
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog_Interface
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : ()
  val cmp_gt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_CmpGtLog
  use prelude.Int
  function cmp_gt_log (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 97 12 97 14] ()
  val cmp_gt_log (_1 : int) (_2 : int) : ()
    ensures { result = cmp_gt_log _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Refl_Stub
  use prelude.Int
  function refl (_1 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Refl_Interface
  use prelude.Int
  function refl (_1 : int) : ()
  val refl (_1 : int) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Refl
  use prelude.Int
  function refl (_1 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 103 12 103 14] ()
  val refl (_1 : int) : ()
    ensures { result = refl _1 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Trans_Stub
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Trans_Interface
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Trans
  use prelude.Int
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 109 12 109 14] ()
  val trans (_1 : int) (_2 : int) (_3 : int) (_4 : Core_Cmp_Ordering_Type.t_ordering) : ()
    ensures { result = trans _1 _2 _3 _4 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1_Stub
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1_Interface
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : ()
  val antisym1 (_1 : int) (_2 : int) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym1
  use prelude.Int
  function antisym1 (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 115 12 115 14] ()
  val antisym1 (_1 : int) (_2 : int) : ()
    ensures { result = antisym1 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2_Stub
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2_Interface
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : ()
  val antisym2 (_1 : int) (_2 : int) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_Antisym2
  use prelude.Int
  function antisym2 (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 121 12 121 14] ()
  val antisym2 (_1 : int) (_2 : int) : ()
    ensures { result = antisym2 _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp_Stub
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : ()
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp_Interface
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : ()
  val eq_cmp (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module CreusotContracts_Logic_Ord_Impl3_EqCmp
  use prelude.Int
  function eq_cmp (_1 : int) (_2 : int) : () =
    [#"/Users/xavier/Code/creusot/creusot-contracts/src/logic/ord.rs" 127 12 127 14] ()
  val eq_cmp (_1 : int) (_2 : int) : ()
    ensures { result = eq_cmp _1 _2 }
    
end
module Cdsat_Trail_Impl4_Cmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  val cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 78 4 78 43] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 77 14 77 44] result = CmpLog0.cmp_log self other }
    
end
module Cdsat_Trail_Impl3_PartialCmp_Interface
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Cdsat_Trail_Impl5_CmpLog_Stub as CmpLog0
  val partial_cmp [#"/Users/xavier/Code/cdsat/src/trail.rs" 71 4 71 59] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) (other : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering)
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 70 14 70 50] result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log self other) }
    
end
module Cdsat_Trail_Impl6_ShallowModel_Stub
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 156 4 156 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
end
module Cdsat_Trail_Impl6_ShallowModel_Interface
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 156 4 156 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 156 4 156 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl6_ShallowModel
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  function shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 156 4 156 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 157 8 157 12] self
  val shallow_model [#"/Users/xavier/Code/cdsat/src/trail.rs" 156 4 156 50] (self : Cdsat_Trail_TrailIndex_Type.t_trailindex) : Cdsat_Trail_TrailIndex_Type.t_trailindex
    ensures { result = shallow_model self }
    
end
module Cdsat_Trail_Impl9_New_Interface
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_Invariant_Stub as Invariant0
  val new [#"/Users/xavier/Code/cdsat/src/trail.rs" 206 4 206 50] (inputs : Alloc_Vec_Vec_Type.t_vec (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value) (Alloc_Alloc_Global_Type.t_global)) : Cdsat_Trail_Trail_Type.t_trail
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 204 14 204 32] Invariant0.invariant' result }
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 205 4 205 36] Sound0.sound (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost result)) }
    
end
module Cdsat_Trail_Impl9_Len_Interface
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global))
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_Assignment_Type.t_assignment) (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val len [#"/Users/xavier/Code/cdsat/src/trail.rs" 219 4 219 30] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 218 14 218 50] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model (Cdsat_Trail_Trail_Type.trail_assignments self)) }
    
end
module Cdsat_Trail_Impl9_Unsat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 30] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl9_Unsat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 30] (self : Cdsat_Trail_Trail_Type.t_trail)
  val unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 30] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Trail_Impl9_Unsat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 30] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 224 4 224 16] Unsat0.unsat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val unsat [#"/Users/xavier/Code/cdsat/src/trail.rs" 225 4 225 30] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = unsat self }
    
end
module Cdsat_Theory_Impl5_Sat_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 28] (self : Cdsat_Theory_Trail_Type.t_trail)
end
module Cdsat_Theory_Impl5_Sat_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 28] (self : Cdsat_Theory_Trail_Type.t_trail)
  val sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 28] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Theory_Impl5_Sat
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  predicate sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 28] (self : Cdsat_Theory_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 690 8 690 56] exists m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m /\ SatisfiedBy0.satisfied_by self m
  val sat [#"/Users/xavier/Code/cdsat/src/theory.rs" 689 4 689 28] (self : Cdsat_Theory_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl9_Sat_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 28] (self : Cdsat_Trail_Trail_Type.t_trail)
end
module Cdsat_Trail_Impl9_Sat_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 28] (self : Cdsat_Trail_Trail_Type.t_trail)
  val sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 28] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl9_Sat
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Sat_Stub as Sat0
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 28] (self : Cdsat_Trail_Trail_Type.t_trail) =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 230 4 230 16] Sat0.sat (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self))
  val sat [#"/Users/xavier/Code/cdsat/src/trail.rs" 231 4 231 28] (self : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = sat self }
    
end
module Cdsat_Trail_Impl9_AbstractAssign_Stub
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 290 4 290 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
end
module Cdsat_Trail_Impl9_AbstractAssign_Interface
  use prelude.Borrow
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 290 4 290 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
  val abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 290 4 290 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    ensures { result = abstract_assign self a }
    
end
module Cdsat_Trail_Impl9_AbstractAssign
  use prelude.Borrow
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Cdsat_Term_Impl7_ShallowModel_Stub as ShallowModel1
  clone Cdsat_Term_Impl4_ShallowModel_Stub as ShallowModel0
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  function abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 290 4 290 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 291 8 301 9] match (Cdsat_Trail_Assignment_Type.assignment_reason a) with
      | Cdsat_Trail_Reason_Type.C_Input -> Cdsat_Theory_Assign_Type.C_Input (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Decision -> Cdsat_Theory_Assign_Type.C_Decision (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      | Cdsat_Trail_Reason_Type.C_Justified just -> Cdsat_Theory_Assign_Type.C_Justified (AbstractJustification0.abstract_justification self (ShallowModel2.shallow_model just)) (ShallowModel0.shallow_model (Cdsat_Trail_Assignment_Type.assignment_term a)) (ShallowModel1.shallow_model (Cdsat_Trail_Assignment_Type.assignment_val a))
      end
  val abstract_assign [#"/Users/xavier/Code/cdsat/src/trail.rs" 290 4 290 62] (self : Cdsat_Trail_Trail_Type.t_trail) (a : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Theory_Assign_Type.t_assign
    ensures { result = abstract_assign self a }
    
end
module Cdsat_Trail_Impl9_TrailExtension_Stub
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 326 4 326 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail)
    
end
module Cdsat_Trail_Impl9_TrailExtension_Interface
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  predicate trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 326 4 326 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail)
    
  val trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 326 4 326 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = trail_extension self o }
    
end
module Cdsat_Trail_Impl9_TrailExtension
  use prelude.Int
  use prelude.Ghost
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use prelude.Int
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Find_Stub as Find0 with
    function ToPair0.to_pair = ToPair0.to_pair,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  predicate trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 326 4 326 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail)
    
   =
    [#"/Users/xavier/Code/cdsat/src/trail.rs" 325 4 325 16] if Cdsat_Trail_Trail_Type.trail_level self <= Cdsat_Trail_Trail_Type.trail_level o then
      (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains self ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic o ix) /\ (forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) kv -> Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) kv = Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost o)) kv)
    else
      (forall ix : Cdsat_Trail_TrailIndex_Type.t_trailindex . Contains0.contains o ix -> IndexLogic0.index_logic self ix = IndexLogic0.index_logic o ix) /\ (forall kv : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost o)) kv -> Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost o)) kv = Find0.find (Ghost.inner (Cdsat_Trail_Trail_Type.trail_ghost self)) kv)
    
  val trail_extension [#"/Users/xavier/Code/cdsat/src/trail.rs" 326 4 326 45] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) : bool
    ensures { result = trail_extension self o }
    
end
module Cdsat_Trail_Impl9_LemmaAbsJust_Stub
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension_Stub as TrailExtension0
  function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
end
module Cdsat_Trail_Impl9_LemmaAbsJust_Interface
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension_Stub as TrailExtension0
  function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 343 15 343 38] TrailExtension0.trail_extension self o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 344 4 344 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 345 14 345 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just }
    ensures { result = lemma_abs_just self o just }
    
  axiom lemma_abs_just_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, o : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 343 15 343 38] TrailExtension0.trail_extension self o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 344 4 344 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 345 14 345 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just)
end
module Cdsat_Trail_Impl9_LemmaAbsJust
  use prelude.Int
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone CreusotContracts_Logic_Seq_Impl0_Contains_Stub as Contains2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  clone Cdsat_Trail_Impl9_IndexLogic_Stub as IndexLogic0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Trail_Remove_Stub as Remove0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    predicate Contains0.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_Contains_Stub as Contains0
  clone Cdsat_Trail_Impl9_AbstractJustification_Stub as AbstractJustification0 with
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Contains2.contains = Contains2.contains,
    axiom .
  clone Cdsat_Trail_Impl9_TrailExtension_Stub as TrailExtension0
  function lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    
  val lemma_abs_just [#"/Users/xavier/Code/cdsat/src/trail.rs" 346 4 346 59] (self : Cdsat_Trail_Trail_Type.t_trail) (o : Cdsat_Trail_Trail_Type.t_trail) (just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 343 15 343 38] TrailExtension0.trail_extension self o}
    requires {[#"/Users/xavier/Code/cdsat/src/trail.rs" 344 4 344 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)}
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 345 14 345 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just }
    ensures { result = lemma_abs_just self o just }
    
  axiom def : forall self : Cdsat_Trail_Trail_Type.t_trail, o : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . lemma_abs_just self o just = ([#"/Users/xavier/Code/cdsat/src/trail.rs" 341 4 341 12] if Seq.length just = 0 then
    ()
  else
    lemma_abs_just self o (Remove0.remove just (Seq.get just 0))
  )
  axiom lemma_abs_just_spec : forall self : Cdsat_Trail_Trail_Type.t_trail, o : Cdsat_Trail_Trail_Type.t_trail, just : Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex) . ([#"/Users/xavier/Code/cdsat/src/trail.rs" 343 15 343 38] TrailExtension0.trail_extension self o) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 344 4 344 105] forall i : int . 0 <= i /\ i < Seq.length just -> Contains0.contains self (Seq.get just i) /\ Contains0.contains o (Seq.get just i)) -> ([#"/Users/xavier/Code/cdsat/src/trail.rs" 345 14 345 81] AbstractJustification0.abstract_justification self just = AbstractJustification0.abstract_justification o just)
end
module Cdsat_Trail_Impl9_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Trail_Type as Cdsat_Trail_Trail_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 389 4 389 39] (self : Cdsat_Trail_Trail_Type.t_trail) : usize
end
module Cdsat_Trail_Impl10_AddJustified_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Cdsat_Trail_IndexIterator_Type as Cdsat_Trail_IndexIterator_Type
  val add_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 651 4 651 82] (self : borrowed (Cdsat_Trail_IndexIterator_Type.t_indexiterator)) (just : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)) (term : Cdsat_Term_Term_Type.t_term) (value : Cdsat_Term_Value_Type.t_value) : ()
    
end
module Cdsat_Trail_Impl12_Level_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val level [#"/Users/xavier/Code/cdsat/src/trail.rs" 706 4 706 39] (self : Cdsat_Trail_Assignment_Type.t_assignment) : usize
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 705 14 705 34] result = Cdsat_Trail_Assignment_Type.assignment_level self }
    
end
module Cdsat_Trail_Impl12_IsRational_Interface
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_rational [#"/Users/xavier/Code/cdsat/src/trail.rs" 716 4 716 44] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    
end
module Cdsat_Trail_Impl12_IsJustified_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  val is_justified [#"/Users/xavier/Code/cdsat/src/trail.rs" 727 4 727 45] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 726 14 726 75] result = (exists j : Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global) . Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Justified j) }
    
end
module Cdsat_Trail_Impl12_IsInput_Interface
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val is_input [#"/Users/xavier/Code/cdsat/src/trail.rs" 737 4 737 41] (self : Cdsat_Trail_Assignment_Type.t_assignment) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 736 14 736 54] result = (Cdsat_Trail_Assignment_Type.assignment_reason self = Cdsat_Trail_Reason_Type.C_Input) }
    
end
module Cdsat_Trail_Impl12_Value_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val value [#"/Users/xavier/Code/cdsat/src/trail.rs" 742 4 742 40] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Term_Value_Type.t_value
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 741 14 741 33] result = Cdsat_Trail_Assignment_Type.assignment_val self }
    
end
module Cdsat_Trail_Impl12_Term_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  val term [#"/Users/xavier/Code/cdsat/src/trail.rs" 747 4 747 38] (self : Cdsat_Trail_Assignment_Type.t_assignment) : Cdsat_Term_Term_Type.t_term
    ensures { [#"/Users/xavier/Code/cdsat/src/trail.rs" 746 14 746 34] result = Cdsat_Trail_Assignment_Type.assignment_term self }
    
end
module Cdsat_Theory_Impl5_IsSetLevel_Stub
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 270 4 270 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
end
module Cdsat_Theory_Impl5_IsSetLevel_Interface
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 270 4 270 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
  val is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 270 4 270 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int) : bool
    ensures { result = is_set_level self s m }
    
end
module Cdsat_Theory_Impl5_IsSetLevel
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 270 4 270 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 272 12 274 67] s = Fset.empty  /\ m = 0 \/ (exists i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i /\ LevelOf0.level_of self i = m) /\ (forall i : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains s i -> LevelOf0.level_of self i <= m)
  val is_set_level [#"/Users/xavier/Code/cdsat/src/theory.rs" 270 4 270 69] (self : Cdsat_Theory_Trail_Type.t_trail) (s : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (m : int) : bool
    ensures { result = is_set_level self s m }
    
end
module Cdsat_Theory_Impl5_SetLevelMax_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 308 4 308 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_SetLevelMax_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 308 4 308 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 308 4 308 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 305 15 305 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 307 14 307 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem }
    ensures { result = set_level_max self set elem }
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 305 15 305 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 307 14 307 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl5_SetLevelMax
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  function set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 308 4 308 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 303 4 303 12] ()
  val set_level_max [#"/Users/xavier/Code/cdsat/src/theory.rs" 308 4 308 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 305 15 305 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 307 14 307 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem }
    ensures { result = set_level_max self set elem }
    
  axiom set_level_max_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 305 15 305 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 306 4 306 90] forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains set j -> LevelOf0.level_of self j <= LevelOf0.level_of self elem) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 307 14 307 69] SetLevel0.set_level self (Insert0.insert set elem) = LevelOf0.level_of self elem)
end
module Cdsat_Theory_Impl5_SetLevelMin_Stub
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_SetLevelMin_Interface
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 312 15 312 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 313 15 313 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 314 14 314 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set }
    ensures { result = set_level_min self set elem }
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 312 15 312 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 313 15 313 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 314 14 314 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl5_SetLevelMin
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  function set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 310 4 310 12] ()
  val set_level_min [#"/Users/xavier/Code/cdsat/src/theory.rs" 315 4 315 77] (self : Cdsat_Theory_Trail_Type.t_trail) (set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 312 15 312 38] InvariantNonneg0.invariant_nonneg self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 313 15 313 56] LevelOf0.level_of self elem < SetLevel0.set_level self set}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 314 14 314 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set }
    ensures { result = set_level_min self set elem }
    
  axiom set_level_min_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, set : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), elem : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 312 15 312 38] InvariantNonneg0.invariant_nonneg self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 313 15 313 56] LevelOf0.level_of self elem < SetLevel0.set_level self set) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 314 14 314 69] SetLevel0.set_level self (Insert0.insert set elem) = SetLevel0.set_level self set)
end
module Cdsat_Theory_Impl5_ContainsInverse_Stub
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_ContainsInverse_Interface
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 14 429 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = contains_inverse self d }
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 14 429 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl5_ContainsInverse
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_TrailUnique_Stub as TrailUnique0
  function contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 424 4 424 12] let _ = NegateInvolutive0.negate_involutive (let (_, a) = d in a) in match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then () else contains_inverse tl d
      end
  val contains_inverse [#"/Users/xavier/Code/cdsat/src/theory.rs" 430 4 430 51] (self : Cdsat_Theory_Trail_Type.t_trail) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 34] TrailUnique0.trail_unique self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 30] IsBool0.is_bool (let (_, a) = d in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 429 14 429 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)) }
    ensures { result = contains_inverse self d }
    
  axiom contains_inverse_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 426 15 426 34] TrailUnique0.trail_unique self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 427 15 427 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 428 4 428 30] IsBool0.is_bool (let (_, a) = d in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 429 14 429 49] not Contains0.contains self (let (a, _) = d in a, Negate0.negate (let (_, a) = d in a)))
end
module Cdsat_Theory_Impl5_RestrictTooBig_Stub
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 758 4 758 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
end
module Cdsat_Theory_Impl5_RestrictTooBig_Interface
  use prelude.Int
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 758 4 758 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
  val restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 758 4 758 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 753 15 753 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 754 15 754 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 755 15 755 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 756 15 756 39] level < LevelOf0.level_of self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 757 14 757 47] not Contains0.contains (Restrict0.restrict self level) d }
    ensures { result = restrict_too_big self level d }
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 753 15 753 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 754 15 754 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 755 15 755 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 756 15 756 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 757 14 757 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl5_RestrictTooBig
  use prelude.Int
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl2_ToPair_Stub as ToPair0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  function restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 758 4 758 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 759 8 768 9] match (self) with
      | Cdsat_Theory_Trail_Type.C_Empty -> ()
      | Cdsat_Theory_Trail_Type.C_Assign a l tl -> if ToPair0.to_pair a = d then
        ()
      else
        let _ = restrict_too_big tl level d in ()
      
      end
  val restrict_too_big [#"/Users/xavier/Code/cdsat/src/theory.rs" 758 4 758 63] (self : Cdsat_Theory_Trail_Type.t_trail) (level : int) (d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 753 15 753 25] level >= 0}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 754 15 754 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 755 15 755 31] Contains0.contains self d}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 756 15 756 39] level < LevelOf0.level_of self d}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 757 14 757 47] not Contains0.contains (Restrict0.restrict self level) d }
    ensures { result = restrict_too_big self level d }
    
  axiom restrict_too_big_spec : forall self : Cdsat_Theory_Trail_Type.t_trail, level : int, d : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 753 15 753 25] level >= 0) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 754 15 754 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 755 15 755 31] Contains0.contains self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 756 15 756 39] level < LevelOf0.level_of self d) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 757 14 757 47] not Contains0.contains (Restrict0.restrict self level) d)
end
module Cdsat_Theory_Impl6_Decide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 840 4 840 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_Decide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 840 4 840 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 840 4 840 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 835 15 835 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 836 15 836 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 837 4 837 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 838 4 838 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 839 4 839 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = decide self t val' tgt }
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 835 15 835 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 836 15 836 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 839 4 839 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 838 4 838 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 837 4 837 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Decide
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 840 4 840 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 833 4 833 16] Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) t val' /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision t val') (Level0.level (Cdsat_Theory_Normal_Type.normal_0 self) + 1) (Cdsat_Theory_Normal_Type.normal_0 self)
  val decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 840 4 840 63] (self : Cdsat_Theory_Normal_Type.t_normal) (t : Cdsat_Theory_Term_Type.t_term) (val' : Cdsat_Theory_Value_Type.t_value) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 835 15 835 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 836 15 836 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 837 4 837 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 838 4 838 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 839 4 839 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = decide self t val' tgt }
    
  axiom decide_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, t : Cdsat_Theory_Term_Type.t_term, val' : Cdsat_Theory_Value_Type.t_value, tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 835 15 835 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 836 15 836 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 839 4 839 46] decide self t val' tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 838 4 838 38] decide self t val' tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 837 4 837 46] decide self t val' tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Deduce_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl6_Deduce_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 850 15 850 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = deduce self just tgt }
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 850 15 850 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Deduce
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Acceptable_Stub as Acceptable0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_CountBounds_Stub as CountBounds0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  predicate deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 847 4 847 16] let _ = CountBounds0.count_bounds (Cdsat_Theory_Normal_Type.normal_0 self) in IsBool0.is_bool (let (_, _, a) = just in a) /\ Acceptable0.acceptable (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a) (let (_, _, a) = just in a) /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified (let (a, _, _) = just in a) (let (_, a, _) = just in a) (let (_, _, a) = just in a)) (SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a)) (Cdsat_Theory_Normal_Type.normal_0 self)
  val deduce [#"/Users/xavier/Code/cdsat/src/theory.rs" 854 4 854 84] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 850 15 850 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] result -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = deduce self just tgt }
    
  axiom deduce_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 849 15 849 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 850 15 850 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 853 4 853 46] deduce self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 852 4 852 38] deduce self just tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 851 4 851 46] deduce self just tgt -> Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl6_Fail_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 897 4 897 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl6_Fail_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 897 4 897 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 897 4 897 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 892 15 892 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 893 15 893 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 894 4 894 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 895 4 895 92] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 896 4 896 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail self just }
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 892 15 892 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 893 15 893 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 894 4 894 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 895 4 895 92] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 896 4 896 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl6_Fail
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 897 4 897 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 898 8 905 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains (let (a, _, _) = just in a) j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ LevelOf0.level_of (Cdsat_Theory_Normal_Type.normal_0 self) not_l = 0 /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) (let (a, _, _) = just in a) = 0
  val fail [#"/Users/xavier/Code/cdsat/src/theory.rs" 897 4 897 71] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 892 15 892 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 893 15 893 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 894 4 894 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 895 4 895 92] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 896 4 896 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail self just }
    
  axiom fail_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 892 15 892 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 893 15 893 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 894 4 894 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 895 4 895 92] forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m (let (a, _, _) = just in a) -> Satisfies0.satisfies m (let (_, a, _) = just in a, let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 896 4 896 41] fail self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl6_Fail2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl6_Fail2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail2 self just }
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl6_Fail2
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 918 12 920 39] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m just -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) just = 0
  val fail2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 914 4 914 57] (self : Cdsat_Theory_Normal_Type.t_normal) (just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 41] result -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self) }
    ensures { result = fail2 self just }
    
  axiom fail2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 911 15 911 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 912 15 912 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 913 4 913 41] fail2 self just -> Unsat0.unsat (Cdsat_Theory_Normal_Type.normal_0 self))
end
module Cdsat_Theory_Impl6_ConflictSolve_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 934 4 934 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_ConflictSolve_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 934 4 934 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 934 4 934 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 930 4 930 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 931 4 931 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve self just tgt }
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 930 4 930 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 931 4 931 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl6_ConflictSolve
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains1 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains0 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Insert_Stub as Insert0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 934 4 934 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 935 8 945 11] let not_l = (let (_, a, _) = just in a, Negate0.negate (let (_, _, a) = just in a)) in let conflict = Insert0.insert (let (a, _, _) = just in a) not_l in Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) not_l /\ (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains1.contains (let (a, _, _) = just in a) j -> Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ not Contains0.contains (Cdsat_Theory_Normal_Type.normal_0 self) (let (_, a, _) = just in a, let (_, _, a) = just in a) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> Entails0.entails m (let (a, _, _) = just in a) (let (_, a, _) = just in a, let (_, _, a) = just in a)) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve [#"/Users/xavier/Code/cdsat/src/theory.rs" 934 4 934 96] (self : Cdsat_Theory_Normal_Type.t_normal) (just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 930 4 930 33] IsBool0.is_bool (let (_, _, a) = just in a)}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 931 4 931 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve self just tgt }
    
  axiom conflict_solve_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, just : (Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 928 15 928 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 929 15 929 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 930 4 930 33] IsBool0.is_bool (let (_, _, a) = just in a)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 933 4 933 46] conflict_solve self just tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 932 4 932 38] conflict_solve self just tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 931 4 931 46] conflict_solve self just tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl6_ConflictSolve2_Stub
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 957 4 957 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl6_ConflictSolve2_Interface
  use set.Fset
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 957 4 957 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 957 4 957 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 952 15 952 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 953 15 953 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 954 4 954 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 955 4 955 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 956 4 956 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve2 self conflict tgt }
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 952 15 952 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 953 15 953 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 956 4 956 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 955 4 955 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 954 4 954 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl6_ConflictSolve2
  use set.Fset
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound1
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant0
  predicate conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 957 4 957 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 959 10 962 43] (forall j : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains conflict j -> Contains1.contains (Cdsat_Theory_Normal_Type.normal_0 self) j) /\ (forall m : Cdsat_Theory_Model_Type.t_model . Inv0.inv m -> SatisfySet0.satisfy_set m conflict -> false) /\ SetLevel0.set_level (Cdsat_Theory_Normal_Type.normal_0 self) conflict > 0 /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Normal_Type.normal_0 self) conflict
  val conflict_solve2 [#"/Users/xavier/Code/cdsat/src/theory.rs" 957 4 957 86] (self : Cdsat_Theory_Normal_Type.t_normal) (conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 952 15 952 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 953 15 953 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 954 4 954 46] result -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 955 4 955 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 956 4 956 46] result -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt) }
    ensures { result = conflict_solve2 self conflict tgt }
    
  axiom conflict_solve2_spec : forall self : Cdsat_Theory_Normal_Type.t_normal, conflict : Fset.fset (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 952 15 952 35] Invariant0.invariant' (Cdsat_Theory_Normal_Type.normal_0 self)) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 953 15 953 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 956 4 956 46] conflict_solve2 self conflict tgt -> Impls0.impls (Cdsat_Theory_Normal_Type.normal_0 self) (Cdsat_Theory_Conflict_Type.conflict_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 955 4 955 38] conflict_solve2 self conflict tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 954 4 954 46] conflict_solve2 self conflict tgt -> Invariant0.invariant' (Cdsat_Theory_Conflict_Type.conflict_0 tgt))
end
module Cdsat_Theory_Impl7_Resolve_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 1029 4 1029 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
end
module Cdsat_Theory_Impl7_Resolve_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 1029 4 1029 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
  val resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 1029 4 1029 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1023 15 1023 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1024 15 1024 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1025 4 1025 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1026 4 1026 42] result -> Invariant0.invariant' tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1027 4 1027 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1028 4 1028 54] result -> Level0.level tgt = Level0.level self }
    ensures { result = resolve self a tgt }
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1023 15 1023 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1024 15 1024 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1025 4 1025 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1028 4 1028 54] resolve self a tgt -> Level0.level tgt = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1027 4 1027 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1026 4 1026 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl7_Resolve
  use prelude.Int
  use set.Fset
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl4_ResolveSound_Stub as ResolveSound0 with
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    predicate Contains0.contains = Contains0.contains,
    predicate Inv0.inv = Inv0.inv,
    function Remove0.remove = Remove0.remove,
    axiom .
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl5_JustificationContains_Stub as JustificationContains0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    function Justification0.justification = Justification0.justification,
    predicate Contains0.contains = Contains0.contains,
    predicate Contains1.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function SetLevel0.set_level = SetLevel0.set_level,
    predicate Sound0.sound = Sound1.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 1029 4 1029 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1021 4 1021 16] let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = JustificationContains0.justification_contains (Cdsat_Theory_Conflict_Type.conflict_0 self) a in let _ = () in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ (forall a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ IsDecision0.is_decision (Cdsat_Theory_Conflict_Type.conflict_0 self) a -> LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a < SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Conflict_Type.conflict_1 self)) /\ tgt = Cdsat_Theory_Conflict_Type.C_Conflict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Fset.union (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a) just)
  val resolve [#"/Users/xavier/Code/cdsat/src/theory.rs" 1029 4 1029 61] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Conflict_Type.t_conflict) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1023 15 1023 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1024 15 1024 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1025 4 1025 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1026 4 1026 42] result -> Invariant0.invariant' tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1027 4 1027 38] result -> Sound0.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1028 4 1028 54] result -> Level0.level tgt = Level0.level self }
    ensures { result = resolve self a tgt }
    
  axiom resolve_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Conflict_Type.t_conflict . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1023 15 1023 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1024 15 1024 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1025 4 1025 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) a) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1028 4 1028 54] resolve self a tgt -> Level0.level tgt = Level0.level self) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1027 4 1027 38] resolve self a tgt -> Sound0.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1026 4 1026 42] resolve self a tgt -> Invariant0.invariant' tgt)
end
module Cdsat_Theory_Impl7_Backjump_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 1047 4 1047 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl7_Backjump_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 1047 4 1047 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 1047 4 1047 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1042 15 1042 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1043 15 1043 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1044 4 1044 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1045 4 1045 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1046 4 1046 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = backjump self l tgt }
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1042 15 1042 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1043 15 1043 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1046 4 1046 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1045 4 1045 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1044 4 1044 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl7_Backjump
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Satisfies_Stub as Satisfies0
  clone Cdsat_Theory_Impl4_SatisfySet_Stub as SatisfySet0
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl7_LearnJustified_Stub as LearnJustified0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Sound0.sound = Sound0.sound,
    predicate Contains0.contains = Contains0.contains,
    predicate IsBool0.is_bool = IsBool1.is_bool,
    predicate IsBool1.is_bool = IsBool0.is_bool,
    predicate Inv0.inv = Inv0.inv,
    function Remove0.remove = Remove0.remove,
    predicate SatisfySet0.satisfy_set = SatisfySet0.satisfy_set,
    function Negate0.negate = Negate0.negate,
    predicate Satisfies0.satisfies = Satisfies0.satisfies,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  predicate backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 1047 4 1047 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1040 4 1040 16] let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let _ = () in let _ = () in let _ = () in let _ = () in let _ = () in let restricted = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e) in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Justified e (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (SetLevel0.set_level restricted e) restricted
  val backjump [#"/Users/xavier/Code/cdsat/src/theory.rs" 1047 4 1047 64] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1042 15 1042 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1043 15 1043 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1044 4 1044 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1045 4 1045 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1046 4 1046 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = backjump self l tgt }
    
  axiom backjump_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1042 15 1042 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1043 15 1043 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1046 4 1046 46] backjump self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1045 4 1045 38] backjump self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1044 4 1044 44] backjump self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl7_Backjump2Pre_Stub
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 4 1070 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
end
module Cdsat_Theory_Impl7_Backjump2Pre_Interface
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 4 1070 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
  val backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 4 1070 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 4 1069 91] result = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l }
    ensures { result = backjump2_pre self l }
    
  axiom backjump2_pre_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 4 1069 91] backjump2_pre self l = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l
end
module Cdsat_Theory_Impl7_Backjump2Pre
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_Level_Stub as Level0 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_IsBool_Stub as IsBool1
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_SetLevel_Stub as SetLevel0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    predicate Contains0.contains = Contains0.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level0.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  predicate backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 4 1070 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1067 4 1067 16] Invariant0.invariant' self /\ Sound0.sound self /\ Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) l /\ IsBool0.is_bool (let (_, a) = l in a) /\ IsBool1.is_bool (let (a, _) = l in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l > SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l)
  val backjump2_pre [#"/Users/xavier/Code/cdsat/src/theory.rs" 1070 4 1070 56] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) : bool
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 4 1069 91] result = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l }
    ensures { result = backjump2_pre self l }
    
  axiom backjump2_pre_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . [#"/Users/xavier/Code/cdsat/src/theory.rs" 1069 4 1069 91] backjump2_pre self l = true -> SetLevel0.set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) (Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l) <= LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l
end
module Cdsat_Theory_Impl7_UndoClear_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1136 4 1136 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl7_UndoClear_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1136 4 1136 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1136 4 1136 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1131 15 1131 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1132 15 1132 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1133 4 1133 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1134 4 1134 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1135 4 1135 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_clear self a tgt }
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1131 15 1131 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1132 15 1132 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1135 4 1135 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1134 4 1134 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1133 4 1133 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl7_UndoClear
  use prelude.Int
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_IsSetLevel_Stub as IsSetLevel0
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_RestrictIdempotent_Stub as RestrictIdempotent0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    function Restrict0.restrict = Restrict0.restrict,
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1136 4 1136 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1137 8 1143 11] let _ = RestrictSound0.restrict_sound (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in let _ = RestrictIdempotent0.restrict_idempotent (Cdsat_Theory_Conflict_Type.conflict_0 self) 0 (Level0.level self - 1) in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) a in Contains0.contains (Cdsat_Theory_Conflict_Type.conflict_1 self) a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ (exists l : int . l >= 0 /\ Level0.level self > l /\ IsSetLevel0.is_set_level (Cdsat_Theory_Conflict_Type.conflict_0 self) e l) /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1)
  val undo_clear [#"/Users/xavier/Code/cdsat/src/theory.rs" 1136 4 1136 66] (self : Cdsat_Theory_Conflict_Type.t_conflict) (a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1131 15 1131 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1132 15 1132 27] Sound0.sound self}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1133 4 1133 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1134 4 1134 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1135 4 1135 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_clear self a tgt }
    
  axiom undo_clear_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1131 15 1131 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1132 15 1132 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1135 4 1135 46] undo_clear self a tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1134 4 1134 38] undo_clear self a tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1133 4 1133 44] undo_clear self a tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl7_UndoDecide_Stub
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1155 4 1155 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
end
module Cdsat_Theory_Impl7_UndoDecide_Interface
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1155 4 1155 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
  val undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1155 4 1155 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1149 15 1149 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1150 15 1150 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1151 4 1151 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1152 4 1152 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1153 4 1153 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1154 4 1154 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_decide self l tgt }
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1149 15 1149 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1150 15 1150 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1151 4 1151 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1154 4 1154 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1153 4 1153 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1152 4 1152 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Theory_Impl7_UndoDecide
  use prelude.Int
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Theory_Trail_Type as Cdsat_Theory_Trail_Type
  clone Cdsat_Theory_Impl5_IsDecision_Stub as IsDecision0
  clone Cdsat_Theory_Impl5_IsInput_Stub as IsInput0
  use Cdsat_Theory_Model_Type as Cdsat_Theory_Model_Type
  clone Cdsat_Theory_Impl4_Entails_Stub as Entails0
  clone Cdsat_Theory_Impl5_InvariantNonneg_Stub as InvariantNonneg0
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort1
  clone Cdsat_Theory_Impl0_Sort_Stub as Sort0
  clone Cdsat_Theory_Impl5_InvariantAssign_Stub as InvariantAssign0
  clone Cdsat_Theory_Impl5_Len_Stub as Len0 with
    axiom .
  clone Cdsat_Theory_Impl5_SatisfiedBy_Stub as SatisfiedBy0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Cdsat_Theory_Model_Type.t_model
  clone Cdsat_Theory_Impl5_Contains_Stub as Contains1 with
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_Sound_Stub as Sound2
  clone Cdsat_Theory_Impl5_Unsat_Stub as Unsat0
  clone Cdsat_Theory_Impl5_Level_Stub as Level1 with
    function Len0.len = Len0.len,
    axiom .
  use Cdsat_Theory_Assign_Type as Cdsat_Theory_Assign_Type
  clone Cdsat_Theory_Impl1_IsBool_Stub as IsBool0
  clone Cdsat_Theory_Impl1_Negate_Stub as Negate0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    axiom .
  clone Cdsat_Theory_Impl5_LevelOf_Stub as LevelOf0 with
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    axiom .
  clone CreusotContracts_Logic_Fset_Impl0_Contains_Stub as Contains0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_Invariant_Stub as Invariant1
  clone Cdsat_Theory_Impl5_Restrict_Stub as Restrict0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  use Cdsat_Theory_Conflict_Type as Cdsat_Theory_Conflict_Type
  clone Cdsat_Theory_Impl7_Level_Stub as Level0
  clone CreusotContracts_Logic_Fset_Impl0_Remove_Stub as Remove0 with
    type t = (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)
  clone Cdsat_Theory_Impl5_IsJustified_Stub as IsJustified0
  clone Cdsat_Theory_Impl5_Justification_Stub as Justification0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IsJustified0.is_justified = IsJustified0.is_justified,
    predicate Sound0.sound = Sound2.sound,
    predicate Inv0.inv = Inv0.inv,
    predicate Entails0.entails = Entails0.entails,
    predicate IsInput0.is_input = IsInput0.is_input,
    predicate IsDecision0.is_decision = IsDecision0.is_decision,
    axiom .
  clone Cdsat_Theory_Impl1_NegateInvolutive_Stub as NegateInvolutive0 with
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    axiom .
  clone Cdsat_Theory_Impl5_TrailPlausible_Stub as TrailPlausible0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    predicate IsBool0.is_bool = IsBool0.is_bool,
    function Negate0.negate = Negate0.negate,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictTooBig_Stub as RestrictTooBig0 with
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Restrict0.restrict = Restrict0.restrict,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    function Level0.level = Level1.level,
    function Len0.len = Len0.len,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    axiom .
  clone Cdsat_Theory_Impl5_RestrictSound_Stub as RestrictSound0 with
    predicate Sound0.sound = Sound2.sound,
    function Restrict0.restrict = Restrict0.restrict,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Contains0.contains = Contains1.contains,
    function LevelOf0.level_of = LevelOf0.level_of,
    function Level0.level = Level1.level,
    predicate Inv0.inv = Inv0.inv,
    predicate SatisfiedBy0.satisfied_by = SatisfiedBy0.satisfied_by,
    function Len0.len = Len0.len,
    predicate InvariantAssign0.invariant_assign = InvariantAssign0.invariant_assign,
    function Sort0.sort = Sort0.sort,
    function Sort1.sort = Sort1.sort,
    predicate InvariantNonneg0.invariant_nonneg = InvariantNonneg0.invariant_nonneg,
    axiom .
  clone Cdsat_Theory_Impl5_Impls_Stub as Impls0 with
    predicate Unsat0.unsat = Unsat0.unsat,
    axiom .
  use Cdsat_Theory_Normal_Type as Cdsat_Theory_Normal_Type
  clone Cdsat_Theory_Impl6_Sound_Stub as Sound1
  clone Cdsat_Theory_Impl7_Sound_Stub as Sound0
  clone Cdsat_Theory_Impl7_Invariant_Stub as Invariant0
  predicate undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1155 4 1155 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal)
    
   =
    [#"/Users/xavier/Code/cdsat/src/theory.rs" 1147 4 1147 16] let _ = () in let _ = () in let _ = () in let _ = () in let just = Justification0.justification (Cdsat_Theory_Conflict_Type.conflict_0 self) l in let e = Remove0.remove (Cdsat_Theory_Conflict_Type.conflict_1 self) l in let restr = Restrict0.restrict (Cdsat_Theory_Conflict_Type.conflict_0 self) (Level0.level self - 1) in IsBool0.is_bool (let (_, a) = l in a) /\ (exists a : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value) . Contains0.contains just a /\ not IsBool0.is_bool (let (_, a) = a in a) /\ LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) a = Level0.level self) /\ Level0.level self = LevelOf0.level_of (Cdsat_Theory_Conflict_Type.conflict_0 self) l /\ Cdsat_Theory_Normal_Type.normal_0 tgt = Cdsat_Theory_Trail_Type.C_Assign (Cdsat_Theory_Assign_Type.C_Decision (let (a, _) = l in a) (Negate0.negate (let (_, a) = l in a))) (Level1.level restr + 1) restr
  val undo_decide [#"/Users/xavier/Code/cdsat/src/theory.rs" 1155 4 1155 67] (self : Cdsat_Theory_Conflict_Type.t_conflict) (l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value)) (tgt : Cdsat_Theory_Normal_Type.t_normal) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1149 15 1149 31] Invariant0.invariant' self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1150 15 1150 27] Sound0.sound self}
    requires {[#"/Users/xavier/Code/cdsat/src/theory.rs" 1151 4 1151 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l}
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1152 4 1152 44] result -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1153 4 1153 38] result -> Sound1.sound tgt }
    ensures { [#"/Users/xavier/Code/cdsat/src/theory.rs" 1154 4 1154 46] result -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt) }
    ensures { result = undo_decide self l tgt }
    
  axiom undo_decide_spec : forall self : Cdsat_Theory_Conflict_Type.t_conflict, l : (Cdsat_Theory_Term_Type.t_term, Cdsat_Theory_Value_Type.t_value), tgt : Cdsat_Theory_Normal_Type.t_normal . ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1149 15 1149 31] Invariant0.invariant' self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1150 15 1150 27] Sound0.sound self) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1151 4 1151 39] IsJustified0.is_justified (Cdsat_Theory_Conflict_Type.conflict_0 self) l) -> ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1154 4 1154 46] undo_decide self l tgt -> Impls0.impls (Cdsat_Theory_Conflict_Type.conflict_0 self) (Cdsat_Theory_Normal_Type.normal_0 tgt)) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1153 4 1153 38] undo_decide self l tgt -> Sound1.sound tgt) && ([#"/Users/xavier/Code/cdsat/src/theory.rs" 1152 4 1152 44] undo_decide self l tgt -> Invariant1.invariant' (Cdsat_Theory_Normal_Type.normal_0 tgt))
end
module Cdsat_Term_Impl12_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 14 16 14 21] (self : Cdsat_Term_Sort_Type.t_sort) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl15_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 14 34 14 36] (self : Cdsat_Term_Sort_Type.t_sort) : ()
    
end
module Core_Marker_DiscriminantKind_Discriminant_Type
  type self
  type discriminant
end
module Core_Intrinsics_Extern0_DiscriminantValue_Interface
  type t
  use prelude.Borrow
  clone Core_Marker_DiscriminantKind_Discriminant_Type as Discriminant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Discriminant0.discriminant
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val discriminant_value (v : t) : Discriminant0.discriminant
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/intrinsics.rs" 2297 33 2297 34] Inv0.inv v}
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/intrinsics.rs" 2297 4 2297 80] Inv1.inv result }
    
end
module Core_Hash_Impls_Impl18_Hash_Interface
  type h
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed h
  val hash (self : isize) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hash/mod.rs" 809 42 809 47] Inv0.inv state}
    
end
module Cdsat_Term_Impl18_Hash_Interface
  type __h
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed __h
  val hash [#"/Users/xavier/Code/cdsat/src/term.rs" 14 55 14 59] (self : Cdsat_Term_Sort_Type.t_sort) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 14 55 14 59] Inv0.inv state}
    
end
module Cdsat_Term_Impl20_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 33 16 33 21] (self : Cdsat_Term_Term_Type.t_term) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl23_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 33 34 33 36] (self : Cdsat_Term_Term_Type.t_term) : ()
    
end
module Core_Hash_Impls_Impl13_Hash_Interface
  type h
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed h
  val hash (self : usize) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hash/mod.rs" 809 42 809 47] Inv0.inv state}
    
end
module Core_Hash_Impls_Impl0_Hash_Interface
  type h
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed h
  val hash (self : bool) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hash/mod.rs" 845 34 845 39] Inv0.inv state}
    
end
module NumRational_Impl9_Hash_Interface
  type t
  type h
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed h
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val hash (self : NumRational_Ratio_Type.t_ratio t) (state : borrowed h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 391 24 391 28] Inv0.inv self}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 391 30 391 35] Inv1.inv state}
    
end
module Cdsat_Term_Impl30_Hash_Interface
  type __h
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed __h
  val hash [#"/Users/xavier/Code/cdsat/src/term.rs" 218 38 218 42] (self : Cdsat_Term_Value_Type.t_value) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 218 38 218 42] Inv0.inv state}
    
end
module Alloc_Boxed_Impl18_Hash_Interface
  type t
  type a
  type h
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = borrowed h
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val hash (self : t) (state : borrowed h) : ()
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1384 24 1384 28] Inv0.inv self}
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs" 1384 30 1384 35] Inv1.inv state}
    
end
module Cdsat_Term_Impl24_Hash_Interface
  type __h
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed __h
  val hash [#"/Users/xavier/Code/cdsat/src/term.rs" 33 38 33 42] (self : Cdsat_Term_Term_Type.t_term) (state : borrowed __h) : ()
    requires {[#"/Users/xavier/Code/cdsat/src/term.rs" 33 38 33 42] Inv0.inv state}
    
end
module Cdsat_Term_Impl1_Not_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val not' [#"/Users/xavier/Code/cdsat/src/term.rs" 66 4 66 43] (remove : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_True_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val true_ [#"/Users/xavier/Code/cdsat/src/term.rs" 70 4 70 26] (_1 : ()) : Cdsat_Term_Term_Type.t_term
end
module Cdsat_Term_Impl1_False_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val false_ [#"/Users/xavier/Code/cdsat/src/term.rs" 74 4 74 27] (_1 : ()) : Cdsat_Term_Term_Type.t_term
end
module Cdsat_Term_Impl1_Var_Interface
  use prelude.Int
  use prelude.UIntSize
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  val var' [#"/Users/xavier/Code/cdsat/src/term.rs" 78 4 78 45] (ix : usize) (sort : Cdsat_Term_Sort_Type.t_sort) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Val_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val val' [#"/Users/xavier/Code/cdsat/src/term.rs" 82 4 82 32] (v : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Plus_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val plus [#"/Users/xavier/Code/cdsat/src/term.rs" 86 4 86 41] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module NumRational_Impl20_IsZero_Interface
  type t
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val is_zero (self : NumRational_Ratio_Type.t_ratio t) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 913 16 913 20] Inv0.inv self}
    
end
module NumRational_Impl21_IsOne_Interface
  type t
  use prelude.Borrow
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val is_one (self : NumRational_Ratio_Type.t_ratio t) : bool
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 931 15 931 19] Inv0.inv self}
    
end
module Core_Convert_Impl3_Into_Interface
  type t
  type u
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = u
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val into (self : t) : u
    requires {[#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs" 715 12 715 16] Inv0.inv self}
    ensures { [#"/Users/xavier/.rustup/toolchains/nightly-2023-06-29-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/convert/mod.rs" 715 4 715 22] Inv1.inv result }
    
end
module NumRational_Impl1_New_Interface
  type t
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = NumRational_Ratio_Type.t_ratio t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val new (numer : t) (denom : t) : NumRational_Ratio_Type.t_ratio t
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 99 15 99 20] Inv0.inv numer}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 99 25 99 30] Inv0.inv denom}
    ensures { [#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 99 4 99 46] Inv1.inv result }
    
end
module Cdsat_Term_Impl10_Rat_Interface
  use prelude.Int
  use prelude.Int64
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val rat [#"/Users/xavier/Code/cdsat/src/term.rs" 327 4 327 38] (a : int64) (b : int64) : Cdsat_Term_Value_Type.t_value
end
module Cdsat_Term_Impl9_Zero_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val zero [#"/Users/xavier/Code/cdsat/src/term.rs" 315 4 315 25] (_1 : ()) : Cdsat_Term_Value_Type.t_value
end
module Cdsat_Term_Impl1_Times_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  val times [#"/Users/xavier/Code/cdsat/src/term.rs" 90 4 90 49] (k : NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint)) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_And_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val and [#"/Users/xavier/Code/cdsat/src/term.rs" 100 4 100 40] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Or_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val or [#"/Users/xavier/Code/cdsat/src/term.rs" 104 4 104 39] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Leq_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val leq [#"/Users/xavier/Code/cdsat/src/term.rs" 108 4 108 40] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Geq_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val geq [#"/Users/xavier/Code/cdsat/src/term.rs" 115 4 115 40] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Lt_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val lt [#"/Users/xavier/Code/cdsat/src/term.rs" 119 4 119 39] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_Eq_Interface
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val eq_ [#"/Users/xavier/Code/cdsat/src/term.rs" 123 4 123 40] (a : Cdsat_Term_Term_Type.t_term) (b : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Term_Type.t_term
    
end
module Cdsat_Term_Impl1_AsVal_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val as_val [#"/Users/xavier/Code/cdsat/src/term.rs" 127 4 127 40] (self : Cdsat_Term_Term_Type.t_term) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl2_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 138 4 138 74] (self : Cdsat_Term_Term_Type.t_term) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl3_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 157 4 157 74] (self : Cdsat_Term_Value_Type.t_value) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl26_Fmt_Interface
  use prelude.Borrow
  use Core_Fmt_Error_Type as Core_Fmt_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  use Core_Fmt_Formatter_Type as Core_Fmt_Formatter_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val fmt [#"/Users/xavier/Code/cdsat/src/term.rs" 218 16 218 21] (self : Cdsat_Term_Value_Type.t_value) (f : borrowed (Core_Fmt_Formatter_Type.t_formatter)) : Core_Result_Result_Type.t_result () (Core_Fmt_Error_Type.t_error)
    
end
module Cdsat_Term_Impl29_AssertReceiverIsTotalEq_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val assert_receiver_is_total_eq [#"/Users/xavier/Code/cdsat/src/term.rs" 218 34 218 36] (self : Cdsat_Term_Value_Type.t_value) : ()
    
end
module Cdsat_Term_Impl8_Sort_Interface
  use prelude.Borrow
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Theory_Impl1_Sort_Stub as Sort0
  clone CreusotContracts_Model_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = Cdsat_Term_Value_Type.t_value,
    type ShallowModelTy0.shallowModelTy = Cdsat_Theory_Value_Type.t_value
  clone Cdsat_Term_Impl0_ShallowModel_Stub as ShallowModel0
  val sort [#"/Users/xavier/Code/cdsat/src/term.rs" 250 4 250 30] (self : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Sort_Type.t_sort
    ensures { [#"/Users/xavier/Code/cdsat/src/term.rs" 249 14 249 37] ShallowModel0.shallow_model result = Sort0.sort (ShallowModel1.shallow_model self) }
    
end
module Cdsat_Term_Impl8_Lt_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val lt [#"/Users/xavier/Code/cdsat/src/term.rs" 269 4 269 36] (self : Cdsat_Term_Value_Type.t_value) (o : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl8_Add_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val add [#"/Users/xavier/Code/cdsat/src/term.rs" 279 4 279 37] (self : Cdsat_Term_Value_Type.t_value) (o : Cdsat_Term_Value_Type.t_value) : Cdsat_Term_Value_Type.t_value
    
end
module Cdsat_Term_Impl9_True_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val true_ [#"/Users/xavier/Code/cdsat/src/term.rs" 307 4 307 33] (_1 : ()) : Cdsat_Term_Value_Type.t_value
end
module Cdsat_Term_Impl9_False_Interface
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val false_ [#"/Users/xavier/Code/cdsat/src/term.rs" 311 4 311 34] (_1 : ()) : Cdsat_Term_Value_Type.t_value
end
module NumRational_Impl10_Mul_Interface
  type t
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = NumRational_Ratio_Type.t_ratio t
  val mul (self : NumRational_Ratio_Type.t_ratio t) (rhs : NumRational_Ratio_Type.t_ratio t) : NumRational_Ratio_Type.t_ratio t
    requires {[#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] false}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 685 11 685 15] Inv0.inv self}
    requires {[#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 685 17 685 20] Inv0.inv rhs}
    ensures { [#"/Users/xavier/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.3.2/src/lib.rs" 685 4 685 43] Inv0.inv result }
    
end
module Cdsat_Term_Impl10_Scale_Interface
  use prelude.Int
  use prelude.IntSize
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  val scale [#"/Users/xavier/Code/cdsat/src/term.rs" 321 4 321 40] (self : Cdsat_Term_Value_Type.t_value) (k : isize) : Cdsat_Term_Value_Type.t_value
    
end
module Hashbrown_Raw_Inner_RawTableInner_Type
  use prelude.Int
  use prelude.UIntSize
  use prelude.UInt8
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_rawtableinner 'a =
    | C_RawTableInner usize (Core_Ptr_NonNull_NonNull_Type.t_nonnull uint8) usize usize 'a
    
end
module Hashbrown_Raw_Inner_RawTable_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Hashbrown_Raw_Inner_RawTableInner_Type as Hashbrown_Raw_Inner_RawTableInner_Type
  type t_rawtable 't 'a =
    | C_RawTable (Hashbrown_Raw_Inner_RawTableInner_Type.t_rawtableinner 'a) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Hashbrown_Raw_Inner_Alloc_Inner_Global_Type
  type t_global  =
    | C_Global
    
end
module Indexmap_HashValue_Type
  use prelude.Int
  use prelude.UIntSize
  type t_hashvalue  =
    | C_HashValue usize
    
end
module Indexmap_Bucket_Type
  use Indexmap_HashValue_Type as Indexmap_HashValue_Type
  type t_bucket 'k 'v =
    | C_Bucket (Indexmap_HashValue_Type.t_hashvalue) 'k 'v
    
end
module Indexmap_Map_Core_IndexMapCore_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Indexmap_Bucket_Type as Indexmap_Bucket_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Hashbrown_Raw_Inner_Alloc_Inner_Global_Type as Hashbrown_Raw_Inner_Alloc_Inner_Global_Type
  use Hashbrown_Raw_Inner_RawTable_Type as Hashbrown_Raw_Inner_RawTable_Type
  type t_indexmapcore 'k 'v =
    | C_IndexMapCore (Hashbrown_Raw_Inner_RawTable_Type.t_rawtable usize (Hashbrown_Raw_Inner_Alloc_Inner_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec (Indexmap_Bucket_Type.t_bucket 'k 'v) (Alloc_Alloc_Global_Type.t_global))
    
end
module Indexmap_Map_IndexMap_Type
  use Indexmap_Map_Core_IndexMapCore_Type as Indexmap_Map_Core_IndexMapCore_Type
  type t_indexmap 'k 'v 's =
    | C_IndexMap (Indexmap_Map_Core_IndexMapCore_Type.t_indexmapcore 'k 'v) 's
    
end
module Smt2parser_Concrete_Symbol_Type
  use Alloc_String_String_Type as Alloc_String_String_Type
  type t_symbol  =
    | C_Symbol (Alloc_String_String_Type.t_string)
    
end
module Std_Collections_Hash_Map_RandomState_Type
  use prelude.Int
  use prelude.UInt64
  type t_randomstate  =
    | C_RandomState uint64 uint64
    
end
module Smt2parser_Visitors_AttributeValue_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_attributevalue 'constant' 'symbol 'sexpr =
    | C_None
    | C_Constant 'constant'
    | C_Symbol 'symbol
    | C_SExpr (Alloc_Vec_Vec_Type.t_vec 'sexpr (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Term_Type
  use Smt2parser_Visitors_AttributeValue_Type as Smt2parser_Visitors_AttributeValue_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort =
    | C_Constant 'constant'
    | C_QualIdentifier 'qualidentifier
    | C_Application 'qualidentifier (Alloc_Vec_Vec_Type.t_vec (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    | C_Let (Alloc_Vec_Vec_Type.t_vec ('symbol, t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global)) (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort)
    | C_Forall (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global)) (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort)
    | C_Exists (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global)) (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort)
    | C_Match (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec 'symbol (Alloc_Alloc_Global_Type.t_global), t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    | C_Attributes (t_term 'constant' 'qualidentifier 'keyword 'sexpr 'symbol 'sort) (Alloc_Vec_Vec_Type.t_vec ('keyword, Smt2parser_Visitors_AttributeValue_Type.t_attributevalue 'constant' 'symbol 'sexpr) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Constant_Type
  use prelude.Int
  use prelude.UInt8
  use Alloc_String_String_Type as Alloc_String_String_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  type t_constant  =
    | C_Numeral (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Decimal (NumRational_Ratio_Type.t_ratio (NumBigint_Bigint_BigInt_Type.t_bigint))
    | C_Hexadecimal (Alloc_Vec_Vec_Type.t_vec uint8 (Alloc_Alloc_Global_Type.t_global))
    | C_Binary (Alloc_Vec_Vec_Type.t_vec bool (Alloc_Alloc_Global_Type.t_global))
    | C_String (Alloc_String_String_Type.t_string)
    
end
module Smt2parser_Concrete_QualIdentifier_Type
  type t_qualidentifier 'identifier 'sort =
    | C_Simple 'identifier
    | C_Sorted 'identifier 'sort
    
end
module Smt2parser_Visitors_Index_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  type t_index 'symbol =
    | C_Numeral (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Symbol 'symbol
    
end
module Smt2parser_Visitors_Identifier_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Smt2parser_Visitors_Index_Type as Smt2parser_Visitors_Index_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_identifier 'symbol =
    | C_Simple 'symbol
    | C_Indexed 'symbol (Alloc_Vec_Vec_Type.t_vec (Smt2parser_Visitors_Index_Type.t_index 'symbol) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Sort_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_sort 'identifier =
    | C_Simple 'identifier
    | C_Parameterized 'identifier (Alloc_Vec_Vec_Type.t_vec (t_sort 'identifier) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Concrete_Keyword_Type
  use Alloc_String_String_Type as Alloc_String_String_Type
  type t_keyword  =
    | C_Keyword (Alloc_String_String_Type.t_string)
    
end
module Smt2parser_Concrete_SExpr_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_sexpr 'constant' 'symbol 'keyword =
    | C_Constant 'constant'
    | C_Symbol 'symbol
    | C_Keyword 'keyword
    | C_Application (Alloc_Vec_Vec_Type.t_vec (t_sexpr 'constant' 'symbol 'keyword) (Alloc_Alloc_Global_Type.t_global))
    
end
module Cdsat_TermToTerm_Interface
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  val term_to_term [#"/Users/xavier/Code/cdsat/src/main.rs" 68 0 68 85] (vars : Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)) (t : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) : Cdsat_Term_Term_Type.t_term
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module Cdsat_TermToTerm_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  type cdsat_termtoterm_closure0  =
    | Cdsat_TermToTerm_Closure0 (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))
    
end
module Cdsat_TermToTerm_Closure0_Interface
  use export Cdsat_TermToTerm_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  let function field_0 [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (self : cdsat_termtoterm_closure0) : Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let Cdsat_TermToTerm_Closure0 a = self in a
  predicate resolve [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (_1 : cdsat_termtoterm_closure0) =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] true
  predicate unnest [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (self : cdsat_termtoterm_closure0) (_2 : cdsat_termtoterm_closure0)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] field_0 _2 = field_0 self
  predicate precondition [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (self : cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (a) = args in true
  predicate postcondition_once [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (self : cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (result : Cdsat_Term_Term_Type.t_term)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (a) = args in true
  predicate postcondition_mut [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (self : borrowed cdsat_termtoterm_closure0) (args : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (result : Cdsat_Term_Term_Type.t_term)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] (let (a) = args in true) /\ unnest ( * self) ( ^ self)
  val cdsat_TermToTerm_Closure0 [#"/Users/xavier/Code/cdsat/src/main.rs" 73 42 73 45] (_1 : borrowed cdsat_termtoterm_closure0) (a : Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) : Cdsat_Term_Term_Type.t_term
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module Smt2parser_Visitors_ConstructorDec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_constructordec 'symbol 'sort =
    | C_ConstructorDec 'symbol (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Visitors_DatatypeDec_Type
  use Smt2parser_Visitors_ConstructorDec_Type as Smt2parser_Visitors_ConstructorDec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_datatypedec 'symbol 'sort =
    | C_DatatypeDec (Alloc_Vec_Vec_Type.t_vec 'symbol (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec (Smt2parser_Visitors_ConstructorDec_Type.t_constructordec 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    
end
module Smt2parser_Visitors_FunctionDec_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_functiondec 'symbol 'sort =
    | C_FunctionDec 'symbol (Alloc_Vec_Vec_Type.t_vec ('symbol, 'sort) (Alloc_Alloc_Global_Type.t_global)) 'sort
    
end
module Smt2parser_Concrete_Command_Type
  use Smt2parser_Visitors_AttributeValue_Type as Smt2parser_Visitors_AttributeValue_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Alloc_String_String_Type as Alloc_String_String_Type
  use Smt2parser_Visitors_FunctionDec_Type as Smt2parser_Visitors_FunctionDec_Type
  use NumBigint_Biguint_BigUint_Type as NumBigint_Biguint_BigUint_Type
  use Smt2parser_Visitors_DatatypeDec_Type as Smt2parser_Visitors_DatatypeDec_Type
  type t_command 'term 'symbol 'sort 'keyword 'constant' 'sexpr =
    | C_Assert 'term
    | C_CheckSat
    | C_CheckSatAssuming (Alloc_Vec_Vec_Type.t_vec ('symbol, bool) (Alloc_Alloc_Global_Type.t_global))
    | C_DeclareConst 'symbol 'sort
    | C_DeclareDatatype 'symbol (Smt2parser_Visitors_DatatypeDec_Type.t_datatypedec 'symbol 'sort)
    | C_DeclareDatatypes (Alloc_Vec_Vec_Type.t_vec ('symbol, NumBigint_Biguint_BigUint_Type.t_biguint, Smt2parser_Visitors_DatatypeDec_Type.t_datatypedec 'symbol 'sort) (Alloc_Alloc_Global_Type.t_global))
    | C_DeclareFun 'symbol (Alloc_Vec_Vec_Type.t_vec 'sort (Alloc_Alloc_Global_Type.t_global)) 'sort
    | C_DeclareSort 'symbol (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_DefineFun (Smt2parser_Visitors_FunctionDec_Type.t_functiondec 'symbol 'sort) 'term
    | C_DefineFunRec (Smt2parser_Visitors_FunctionDec_Type.t_functiondec 'symbol 'sort) 'term
    | C_DefineFunsRec (Alloc_Vec_Vec_Type.t_vec (Smt2parser_Visitors_FunctionDec_Type.t_functiondec 'symbol 'sort, 'term) (Alloc_Alloc_Global_Type.t_global))
    | C_DefineSort 'symbol (Alloc_Vec_Vec_Type.t_vec 'symbol (Alloc_Alloc_Global_Type.t_global)) 'sort
    | C_Echo (Alloc_String_String_Type.t_string)
    | C_Exit
    | C_GetAssertions
    | C_GetAssignment
    | C_GetInfo 'keyword
    | C_GetModel
    | C_GetOption 'keyword
    | C_GetProof
    | C_GetUnsatAssumptions
    | C_GetUnsatCore
    | C_GetValue (Alloc_Vec_Vec_Type.t_vec 'term (Alloc_Alloc_Global_Type.t_global))
    | C_Pop (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Push (NumBigint_Biguint_BigUint_Type.t_biguint)
    | C_Reset
    | C_ResetAssertions
    | C_SetInfo 'keyword (Smt2parser_Visitors_AttributeValue_Type.t_attributevalue 'constant' 'symbol 'sexpr)
    | C_SetLogic 'symbol
    | C_SetOption 'keyword (Smt2parser_Visitors_AttributeValue_Type.t_attributevalue 'constant' 'symbol 'sexpr)
    
end
module Cdsat_ToAssign_Interface
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Smt2parser_Concrete_Command_Type as Smt2parser_Concrete_Command_Type
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  val to_assign [#"/Users/xavier/Code/cdsat/src/main.rs" 149 0 149 84] (vars : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))) (c : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    
end
module Std_Io_Error_ErrorKind_Type
  type t_errorkind  =
    | C_NotFound
    | C_PermissionDenied
    | C_ConnectionRefused
    | C_ConnectionReset
    | C_HostUnreachable
    | C_NetworkUnreachable
    | C_ConnectionAborted
    | C_NotConnected
    | C_AddrInUse
    | C_AddrNotAvailable
    | C_NetworkDown
    | C_BrokenPipe
    | C_AlreadyExists
    | C_WouldBlock
    | C_NotADirectory
    | C_IsADirectory
    | C_DirectoryNotEmpty
    | C_ReadOnlyFilesystem
    | C_FilesystemLoop
    | C_StaleNetworkFileHandle
    | C_InvalidInput
    | C_InvalidData
    | C_TimedOut
    | C_WriteZero
    | C_StorageFull
    | C_NotSeekable
    | C_FilesystemQuotaExceeded
    | C_FileTooLarge
    | C_ResourceBusy
    | C_ExecutableFileBusy
    | C_Deadlock
    | C_CrossesDevices
    | C_TooManyLinks
    | C_InvalidFilename
    | C_ArgumentListTooLong
    | C_Interrupted
    | C_Unsupported
    | C_UnexpectedEof
    | C_OutOfMemory
    | C_Other
    | C_Uncategorized
    
end
module Std_Io_Error_SimpleMessage_Type
  use prelude.Borrow
  use Std_Io_Error_ErrorKind_Type as Std_Io_Error_ErrorKind_Type
  type t_simplemessage  =
    | C_SimpleMessage (Std_Io_Error_ErrorKind_Type.t_errorkind) string
    
end
module Std_Io_Error_ErrorData_Type
  use prelude.Int
  use prelude.Int32
  use prelude.Borrow
  use Std_Io_Error_SimpleMessage_Type as Std_Io_Error_SimpleMessage_Type
  use Std_Io_Error_ErrorKind_Type as Std_Io_Error_ErrorKind_Type
  type t_errordata 'c =
    | C_Os int32
    | C_Simple (Std_Io_Error_ErrorKind_Type.t_errorkind)
    | C_SimpleMessage (Std_Io_Error_SimpleMessage_Type.t_simplemessage)
    | C_Custom 'c
    
end
module Std_Io_Error_Custom_Type
  use prelude.Opaque
  use Std_Io_Error_ErrorKind_Type as Std_Io_Error_ErrorKind_Type
  type t_custom  =
    | C_Custom (Std_Io_Error_ErrorKind_Type.t_errorkind) dyn
    
end
module Std_Io_Error_ReprBitpacked_Repr_Type
  use Std_Io_Error_Custom_Type as Std_Io_Error_Custom_Type
  use Std_Io_Error_ErrorData_Type as Std_Io_Error_ErrorData_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_repr  =
    | C_Repr (Core_Ptr_NonNull_NonNull_Type.t_nonnull ()) (Core_Marker_PhantomData_Type.t_phantomdata (Std_Io_Error_ErrorData_Type.t_errordata (Std_Io_Error_Custom_Type.t_custom)))
    
end
module Std_Io_Error_Error_Type
  use Std_Io_Error_ReprBitpacked_Repr_Type as Std_Io_Error_ReprBitpacked_Repr_Type
  type t_error  =
    | C_Error (Std_Io_Error_ReprBitpacked_Repr_Type.t_repr)
    
end
module Cdsat_Main_Interface
  use Std_Io_Error_Error_Type as Std_Io_Error_Error_Type
  use Core_Result_Result_Type as Core_Result_Result_Type
  val main [#"/Users/xavier/Code/cdsat/src/main.rs" 208 0 208 32] (_1 : ()) : Core_Result_Result_Type.t_result () (Std_Io_Error_Error_Type.t_error)
    
end
module Cdsat_Main_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  type cdsat_main_closure0  =
    | Cdsat_Main_Closure0 (borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)))
    
end
module Cdsat_Main_Closure0_Interface
  use export Cdsat_Main_Closure0_Type
  use prelude.Borrow
  use Std_Collections_Hash_Map_RandomState_Type as Std_Collections_Hash_Map_RandomState_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Smt2parser_Concrete_Symbol_Type as Smt2parser_Concrete_Symbol_Type
  use Indexmap_Map_IndexMap_Type as Indexmap_Map_IndexMap_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate)
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Smt2parser_Concrete_Keyword_Type as Smt2parser_Concrete_Keyword_Type
  use Smt2parser_Concrete_Constant_Type as Smt2parser_Concrete_Constant_Type
  use Smt2parser_Concrete_SExpr_Type as Smt2parser_Concrete_SExpr_Type
  use Smt2parser_Visitors_Identifier_Type as Smt2parser_Visitors_Identifier_Type
  use Smt2parser_Concrete_Sort_Type as Smt2parser_Concrete_Sort_Type
  use Smt2parser_Concrete_QualIdentifier_Type as Smt2parser_Concrete_QualIdentifier_Type
  use Smt2parser_Concrete_Term_Type as Smt2parser_Concrete_Term_Type
  use Smt2parser_Concrete_Command_Type as Smt2parser_Concrete_Command_Type
  let function field_0 [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (self : cdsat_main_closure0) : borrowed (Indexmap_Map_IndexMap_Type.t_indexmap (Smt2parser_Concrete_Symbol_Type.t_symbol) (Cdsat_Term_Sort_Type.t_sort) (Std_Collections_Hash_Map_RandomState_Type.t_randomstate))
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let Cdsat_Main_Closure0 a = self in a
  predicate resolve [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (_1 : cdsat_main_closure0) =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (self : cdsat_main_closure0) (_2 : cdsat_main_closure0)
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (self : cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (c) = args in true
  predicate postcondition_once [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (self : cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) (result : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] let (c) = args in true
  predicate postcondition_mut [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (self : borrowed cdsat_main_closure0) (args : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) (result : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value))
    
   =
    [#"/Users/xavier/Code/cdsat/src/main.rs" 1 0 1 0] (let (c) = args in true) /\ unnest ( * self) ( ^ self)
  val cdsat_Main_Closure0 [#"/Users/xavier/Code/cdsat/src/main.rs" 217 40 217 43] (_1 : borrowed cdsat_main_closure0) (c : Smt2parser_Concrete_Command_Type.t_command (Smt2parser_Concrete_Term_Type.t_term (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_QualIdentifier_Type.t_qualidentifier (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword)) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol)))) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Sort_Type.t_sort (Smt2parser_Visitors_Identifier_Type.t_identifier (Smt2parser_Concrete_Symbol_Type.t_symbol))) (Smt2parser_Concrete_Keyword_Type.t_keyword) (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_SExpr_Type.t_sexpr (Smt2parser_Concrete_Constant_Type.t_constant) (Smt2parser_Concrete_Symbol_Type.t_symbol) (Smt2parser_Concrete_Keyword_Type.t_keyword))) : Core_Option_Option_Type.t_option (Cdsat_Term_Term_Type.t_term, Cdsat_Term_Value_Type.t_value)
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module Cdsat_Concrete_Impl3
  use prelude.Borrow
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Interface as DeepModel6
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl16_DeepModel as DeepModel5
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel4
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel3 with
    function DeepModel0.deep_model = DeepModel6.deep_model
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel4.deep_model,
    function DeepModel1.deep_model = DeepModel5.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model,
    function DeepModel3.deep_model = DeepModel6.deep_model
  use Cdsat_Concrete_TheoryStateDeepModel_Type as Cdsat_Concrete_TheoryStateDeepModel_Type
  use Cdsat_Concrete_TheoryState_Type as Cdsat_Concrete_TheoryState_Type
  clone Cdsat_Concrete_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_TheoryState_Type.t_theorystate,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_TheoryStateDeepModel_Type.t_theorystatedeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 9 21 18] forall self : Cdsat_Concrete_TheoryState_Type.t_theorystate . forall other : Cdsat_Concrete_TheoryState_Type.t_theorystate . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Concrete_Impl8
  use prelude.Borrow
  use Cdsat_Concrete_AnswerDeepModel_Type as Cdsat_Concrete_AnswerDeepModel_Type
  use Cdsat_Concrete_Answer_Type as Cdsat_Concrete_Answer_Type
  clone Cdsat_Concrete_Impl11_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Concrete_Answer_Type.t_answer,
    type DeepModelTy0.deepModelTy = Cdsat_Concrete_AnswerDeepModel_Type.t_answerdeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 16 345 25] forall self : Cdsat_Concrete_Answer_Type.t_answer . forall other : Cdsat_Concrete_Answer_Type.t_answer . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl14
  use prelude.Borrow
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel9
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel8 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel9.deep_model,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Interface as DeepModel7
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl16_DeepModel as DeepModel6
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel5
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel4 with
    function DeepModel0.deep_model = DeepModel8.deep_model,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel9.deep_model,
    predicate Inv1.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone Cdsat_Term_Impl6_DeepModel as DeepModel3 with
    function DeepModel0.deep_model = DeepModel7.deep_model
  clone Cdsat_Term_Impl5_DeepModel as DeepModel2 with
    function DeepModel0.deep_model = DeepModel5.deep_model,
    function DeepModel1.deep_model = DeepModel6.deep_model,
    function DeepModel2.deep_model = DeepModel3.deep_model,
    function DeepModel3.deep_model = DeepModel7.deep_model
  use Cdsat_Trail_AssignmentDeepModel_Type as Cdsat_Trail_AssignmentDeepModel_Type
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone Cdsat_Trail_Impl17_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model,
    function DeepModel3.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_AssignmentDeepModel_Type.t_assignmentdeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 16 16 25] forall self : Cdsat_Trail_Assignment_Type.t_assignment . forall other : Cdsat_Trail_Assignment_Type.t_assignment . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl19
  use prelude.Borrow
  use seq.Seq
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex)
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = Seq.seq (Cdsat_Trail_TrailIndex_Type.t_trailindex),
    predicate Inv0.inv = Inv2.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global)
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Alloc_Vec_Vec_Type.t_vec (Cdsat_Trail_TrailIndex_Type.t_trailindex) (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface as DeepModel2 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type a = Alloc_Alloc_Global_Type.t_global,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel0.deep_model = DeepModel3.deep_model,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use Cdsat_Trail_ReasonDeepModel_Type as Cdsat_Trail_ReasonDeepModel_Type
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone Cdsat_Trail_Impl22_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    predicate Inv0.inv = Inv1.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    predicate Inv1.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_ReasonDeepModel_Type.t_reasondeepmodel,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 16 48 25] forall self : Cdsat_Trail_Reason_Type.t_reason . forall other : Cdsat_Trail_Reason_Type.t_reason . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl24
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    type DeepModelTy0.deepModelTy = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 16 66 25] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Term_Impl13
  use prelude.Borrow
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone Cdsat_Term_Impl16_DeepModel as DeepModel1
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Sort_Type.t_sort,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 14 23 14 32] forall self : Cdsat_Term_Sort_Type.t_sort . forall other : Cdsat_Term_Sort_Type.t_sort . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Term_Impl21
  use prelude.Borrow
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  use Cdsat_Theory_Sort_Type as Cdsat_Theory_Sort_Type
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Interface as DeepModel5
  clone Cdsat_Term_Impl6_DeepModel as DeepModel4 with
    function DeepModel0.deep_model = DeepModel5.deep_model
  use Cdsat_Theory_Var_Type as Cdsat_Theory_Var_Type
  clone Cdsat_Term_Impl16_DeepModel as DeepModel3
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel2
  use Cdsat_Theory_Term_Type as Cdsat_Theory_Term_Type
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone Cdsat_Term_Impl5_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model,
    function DeepModel1.deep_model = DeepModel3.deep_model,
    function DeepModel2.deep_model = DeepModel4.deep_model,
    function DeepModel3.deep_model = DeepModel5.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Term_Type.t_term,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Term_Type.t_term,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 33 23 33 32] forall self : Cdsat_Term_Term_Type.t_term . forall other : Cdsat_Term_Term_Type.t_term . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Term_Impl27
  use prelude.Borrow
  use NumBigint_Bigint_BigInt_Type as NumBigint_Bigint_BigInt_Type
  use NumRational_Ratio_Type as NumRational_Ratio_Type
  clone CreusotContracts_NumRational_Impl0_DeepModel_Interface as DeepModel2
  use Cdsat_Theory_Value_Type as Cdsat_Theory_Value_Type
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone Cdsat_Term_Impl6_DeepModel as DeepModel1 with
    function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Model_Impl4_DeepModel as DeepModel0 with
    type t = Cdsat_Term_Value_Type.t_value,
    type DeepModelTy0.deepModelTy = Cdsat_Theory_Value_Type.t_value,
    function DeepModel0.deep_model = DeepModel1.deep_model
  goal eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 218 23 218 32] forall self : Cdsat_Term_Value_Type.t_value . forall other : Cdsat_Term_Value_Type.t_value . Inv0.inv other /\ Inv0.inv self -> (forall result : bool . result = (DeepModel0.deep_model self = DeepModel0.deep_model other) -> result = (DeepModel0.deep_model self = DeepModel0.deep_model other))
end
module Cdsat_Concrete_Impl4
  
end
module Cdsat_Concrete_Impl9
  
end
module Cdsat_Trail_Impl15
  
end
module Cdsat_Trail_Impl20
  
end
module Cdsat_Trail_Impl25
  
end
module Cdsat_Term_Impl14
  
end
module Cdsat_Term_Impl22
  
end
module Cdsat_Term_Impl28
  
end
module Cdsat_Concrete_Impl5
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 21 20 21 22] true
end
module Cdsat_Concrete_Impl10
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 27 345 29] true
end
module Cdsat_Trail_Impl16
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 27 16 29] true
end
module Cdsat_Trail_Impl21
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 27 48 29] true
end
module Cdsat_Trail_Impl26
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 27 66 29] true
end
module Cdsat_Term_Impl15
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 14 34 14 36] true
end
module Cdsat_Term_Impl23
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 33 34 33 36] true
end
module Cdsat_Term_Impl29
  goal assert_receiver_is_total_eq_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 218 34 218 36] true
end
module Cdsat_Concrete_Impl6
  
end
module Cdsat_Concrete_Impl11
  
end
module Cdsat_Trail_Impl17
  
end
module Cdsat_Trail_Impl22
  
end
module Cdsat_Trail_Impl7
  
end
module Cdsat_Term_Impl16
  
end
module Cdsat_Term_Impl5
  
end
module Cdsat_Term_Impl6
  
end
module Cdsat_Concrete_Impl7
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 345 9 345 14] true
end
module Cdsat_Concrete_Impl12
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/concrete.rs" 351 9 351 14] true
end
module Cdsat_Trail_Impl23
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 9 66 14] true
end
module Cdsat_Term_Impl12
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 14 16 14 21] true
end
module Cdsat_Term_Impl20
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 33 16 33 21] true
end
module Cdsat_Term_Impl26
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 218 16 218 21] true
end
module Cdsat_Concrete_Impl1
  
end
module Cdsat_Trail_Impl1
  
end
module Cdsat_Trail_Impl2
  
end
module Cdsat_Trail_Impl6
  
end
module Cdsat_Term_Impl0
  
end
module Cdsat_Term_Impl4
  
end
module Cdsat_Term_Impl7
  
end
module Cdsat_Trail_Impl13
  use prelude.Borrow
  use Cdsat_Trail_Assignment_Type as Cdsat_Trail_Assignment_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Assignment_Type.t_assignment,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 16 9 16 14] forall self : Cdsat_Trail_Assignment_Type.t_assignment . Inv0.inv self -> (forall result : Cdsat_Trail_Assignment_Type.t_assignment . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Trail_Impl18
  use prelude.Borrow
  use Cdsat_Trail_Reason_Type as Cdsat_Trail_Reason_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_Reason_Type.t_reason
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_Reason_Type.t_reason,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 48 9 48 14] forall self : Cdsat_Trail_Reason_Type.t_reason . Inv0.inv self -> (forall result : Cdsat_Trail_Reason_Type.t_reason . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Trail_Impl27
  use prelude.Borrow
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 66 31 66 36] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv self -> (forall result : Cdsat_Trail_TrailIndex_Type.t_trailindex . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Term_Impl11
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 14 9 14 14] forall self : Cdsat_Term_Sort_Type.t_sort . Inv0.inv self -> (forall result : Cdsat_Term_Sort_Type.t_sort . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Term_Impl19
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 33 9 33 14] forall self : Cdsat_Term_Term_Type.t_term . Inv0.inv self -> (forall result : Cdsat_Term_Term_Type.t_term . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Term_Impl25
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal clone'_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 218 9 218 14] forall self : Cdsat_Term_Value_Type.t_value . Inv0.inv self -> (forall result : Cdsat_Term_Value_Type.t_value . result = self -> Inv1.inv result /\ result = self)
end
module Cdsat_Trail_Impl0
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 30 4 30 74] true
end
module Cdsat_Term_Impl2
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 138 4 138 74] true
end
module Cdsat_Term_Impl3
  goal fmt_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 157 4 157 74] true
end
module Cdsat_Trail_Impl28
  
end
module Cdsat_Term_Impl17
  
end
module Cdsat_Trail_Impl3
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel0
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  use Core_Option_Option_Type as Core_Option_Option_Type
  goal partial_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 71 4 71 59] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv other /\ Inv0.inv self -> (forall result : Core_Option_Option_Type.t_option (Core_Cmp_Ordering_Type.t_ordering) . result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log self other) -> result = Core_Option_Option_Type.C_Some (CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other)))
end
module Cdsat_Trail_Impl4
  use prelude.Borrow
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl7_DeepModel as DeepModel0
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  goal cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 78 4 78 43] forall self : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall other : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv other /\ Inv0.inv self -> (forall result : Core_Cmp_Ordering_Type.t_ordering . result = CmpLog0.cmp_log self other -> result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other))
end
module Cdsat_Trail_Impl5
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl9_CmpLog as CmpLog1
  use Cdsat_Trail_TrailIndex_Type as Cdsat_Trail_TrailIndex_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone Cdsat_Trail_Impl5_CmpLog as CmpLog0 with
    function CmpLog0.cmp_log = CmpLog1.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with
    type self = Cdsat_Trail_TrailIndex_Type.t_trailindex,
    function CmpLog0.cmp_log = CmpLog0.cmp_log
  goal cmp_lt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 108 4 108 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less))
  goal cmp_ge_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 113 4 113 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less) -> GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less))
  goal cmp_gt_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 118 4 118 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater))
  goal cmp_le_log_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 103 4 103 35] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater) -> LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater))
  goal antisym2_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 142 4 142 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x /\ CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
  goal trans_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 130 4 130 52] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall z : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall o : Core_Cmp_Ordering_Type.t_ordering . Inv0.inv z /\ Inv0.inv y /\ Inv0.inv x /\ CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o /\ CmpLog0.cmp_log x y = o /\ (forall result : () . CmpLog0.cmp_log x z = o -> CmpLog0.cmp_log x z = o)
  goal eq_cmp_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 147 4 147 31] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x -> (forall result : () . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal) -> (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal))
  goal antisym1_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 136 4 136 33] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . forall y : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv y /\ Inv0.inv x /\ CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less /\ (forall result : () . CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
  goal refl_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 123 4 123 20] forall x : Cdsat_Trail_TrailIndex_Type.t_trailindex . Inv0.inv x -> (forall result : () . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal -> CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal)
end
module Cdsat_Trail_Impl29
  
end
module Cdsat_Trail_Impl11
  goal index_refn : [#"/Users/xavier/Code/cdsat/src/trail.rs" 693 4 693 55] true
end
module Cdsat_Theory_Impl3
  
end
module Cdsat_Term_Impl18
  type __h
  use prelude.Borrow
  use Cdsat_Term_Sort_Type as Cdsat_Term_Sort_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Sort_Type.t_sort
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Sort_Type.t_sort,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal hash_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 14 55 14 59] forall self : Cdsat_Term_Sort_Type.t_sort . forall state : borrowed __h . Inv0.inv state /\ Inv1.inv self -> Inv0.inv state
end
module Cdsat_Term_Impl24
  type __h
  use prelude.Borrow
  use Cdsat_Term_Term_Type as Cdsat_Term_Term_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Term_Type.t_term
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Term_Type.t_term,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal hash_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 33 38 33 42] forall self : Cdsat_Term_Term_Type.t_term . forall state : borrowed __h . Inv0.inv state /\ Inv1.inv self -> Inv0.inv state
end
module Cdsat_Term_Impl30
  type __h
  use prelude.Borrow
  use Cdsat_Term_Value_Type as Cdsat_Term_Value_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Cdsat_Term_Value_Type.t_value
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Cdsat_Term_Value_Type.t_value,
    predicate Inv0.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed __h
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = borrowed __h,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  goal hash_refn : [#"/Users/xavier/Code/cdsat/src/term.rs" 218 38 218 42] forall self : Cdsat_Term_Value_Type.t_value . forall state : borrowed __h . Inv0.inv state /\ Inv1.inv self -> Inv0.inv state
end
